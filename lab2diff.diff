diff --git a/_cat b/_cat
index a5857fe..6f795e3 100755
Binary files a/_cat and b/_cat differ
diff --git a/_echo b/_echo
index e94b620..2cd67ad 100755
Binary files a/_echo and b/_echo differ
diff --git a/_forktest b/_forktest
index 7cfc02e..14f20e7 100755
Binary files a/_forktest and b/_forktest differ
diff --git a/_grep b/_grep
index 8c3b371..637c79b 100755
Binary files a/_grep and b/_grep differ
diff --git a/_init b/_init
index fd3720f..a38aaf9 100755
Binary files a/_init and b/_init differ
diff --git a/_kill b/_kill
index 1cc0c97..ed43f75 100755
Binary files a/_kill and b/_kill differ
diff --git a/_ln b/_ln
index 7206cd1..0225a48 100755
Binary files a/_ln and b/_ln differ
diff --git a/_ls b/_ls
index d16c1c4..3591e26 100755
Binary files a/_ls and b/_ls differ
diff --git a/_mkdir b/_mkdir
index 5f4d673..ef2deb8 100755
Binary files a/_mkdir and b/_mkdir differ
diff --git a/_rm b/_rm
index 736b4b1..7744233 100755
Binary files a/_rm and b/_rm differ
diff --git a/_sh b/_sh
index a71d372..ac064c3 100755
Binary files a/_sh and b/_sh differ
diff --git a/_stressfs b/_stressfs
index 6e36da0..c1e0d42 100755
Binary files a/_stressfs and b/_stressfs differ
diff --git a/_usertests b/_usertests
index 29804bd..bbbce1a 100755
Binary files a/_usertests and b/_usertests differ
diff --git a/_wc b/_wc
index 2d08e46..f3d1000 100755
Binary files a/_wc and b/_wc differ
diff --git a/_zombie b/_zombie
index 6ad28e3..23a6d3b 100755
Binary files a/_zombie and b/_zombie differ
diff --git a/bio.o b/bio.o
index 5d9f7f5..77840e9 100644
Binary files a/bio.o and b/bio.o differ
diff --git a/cat.asm b/cat.asm
index e9118af..bf88b8f 100644
--- a/cat.asm
+++ b/cat.asm
@@ -65,11 +65,11 @@ main(int argc, char *argv[])
   5a:	e8 03 03 00 00       	call   362 <exit>
       printf(1, "cat: cannot open %s\n", argv[i]);
   5f:	8b 03                	mov    (%ebx),%eax
-  61:	c7 44 24 04 39 08 00 	movl   $0x839,0x4(%esp)
+  61:	c7 44 24 04 49 08 00 	movl   $0x849,0x4(%esp)
   68:	00 
   69:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
   70:	89 44 24 08          	mov    %eax,0x8(%esp)
-  74:	e8 37 04 00 00       	call   4b0 <printf>
+  74:	e8 47 04 00 00       	call   4c0 <printf>
       exit(0);
   79:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
   80:	e8 dd 02 00 00       	call   362 <exit>
@@ -95,7 +95,7 @@ main(int argc, char *argv[])
   ad:	8d 76 00             	lea    0x0(%esi),%esi
     if (write(1, buf, n) != n) {
   b0:	89 5c 24 08          	mov    %ebx,0x8(%esp)
-  b4:	c7 44 24 04 20 0b 00 	movl   $0xb20,0x4(%esp)
+  b4:	c7 44 24 04 40 0b 00 	movl   $0xb40,0x4(%esp)
   bb:	00 
   bc:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
   c3:	e8 ba 02 00 00       	call   382 <write>
@@ -104,7 +104,7 @@ main(int argc, char *argv[])
   while((n = read(fd, buf, sizeof(buf))) > 0) {
   cc:	c7 44 24 08 00 02 00 	movl   $0x200,0x8(%esp)
   d3:	00 
-  d4:	c7 44 24 04 20 0b 00 	movl   $0xb20,0x4(%esp)
+  d4:	c7 44 24 04 40 0b 00 	movl   $0xb40,0x4(%esp)
   db:	00 
   dc:	89 34 24             	mov    %esi,(%esp)
   df:	e8 96 02 00 00       	call   37a <read>
@@ -120,18 +120,18 @@ main(int argc, char *argv[])
   f2:	5d                   	pop    %ebp
   f3:	c3                   	ret    
       printf(1, "cat: write error\n");
-  f4:	c7 44 24 04 16 08 00 	movl   $0x816,0x4(%esp)
+  f4:	c7 44 24 04 26 08 00 	movl   $0x826,0x4(%esp)
   fb:	00 
   fc:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
- 103:	e8 a8 03 00 00       	call   4b0 <printf>
+ 103:	e8 b8 03 00 00       	call   4c0 <printf>
       exit(0);
  108:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  10f:	e8 4e 02 00 00       	call   362 <exit>
     printf(1, "cat: read error\n");
- 114:	c7 44 24 04 28 08 00 	movl   $0x828,0x4(%esp)
+ 114:	c7 44 24 04 38 08 00 	movl   $0x838,0x4(%esp)
  11b:	00 
  11c:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
- 123:	e8 88 03 00 00       	call   4b0 <printf>
+ 123:	e8 98 03 00 00       	call   4c0 <printf>
     exit(0);
  128:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  12f:	e8 2e 02 00 00       	call   362 <exit>
@@ -656,580 +656,592 @@ SYSCALL(uptime)
  401:	c3                   	ret    
 
 00000402 <waitpid>:
+SYSCALL(waitpid)
  402:	b8 16 00 00 00       	mov    $0x16,%eax
  407:	cd 40                	int    $0x40
  409:	c3                   	ret    
- 40a:	66 90                	xchg   %ax,%ax
- 40c:	66 90                	xchg   %ax,%ax
- 40e:	66 90                	xchg   %ax,%ax
 
-00000410 <printint>:
+0000040a <setPrior>:
+SYSCALL(setPrior)
+ 40a:	b8 17 00 00 00       	mov    $0x17,%eax
+ 40f:	cd 40                	int    $0x40
+ 411:	c3                   	ret    
+
+00000412 <getPrior>:
+ 412:	b8 18 00 00 00       	mov    $0x18,%eax
+ 417:	cd 40                	int    $0x40
+ 419:	c3                   	ret    
+ 41a:	66 90                	xchg   %ax,%ax
+ 41c:	66 90                	xchg   %ax,%ax
+ 41e:	66 90                	xchg   %ax,%ax
+
+00000420 <printint>:
   write(fd, &c, 1);
 }
 
 static void
 printint(int fd, int xx, int base, int sgn)
 {
- 410:	55                   	push   %ebp
- 411:	89 e5                	mov    %esp,%ebp
- 413:	57                   	push   %edi
- 414:	56                   	push   %esi
- 415:	89 c6                	mov    %eax,%esi
- 417:	53                   	push   %ebx
- 418:	83 ec 4c             	sub    $0x4c,%esp
+ 420:	55                   	push   %ebp
+ 421:	89 e5                	mov    %esp,%ebp
+ 423:	57                   	push   %edi
+ 424:	56                   	push   %esi
+ 425:	89 c6                	mov    %eax,%esi
+ 427:	53                   	push   %ebx
+ 428:	83 ec 4c             	sub    $0x4c,%esp
   char buf[16];
   int i, neg;
   uint x;
 
   neg = 0;
   if(sgn && xx < 0){
- 41b:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 41e:	85 db                	test   %ebx,%ebx
- 420:	74 09                	je     42b <printint+0x1b>
- 422:	89 d0                	mov    %edx,%eax
- 424:	c1 e8 1f             	shr    $0x1f,%eax
- 427:	84 c0                	test   %al,%al
- 429:	75 75                	jne    4a0 <printint+0x90>
+ 42b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 42e:	85 db                	test   %ebx,%ebx
+ 430:	74 09                	je     43b <printint+0x1b>
+ 432:	89 d0                	mov    %edx,%eax
+ 434:	c1 e8 1f             	shr    $0x1f,%eax
+ 437:	84 c0                	test   %al,%al
+ 439:	75 75                	jne    4b0 <printint+0x90>
     neg = 1;
     x = -xx;
   } else {
     x = xx;
- 42b:	89 d0                	mov    %edx,%eax
+ 43b:	89 d0                	mov    %edx,%eax
   neg = 0;
- 42d:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
- 434:	89 75 c0             	mov    %esi,-0x40(%ebp)
+ 43d:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
+ 444:	89 75 c0             	mov    %esi,-0x40(%ebp)
   }
 
   i = 0;
- 437:	31 ff                	xor    %edi,%edi
- 439:	89 ce                	mov    %ecx,%esi
- 43b:	8d 5d d7             	lea    -0x29(%ebp),%ebx
- 43e:	eb 02                	jmp    442 <printint+0x32>
+ 447:	31 ff                	xor    %edi,%edi
+ 449:	89 ce                	mov    %ecx,%esi
+ 44b:	8d 5d d7             	lea    -0x29(%ebp),%ebx
+ 44e:	eb 02                	jmp    452 <printint+0x32>
   do{
     buf[i++] = digits[x % base];
- 440:	89 cf                	mov    %ecx,%edi
- 442:	31 d2                	xor    %edx,%edx
- 444:	f7 f6                	div    %esi
- 446:	8d 4f 01             	lea    0x1(%edi),%ecx
- 449:	0f b6 92 55 08 00 00 	movzbl 0x855(%edx),%edx
+ 450:	89 cf                	mov    %ecx,%edi
+ 452:	31 d2                	xor    %edx,%edx
+ 454:	f7 f6                	div    %esi
+ 456:	8d 4f 01             	lea    0x1(%edi),%ecx
+ 459:	0f b6 92 65 08 00 00 	movzbl 0x865(%edx),%edx
   }while((x /= base) != 0);
- 450:	85 c0                	test   %eax,%eax
+ 460:	85 c0                	test   %eax,%eax
     buf[i++] = digits[x % base];
- 452:	88 14 0b             	mov    %dl,(%ebx,%ecx,1)
+ 462:	88 14 0b             	mov    %dl,(%ebx,%ecx,1)
   }while((x /= base) != 0);
- 455:	75 e9                	jne    440 <printint+0x30>
+ 465:	75 e9                	jne    450 <printint+0x30>
   if(neg)
- 457:	8b 55 c4             	mov    -0x3c(%ebp),%edx
+ 467:	8b 55 c4             	mov    -0x3c(%ebp),%edx
     buf[i++] = digits[x % base];
- 45a:	89 c8                	mov    %ecx,%eax
- 45c:	8b 75 c0             	mov    -0x40(%ebp),%esi
+ 46a:	89 c8                	mov    %ecx,%eax
+ 46c:	8b 75 c0             	mov    -0x40(%ebp),%esi
   if(neg)
- 45f:	85 d2                	test   %edx,%edx
- 461:	74 08                	je     46b <printint+0x5b>
+ 46f:	85 d2                	test   %edx,%edx
+ 471:	74 08                	je     47b <printint+0x5b>
     buf[i++] = '-';
- 463:	8d 4f 02             	lea    0x2(%edi),%ecx
- 466:	c6 44 05 d8 2d       	movb   $0x2d,-0x28(%ebp,%eax,1)
+ 473:	8d 4f 02             	lea    0x2(%edi),%ecx
+ 476:	c6 44 05 d8 2d       	movb   $0x2d,-0x28(%ebp,%eax,1)
 
   while(--i >= 0)
- 46b:	8d 79 ff             	lea    -0x1(%ecx),%edi
- 46e:	66 90                	xchg   %ax,%ax
- 470:	0f b6 44 3d d8       	movzbl -0x28(%ebp,%edi,1),%eax
- 475:	83 ef 01             	sub    $0x1,%edi
+ 47b:	8d 79 ff             	lea    -0x1(%ecx),%edi
+ 47e:	66 90                	xchg   %ax,%ax
+ 480:	0f b6 44 3d d8       	movzbl -0x28(%ebp,%edi,1),%eax
+ 485:	83 ef 01             	sub    $0x1,%edi
   write(fd, &c, 1);
- 478:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
- 47f:	00 
- 480:	89 5c 24 04          	mov    %ebx,0x4(%esp)
- 484:	89 34 24             	mov    %esi,(%esp)
- 487:	88 45 d7             	mov    %al,-0x29(%ebp)
- 48a:	e8 f3 fe ff ff       	call   382 <write>
+ 488:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+ 48f:	00 
+ 490:	89 5c 24 04          	mov    %ebx,0x4(%esp)
+ 494:	89 34 24             	mov    %esi,(%esp)
+ 497:	88 45 d7             	mov    %al,-0x29(%ebp)
+ 49a:	e8 e3 fe ff ff       	call   382 <write>
   while(--i >= 0)
- 48f:	83 ff ff             	cmp    $0xffffffff,%edi
- 492:	75 dc                	jne    470 <printint+0x60>
+ 49f:	83 ff ff             	cmp    $0xffffffff,%edi
+ 4a2:	75 dc                	jne    480 <printint+0x60>
     putc(fd, buf[i]);
 }
- 494:	83 c4 4c             	add    $0x4c,%esp
- 497:	5b                   	pop    %ebx
- 498:	5e                   	pop    %esi
- 499:	5f                   	pop    %edi
- 49a:	5d                   	pop    %ebp
- 49b:	c3                   	ret    
- 49c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 4a4:	83 c4 4c             	add    $0x4c,%esp
+ 4a7:	5b                   	pop    %ebx
+ 4a8:	5e                   	pop    %esi
+ 4a9:	5f                   	pop    %edi
+ 4aa:	5d                   	pop    %ebp
+ 4ab:	c3                   	ret    
+ 4ac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     x = -xx;
- 4a0:	89 d0                	mov    %edx,%eax
- 4a2:	f7 d8                	neg    %eax
+ 4b0:	89 d0                	mov    %edx,%eax
+ 4b2:	f7 d8                	neg    %eax
     neg = 1;
- 4a4:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
- 4ab:	eb 87                	jmp    434 <printint+0x24>
- 4ad:	8d 76 00             	lea    0x0(%esi),%esi
+ 4b4:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
+ 4bb:	eb 87                	jmp    444 <printint+0x24>
+ 4bd:	8d 76 00             	lea    0x0(%esi),%esi
 
-000004b0 <printf>:
+000004c0 <printf>:
 
 // Print to the given fd. Only understands %d, %x, %p, %s.
 void
 printf(int fd, const char *fmt, ...)
 {
- 4b0:	55                   	push   %ebp
- 4b1:	89 e5                	mov    %esp,%ebp
- 4b3:	57                   	push   %edi
+ 4c0:	55                   	push   %ebp
+ 4c1:	89 e5                	mov    %esp,%ebp
+ 4c3:	57                   	push   %edi
   char *s;
   int c, i, state;
   uint *ap;
 
   state = 0;
- 4b4:	31 ff                	xor    %edi,%edi
+ 4c4:	31 ff                	xor    %edi,%edi
 {
- 4b6:	56                   	push   %esi
- 4b7:	53                   	push   %ebx
- 4b8:	83 ec 3c             	sub    $0x3c,%esp
+ 4c6:	56                   	push   %esi
+ 4c7:	53                   	push   %ebx
+ 4c8:	83 ec 3c             	sub    $0x3c,%esp
   ap = (uint*)(void*)&fmt + 1;
   for(i = 0; fmt[i]; i++){
- 4bb:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+ 4cb:	8b 5d 0c             	mov    0xc(%ebp),%ebx
   ap = (uint*)(void*)&fmt + 1;
- 4be:	8d 45 10             	lea    0x10(%ebp),%eax
+ 4ce:	8d 45 10             	lea    0x10(%ebp),%eax
 {
- 4c1:	8b 75 08             	mov    0x8(%ebp),%esi
+ 4d1:	8b 75 08             	mov    0x8(%ebp),%esi
   ap = (uint*)(void*)&fmt + 1;
- 4c4:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ 4d4:	89 45 d4             	mov    %eax,-0x2c(%ebp)
   for(i = 0; fmt[i]; i++){
- 4c7:	0f b6 13             	movzbl (%ebx),%edx
- 4ca:	83 c3 01             	add    $0x1,%ebx
- 4cd:	84 d2                	test   %dl,%dl
- 4cf:	75 39                	jne    50a <printf+0x5a>
- 4d1:	e9 c2 00 00 00       	jmp    598 <printf+0xe8>
- 4d6:	66 90                	xchg   %ax,%ax
+ 4d7:	0f b6 13             	movzbl (%ebx),%edx
+ 4da:	83 c3 01             	add    $0x1,%ebx
+ 4dd:	84 d2                	test   %dl,%dl
+ 4df:	75 39                	jne    51a <printf+0x5a>
+ 4e1:	e9 c2 00 00 00       	jmp    5a8 <printf+0xe8>
+ 4e6:	66 90                	xchg   %ax,%ax
     c = fmt[i] & 0xff;
     if(state == 0){
       if(c == '%'){
- 4d8:	83 fa 25             	cmp    $0x25,%edx
- 4db:	0f 84 bf 00 00 00    	je     5a0 <printf+0xf0>
+ 4e8:	83 fa 25             	cmp    $0x25,%edx
+ 4eb:	0f 84 bf 00 00 00    	je     5b0 <printf+0xf0>
   write(fd, &c, 1);
- 4e1:	8d 45 e2             	lea    -0x1e(%ebp),%eax
- 4e4:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
- 4eb:	00 
- 4ec:	89 44 24 04          	mov    %eax,0x4(%esp)
- 4f0:	89 34 24             	mov    %esi,(%esp)
+ 4f1:	8d 45 e2             	lea    -0x1e(%ebp),%eax
+ 4f4:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+ 4fb:	00 
+ 4fc:	89 44 24 04          	mov    %eax,0x4(%esp)
+ 500:	89 34 24             	mov    %esi,(%esp)
         state = '%';
       } else {
         putc(fd, c);
- 4f3:	88 55 e2             	mov    %dl,-0x1e(%ebp)
+ 503:	88 55 e2             	mov    %dl,-0x1e(%ebp)
   write(fd, &c, 1);
- 4f6:	e8 87 fe ff ff       	call   382 <write>
- 4fb:	83 c3 01             	add    $0x1,%ebx
+ 506:	e8 77 fe ff ff       	call   382 <write>
+ 50b:	83 c3 01             	add    $0x1,%ebx
   for(i = 0; fmt[i]; i++){
- 4fe:	0f b6 53 ff          	movzbl -0x1(%ebx),%edx
- 502:	84 d2                	test   %dl,%dl
- 504:	0f 84 8e 00 00 00    	je     598 <printf+0xe8>
+ 50e:	0f b6 53 ff          	movzbl -0x1(%ebx),%edx
+ 512:	84 d2                	test   %dl,%dl
+ 514:	0f 84 8e 00 00 00    	je     5a8 <printf+0xe8>
     if(state == 0){
- 50a:	85 ff                	test   %edi,%edi
+ 51a:	85 ff                	test   %edi,%edi
     c = fmt[i] & 0xff;
- 50c:	0f be c2             	movsbl %dl,%eax
+ 51c:	0f be c2             	movsbl %dl,%eax
     if(state == 0){
- 50f:	74 c7                	je     4d8 <printf+0x28>
+ 51f:	74 c7                	je     4e8 <printf+0x28>
       }
     } else if(state == '%'){
- 511:	83 ff 25             	cmp    $0x25,%edi
- 514:	75 e5                	jne    4fb <printf+0x4b>
+ 521:	83 ff 25             	cmp    $0x25,%edi
+ 524:	75 e5                	jne    50b <printf+0x4b>
       if(c == 'd'){
- 516:	83 fa 64             	cmp    $0x64,%edx
- 519:	0f 84 31 01 00 00    	je     650 <printf+0x1a0>
+ 526:	83 fa 64             	cmp    $0x64,%edx
+ 529:	0f 84 31 01 00 00    	je     660 <printf+0x1a0>
         printint(fd, *ap, 10, 1);
         ap++;
       } else if(c == 'x' || c == 'p'){
- 51f:	25 f7 00 00 00       	and    $0xf7,%eax
- 524:	83 f8 70             	cmp    $0x70,%eax
- 527:	0f 84 83 00 00 00    	je     5b0 <printf+0x100>
+ 52f:	25 f7 00 00 00       	and    $0xf7,%eax
+ 534:	83 f8 70             	cmp    $0x70,%eax
+ 537:	0f 84 83 00 00 00    	je     5c0 <printf+0x100>
         printint(fd, *ap, 16, 0);
         ap++;
       } else if(c == 's'){
- 52d:	83 fa 73             	cmp    $0x73,%edx
- 530:	0f 84 a2 00 00 00    	je     5d8 <printf+0x128>
+ 53d:	83 fa 73             	cmp    $0x73,%edx
+ 540:	0f 84 a2 00 00 00    	je     5e8 <printf+0x128>
           s = "(null)";
         while(*s != 0){
           putc(fd, *s);
           s++;
         }
       } else if(c == 'c'){
- 536:	83 fa 63             	cmp    $0x63,%edx
- 539:	0f 84 35 01 00 00    	je     674 <printf+0x1c4>
+ 546:	83 fa 63             	cmp    $0x63,%edx
+ 549:	0f 84 35 01 00 00    	je     684 <printf+0x1c4>
         putc(fd, *ap);
         ap++;
       } else if(c == '%'){
- 53f:	83 fa 25             	cmp    $0x25,%edx
- 542:	0f 84 e0 00 00 00    	je     628 <printf+0x178>
+ 54f:	83 fa 25             	cmp    $0x25,%edx
+ 552:	0f 84 e0 00 00 00    	je     638 <printf+0x178>
   write(fd, &c, 1);
- 548:	8d 45 e6             	lea    -0x1a(%ebp),%eax
- 54b:	83 c3 01             	add    $0x1,%ebx
- 54e:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
- 555:	00 
+ 558:	8d 45 e6             	lea    -0x1a(%ebp),%eax
+ 55b:	83 c3 01             	add    $0x1,%ebx
+ 55e:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+ 565:	00 
       } else {
         // Unknown % sequence.  Print it to draw attention.
         putc(fd, '%');
         putc(fd, c);
       }
       state = 0;
- 556:	31 ff                	xor    %edi,%edi
+ 566:	31 ff                	xor    %edi,%edi
   write(fd, &c, 1);
- 558:	89 44 24 04          	mov    %eax,0x4(%esp)
- 55c:	89 34 24             	mov    %esi,(%esp)
- 55f:	89 55 d0             	mov    %edx,-0x30(%ebp)
- 562:	c6 45 e6 25          	movb   $0x25,-0x1a(%ebp)
- 566:	e8 17 fe ff ff       	call   382 <write>
+ 568:	89 44 24 04          	mov    %eax,0x4(%esp)
+ 56c:	89 34 24             	mov    %esi,(%esp)
+ 56f:	89 55 d0             	mov    %edx,-0x30(%ebp)
+ 572:	c6 45 e6 25          	movb   $0x25,-0x1a(%ebp)
+ 576:	e8 07 fe ff ff       	call   382 <write>
         putc(fd, c);
- 56b:	8b 55 d0             	mov    -0x30(%ebp),%edx
+ 57b:	8b 55 d0             	mov    -0x30(%ebp),%edx
   write(fd, &c, 1);
- 56e:	8d 45 e7             	lea    -0x19(%ebp),%eax
- 571:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
- 578:	00 
- 579:	89 44 24 04          	mov    %eax,0x4(%esp)
- 57d:	89 34 24             	mov    %esi,(%esp)
+ 57e:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 581:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+ 588:	00 
+ 589:	89 44 24 04          	mov    %eax,0x4(%esp)
+ 58d:	89 34 24             	mov    %esi,(%esp)
         putc(fd, c);
- 580:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 590:	88 55 e7             	mov    %dl,-0x19(%ebp)
   write(fd, &c, 1);
- 583:	e8 fa fd ff ff       	call   382 <write>
+ 593:	e8 ea fd ff ff       	call   382 <write>
   for(i = 0; fmt[i]; i++){
- 588:	0f b6 53 ff          	movzbl -0x1(%ebx),%edx
- 58c:	84 d2                	test   %dl,%dl
- 58e:	0f 85 76 ff ff ff    	jne    50a <printf+0x5a>
- 594:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 598:	0f b6 53 ff          	movzbl -0x1(%ebx),%edx
+ 59c:	84 d2                	test   %dl,%dl
+ 59e:	0f 85 76 ff ff ff    	jne    51a <printf+0x5a>
+ 5a4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     }
   }
 }
- 598:	83 c4 3c             	add    $0x3c,%esp
- 59b:	5b                   	pop    %ebx
- 59c:	5e                   	pop    %esi
- 59d:	5f                   	pop    %edi
- 59e:	5d                   	pop    %ebp
- 59f:	c3                   	ret    
+ 5a8:	83 c4 3c             	add    $0x3c,%esp
+ 5ab:	5b                   	pop    %ebx
+ 5ac:	5e                   	pop    %esi
+ 5ad:	5f                   	pop    %edi
+ 5ae:	5d                   	pop    %ebp
+ 5af:	c3                   	ret    
         state = '%';
- 5a0:	bf 25 00 00 00       	mov    $0x25,%edi
- 5a5:	e9 51 ff ff ff       	jmp    4fb <printf+0x4b>
- 5aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 5b0:	bf 25 00 00 00       	mov    $0x25,%edi
+ 5b5:	e9 51 ff ff ff       	jmp    50b <printf+0x4b>
+ 5ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         printint(fd, *ap, 16, 0);
- 5b0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
- 5b3:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 5c0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+ 5c3:	b9 10 00 00 00       	mov    $0x10,%ecx
       state = 0;
- 5b8:	31 ff                	xor    %edi,%edi
+ 5c8:	31 ff                	xor    %edi,%edi
         printint(fd, *ap, 16, 0);
- 5ba:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
- 5c1:	8b 10                	mov    (%eax),%edx
- 5c3:	89 f0                	mov    %esi,%eax
- 5c5:	e8 46 fe ff ff       	call   410 <printint>
+ 5ca:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+ 5d1:	8b 10                	mov    (%eax),%edx
+ 5d3:	89 f0                	mov    %esi,%eax
+ 5d5:	e8 46 fe ff ff       	call   420 <printint>
         ap++;
- 5ca:	83 45 d4 04          	addl   $0x4,-0x2c(%ebp)
- 5ce:	e9 28 ff ff ff       	jmp    4fb <printf+0x4b>
- 5d3:	90                   	nop
- 5d4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 5da:	83 45 d4 04          	addl   $0x4,-0x2c(%ebp)
+ 5de:	e9 28 ff ff ff       	jmp    50b <printf+0x4b>
+ 5e3:	90                   	nop
+ 5e4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
         s = (char*)*ap;
- 5d8:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+ 5e8:	8b 45 d4             	mov    -0x2c(%ebp),%eax
         ap++;
- 5db:	83 45 d4 04          	addl   $0x4,-0x2c(%ebp)
+ 5eb:	83 45 d4 04          	addl   $0x4,-0x2c(%ebp)
         s = (char*)*ap;
- 5df:	8b 38                	mov    (%eax),%edi
+ 5ef:	8b 38                	mov    (%eax),%edi
           s = "(null)";
- 5e1:	b8 4e 08 00 00       	mov    $0x84e,%eax
- 5e6:	85 ff                	test   %edi,%edi
- 5e8:	0f 44 f8             	cmove  %eax,%edi
+ 5f1:	b8 5e 08 00 00       	mov    $0x85e,%eax
+ 5f6:	85 ff                	test   %edi,%edi
+ 5f8:	0f 44 f8             	cmove  %eax,%edi
         while(*s != 0){
- 5eb:	0f b6 07             	movzbl (%edi),%eax
- 5ee:	84 c0                	test   %al,%al
- 5f0:	74 2a                	je     61c <printf+0x16c>
- 5f2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
- 5f8:	88 45 e3             	mov    %al,-0x1d(%ebp)
+ 5fb:	0f b6 07             	movzbl (%edi),%eax
+ 5fe:	84 c0                	test   %al,%al
+ 600:	74 2a                	je     62c <printf+0x16c>
+ 602:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 608:	88 45 e3             	mov    %al,-0x1d(%ebp)
   write(fd, &c, 1);
- 5fb:	8d 45 e3             	lea    -0x1d(%ebp),%eax
+ 60b:	8d 45 e3             	lea    -0x1d(%ebp),%eax
           s++;
- 5fe:	83 c7 01             	add    $0x1,%edi
+ 60e:	83 c7 01             	add    $0x1,%edi
   write(fd, &c, 1);
- 601:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
- 608:	00 
- 609:	89 44 24 04          	mov    %eax,0x4(%esp)
- 60d:	89 34 24             	mov    %esi,(%esp)
- 610:	e8 6d fd ff ff       	call   382 <write>
+ 611:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+ 618:	00 
+ 619:	89 44 24 04          	mov    %eax,0x4(%esp)
+ 61d:	89 34 24             	mov    %esi,(%esp)
+ 620:	e8 5d fd ff ff       	call   382 <write>
         while(*s != 0){
- 615:	0f b6 07             	movzbl (%edi),%eax
- 618:	84 c0                	test   %al,%al
- 61a:	75 dc                	jne    5f8 <printf+0x148>
+ 625:	0f b6 07             	movzbl (%edi),%eax
+ 628:	84 c0                	test   %al,%al
+ 62a:	75 dc                	jne    608 <printf+0x148>
       state = 0;
- 61c:	31 ff                	xor    %edi,%edi
- 61e:	e9 d8 fe ff ff       	jmp    4fb <printf+0x4b>
- 623:	90                   	nop
- 624:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 62c:	31 ff                	xor    %edi,%edi
+ 62e:	e9 d8 fe ff ff       	jmp    50b <printf+0x4b>
+ 633:	90                   	nop
+ 634:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   write(fd, &c, 1);
- 628:	8d 45 e5             	lea    -0x1b(%ebp),%eax
+ 638:	8d 45 e5             	lea    -0x1b(%ebp),%eax
       state = 0;
- 62b:	31 ff                	xor    %edi,%edi
+ 63b:	31 ff                	xor    %edi,%edi
   write(fd, &c, 1);
- 62d:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
- 634:	00 
- 635:	89 44 24 04          	mov    %eax,0x4(%esp)
- 639:	89 34 24             	mov    %esi,(%esp)
- 63c:	c6 45 e5 25          	movb   $0x25,-0x1b(%ebp)
- 640:	e8 3d fd ff ff       	call   382 <write>
- 645:	e9 b1 fe ff ff       	jmp    4fb <printf+0x4b>
- 64a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 63d:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+ 644:	00 
+ 645:	89 44 24 04          	mov    %eax,0x4(%esp)
+ 649:	89 34 24             	mov    %esi,(%esp)
+ 64c:	c6 45 e5 25          	movb   $0x25,-0x1b(%ebp)
+ 650:	e8 2d fd ff ff       	call   382 <write>
+ 655:	e9 b1 fe ff ff       	jmp    50b <printf+0x4b>
+ 65a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         printint(fd, *ap, 10, 1);
- 650:	8b 45 d4             	mov    -0x2c(%ebp),%eax
- 653:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 660:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+ 663:	b9 0a 00 00 00       	mov    $0xa,%ecx
       state = 0;
- 658:	66 31 ff             	xor    %di,%di
+ 668:	66 31 ff             	xor    %di,%di
         printint(fd, *ap, 10, 1);
- 65b:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
- 662:	8b 10                	mov    (%eax),%edx
- 664:	89 f0                	mov    %esi,%eax
- 666:	e8 a5 fd ff ff       	call   410 <printint>
+ 66b:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+ 672:	8b 10                	mov    (%eax),%edx
+ 674:	89 f0                	mov    %esi,%eax
+ 676:	e8 a5 fd ff ff       	call   420 <printint>
         ap++;
- 66b:	83 45 d4 04          	addl   $0x4,-0x2c(%ebp)
- 66f:	e9 87 fe ff ff       	jmp    4fb <printf+0x4b>
+ 67b:	83 45 d4 04          	addl   $0x4,-0x2c(%ebp)
+ 67f:	e9 87 fe ff ff       	jmp    50b <printf+0x4b>
         putc(fd, *ap);
- 674:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+ 684:	8b 45 d4             	mov    -0x2c(%ebp),%eax
       state = 0;
- 677:	31 ff                	xor    %edi,%edi
+ 687:	31 ff                	xor    %edi,%edi
         putc(fd, *ap);
- 679:	8b 00                	mov    (%eax),%eax
+ 689:	8b 00                	mov    (%eax),%eax
   write(fd, &c, 1);
- 67b:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
- 682:	00 
- 683:	89 34 24             	mov    %esi,(%esp)
+ 68b:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+ 692:	00 
+ 693:	89 34 24             	mov    %esi,(%esp)
         putc(fd, *ap);
- 686:	88 45 e4             	mov    %al,-0x1c(%ebp)
+ 696:	88 45 e4             	mov    %al,-0x1c(%ebp)
   write(fd, &c, 1);
- 689:	8d 45 e4             	lea    -0x1c(%ebp),%eax
- 68c:	89 44 24 04          	mov    %eax,0x4(%esp)
- 690:	e8 ed fc ff ff       	call   382 <write>
+ 699:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+ 69c:	89 44 24 04          	mov    %eax,0x4(%esp)
+ 6a0:	e8 dd fc ff ff       	call   382 <write>
         ap++;
- 695:	83 45 d4 04          	addl   $0x4,-0x2c(%ebp)
- 699:	e9 5d fe ff ff       	jmp    4fb <printf+0x4b>
- 69e:	66 90                	xchg   %ax,%ax
+ 6a5:	83 45 d4 04          	addl   $0x4,-0x2c(%ebp)
+ 6a9:	e9 5d fe ff ff       	jmp    50b <printf+0x4b>
+ 6ae:	66 90                	xchg   %ax,%ax
 
-000006a0 <free>:
+000006b0 <free>:
 static Header base;
 static Header *freep;
 
 void
 free(void *ap)
 {
- 6a0:	55                   	push   %ebp
+ 6b0:	55                   	push   %ebp
   Header *bp, *p;
 
   bp = (Header*)ap - 1;
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 6a1:	a1 00 0b 00 00       	mov    0xb00,%eax
+ 6b1:	a1 20 0b 00 00       	mov    0xb20,%eax
 {
- 6a6:	89 e5                	mov    %esp,%ebp
- 6a8:	57                   	push   %edi
- 6a9:	56                   	push   %esi
- 6aa:	53                   	push   %ebx
- 6ab:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 6b6:	89 e5                	mov    %esp,%ebp
+ 6b8:	57                   	push   %edi
+ 6b9:	56                   	push   %esi
+ 6ba:	53                   	push   %ebx
+ 6bb:	8b 5d 08             	mov    0x8(%ebp),%ebx
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 6ae:	8b 08                	mov    (%eax),%ecx
+ 6be:	8b 08                	mov    (%eax),%ecx
   bp = (Header*)ap - 1;
- 6b0:	8d 53 f8             	lea    -0x8(%ebx),%edx
+ 6c0:	8d 53 f8             	lea    -0x8(%ebx),%edx
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 6b3:	39 d0                	cmp    %edx,%eax
- 6b5:	72 11                	jb     6c8 <free+0x28>
- 6b7:	90                   	nop
+ 6c3:	39 d0                	cmp    %edx,%eax
+ 6c5:	72 11                	jb     6d8 <free+0x28>
+ 6c7:	90                   	nop
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 6b8:	39 c8                	cmp    %ecx,%eax
- 6ba:	72 04                	jb     6c0 <free+0x20>
- 6bc:	39 ca                	cmp    %ecx,%edx
- 6be:	72 10                	jb     6d0 <free+0x30>
- 6c0:	89 c8                	mov    %ecx,%eax
+ 6c8:	39 c8                	cmp    %ecx,%eax
+ 6ca:	72 04                	jb     6d0 <free+0x20>
+ 6cc:	39 ca                	cmp    %ecx,%edx
+ 6ce:	72 10                	jb     6e0 <free+0x30>
+ 6d0:	89 c8                	mov    %ecx,%eax
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 6c2:	39 d0                	cmp    %edx,%eax
+ 6d2:	39 d0                	cmp    %edx,%eax
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 6c4:	8b 08                	mov    (%eax),%ecx
+ 6d4:	8b 08                	mov    (%eax),%ecx
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 6c6:	73 f0                	jae    6b8 <free+0x18>
- 6c8:	39 ca                	cmp    %ecx,%edx
- 6ca:	72 04                	jb     6d0 <free+0x30>
+ 6d6:	73 f0                	jae    6c8 <free+0x18>
+ 6d8:	39 ca                	cmp    %ecx,%edx
+ 6da:	72 04                	jb     6e0 <free+0x30>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 6cc:	39 c8                	cmp    %ecx,%eax
- 6ce:	72 f0                	jb     6c0 <free+0x20>
+ 6dc:	39 c8                	cmp    %ecx,%eax
+ 6de:	72 f0                	jb     6d0 <free+0x20>
       break;
   if(bp + bp->s.size == p->s.ptr){
- 6d0:	8b 73 fc             	mov    -0x4(%ebx),%esi
- 6d3:	8d 3c f2             	lea    (%edx,%esi,8),%edi
- 6d6:	39 cf                	cmp    %ecx,%edi
- 6d8:	74 1e                	je     6f8 <free+0x58>
+ 6e0:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 6e3:	8d 3c f2             	lea    (%edx,%esi,8),%edi
+ 6e6:	39 cf                	cmp    %ecx,%edi
+ 6e8:	74 1e                	je     708 <free+0x58>
     bp->s.size += p->s.ptr->s.size;
     bp->s.ptr = p->s.ptr->s.ptr;
   } else
     bp->s.ptr = p->s.ptr;
- 6da:	89 4b f8             	mov    %ecx,-0x8(%ebx)
+ 6ea:	89 4b f8             	mov    %ecx,-0x8(%ebx)
   if(p + p->s.size == bp){
- 6dd:	8b 48 04             	mov    0x4(%eax),%ecx
- 6e0:	8d 34 c8             	lea    (%eax,%ecx,8),%esi
- 6e3:	39 f2                	cmp    %esi,%edx
- 6e5:	74 28                	je     70f <free+0x6f>
+ 6ed:	8b 48 04             	mov    0x4(%eax),%ecx
+ 6f0:	8d 34 c8             	lea    (%eax,%ecx,8),%esi
+ 6f3:	39 f2                	cmp    %esi,%edx
+ 6f5:	74 28                	je     71f <free+0x6f>
     p->s.size += bp->s.size;
     p->s.ptr = bp->s.ptr;
   } else
     p->s.ptr = bp;
- 6e7:	89 10                	mov    %edx,(%eax)
+ 6f7:	89 10                	mov    %edx,(%eax)
   freep = p;
- 6e9:	a3 00 0b 00 00       	mov    %eax,0xb00
+ 6f9:	a3 20 0b 00 00       	mov    %eax,0xb20
 }
- 6ee:	5b                   	pop    %ebx
- 6ef:	5e                   	pop    %esi
- 6f0:	5f                   	pop    %edi
- 6f1:	5d                   	pop    %ebp
- 6f2:	c3                   	ret    
- 6f3:	90                   	nop
- 6f4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 6fe:	5b                   	pop    %ebx
+ 6ff:	5e                   	pop    %esi
+ 700:	5f                   	pop    %edi
+ 701:	5d                   	pop    %ebp
+ 702:	c3                   	ret    
+ 703:	90                   	nop
+ 704:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     bp->s.size += p->s.ptr->s.size;
- 6f8:	03 71 04             	add    0x4(%ecx),%esi
- 6fb:	89 73 fc             	mov    %esi,-0x4(%ebx)
+ 708:	03 71 04             	add    0x4(%ecx),%esi
+ 70b:	89 73 fc             	mov    %esi,-0x4(%ebx)
     bp->s.ptr = p->s.ptr->s.ptr;
- 6fe:	8b 08                	mov    (%eax),%ecx
- 700:	8b 09                	mov    (%ecx),%ecx
- 702:	89 4b f8             	mov    %ecx,-0x8(%ebx)
+ 70e:	8b 08                	mov    (%eax),%ecx
+ 710:	8b 09                	mov    (%ecx),%ecx
+ 712:	89 4b f8             	mov    %ecx,-0x8(%ebx)
   if(p + p->s.size == bp){
- 705:	8b 48 04             	mov    0x4(%eax),%ecx
- 708:	8d 34 c8             	lea    (%eax,%ecx,8),%esi
- 70b:	39 f2                	cmp    %esi,%edx
- 70d:	75 d8                	jne    6e7 <free+0x47>
+ 715:	8b 48 04             	mov    0x4(%eax),%ecx
+ 718:	8d 34 c8             	lea    (%eax,%ecx,8),%esi
+ 71b:	39 f2                	cmp    %esi,%edx
+ 71d:	75 d8                	jne    6f7 <free+0x47>
     p->s.size += bp->s.size;
- 70f:	03 4b fc             	add    -0x4(%ebx),%ecx
+ 71f:	03 4b fc             	add    -0x4(%ebx),%ecx
   freep = p;
- 712:	a3 00 0b 00 00       	mov    %eax,0xb00
+ 722:	a3 20 0b 00 00       	mov    %eax,0xb20
     p->s.size += bp->s.size;
- 717:	89 48 04             	mov    %ecx,0x4(%eax)
+ 727:	89 48 04             	mov    %ecx,0x4(%eax)
     p->s.ptr = bp->s.ptr;
- 71a:	8b 53 f8             	mov    -0x8(%ebx),%edx
- 71d:	89 10                	mov    %edx,(%eax)
+ 72a:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 72d:	89 10                	mov    %edx,(%eax)
 }
- 71f:	5b                   	pop    %ebx
- 720:	5e                   	pop    %esi
- 721:	5f                   	pop    %edi
- 722:	5d                   	pop    %ebp
- 723:	c3                   	ret    
- 724:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
- 72a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
-
-00000730 <malloc>:
+ 72f:	5b                   	pop    %ebx
+ 730:	5e                   	pop    %esi
+ 731:	5f                   	pop    %edi
+ 732:	5d                   	pop    %ebp
+ 733:	c3                   	ret    
+ 734:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 73a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+00000740 <malloc>:
   return freep;
 }
 
 void*
 malloc(uint nbytes)
 {
- 730:	55                   	push   %ebp
- 731:	89 e5                	mov    %esp,%ebp
- 733:	57                   	push   %edi
- 734:	56                   	push   %esi
- 735:	53                   	push   %ebx
- 736:	83 ec 1c             	sub    $0x1c,%esp
+ 740:	55                   	push   %ebp
+ 741:	89 e5                	mov    %esp,%ebp
+ 743:	57                   	push   %edi
+ 744:	56                   	push   %esi
+ 745:	53                   	push   %ebx
+ 746:	83 ec 1c             	sub    $0x1c,%esp
   Header *p, *prevp;
   uint nunits;
 
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 739:	8b 45 08             	mov    0x8(%ebp),%eax
+ 749:	8b 45 08             	mov    0x8(%ebp),%eax
   if((prevp = freep) == 0){
- 73c:	8b 1d 00 0b 00 00    	mov    0xb00,%ebx
+ 74c:	8b 1d 20 0b 00 00    	mov    0xb20,%ebx
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 742:	8d 48 07             	lea    0x7(%eax),%ecx
- 745:	c1 e9 03             	shr    $0x3,%ecx
+ 752:	8d 48 07             	lea    0x7(%eax),%ecx
+ 755:	c1 e9 03             	shr    $0x3,%ecx
   if((prevp = freep) == 0){
- 748:	85 db                	test   %ebx,%ebx
+ 758:	85 db                	test   %ebx,%ebx
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 74a:	8d 71 01             	lea    0x1(%ecx),%esi
+ 75a:	8d 71 01             	lea    0x1(%ecx),%esi
   if((prevp = freep) == 0){
- 74d:	0f 84 9b 00 00 00    	je     7ee <malloc+0xbe>
- 753:	8b 13                	mov    (%ebx),%edx
- 755:	8b 7a 04             	mov    0x4(%edx),%edi
+ 75d:	0f 84 9b 00 00 00    	je     7fe <malloc+0xbe>
+ 763:	8b 13                	mov    (%ebx),%edx
+ 765:	8b 7a 04             	mov    0x4(%edx),%edi
     base.s.ptr = freep = prevp = &base;
     base.s.size = 0;
   }
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
     if(p->s.size >= nunits){
- 758:	39 fe                	cmp    %edi,%esi
- 75a:	76 64                	jbe    7c0 <malloc+0x90>
- 75c:	8d 04 f5 00 00 00 00 	lea    0x0(,%esi,8),%eax
+ 768:	39 fe                	cmp    %edi,%esi
+ 76a:	76 64                	jbe    7d0 <malloc+0x90>
+ 76c:	8d 04 f5 00 00 00 00 	lea    0x0(,%esi,8),%eax
   if(nu < 4096)
- 763:	bb 00 80 00 00       	mov    $0x8000,%ebx
- 768:	89 45 e4             	mov    %eax,-0x1c(%ebp)
- 76b:	eb 0e                	jmp    77b <malloc+0x4b>
- 76d:	8d 76 00             	lea    0x0(%esi),%esi
+ 773:	bb 00 80 00 00       	mov    $0x8000,%ebx
+ 778:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+ 77b:	eb 0e                	jmp    78b <malloc+0x4b>
+ 77d:	8d 76 00             	lea    0x0(%esi),%esi
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 770:	8b 02                	mov    (%edx),%eax
+ 780:	8b 02                	mov    (%edx),%eax
     if(p->s.size >= nunits){
- 772:	8b 78 04             	mov    0x4(%eax),%edi
- 775:	39 fe                	cmp    %edi,%esi
- 777:	76 4f                	jbe    7c8 <malloc+0x98>
- 779:	89 c2                	mov    %eax,%edx
+ 782:	8b 78 04             	mov    0x4(%eax),%edi
+ 785:	39 fe                	cmp    %edi,%esi
+ 787:	76 4f                	jbe    7d8 <malloc+0x98>
+ 789:	89 c2                	mov    %eax,%edx
         p->s.size = nunits;
       }
       freep = prevp;
       return (void*)(p + 1);
     }
     if(p == freep)
- 77b:	3b 15 00 0b 00 00    	cmp    0xb00,%edx
- 781:	75 ed                	jne    770 <malloc+0x40>
+ 78b:	3b 15 20 0b 00 00    	cmp    0xb20,%edx
+ 791:	75 ed                	jne    780 <malloc+0x40>
   if(nu < 4096)
- 783:	8b 45 e4             	mov    -0x1c(%ebp),%eax
- 786:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
- 78c:	bf 00 10 00 00       	mov    $0x1000,%edi
- 791:	0f 43 fe             	cmovae %esi,%edi
- 794:	0f 42 c3             	cmovb  %ebx,%eax
+ 793:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+ 796:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+ 79c:	bf 00 10 00 00       	mov    $0x1000,%edi
+ 7a1:	0f 43 fe             	cmovae %esi,%edi
+ 7a4:	0f 42 c3             	cmovb  %ebx,%eax
   p = sbrk(nu * sizeof(Header));
- 797:	89 04 24             	mov    %eax,(%esp)
- 79a:	e8 4b fc ff ff       	call   3ea <sbrk>
+ 7a7:	89 04 24             	mov    %eax,(%esp)
+ 7aa:	e8 3b fc ff ff       	call   3ea <sbrk>
   if(p == (char*)-1)
- 79f:	83 f8 ff             	cmp    $0xffffffff,%eax
- 7a2:	74 18                	je     7bc <malloc+0x8c>
+ 7af:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 7b2:	74 18                	je     7cc <malloc+0x8c>
   hp->s.size = nu;
- 7a4:	89 78 04             	mov    %edi,0x4(%eax)
+ 7b4:	89 78 04             	mov    %edi,0x4(%eax)
   free((void*)(hp + 1));
- 7a7:	83 c0 08             	add    $0x8,%eax
- 7aa:	89 04 24             	mov    %eax,(%esp)
- 7ad:	e8 ee fe ff ff       	call   6a0 <free>
+ 7b7:	83 c0 08             	add    $0x8,%eax
+ 7ba:	89 04 24             	mov    %eax,(%esp)
+ 7bd:	e8 ee fe ff ff       	call   6b0 <free>
   return freep;
- 7b2:	8b 15 00 0b 00 00    	mov    0xb00,%edx
+ 7c2:	8b 15 20 0b 00 00    	mov    0xb20,%edx
       if((p = morecore(nunits)) == 0)
- 7b8:	85 d2                	test   %edx,%edx
- 7ba:	75 b4                	jne    770 <malloc+0x40>
+ 7c8:	85 d2                	test   %edx,%edx
+ 7ca:	75 b4                	jne    780 <malloc+0x40>
         return 0;
- 7bc:	31 c0                	xor    %eax,%eax
- 7be:	eb 20                	jmp    7e0 <malloc+0xb0>
+ 7cc:	31 c0                	xor    %eax,%eax
+ 7ce:	eb 20                	jmp    7f0 <malloc+0xb0>
     if(p->s.size >= nunits){
- 7c0:	89 d0                	mov    %edx,%eax
- 7c2:	89 da                	mov    %ebx,%edx
- 7c4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 7d0:	89 d0                	mov    %edx,%eax
+ 7d2:	89 da                	mov    %ebx,%edx
+ 7d4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
       if(p->s.size == nunits)
- 7c8:	39 fe                	cmp    %edi,%esi
- 7ca:	74 1c                	je     7e8 <malloc+0xb8>
+ 7d8:	39 fe                	cmp    %edi,%esi
+ 7da:	74 1c                	je     7f8 <malloc+0xb8>
         p->s.size -= nunits;
- 7cc:	29 f7                	sub    %esi,%edi
- 7ce:	89 78 04             	mov    %edi,0x4(%eax)
+ 7dc:	29 f7                	sub    %esi,%edi
+ 7de:	89 78 04             	mov    %edi,0x4(%eax)
         p += p->s.size;
- 7d1:	8d 04 f8             	lea    (%eax,%edi,8),%eax
+ 7e1:	8d 04 f8             	lea    (%eax,%edi,8),%eax
         p->s.size = nunits;
- 7d4:	89 70 04             	mov    %esi,0x4(%eax)
+ 7e4:	89 70 04             	mov    %esi,0x4(%eax)
       freep = prevp;
- 7d7:	89 15 00 0b 00 00    	mov    %edx,0xb00
+ 7e7:	89 15 20 0b 00 00    	mov    %edx,0xb20
       return (void*)(p + 1);
- 7dd:	83 c0 08             	add    $0x8,%eax
+ 7ed:	83 c0 08             	add    $0x8,%eax
   }
 }
- 7e0:	83 c4 1c             	add    $0x1c,%esp
- 7e3:	5b                   	pop    %ebx
- 7e4:	5e                   	pop    %esi
- 7e5:	5f                   	pop    %edi
- 7e6:	5d                   	pop    %ebp
- 7e7:	c3                   	ret    
+ 7f0:	83 c4 1c             	add    $0x1c,%esp
+ 7f3:	5b                   	pop    %ebx
+ 7f4:	5e                   	pop    %esi
+ 7f5:	5f                   	pop    %edi
+ 7f6:	5d                   	pop    %ebp
+ 7f7:	c3                   	ret    
         prevp->s.ptr = p->s.ptr;
- 7e8:	8b 08                	mov    (%eax),%ecx
- 7ea:	89 0a                	mov    %ecx,(%edx)
- 7ec:	eb e9                	jmp    7d7 <malloc+0xa7>
+ 7f8:	8b 08                	mov    (%eax),%ecx
+ 7fa:	89 0a                	mov    %ecx,(%edx)
+ 7fc:	eb e9                	jmp    7e7 <malloc+0xa7>
     base.s.ptr = freep = prevp = &base;
- 7ee:	c7 05 00 0b 00 00 04 	movl   $0xb04,0xb00
- 7f5:	0b 00 00 
+ 7fe:	c7 05 20 0b 00 00 24 	movl   $0xb24,0xb20
+ 805:	0b 00 00 
     base.s.size = 0;
- 7f8:	ba 04 0b 00 00       	mov    $0xb04,%edx
+ 808:	ba 24 0b 00 00       	mov    $0xb24,%edx
     base.s.ptr = freep = prevp = &base;
- 7fd:	c7 05 04 0b 00 00 04 	movl   $0xb04,0xb04
- 804:	0b 00 00 
+ 80d:	c7 05 24 0b 00 00 24 	movl   $0xb24,0xb24
+ 814:	0b 00 00 
     base.s.size = 0;
- 807:	c7 05 08 0b 00 00 00 	movl   $0x0,0xb08
- 80e:	00 00 00 
- 811:	e9 46 ff ff ff       	jmp    75c <malloc+0x2c>
+ 817:	c7 05 28 0b 00 00 00 	movl   $0x0,0xb28
+ 81e:	00 00 00 
+ 821:	e9 46 ff ff ff       	jmp    76c <malloc+0x2c>
diff --git a/cat.o b/cat.o
index 2a3331a..2ee1763 100644
Binary files a/cat.o and b/cat.o differ
diff --git a/cat.sym b/cat.sym
index 46ade37..67809a8 100644
--- a/cat.sym
+++ b/cat.sym
@@ -1,7 +1,7 @@
 00000000 .text
-00000816 .rodata
-00000868 .eh_frame
-00000b00 .bss
+00000826 .rodata
+00000878 .eh_frame
+00000b20 .bss
 00000000 .comment
 00000000 .debug_aranges
 00000000 .debug_info
@@ -13,26 +13,28 @@
 00000000 cat.c
 00000000 ulib.c
 00000000 printf.c
-00000410 printint
-00000855 digits.1358
+00000420 printint
+00000865 digits.1362
 00000000 umalloc.c
-00000b00 freep
-00000b04 base
+00000b20 freep
+00000b24 base
 00000140 strcpy
 00000402 waitpid
-000004b0 printf
+000004c0 printf
 00000330 memmove
 000003aa mknod
 00000250 gets
 000003e2 getpid
 000000a0 cat
-00000730 malloc
+00000740 malloc
 000003f2 sleep
 00000372 pipe
+0000040a setPrior
 00000382 write
 000003ba fstat
 00000392 kill
 000003d2 chdir
+00000412 getPrior
 0000039a exec
 0000036a wait
 0000037a read
@@ -40,15 +42,15 @@
 0000035a fork
 000003ea sbrk
 000003fa uptime
-00000b00 __bss_start
+00000b10 __bss_start
 000001f0 memset
 00000000 main
 00000170 strcmp
 000003da dup
-00000b20 buf
+00000b40 buf
 000002b0 stat
-00000b00 _edata
-00000d20 _end
+00000b10 _edata
+00000d40 _end
 000003c2 link
 00000362 exit
 00000300 atoi
@@ -57,4 +59,4 @@
 00000210 strchr
 000003ca mkdir
 0000038a close
-000006a0 free
+000006b0 free
diff --git a/console.o b/console.o
index cc73e33..6d488ff 100644
Binary files a/console.o and b/console.o differ
diff --git a/defs.h b/defs.h
index 6e23fc4..ad3a5d4 100644
--- a/defs.h
+++ b/defs.h
@@ -121,6 +121,8 @@ int             wait(int*);
 void            wakeup(void*);
 void            yield(void);
 int             waitpid(int, int*, int);
+void            setPrior(int);
+int             getPrior(void);
 
 // swtch.S
 void            swtch(struct context**, struct context*);
diff --git a/echo.asm b/echo.asm
index ad6164a..ee4b9cd 100644
--- a/echo.asm
+++ b/echo.asm
@@ -29,25 +29,25 @@ main(int argc, char *argv[])
   1c:	eb 26                	jmp    44 <main+0x44>
   1e:	66 90                	xchg   %ax,%ax
     printf(1, "%s%s", argv[i], i+1 < argc ? " " : "\n");
-  20:	c7 44 24 0c 56 07 00 	movl   $0x756,0xc(%esp)
+  20:	c7 44 24 0c 66 07 00 	movl   $0x766,0xc(%esp)
   27:	00 
   28:	8b 44 9f fc          	mov    -0x4(%edi,%ebx,4),%eax
-  2c:	c7 44 24 04 58 07 00 	movl   $0x758,0x4(%esp)
+  2c:	c7 44 24 04 68 07 00 	movl   $0x768,0x4(%esp)
   33:	00 
   34:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
   3b:	89 44 24 08          	mov    %eax,0x8(%esp)
-  3f:	e8 ac 03 00 00       	call   3f0 <printf>
+  3f:	e8 bc 03 00 00       	call   400 <printf>
   44:	83 c3 01             	add    $0x1,%ebx
   47:	39 f3                	cmp    %esi,%ebx
   49:	75 d5                	jne    20 <main+0x20>
-  4b:	c7 44 24 0c 5d 07 00 	movl   $0x75d,0xc(%esp)
+  4b:	c7 44 24 0c 6d 07 00 	movl   $0x76d,0xc(%esp)
   52:	00 
   53:	8b 44 9f fc          	mov    -0x4(%edi,%ebx,4),%eax
-  57:	c7 44 24 04 58 07 00 	movl   $0x758,0x4(%esp)
+  57:	c7 44 24 04 68 07 00 	movl   $0x768,0x4(%esp)
   5e:	00 
   5f:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
   66:	89 44 24 08          	mov    %eax,0x8(%esp)
-  6a:	e8 81 03 00 00       	call   3f0 <printf>
+  6a:	e8 91 03 00 00       	call   400 <printf>
   exit(0);
   6f:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
   76:	e8 27 02 00 00       	call   2a2 <exit>
@@ -569,580 +569,592 @@ SYSCALL(uptime)
  341:	c3                   	ret    
 
 00000342 <waitpid>:
+SYSCALL(waitpid)
  342:	b8 16 00 00 00       	mov    $0x16,%eax
  347:	cd 40                	int    $0x40
  349:	c3                   	ret    
- 34a:	66 90                	xchg   %ax,%ax
- 34c:	66 90                	xchg   %ax,%ax
- 34e:	66 90                	xchg   %ax,%ax
 
-00000350 <printint>:
+0000034a <setPrior>:
+SYSCALL(setPrior)
+ 34a:	b8 17 00 00 00       	mov    $0x17,%eax
+ 34f:	cd 40                	int    $0x40
+ 351:	c3                   	ret    
+
+00000352 <getPrior>:
+ 352:	b8 18 00 00 00       	mov    $0x18,%eax
+ 357:	cd 40                	int    $0x40
+ 359:	c3                   	ret    
+ 35a:	66 90                	xchg   %ax,%ax
+ 35c:	66 90                	xchg   %ax,%ax
+ 35e:	66 90                	xchg   %ax,%ax
+
+00000360 <printint>:
   write(fd, &c, 1);
 }
 
 static void
 printint(int fd, int xx, int base, int sgn)
 {
- 350:	55                   	push   %ebp
- 351:	89 e5                	mov    %esp,%ebp
- 353:	57                   	push   %edi
- 354:	56                   	push   %esi
- 355:	89 c6                	mov    %eax,%esi
- 357:	53                   	push   %ebx
- 358:	83 ec 4c             	sub    $0x4c,%esp
+ 360:	55                   	push   %ebp
+ 361:	89 e5                	mov    %esp,%ebp
+ 363:	57                   	push   %edi
+ 364:	56                   	push   %esi
+ 365:	89 c6                	mov    %eax,%esi
+ 367:	53                   	push   %ebx
+ 368:	83 ec 4c             	sub    $0x4c,%esp
   char buf[16];
   int i, neg;
   uint x;
 
   neg = 0;
   if(sgn && xx < 0){
- 35b:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 35e:	85 db                	test   %ebx,%ebx
- 360:	74 09                	je     36b <printint+0x1b>
- 362:	89 d0                	mov    %edx,%eax
- 364:	c1 e8 1f             	shr    $0x1f,%eax
- 367:	84 c0                	test   %al,%al
- 369:	75 75                	jne    3e0 <printint+0x90>
+ 36b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 36e:	85 db                	test   %ebx,%ebx
+ 370:	74 09                	je     37b <printint+0x1b>
+ 372:	89 d0                	mov    %edx,%eax
+ 374:	c1 e8 1f             	shr    $0x1f,%eax
+ 377:	84 c0                	test   %al,%al
+ 379:	75 75                	jne    3f0 <printint+0x90>
     neg = 1;
     x = -xx;
   } else {
     x = xx;
- 36b:	89 d0                	mov    %edx,%eax
+ 37b:	89 d0                	mov    %edx,%eax
   neg = 0;
- 36d:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
- 374:	89 75 c0             	mov    %esi,-0x40(%ebp)
+ 37d:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
+ 384:	89 75 c0             	mov    %esi,-0x40(%ebp)
   }
 
   i = 0;
- 377:	31 ff                	xor    %edi,%edi
- 379:	89 ce                	mov    %ecx,%esi
- 37b:	8d 5d d7             	lea    -0x29(%ebp),%ebx
- 37e:	eb 02                	jmp    382 <printint+0x32>
+ 387:	31 ff                	xor    %edi,%edi
+ 389:	89 ce                	mov    %ecx,%esi
+ 38b:	8d 5d d7             	lea    -0x29(%ebp),%ebx
+ 38e:	eb 02                	jmp    392 <printint+0x32>
   do{
     buf[i++] = digits[x % base];
- 380:	89 cf                	mov    %ecx,%edi
- 382:	31 d2                	xor    %edx,%edx
- 384:	f7 f6                	div    %esi
- 386:	8d 4f 01             	lea    0x1(%edi),%ecx
- 389:	0f b6 92 66 07 00 00 	movzbl 0x766(%edx),%edx
+ 390:	89 cf                	mov    %ecx,%edi
+ 392:	31 d2                	xor    %edx,%edx
+ 394:	f7 f6                	div    %esi
+ 396:	8d 4f 01             	lea    0x1(%edi),%ecx
+ 399:	0f b6 92 76 07 00 00 	movzbl 0x776(%edx),%edx
   }while((x /= base) != 0);
- 390:	85 c0                	test   %eax,%eax
+ 3a0:	85 c0                	test   %eax,%eax
     buf[i++] = digits[x % base];
- 392:	88 14 0b             	mov    %dl,(%ebx,%ecx,1)
+ 3a2:	88 14 0b             	mov    %dl,(%ebx,%ecx,1)
   }while((x /= base) != 0);
- 395:	75 e9                	jne    380 <printint+0x30>
+ 3a5:	75 e9                	jne    390 <printint+0x30>
   if(neg)
- 397:	8b 55 c4             	mov    -0x3c(%ebp),%edx
+ 3a7:	8b 55 c4             	mov    -0x3c(%ebp),%edx
     buf[i++] = digits[x % base];
- 39a:	89 c8                	mov    %ecx,%eax
- 39c:	8b 75 c0             	mov    -0x40(%ebp),%esi
+ 3aa:	89 c8                	mov    %ecx,%eax
+ 3ac:	8b 75 c0             	mov    -0x40(%ebp),%esi
   if(neg)
- 39f:	85 d2                	test   %edx,%edx
- 3a1:	74 08                	je     3ab <printint+0x5b>
+ 3af:	85 d2                	test   %edx,%edx
+ 3b1:	74 08                	je     3bb <printint+0x5b>
     buf[i++] = '-';
- 3a3:	8d 4f 02             	lea    0x2(%edi),%ecx
- 3a6:	c6 44 05 d8 2d       	movb   $0x2d,-0x28(%ebp,%eax,1)
+ 3b3:	8d 4f 02             	lea    0x2(%edi),%ecx
+ 3b6:	c6 44 05 d8 2d       	movb   $0x2d,-0x28(%ebp,%eax,1)
 
   while(--i >= 0)
- 3ab:	8d 79 ff             	lea    -0x1(%ecx),%edi
- 3ae:	66 90                	xchg   %ax,%ax
- 3b0:	0f b6 44 3d d8       	movzbl -0x28(%ebp,%edi,1),%eax
- 3b5:	83 ef 01             	sub    $0x1,%edi
+ 3bb:	8d 79 ff             	lea    -0x1(%ecx),%edi
+ 3be:	66 90                	xchg   %ax,%ax
+ 3c0:	0f b6 44 3d d8       	movzbl -0x28(%ebp,%edi,1),%eax
+ 3c5:	83 ef 01             	sub    $0x1,%edi
   write(fd, &c, 1);
- 3b8:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
- 3bf:	00 
- 3c0:	89 5c 24 04          	mov    %ebx,0x4(%esp)
- 3c4:	89 34 24             	mov    %esi,(%esp)
- 3c7:	88 45 d7             	mov    %al,-0x29(%ebp)
- 3ca:	e8 f3 fe ff ff       	call   2c2 <write>
+ 3c8:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+ 3cf:	00 
+ 3d0:	89 5c 24 04          	mov    %ebx,0x4(%esp)
+ 3d4:	89 34 24             	mov    %esi,(%esp)
+ 3d7:	88 45 d7             	mov    %al,-0x29(%ebp)
+ 3da:	e8 e3 fe ff ff       	call   2c2 <write>
   while(--i >= 0)
- 3cf:	83 ff ff             	cmp    $0xffffffff,%edi
- 3d2:	75 dc                	jne    3b0 <printint+0x60>
+ 3df:	83 ff ff             	cmp    $0xffffffff,%edi
+ 3e2:	75 dc                	jne    3c0 <printint+0x60>
     putc(fd, buf[i]);
 }
- 3d4:	83 c4 4c             	add    $0x4c,%esp
- 3d7:	5b                   	pop    %ebx
- 3d8:	5e                   	pop    %esi
- 3d9:	5f                   	pop    %edi
- 3da:	5d                   	pop    %ebp
- 3db:	c3                   	ret    
- 3dc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 3e4:	83 c4 4c             	add    $0x4c,%esp
+ 3e7:	5b                   	pop    %ebx
+ 3e8:	5e                   	pop    %esi
+ 3e9:	5f                   	pop    %edi
+ 3ea:	5d                   	pop    %ebp
+ 3eb:	c3                   	ret    
+ 3ec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     x = -xx;
- 3e0:	89 d0                	mov    %edx,%eax
- 3e2:	f7 d8                	neg    %eax
+ 3f0:	89 d0                	mov    %edx,%eax
+ 3f2:	f7 d8                	neg    %eax
     neg = 1;
- 3e4:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
- 3eb:	eb 87                	jmp    374 <printint+0x24>
- 3ed:	8d 76 00             	lea    0x0(%esi),%esi
+ 3f4:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
+ 3fb:	eb 87                	jmp    384 <printint+0x24>
+ 3fd:	8d 76 00             	lea    0x0(%esi),%esi
 
-000003f0 <printf>:
+00000400 <printf>:
 
 // Print to the given fd. Only understands %d, %x, %p, %s.
 void
 printf(int fd, const char *fmt, ...)
 {
- 3f0:	55                   	push   %ebp
- 3f1:	89 e5                	mov    %esp,%ebp
- 3f3:	57                   	push   %edi
+ 400:	55                   	push   %ebp
+ 401:	89 e5                	mov    %esp,%ebp
+ 403:	57                   	push   %edi
   char *s;
   int c, i, state;
   uint *ap;
 
   state = 0;
- 3f4:	31 ff                	xor    %edi,%edi
+ 404:	31 ff                	xor    %edi,%edi
 {
- 3f6:	56                   	push   %esi
- 3f7:	53                   	push   %ebx
- 3f8:	83 ec 3c             	sub    $0x3c,%esp
+ 406:	56                   	push   %esi
+ 407:	53                   	push   %ebx
+ 408:	83 ec 3c             	sub    $0x3c,%esp
   ap = (uint*)(void*)&fmt + 1;
   for(i = 0; fmt[i]; i++){
- 3fb:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+ 40b:	8b 5d 0c             	mov    0xc(%ebp),%ebx
   ap = (uint*)(void*)&fmt + 1;
- 3fe:	8d 45 10             	lea    0x10(%ebp),%eax
+ 40e:	8d 45 10             	lea    0x10(%ebp),%eax
 {
- 401:	8b 75 08             	mov    0x8(%ebp),%esi
+ 411:	8b 75 08             	mov    0x8(%ebp),%esi
   ap = (uint*)(void*)&fmt + 1;
- 404:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ 414:	89 45 d4             	mov    %eax,-0x2c(%ebp)
   for(i = 0; fmt[i]; i++){
- 407:	0f b6 13             	movzbl (%ebx),%edx
- 40a:	83 c3 01             	add    $0x1,%ebx
- 40d:	84 d2                	test   %dl,%dl
- 40f:	75 39                	jne    44a <printf+0x5a>
- 411:	e9 c2 00 00 00       	jmp    4d8 <printf+0xe8>
- 416:	66 90                	xchg   %ax,%ax
+ 417:	0f b6 13             	movzbl (%ebx),%edx
+ 41a:	83 c3 01             	add    $0x1,%ebx
+ 41d:	84 d2                	test   %dl,%dl
+ 41f:	75 39                	jne    45a <printf+0x5a>
+ 421:	e9 c2 00 00 00       	jmp    4e8 <printf+0xe8>
+ 426:	66 90                	xchg   %ax,%ax
     c = fmt[i] & 0xff;
     if(state == 0){
       if(c == '%'){
- 418:	83 fa 25             	cmp    $0x25,%edx
- 41b:	0f 84 bf 00 00 00    	je     4e0 <printf+0xf0>
+ 428:	83 fa 25             	cmp    $0x25,%edx
+ 42b:	0f 84 bf 00 00 00    	je     4f0 <printf+0xf0>
   write(fd, &c, 1);
- 421:	8d 45 e2             	lea    -0x1e(%ebp),%eax
- 424:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
- 42b:	00 
- 42c:	89 44 24 04          	mov    %eax,0x4(%esp)
- 430:	89 34 24             	mov    %esi,(%esp)
+ 431:	8d 45 e2             	lea    -0x1e(%ebp),%eax
+ 434:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+ 43b:	00 
+ 43c:	89 44 24 04          	mov    %eax,0x4(%esp)
+ 440:	89 34 24             	mov    %esi,(%esp)
         state = '%';
       } else {
         putc(fd, c);
- 433:	88 55 e2             	mov    %dl,-0x1e(%ebp)
+ 443:	88 55 e2             	mov    %dl,-0x1e(%ebp)
   write(fd, &c, 1);
- 436:	e8 87 fe ff ff       	call   2c2 <write>
- 43b:	83 c3 01             	add    $0x1,%ebx
+ 446:	e8 77 fe ff ff       	call   2c2 <write>
+ 44b:	83 c3 01             	add    $0x1,%ebx
   for(i = 0; fmt[i]; i++){
- 43e:	0f b6 53 ff          	movzbl -0x1(%ebx),%edx
- 442:	84 d2                	test   %dl,%dl
- 444:	0f 84 8e 00 00 00    	je     4d8 <printf+0xe8>
+ 44e:	0f b6 53 ff          	movzbl -0x1(%ebx),%edx
+ 452:	84 d2                	test   %dl,%dl
+ 454:	0f 84 8e 00 00 00    	je     4e8 <printf+0xe8>
     if(state == 0){
- 44a:	85 ff                	test   %edi,%edi
+ 45a:	85 ff                	test   %edi,%edi
     c = fmt[i] & 0xff;
- 44c:	0f be c2             	movsbl %dl,%eax
+ 45c:	0f be c2             	movsbl %dl,%eax
     if(state == 0){
- 44f:	74 c7                	je     418 <printf+0x28>
+ 45f:	74 c7                	je     428 <printf+0x28>
       }
     } else if(state == '%'){
- 451:	83 ff 25             	cmp    $0x25,%edi
- 454:	75 e5                	jne    43b <printf+0x4b>
+ 461:	83 ff 25             	cmp    $0x25,%edi
+ 464:	75 e5                	jne    44b <printf+0x4b>
       if(c == 'd'){
- 456:	83 fa 64             	cmp    $0x64,%edx
- 459:	0f 84 31 01 00 00    	je     590 <printf+0x1a0>
+ 466:	83 fa 64             	cmp    $0x64,%edx
+ 469:	0f 84 31 01 00 00    	je     5a0 <printf+0x1a0>
         printint(fd, *ap, 10, 1);
         ap++;
       } else if(c == 'x' || c == 'p'){
- 45f:	25 f7 00 00 00       	and    $0xf7,%eax
- 464:	83 f8 70             	cmp    $0x70,%eax
- 467:	0f 84 83 00 00 00    	je     4f0 <printf+0x100>
+ 46f:	25 f7 00 00 00       	and    $0xf7,%eax
+ 474:	83 f8 70             	cmp    $0x70,%eax
+ 477:	0f 84 83 00 00 00    	je     500 <printf+0x100>
         printint(fd, *ap, 16, 0);
         ap++;
       } else if(c == 's'){
- 46d:	83 fa 73             	cmp    $0x73,%edx
- 470:	0f 84 a2 00 00 00    	je     518 <printf+0x128>
+ 47d:	83 fa 73             	cmp    $0x73,%edx
+ 480:	0f 84 a2 00 00 00    	je     528 <printf+0x128>
           s = "(null)";
         while(*s != 0){
           putc(fd, *s);
           s++;
         }
       } else if(c == 'c'){
- 476:	83 fa 63             	cmp    $0x63,%edx
- 479:	0f 84 35 01 00 00    	je     5b4 <printf+0x1c4>
+ 486:	83 fa 63             	cmp    $0x63,%edx
+ 489:	0f 84 35 01 00 00    	je     5c4 <printf+0x1c4>
         putc(fd, *ap);
         ap++;
       } else if(c == '%'){
- 47f:	83 fa 25             	cmp    $0x25,%edx
- 482:	0f 84 e0 00 00 00    	je     568 <printf+0x178>
+ 48f:	83 fa 25             	cmp    $0x25,%edx
+ 492:	0f 84 e0 00 00 00    	je     578 <printf+0x178>
   write(fd, &c, 1);
- 488:	8d 45 e6             	lea    -0x1a(%ebp),%eax
- 48b:	83 c3 01             	add    $0x1,%ebx
- 48e:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
- 495:	00 
+ 498:	8d 45 e6             	lea    -0x1a(%ebp),%eax
+ 49b:	83 c3 01             	add    $0x1,%ebx
+ 49e:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+ 4a5:	00 
       } else {
         // Unknown % sequence.  Print it to draw attention.
         putc(fd, '%');
         putc(fd, c);
       }
       state = 0;
- 496:	31 ff                	xor    %edi,%edi
+ 4a6:	31 ff                	xor    %edi,%edi
   write(fd, &c, 1);
- 498:	89 44 24 04          	mov    %eax,0x4(%esp)
- 49c:	89 34 24             	mov    %esi,(%esp)
- 49f:	89 55 d0             	mov    %edx,-0x30(%ebp)
- 4a2:	c6 45 e6 25          	movb   $0x25,-0x1a(%ebp)
- 4a6:	e8 17 fe ff ff       	call   2c2 <write>
+ 4a8:	89 44 24 04          	mov    %eax,0x4(%esp)
+ 4ac:	89 34 24             	mov    %esi,(%esp)
+ 4af:	89 55 d0             	mov    %edx,-0x30(%ebp)
+ 4b2:	c6 45 e6 25          	movb   $0x25,-0x1a(%ebp)
+ 4b6:	e8 07 fe ff ff       	call   2c2 <write>
         putc(fd, c);
- 4ab:	8b 55 d0             	mov    -0x30(%ebp),%edx
+ 4bb:	8b 55 d0             	mov    -0x30(%ebp),%edx
   write(fd, &c, 1);
- 4ae:	8d 45 e7             	lea    -0x19(%ebp),%eax
- 4b1:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
- 4b8:	00 
- 4b9:	89 44 24 04          	mov    %eax,0x4(%esp)
- 4bd:	89 34 24             	mov    %esi,(%esp)
+ 4be:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 4c1:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+ 4c8:	00 
+ 4c9:	89 44 24 04          	mov    %eax,0x4(%esp)
+ 4cd:	89 34 24             	mov    %esi,(%esp)
         putc(fd, c);
- 4c0:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 4d0:	88 55 e7             	mov    %dl,-0x19(%ebp)
   write(fd, &c, 1);
- 4c3:	e8 fa fd ff ff       	call   2c2 <write>
+ 4d3:	e8 ea fd ff ff       	call   2c2 <write>
   for(i = 0; fmt[i]; i++){
- 4c8:	0f b6 53 ff          	movzbl -0x1(%ebx),%edx
- 4cc:	84 d2                	test   %dl,%dl
- 4ce:	0f 85 76 ff ff ff    	jne    44a <printf+0x5a>
- 4d4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 4d8:	0f b6 53 ff          	movzbl -0x1(%ebx),%edx
+ 4dc:	84 d2                	test   %dl,%dl
+ 4de:	0f 85 76 ff ff ff    	jne    45a <printf+0x5a>
+ 4e4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     }
   }
 }
- 4d8:	83 c4 3c             	add    $0x3c,%esp
- 4db:	5b                   	pop    %ebx
- 4dc:	5e                   	pop    %esi
- 4dd:	5f                   	pop    %edi
- 4de:	5d                   	pop    %ebp
- 4df:	c3                   	ret    
+ 4e8:	83 c4 3c             	add    $0x3c,%esp
+ 4eb:	5b                   	pop    %ebx
+ 4ec:	5e                   	pop    %esi
+ 4ed:	5f                   	pop    %edi
+ 4ee:	5d                   	pop    %ebp
+ 4ef:	c3                   	ret    
         state = '%';
- 4e0:	bf 25 00 00 00       	mov    $0x25,%edi
- 4e5:	e9 51 ff ff ff       	jmp    43b <printf+0x4b>
- 4ea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 4f0:	bf 25 00 00 00       	mov    $0x25,%edi
+ 4f5:	e9 51 ff ff ff       	jmp    44b <printf+0x4b>
+ 4fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         printint(fd, *ap, 16, 0);
- 4f0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
- 4f3:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 500:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+ 503:	b9 10 00 00 00       	mov    $0x10,%ecx
       state = 0;
- 4f8:	31 ff                	xor    %edi,%edi
+ 508:	31 ff                	xor    %edi,%edi
         printint(fd, *ap, 16, 0);
- 4fa:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
- 501:	8b 10                	mov    (%eax),%edx
- 503:	89 f0                	mov    %esi,%eax
- 505:	e8 46 fe ff ff       	call   350 <printint>
+ 50a:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+ 511:	8b 10                	mov    (%eax),%edx
+ 513:	89 f0                	mov    %esi,%eax
+ 515:	e8 46 fe ff ff       	call   360 <printint>
         ap++;
- 50a:	83 45 d4 04          	addl   $0x4,-0x2c(%ebp)
- 50e:	e9 28 ff ff ff       	jmp    43b <printf+0x4b>
- 513:	90                   	nop
- 514:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 51a:	83 45 d4 04          	addl   $0x4,-0x2c(%ebp)
+ 51e:	e9 28 ff ff ff       	jmp    44b <printf+0x4b>
+ 523:	90                   	nop
+ 524:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
         s = (char*)*ap;
- 518:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+ 528:	8b 45 d4             	mov    -0x2c(%ebp),%eax
         ap++;
- 51b:	83 45 d4 04          	addl   $0x4,-0x2c(%ebp)
+ 52b:	83 45 d4 04          	addl   $0x4,-0x2c(%ebp)
         s = (char*)*ap;
- 51f:	8b 38                	mov    (%eax),%edi
+ 52f:	8b 38                	mov    (%eax),%edi
           s = "(null)";
- 521:	b8 5f 07 00 00       	mov    $0x75f,%eax
- 526:	85 ff                	test   %edi,%edi
- 528:	0f 44 f8             	cmove  %eax,%edi
+ 531:	b8 6f 07 00 00       	mov    $0x76f,%eax
+ 536:	85 ff                	test   %edi,%edi
+ 538:	0f 44 f8             	cmove  %eax,%edi
         while(*s != 0){
- 52b:	0f b6 07             	movzbl (%edi),%eax
- 52e:	84 c0                	test   %al,%al
- 530:	74 2a                	je     55c <printf+0x16c>
- 532:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
- 538:	88 45 e3             	mov    %al,-0x1d(%ebp)
+ 53b:	0f b6 07             	movzbl (%edi),%eax
+ 53e:	84 c0                	test   %al,%al
+ 540:	74 2a                	je     56c <printf+0x16c>
+ 542:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 548:	88 45 e3             	mov    %al,-0x1d(%ebp)
   write(fd, &c, 1);
- 53b:	8d 45 e3             	lea    -0x1d(%ebp),%eax
+ 54b:	8d 45 e3             	lea    -0x1d(%ebp),%eax
           s++;
- 53e:	83 c7 01             	add    $0x1,%edi
+ 54e:	83 c7 01             	add    $0x1,%edi
   write(fd, &c, 1);
- 541:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
- 548:	00 
- 549:	89 44 24 04          	mov    %eax,0x4(%esp)
- 54d:	89 34 24             	mov    %esi,(%esp)
- 550:	e8 6d fd ff ff       	call   2c2 <write>
+ 551:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+ 558:	00 
+ 559:	89 44 24 04          	mov    %eax,0x4(%esp)
+ 55d:	89 34 24             	mov    %esi,(%esp)
+ 560:	e8 5d fd ff ff       	call   2c2 <write>
         while(*s != 0){
- 555:	0f b6 07             	movzbl (%edi),%eax
- 558:	84 c0                	test   %al,%al
- 55a:	75 dc                	jne    538 <printf+0x148>
+ 565:	0f b6 07             	movzbl (%edi),%eax
+ 568:	84 c0                	test   %al,%al
+ 56a:	75 dc                	jne    548 <printf+0x148>
       state = 0;
- 55c:	31 ff                	xor    %edi,%edi
- 55e:	e9 d8 fe ff ff       	jmp    43b <printf+0x4b>
- 563:	90                   	nop
- 564:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 56c:	31 ff                	xor    %edi,%edi
+ 56e:	e9 d8 fe ff ff       	jmp    44b <printf+0x4b>
+ 573:	90                   	nop
+ 574:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   write(fd, &c, 1);
- 568:	8d 45 e5             	lea    -0x1b(%ebp),%eax
+ 578:	8d 45 e5             	lea    -0x1b(%ebp),%eax
       state = 0;
- 56b:	31 ff                	xor    %edi,%edi
+ 57b:	31 ff                	xor    %edi,%edi
   write(fd, &c, 1);
- 56d:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
- 574:	00 
- 575:	89 44 24 04          	mov    %eax,0x4(%esp)
- 579:	89 34 24             	mov    %esi,(%esp)
- 57c:	c6 45 e5 25          	movb   $0x25,-0x1b(%ebp)
- 580:	e8 3d fd ff ff       	call   2c2 <write>
- 585:	e9 b1 fe ff ff       	jmp    43b <printf+0x4b>
- 58a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 57d:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+ 584:	00 
+ 585:	89 44 24 04          	mov    %eax,0x4(%esp)
+ 589:	89 34 24             	mov    %esi,(%esp)
+ 58c:	c6 45 e5 25          	movb   $0x25,-0x1b(%ebp)
+ 590:	e8 2d fd ff ff       	call   2c2 <write>
+ 595:	e9 b1 fe ff ff       	jmp    44b <printf+0x4b>
+ 59a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         printint(fd, *ap, 10, 1);
- 590:	8b 45 d4             	mov    -0x2c(%ebp),%eax
- 593:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 5a0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+ 5a3:	b9 0a 00 00 00       	mov    $0xa,%ecx
       state = 0;
- 598:	66 31 ff             	xor    %di,%di
+ 5a8:	66 31 ff             	xor    %di,%di
         printint(fd, *ap, 10, 1);
- 59b:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
- 5a2:	8b 10                	mov    (%eax),%edx
- 5a4:	89 f0                	mov    %esi,%eax
- 5a6:	e8 a5 fd ff ff       	call   350 <printint>
+ 5ab:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+ 5b2:	8b 10                	mov    (%eax),%edx
+ 5b4:	89 f0                	mov    %esi,%eax
+ 5b6:	e8 a5 fd ff ff       	call   360 <printint>
         ap++;
- 5ab:	83 45 d4 04          	addl   $0x4,-0x2c(%ebp)
- 5af:	e9 87 fe ff ff       	jmp    43b <printf+0x4b>
+ 5bb:	83 45 d4 04          	addl   $0x4,-0x2c(%ebp)
+ 5bf:	e9 87 fe ff ff       	jmp    44b <printf+0x4b>
         putc(fd, *ap);
- 5b4:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+ 5c4:	8b 45 d4             	mov    -0x2c(%ebp),%eax
       state = 0;
- 5b7:	31 ff                	xor    %edi,%edi
+ 5c7:	31 ff                	xor    %edi,%edi
         putc(fd, *ap);
- 5b9:	8b 00                	mov    (%eax),%eax
+ 5c9:	8b 00                	mov    (%eax),%eax
   write(fd, &c, 1);
- 5bb:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
- 5c2:	00 
- 5c3:	89 34 24             	mov    %esi,(%esp)
+ 5cb:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+ 5d2:	00 
+ 5d3:	89 34 24             	mov    %esi,(%esp)
         putc(fd, *ap);
- 5c6:	88 45 e4             	mov    %al,-0x1c(%ebp)
+ 5d6:	88 45 e4             	mov    %al,-0x1c(%ebp)
   write(fd, &c, 1);
- 5c9:	8d 45 e4             	lea    -0x1c(%ebp),%eax
- 5cc:	89 44 24 04          	mov    %eax,0x4(%esp)
- 5d0:	e8 ed fc ff ff       	call   2c2 <write>
+ 5d9:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+ 5dc:	89 44 24 04          	mov    %eax,0x4(%esp)
+ 5e0:	e8 dd fc ff ff       	call   2c2 <write>
         ap++;
- 5d5:	83 45 d4 04          	addl   $0x4,-0x2c(%ebp)
- 5d9:	e9 5d fe ff ff       	jmp    43b <printf+0x4b>
- 5de:	66 90                	xchg   %ax,%ax
+ 5e5:	83 45 d4 04          	addl   $0x4,-0x2c(%ebp)
+ 5e9:	e9 5d fe ff ff       	jmp    44b <printf+0x4b>
+ 5ee:	66 90                	xchg   %ax,%ax
 
-000005e0 <free>:
+000005f0 <free>:
 static Header base;
 static Header *freep;
 
 void
 free(void *ap)
 {
- 5e0:	55                   	push   %ebp
+ 5f0:	55                   	push   %ebp
   Header *bp, *p;
 
   bp = (Header*)ap - 1;
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 5e1:	a1 e0 09 00 00       	mov    0x9e0,%eax
+ 5f1:	a1 f0 09 00 00       	mov    0x9f0,%eax
 {
- 5e6:	89 e5                	mov    %esp,%ebp
- 5e8:	57                   	push   %edi
- 5e9:	56                   	push   %esi
- 5ea:	53                   	push   %ebx
- 5eb:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 5f6:	89 e5                	mov    %esp,%ebp
+ 5f8:	57                   	push   %edi
+ 5f9:	56                   	push   %esi
+ 5fa:	53                   	push   %ebx
+ 5fb:	8b 5d 08             	mov    0x8(%ebp),%ebx
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 5ee:	8b 08                	mov    (%eax),%ecx
+ 5fe:	8b 08                	mov    (%eax),%ecx
   bp = (Header*)ap - 1;
- 5f0:	8d 53 f8             	lea    -0x8(%ebx),%edx
+ 600:	8d 53 f8             	lea    -0x8(%ebx),%edx
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 5f3:	39 d0                	cmp    %edx,%eax
- 5f5:	72 11                	jb     608 <free+0x28>
- 5f7:	90                   	nop
+ 603:	39 d0                	cmp    %edx,%eax
+ 605:	72 11                	jb     618 <free+0x28>
+ 607:	90                   	nop
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 5f8:	39 c8                	cmp    %ecx,%eax
- 5fa:	72 04                	jb     600 <free+0x20>
- 5fc:	39 ca                	cmp    %ecx,%edx
- 5fe:	72 10                	jb     610 <free+0x30>
- 600:	89 c8                	mov    %ecx,%eax
+ 608:	39 c8                	cmp    %ecx,%eax
+ 60a:	72 04                	jb     610 <free+0x20>
+ 60c:	39 ca                	cmp    %ecx,%edx
+ 60e:	72 10                	jb     620 <free+0x30>
+ 610:	89 c8                	mov    %ecx,%eax
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 602:	39 d0                	cmp    %edx,%eax
+ 612:	39 d0                	cmp    %edx,%eax
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 604:	8b 08                	mov    (%eax),%ecx
+ 614:	8b 08                	mov    (%eax),%ecx
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 606:	73 f0                	jae    5f8 <free+0x18>
- 608:	39 ca                	cmp    %ecx,%edx
- 60a:	72 04                	jb     610 <free+0x30>
+ 616:	73 f0                	jae    608 <free+0x18>
+ 618:	39 ca                	cmp    %ecx,%edx
+ 61a:	72 04                	jb     620 <free+0x30>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 60c:	39 c8                	cmp    %ecx,%eax
- 60e:	72 f0                	jb     600 <free+0x20>
+ 61c:	39 c8                	cmp    %ecx,%eax
+ 61e:	72 f0                	jb     610 <free+0x20>
       break;
   if(bp + bp->s.size == p->s.ptr){
- 610:	8b 73 fc             	mov    -0x4(%ebx),%esi
- 613:	8d 3c f2             	lea    (%edx,%esi,8),%edi
- 616:	39 cf                	cmp    %ecx,%edi
- 618:	74 1e                	je     638 <free+0x58>
+ 620:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 623:	8d 3c f2             	lea    (%edx,%esi,8),%edi
+ 626:	39 cf                	cmp    %ecx,%edi
+ 628:	74 1e                	je     648 <free+0x58>
     bp->s.size += p->s.ptr->s.size;
     bp->s.ptr = p->s.ptr->s.ptr;
   } else
     bp->s.ptr = p->s.ptr;
- 61a:	89 4b f8             	mov    %ecx,-0x8(%ebx)
+ 62a:	89 4b f8             	mov    %ecx,-0x8(%ebx)
   if(p + p->s.size == bp){
- 61d:	8b 48 04             	mov    0x4(%eax),%ecx
- 620:	8d 34 c8             	lea    (%eax,%ecx,8),%esi
- 623:	39 f2                	cmp    %esi,%edx
- 625:	74 28                	je     64f <free+0x6f>
+ 62d:	8b 48 04             	mov    0x4(%eax),%ecx
+ 630:	8d 34 c8             	lea    (%eax,%ecx,8),%esi
+ 633:	39 f2                	cmp    %esi,%edx
+ 635:	74 28                	je     65f <free+0x6f>
     p->s.size += bp->s.size;
     p->s.ptr = bp->s.ptr;
   } else
     p->s.ptr = bp;
- 627:	89 10                	mov    %edx,(%eax)
+ 637:	89 10                	mov    %edx,(%eax)
   freep = p;
- 629:	a3 e0 09 00 00       	mov    %eax,0x9e0
+ 639:	a3 f0 09 00 00       	mov    %eax,0x9f0
 }
- 62e:	5b                   	pop    %ebx
- 62f:	5e                   	pop    %esi
- 630:	5f                   	pop    %edi
- 631:	5d                   	pop    %ebp
- 632:	c3                   	ret    
- 633:	90                   	nop
- 634:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 63e:	5b                   	pop    %ebx
+ 63f:	5e                   	pop    %esi
+ 640:	5f                   	pop    %edi
+ 641:	5d                   	pop    %ebp
+ 642:	c3                   	ret    
+ 643:	90                   	nop
+ 644:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     bp->s.size += p->s.ptr->s.size;
- 638:	03 71 04             	add    0x4(%ecx),%esi
- 63b:	89 73 fc             	mov    %esi,-0x4(%ebx)
+ 648:	03 71 04             	add    0x4(%ecx),%esi
+ 64b:	89 73 fc             	mov    %esi,-0x4(%ebx)
     bp->s.ptr = p->s.ptr->s.ptr;
- 63e:	8b 08                	mov    (%eax),%ecx
- 640:	8b 09                	mov    (%ecx),%ecx
- 642:	89 4b f8             	mov    %ecx,-0x8(%ebx)
+ 64e:	8b 08                	mov    (%eax),%ecx
+ 650:	8b 09                	mov    (%ecx),%ecx
+ 652:	89 4b f8             	mov    %ecx,-0x8(%ebx)
   if(p + p->s.size == bp){
- 645:	8b 48 04             	mov    0x4(%eax),%ecx
- 648:	8d 34 c8             	lea    (%eax,%ecx,8),%esi
- 64b:	39 f2                	cmp    %esi,%edx
- 64d:	75 d8                	jne    627 <free+0x47>
+ 655:	8b 48 04             	mov    0x4(%eax),%ecx
+ 658:	8d 34 c8             	lea    (%eax,%ecx,8),%esi
+ 65b:	39 f2                	cmp    %esi,%edx
+ 65d:	75 d8                	jne    637 <free+0x47>
     p->s.size += bp->s.size;
- 64f:	03 4b fc             	add    -0x4(%ebx),%ecx
+ 65f:	03 4b fc             	add    -0x4(%ebx),%ecx
   freep = p;
- 652:	a3 e0 09 00 00       	mov    %eax,0x9e0
+ 662:	a3 f0 09 00 00       	mov    %eax,0x9f0
     p->s.size += bp->s.size;
- 657:	89 48 04             	mov    %ecx,0x4(%eax)
+ 667:	89 48 04             	mov    %ecx,0x4(%eax)
     p->s.ptr = bp->s.ptr;
- 65a:	8b 53 f8             	mov    -0x8(%ebx),%edx
- 65d:	89 10                	mov    %edx,(%eax)
+ 66a:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 66d:	89 10                	mov    %edx,(%eax)
 }
- 65f:	5b                   	pop    %ebx
- 660:	5e                   	pop    %esi
- 661:	5f                   	pop    %edi
- 662:	5d                   	pop    %ebp
- 663:	c3                   	ret    
- 664:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
- 66a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
-
-00000670 <malloc>:
+ 66f:	5b                   	pop    %ebx
+ 670:	5e                   	pop    %esi
+ 671:	5f                   	pop    %edi
+ 672:	5d                   	pop    %ebp
+ 673:	c3                   	ret    
+ 674:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 67a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+00000680 <malloc>:
   return freep;
 }
 
 void*
 malloc(uint nbytes)
 {
- 670:	55                   	push   %ebp
- 671:	89 e5                	mov    %esp,%ebp
- 673:	57                   	push   %edi
- 674:	56                   	push   %esi
- 675:	53                   	push   %ebx
- 676:	83 ec 1c             	sub    $0x1c,%esp
+ 680:	55                   	push   %ebp
+ 681:	89 e5                	mov    %esp,%ebp
+ 683:	57                   	push   %edi
+ 684:	56                   	push   %esi
+ 685:	53                   	push   %ebx
+ 686:	83 ec 1c             	sub    $0x1c,%esp
   Header *p, *prevp;
   uint nunits;
 
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 679:	8b 45 08             	mov    0x8(%ebp),%eax
+ 689:	8b 45 08             	mov    0x8(%ebp),%eax
   if((prevp = freep) == 0){
- 67c:	8b 1d e0 09 00 00    	mov    0x9e0,%ebx
+ 68c:	8b 1d f0 09 00 00    	mov    0x9f0,%ebx
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 682:	8d 48 07             	lea    0x7(%eax),%ecx
- 685:	c1 e9 03             	shr    $0x3,%ecx
+ 692:	8d 48 07             	lea    0x7(%eax),%ecx
+ 695:	c1 e9 03             	shr    $0x3,%ecx
   if((prevp = freep) == 0){
- 688:	85 db                	test   %ebx,%ebx
+ 698:	85 db                	test   %ebx,%ebx
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 68a:	8d 71 01             	lea    0x1(%ecx),%esi
+ 69a:	8d 71 01             	lea    0x1(%ecx),%esi
   if((prevp = freep) == 0){
- 68d:	0f 84 9b 00 00 00    	je     72e <malloc+0xbe>
- 693:	8b 13                	mov    (%ebx),%edx
- 695:	8b 7a 04             	mov    0x4(%edx),%edi
+ 69d:	0f 84 9b 00 00 00    	je     73e <malloc+0xbe>
+ 6a3:	8b 13                	mov    (%ebx),%edx
+ 6a5:	8b 7a 04             	mov    0x4(%edx),%edi
     base.s.ptr = freep = prevp = &base;
     base.s.size = 0;
   }
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
     if(p->s.size >= nunits){
- 698:	39 fe                	cmp    %edi,%esi
- 69a:	76 64                	jbe    700 <malloc+0x90>
- 69c:	8d 04 f5 00 00 00 00 	lea    0x0(,%esi,8),%eax
+ 6a8:	39 fe                	cmp    %edi,%esi
+ 6aa:	76 64                	jbe    710 <malloc+0x90>
+ 6ac:	8d 04 f5 00 00 00 00 	lea    0x0(,%esi,8),%eax
   if(nu < 4096)
- 6a3:	bb 00 80 00 00       	mov    $0x8000,%ebx
- 6a8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
- 6ab:	eb 0e                	jmp    6bb <malloc+0x4b>
- 6ad:	8d 76 00             	lea    0x0(%esi),%esi
+ 6b3:	bb 00 80 00 00       	mov    $0x8000,%ebx
+ 6b8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+ 6bb:	eb 0e                	jmp    6cb <malloc+0x4b>
+ 6bd:	8d 76 00             	lea    0x0(%esi),%esi
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 6b0:	8b 02                	mov    (%edx),%eax
+ 6c0:	8b 02                	mov    (%edx),%eax
     if(p->s.size >= nunits){
- 6b2:	8b 78 04             	mov    0x4(%eax),%edi
- 6b5:	39 fe                	cmp    %edi,%esi
- 6b7:	76 4f                	jbe    708 <malloc+0x98>
- 6b9:	89 c2                	mov    %eax,%edx
+ 6c2:	8b 78 04             	mov    0x4(%eax),%edi
+ 6c5:	39 fe                	cmp    %edi,%esi
+ 6c7:	76 4f                	jbe    718 <malloc+0x98>
+ 6c9:	89 c2                	mov    %eax,%edx
         p->s.size = nunits;
       }
       freep = prevp;
       return (void*)(p + 1);
     }
     if(p == freep)
- 6bb:	3b 15 e0 09 00 00    	cmp    0x9e0,%edx
- 6c1:	75 ed                	jne    6b0 <malloc+0x40>
+ 6cb:	3b 15 f0 09 00 00    	cmp    0x9f0,%edx
+ 6d1:	75 ed                	jne    6c0 <malloc+0x40>
   if(nu < 4096)
- 6c3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
- 6c6:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
- 6cc:	bf 00 10 00 00       	mov    $0x1000,%edi
- 6d1:	0f 43 fe             	cmovae %esi,%edi
- 6d4:	0f 42 c3             	cmovb  %ebx,%eax
+ 6d3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+ 6d6:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+ 6dc:	bf 00 10 00 00       	mov    $0x1000,%edi
+ 6e1:	0f 43 fe             	cmovae %esi,%edi
+ 6e4:	0f 42 c3             	cmovb  %ebx,%eax
   p = sbrk(nu * sizeof(Header));
- 6d7:	89 04 24             	mov    %eax,(%esp)
- 6da:	e8 4b fc ff ff       	call   32a <sbrk>
+ 6e7:	89 04 24             	mov    %eax,(%esp)
+ 6ea:	e8 3b fc ff ff       	call   32a <sbrk>
   if(p == (char*)-1)
- 6df:	83 f8 ff             	cmp    $0xffffffff,%eax
- 6e2:	74 18                	je     6fc <malloc+0x8c>
+ 6ef:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 6f2:	74 18                	je     70c <malloc+0x8c>
   hp->s.size = nu;
- 6e4:	89 78 04             	mov    %edi,0x4(%eax)
+ 6f4:	89 78 04             	mov    %edi,0x4(%eax)
   free((void*)(hp + 1));
- 6e7:	83 c0 08             	add    $0x8,%eax
- 6ea:	89 04 24             	mov    %eax,(%esp)
- 6ed:	e8 ee fe ff ff       	call   5e0 <free>
+ 6f7:	83 c0 08             	add    $0x8,%eax
+ 6fa:	89 04 24             	mov    %eax,(%esp)
+ 6fd:	e8 ee fe ff ff       	call   5f0 <free>
   return freep;
- 6f2:	8b 15 e0 09 00 00    	mov    0x9e0,%edx
+ 702:	8b 15 f0 09 00 00    	mov    0x9f0,%edx
       if((p = morecore(nunits)) == 0)
- 6f8:	85 d2                	test   %edx,%edx
- 6fa:	75 b4                	jne    6b0 <malloc+0x40>
+ 708:	85 d2                	test   %edx,%edx
+ 70a:	75 b4                	jne    6c0 <malloc+0x40>
         return 0;
- 6fc:	31 c0                	xor    %eax,%eax
- 6fe:	eb 20                	jmp    720 <malloc+0xb0>
+ 70c:	31 c0                	xor    %eax,%eax
+ 70e:	eb 20                	jmp    730 <malloc+0xb0>
     if(p->s.size >= nunits){
- 700:	89 d0                	mov    %edx,%eax
- 702:	89 da                	mov    %ebx,%edx
- 704:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 710:	89 d0                	mov    %edx,%eax
+ 712:	89 da                	mov    %ebx,%edx
+ 714:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
       if(p->s.size == nunits)
- 708:	39 fe                	cmp    %edi,%esi
- 70a:	74 1c                	je     728 <malloc+0xb8>
+ 718:	39 fe                	cmp    %edi,%esi
+ 71a:	74 1c                	je     738 <malloc+0xb8>
         p->s.size -= nunits;
- 70c:	29 f7                	sub    %esi,%edi
- 70e:	89 78 04             	mov    %edi,0x4(%eax)
+ 71c:	29 f7                	sub    %esi,%edi
+ 71e:	89 78 04             	mov    %edi,0x4(%eax)
         p += p->s.size;
- 711:	8d 04 f8             	lea    (%eax,%edi,8),%eax
+ 721:	8d 04 f8             	lea    (%eax,%edi,8),%eax
         p->s.size = nunits;
- 714:	89 70 04             	mov    %esi,0x4(%eax)
+ 724:	89 70 04             	mov    %esi,0x4(%eax)
       freep = prevp;
- 717:	89 15 e0 09 00 00    	mov    %edx,0x9e0
+ 727:	89 15 f0 09 00 00    	mov    %edx,0x9f0
       return (void*)(p + 1);
- 71d:	83 c0 08             	add    $0x8,%eax
+ 72d:	83 c0 08             	add    $0x8,%eax
   }
 }
- 720:	83 c4 1c             	add    $0x1c,%esp
- 723:	5b                   	pop    %ebx
- 724:	5e                   	pop    %esi
- 725:	5f                   	pop    %edi
- 726:	5d                   	pop    %ebp
- 727:	c3                   	ret    
+ 730:	83 c4 1c             	add    $0x1c,%esp
+ 733:	5b                   	pop    %ebx
+ 734:	5e                   	pop    %esi
+ 735:	5f                   	pop    %edi
+ 736:	5d                   	pop    %ebp
+ 737:	c3                   	ret    
         prevp->s.ptr = p->s.ptr;
- 728:	8b 08                	mov    (%eax),%ecx
- 72a:	89 0a                	mov    %ecx,(%edx)
- 72c:	eb e9                	jmp    717 <malloc+0xa7>
+ 738:	8b 08                	mov    (%eax),%ecx
+ 73a:	89 0a                	mov    %ecx,(%edx)
+ 73c:	eb e9                	jmp    727 <malloc+0xa7>
     base.s.ptr = freep = prevp = &base;
- 72e:	c7 05 e0 09 00 00 e4 	movl   $0x9e4,0x9e0
- 735:	09 00 00 
+ 73e:	c7 05 f0 09 00 00 f4 	movl   $0x9f4,0x9f0
+ 745:	09 00 00 
     base.s.size = 0;
- 738:	ba e4 09 00 00       	mov    $0x9e4,%edx
+ 748:	ba f4 09 00 00       	mov    $0x9f4,%edx
     base.s.ptr = freep = prevp = &base;
- 73d:	c7 05 e4 09 00 00 e4 	movl   $0x9e4,0x9e4
- 744:	09 00 00 
+ 74d:	c7 05 f4 09 00 00 f4 	movl   $0x9f4,0x9f4
+ 754:	09 00 00 
     base.s.size = 0;
- 747:	c7 05 e8 09 00 00 00 	movl   $0x0,0x9e8
- 74e:	00 00 00 
- 751:	e9 46 ff ff ff       	jmp    69c <malloc+0x2c>
+ 757:	c7 05 f8 09 00 00 00 	movl   $0x0,0x9f8
+ 75e:	00 00 00 
+ 761:	e9 46 ff ff ff       	jmp    6ac <malloc+0x2c>
diff --git a/echo.o b/echo.o
index 02fbc59..363b2a1 100644
Binary files a/echo.o and b/echo.o differ
diff --git a/echo.sym b/echo.sym
index ab15efd..29c2614 100644
--- a/echo.sym
+++ b/echo.sym
@@ -1,7 +1,7 @@
 00000000 .text
-00000756 .rodata
-00000778 .eh_frame
-000009e0 .bss
+00000766 .rodata
+00000788 .eh_frame
+000009f0 .bss
 00000000 .comment
 00000000 .debug_aranges
 00000000 .debug_info
@@ -13,25 +13,27 @@
 00000000 echo.c
 00000000 ulib.c
 00000000 printf.c
-00000350 printint
-00000766 digits.1358
+00000360 printint
+00000776 digits.1362
 00000000 umalloc.c
-000009e0 freep
-000009e4 base
+000009f0 freep
+000009f4 base
 00000080 strcpy
 00000342 waitpid
-000003f0 printf
+00000400 printf
 00000270 memmove
 000002ea mknod
 00000190 gets
 00000322 getpid
-00000670 malloc
+00000680 malloc
 00000332 sleep
 000002b2 pipe
+0000034a setPrior
 000002c2 write
 000002fa fstat
 000002d2 kill
 00000312 chdir
+00000352 getPrior
 000002da exec
 000002aa wait
 000002ba read
@@ -39,14 +41,14 @@
 0000029a fork
 0000032a sbrk
 0000033a uptime
-000009e0 __bss_start
+000009f0 __bss_start
 00000130 memset
 00000000 main
 000000b0 strcmp
 0000031a dup
 000001f0 stat
-000009e0 _edata
-000009ec _end
+000009f0 _edata
+000009fc _end
 00000302 link
 000002a2 exit
 00000240 atoi
@@ -55,4 +57,4 @@
 00000150 strchr
 0000030a mkdir
 000002ca close
-000005e0 free
+000005f0 free
diff --git a/exec.o b/exec.o
index c11af9a..72a7299 100644
Binary files a/exec.o and b/exec.o differ
diff --git a/file.o b/file.o
index 0b965e4..bc56fdb 100644
Binary files a/file.o and b/file.o differ
diff --git a/forktest.asm b/forktest.asm
index 4a8dbb4..57916f5 100644
--- a/forktest.asm
+++ b/forktest.asm
@@ -57,7 +57,7 @@ main(void)
 {
   56:	83 ec 14             	sub    $0x14,%esp
   printf(1, "fork test\n");
-  59:	c7 44 24 04 1c 04 00 	movl   $0x41c,0x4(%esp)
+  59:	c7 44 24 04 2c 04 00 	movl   $0x42c,0x4(%esp)
   60:	00 
   61:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
   68:	e8 b3 ff ff ff       	call   20 <printf>
@@ -94,7 +94,7 @@ main(void)
   b9:	83 f8 ff             	cmp    $0xffffffff,%eax
   bc:	75 6a                	jne    128 <forktest+0xd8>
   printf(1, "fork test OK\n");
-  be:	c7 44 24 04 4e 04 00 	movl   $0x44e,0x4(%esp)
+  be:	c7 44 24 04 5e 04 00 	movl   $0x45e,0x4(%esp)
   c5:	00 
   c6:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
   cd:	e8 4e ff ff ff       	call   20 <printf>
@@ -104,9 +104,9 @@ main(void)
   d6:	5d                   	pop    %ebp
   d7:	c3                   	ret    
   write(fd, s, strlen(s));
-  d8:	c7 04 24 5c 04 00 00 	movl   $0x45c,(%esp)
+  d8:	c7 04 24 6c 04 00 00 	movl   $0x46c,(%esp)
   df:	e8 ec 00 00 00       	call   1d0 <strlen>
-  e4:	c7 44 24 04 5c 04 00 	movl   $0x45c,0x4(%esp)
+  e4:	c7 44 24 04 6c 04 00 	movl   $0x46c,0x4(%esp)
   eb:	00 
   ec:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
   f3:	89 44 24 08          	mov    %eax,0x8(%esp)
@@ -115,7 +115,7 @@ main(void)
   fc:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  103:	e8 6a 02 00 00       	call   372 <exit>
       printf(1, "wait stopped early\n");
- 108:	c7 44 24 04 27 04 00 	movl   $0x427,0x4(%esp)
+ 108:	c7 44 24 04 37 04 00 	movl   $0x437,0x4(%esp)
  10f:	00 
  110:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  117:	e8 04 ff ff ff       	call   20 <printf>
@@ -123,7 +123,7 @@ main(void)
  11c:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  123:	e8 4a 02 00 00       	call   372 <exit>
     printf(1, "wait got too many\n");
- 128:	c7 44 24 04 3b 04 00 	movl   $0x43b,0x4(%esp)
+ 128:	c7 44 24 04 4b 04 00 	movl   $0x44b,0x4(%esp)
  12f:	00 
  130:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  137:	e8 e4 fe ff ff       	call   20 <printf>
@@ -649,6 +649,18 @@ SYSCALL(uptime)
  411:	c3                   	ret    
 
 00000412 <waitpid>:
+SYSCALL(waitpid)
  412:	b8 16 00 00 00       	mov    $0x16,%eax
  417:	cd 40                	int    $0x40
  419:	c3                   	ret    
+
+0000041a <setPrior>:
+SYSCALL(setPrior)
+ 41a:	b8 17 00 00 00       	mov    $0x17,%eax
+ 41f:	cd 40                	int    $0x40
+ 421:	c3                   	ret    
+
+00000422 <getPrior>:
+ 422:	b8 18 00 00 00       	mov    $0x18,%eax
+ 427:	cd 40                	int    $0x40
+ 429:	c3                   	ret    
diff --git a/forktest.o b/forktest.o
index 85d91bf..9fac2b4 100644
Binary files a/forktest.o and b/forktest.o differ
diff --git a/fs.img b/fs.img
index 610ff1a..858de49 100644
Binary files a/fs.img and b/fs.img differ
diff --git a/fs.o b/fs.o
index 27028be..022d0b9 100644
Binary files a/fs.o and b/fs.o differ
diff --git a/grep.asm b/grep.asm
index b30b1fa..0c46feb 100644
--- a/grep.asm
+++ b/grep.asm
@@ -78,11 +78,11 @@ main(int argc, char *argv[])
   72:	e8 db 04 00 00       	call   552 <exit>
       printf(1, "grep: cannot open %s\n", argv[i]);
   77:	8b 03                	mov    (%ebx),%eax
-  79:	c7 44 24 04 28 0a 00 	movl   $0xa28,0x4(%esp)
+  79:	c7 44 24 04 38 0a 00 	movl   $0xa38,0x4(%esp)
   80:	00 
   81:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
   88:	89 44 24 08          	mov    %eax,0x8(%esp)
-  8c:	e8 0f 06 00 00       	call   6a0 <printf>
+  8c:	e8 1f 06 00 00       	call   6b0 <printf>
       exit(0);
   91:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
   98:	e8 b5 04 00 00       	call   552 <exit>
@@ -95,10 +95,10 @@ main(int argc, char *argv[])
   ad:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
   b4:	e8 99 04 00 00       	call   552 <exit>
     printf(2, "usage: grep pattern [file ...]\n");
-  b9:	c7 44 24 04 08 0a 00 	movl   $0xa08,0x4(%esp)
+  b9:	c7 44 24 04 18 0a 00 	movl   $0xa18,0x4(%esp)
   c0:	00 
   c1:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-  c8:	e8 d3 05 00 00       	call   6a0 <printf>
+  c8:	e8 e3 05 00 00       	call   6b0 <printf>
     exit(0);
   cd:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
   d4:	e8 79 04 00 00       	call   552 <exit>
@@ -306,7 +306,7 @@ int matchstar(int c, char *re, char *text)
  240:	29 d0                	sub    %edx,%eax
  242:	89 44 24 08          	mov    %eax,0x8(%esp)
  246:	89 d0                	mov    %edx,%eax
- 248:	05 c0 0d 00 00       	add    $0xdc0,%eax
+ 248:	05 e0 0d 00 00       	add    $0xde0,%eax
  24d:	89 44 24 04          	mov    %eax,0x4(%esp)
  251:	8b 45 0c             	mov    0xc(%ebp),%eax
  254:	89 04 24             	mov    %eax,(%esp)
@@ -316,10 +316,10 @@ int matchstar(int c, char *re, char *text)
     m += n;
  264:	01 45 e4             	add    %eax,-0x1c(%ebp)
     p = buf;
- 267:	bb c0 0d 00 00       	mov    $0xdc0,%ebx
+ 267:	bb e0 0d 00 00       	mov    $0xde0,%ebx
     buf[m] = '\0';
  26c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
- 26f:	c6 80 c0 0d 00 00 00 	movb   $0x0,0xdc0(%eax)
+ 26f:	c6 80 e0 0d 00 00 00 	movb   $0x0,0xde0(%eax)
  276:	66 90                	xchg   %ax,%ax
     while((q = strchr(p, '\n')) != 0){
  278:	c7 44 24 04 0a 00 00 	movl   $0xa,0x4(%esp)
@@ -354,20 +354,20 @@ int matchstar(int c, char *re, char *text)
  2c8:	eb ae                	jmp    278 <grep+0x58>
  2ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     if(p == buf)
- 2d0:	81 fb c0 0d 00 00    	cmp    $0xdc0,%ebx
+ 2d0:	81 fb e0 0d 00 00    	cmp    $0xde0,%ebx
  2d6:	74 38                	je     310 <grep+0xf0>
     if(m > 0){
  2d8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  2db:	85 c0                	test   %eax,%eax
  2dd:	0f 8e 55 ff ff ff    	jle    238 <grep+0x18>
       m -= p - buf;
- 2e3:	b8 c0 0d 00 00       	mov    $0xdc0,%eax
+ 2e3:	b8 e0 0d 00 00       	mov    $0xde0,%eax
  2e8:	29 d8                	sub    %ebx,%eax
  2ea:	01 45 e4             	add    %eax,-0x1c(%ebp)
       memmove(buf, p, m);
  2ed:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  2f0:	89 5c 24 04          	mov    %ebx,0x4(%esp)
- 2f4:	c7 04 24 c0 0d 00 00 	movl   $0xdc0,(%esp)
+ 2f4:	c7 04 24 e0 0d 00 00 	movl   $0xde0,(%esp)
  2fb:	89 44 24 08          	mov    %eax,0x8(%esp)
  2ff:	e8 1c 02 00 00       	call   520 <memmove>
  304:	e9 2f ff ff ff       	jmp    238 <grep+0x18>
@@ -903,580 +903,592 @@ SYSCALL(uptime)
  5f1:	c3                   	ret    
 
 000005f2 <waitpid>:
+SYSCALL(waitpid)
  5f2:	b8 16 00 00 00       	mov    $0x16,%eax
  5f7:	cd 40                	int    $0x40
  5f9:	c3                   	ret    
- 5fa:	66 90                	xchg   %ax,%ax
- 5fc:	66 90                	xchg   %ax,%ax
- 5fe:	66 90                	xchg   %ax,%ax
 
-00000600 <printint>:
+000005fa <setPrior>:
+SYSCALL(setPrior)
+ 5fa:	b8 17 00 00 00       	mov    $0x17,%eax
+ 5ff:	cd 40                	int    $0x40
+ 601:	c3                   	ret    
+
+00000602 <getPrior>:
+ 602:	b8 18 00 00 00       	mov    $0x18,%eax
+ 607:	cd 40                	int    $0x40
+ 609:	c3                   	ret    
+ 60a:	66 90                	xchg   %ax,%ax
+ 60c:	66 90                	xchg   %ax,%ax
+ 60e:	66 90                	xchg   %ax,%ax
+
+00000610 <printint>:
   write(fd, &c, 1);
 }
 
 static void
 printint(int fd, int xx, int base, int sgn)
 {
- 600:	55                   	push   %ebp
- 601:	89 e5                	mov    %esp,%ebp
- 603:	57                   	push   %edi
- 604:	56                   	push   %esi
- 605:	89 c6                	mov    %eax,%esi
- 607:	53                   	push   %ebx
- 608:	83 ec 4c             	sub    $0x4c,%esp
+ 610:	55                   	push   %ebp
+ 611:	89 e5                	mov    %esp,%ebp
+ 613:	57                   	push   %edi
+ 614:	56                   	push   %esi
+ 615:	89 c6                	mov    %eax,%esi
+ 617:	53                   	push   %ebx
+ 618:	83 ec 4c             	sub    $0x4c,%esp
   char buf[16];
   int i, neg;
   uint x;
 
   neg = 0;
   if(sgn && xx < 0){
- 60b:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 60e:	85 db                	test   %ebx,%ebx
- 610:	74 09                	je     61b <printint+0x1b>
- 612:	89 d0                	mov    %edx,%eax
- 614:	c1 e8 1f             	shr    $0x1f,%eax
- 617:	84 c0                	test   %al,%al
- 619:	75 75                	jne    690 <printint+0x90>
+ 61b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 61e:	85 db                	test   %ebx,%ebx
+ 620:	74 09                	je     62b <printint+0x1b>
+ 622:	89 d0                	mov    %edx,%eax
+ 624:	c1 e8 1f             	shr    $0x1f,%eax
+ 627:	84 c0                	test   %al,%al
+ 629:	75 75                	jne    6a0 <printint+0x90>
     neg = 1;
     x = -xx;
   } else {
     x = xx;
- 61b:	89 d0                	mov    %edx,%eax
+ 62b:	89 d0                	mov    %edx,%eax
   neg = 0;
- 61d:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
- 624:	89 75 c0             	mov    %esi,-0x40(%ebp)
+ 62d:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
+ 634:	89 75 c0             	mov    %esi,-0x40(%ebp)
   }
 
   i = 0;
- 627:	31 ff                	xor    %edi,%edi
- 629:	89 ce                	mov    %ecx,%esi
- 62b:	8d 5d d7             	lea    -0x29(%ebp),%ebx
- 62e:	eb 02                	jmp    632 <printint+0x32>
+ 637:	31 ff                	xor    %edi,%edi
+ 639:	89 ce                	mov    %ecx,%esi
+ 63b:	8d 5d d7             	lea    -0x29(%ebp),%ebx
+ 63e:	eb 02                	jmp    642 <printint+0x32>
   do{
     buf[i++] = digits[x % base];
- 630:	89 cf                	mov    %ecx,%edi
- 632:	31 d2                	xor    %edx,%edx
- 634:	f7 f6                	div    %esi
- 636:	8d 4f 01             	lea    0x1(%edi),%ecx
- 639:	0f b6 92 45 0a 00 00 	movzbl 0xa45(%edx),%edx
+ 640:	89 cf                	mov    %ecx,%edi
+ 642:	31 d2                	xor    %edx,%edx
+ 644:	f7 f6                	div    %esi
+ 646:	8d 4f 01             	lea    0x1(%edi),%ecx
+ 649:	0f b6 92 55 0a 00 00 	movzbl 0xa55(%edx),%edx
   }while((x /= base) != 0);
- 640:	85 c0                	test   %eax,%eax
+ 650:	85 c0                	test   %eax,%eax
     buf[i++] = digits[x % base];
- 642:	88 14 0b             	mov    %dl,(%ebx,%ecx,1)
+ 652:	88 14 0b             	mov    %dl,(%ebx,%ecx,1)
   }while((x /= base) != 0);
- 645:	75 e9                	jne    630 <printint+0x30>
+ 655:	75 e9                	jne    640 <printint+0x30>
   if(neg)
- 647:	8b 55 c4             	mov    -0x3c(%ebp),%edx
+ 657:	8b 55 c4             	mov    -0x3c(%ebp),%edx
     buf[i++] = digits[x % base];
- 64a:	89 c8                	mov    %ecx,%eax
- 64c:	8b 75 c0             	mov    -0x40(%ebp),%esi
+ 65a:	89 c8                	mov    %ecx,%eax
+ 65c:	8b 75 c0             	mov    -0x40(%ebp),%esi
   if(neg)
- 64f:	85 d2                	test   %edx,%edx
- 651:	74 08                	je     65b <printint+0x5b>
+ 65f:	85 d2                	test   %edx,%edx
+ 661:	74 08                	je     66b <printint+0x5b>
     buf[i++] = '-';
- 653:	8d 4f 02             	lea    0x2(%edi),%ecx
- 656:	c6 44 05 d8 2d       	movb   $0x2d,-0x28(%ebp,%eax,1)
+ 663:	8d 4f 02             	lea    0x2(%edi),%ecx
+ 666:	c6 44 05 d8 2d       	movb   $0x2d,-0x28(%ebp,%eax,1)
 
   while(--i >= 0)
- 65b:	8d 79 ff             	lea    -0x1(%ecx),%edi
- 65e:	66 90                	xchg   %ax,%ax
- 660:	0f b6 44 3d d8       	movzbl -0x28(%ebp,%edi,1),%eax
- 665:	83 ef 01             	sub    $0x1,%edi
+ 66b:	8d 79 ff             	lea    -0x1(%ecx),%edi
+ 66e:	66 90                	xchg   %ax,%ax
+ 670:	0f b6 44 3d d8       	movzbl -0x28(%ebp,%edi,1),%eax
+ 675:	83 ef 01             	sub    $0x1,%edi
   write(fd, &c, 1);
- 668:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
- 66f:	00 
- 670:	89 5c 24 04          	mov    %ebx,0x4(%esp)
- 674:	89 34 24             	mov    %esi,(%esp)
- 677:	88 45 d7             	mov    %al,-0x29(%ebp)
- 67a:	e8 f3 fe ff ff       	call   572 <write>
+ 678:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+ 67f:	00 
+ 680:	89 5c 24 04          	mov    %ebx,0x4(%esp)
+ 684:	89 34 24             	mov    %esi,(%esp)
+ 687:	88 45 d7             	mov    %al,-0x29(%ebp)
+ 68a:	e8 e3 fe ff ff       	call   572 <write>
   while(--i >= 0)
- 67f:	83 ff ff             	cmp    $0xffffffff,%edi
- 682:	75 dc                	jne    660 <printint+0x60>
+ 68f:	83 ff ff             	cmp    $0xffffffff,%edi
+ 692:	75 dc                	jne    670 <printint+0x60>
     putc(fd, buf[i]);
 }
- 684:	83 c4 4c             	add    $0x4c,%esp
- 687:	5b                   	pop    %ebx
- 688:	5e                   	pop    %esi
- 689:	5f                   	pop    %edi
- 68a:	5d                   	pop    %ebp
- 68b:	c3                   	ret    
- 68c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 694:	83 c4 4c             	add    $0x4c,%esp
+ 697:	5b                   	pop    %ebx
+ 698:	5e                   	pop    %esi
+ 699:	5f                   	pop    %edi
+ 69a:	5d                   	pop    %ebp
+ 69b:	c3                   	ret    
+ 69c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     x = -xx;
- 690:	89 d0                	mov    %edx,%eax
- 692:	f7 d8                	neg    %eax
+ 6a0:	89 d0                	mov    %edx,%eax
+ 6a2:	f7 d8                	neg    %eax
     neg = 1;
- 694:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
- 69b:	eb 87                	jmp    624 <printint+0x24>
- 69d:	8d 76 00             	lea    0x0(%esi),%esi
+ 6a4:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
+ 6ab:	eb 87                	jmp    634 <printint+0x24>
+ 6ad:	8d 76 00             	lea    0x0(%esi),%esi
 
-000006a0 <printf>:
+000006b0 <printf>:
 
 // Print to the given fd. Only understands %d, %x, %p, %s.
 void
 printf(int fd, const char *fmt, ...)
 {
- 6a0:	55                   	push   %ebp
- 6a1:	89 e5                	mov    %esp,%ebp
- 6a3:	57                   	push   %edi
+ 6b0:	55                   	push   %ebp
+ 6b1:	89 e5                	mov    %esp,%ebp
+ 6b3:	57                   	push   %edi
   char *s;
   int c, i, state;
   uint *ap;
 
   state = 0;
- 6a4:	31 ff                	xor    %edi,%edi
+ 6b4:	31 ff                	xor    %edi,%edi
 {
- 6a6:	56                   	push   %esi
- 6a7:	53                   	push   %ebx
- 6a8:	83 ec 3c             	sub    $0x3c,%esp
+ 6b6:	56                   	push   %esi
+ 6b7:	53                   	push   %ebx
+ 6b8:	83 ec 3c             	sub    $0x3c,%esp
   ap = (uint*)(void*)&fmt + 1;
   for(i = 0; fmt[i]; i++){
- 6ab:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+ 6bb:	8b 5d 0c             	mov    0xc(%ebp),%ebx
   ap = (uint*)(void*)&fmt + 1;
- 6ae:	8d 45 10             	lea    0x10(%ebp),%eax
+ 6be:	8d 45 10             	lea    0x10(%ebp),%eax
 {
- 6b1:	8b 75 08             	mov    0x8(%ebp),%esi
+ 6c1:	8b 75 08             	mov    0x8(%ebp),%esi
   ap = (uint*)(void*)&fmt + 1;
- 6b4:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ 6c4:	89 45 d4             	mov    %eax,-0x2c(%ebp)
   for(i = 0; fmt[i]; i++){
- 6b7:	0f b6 13             	movzbl (%ebx),%edx
- 6ba:	83 c3 01             	add    $0x1,%ebx
- 6bd:	84 d2                	test   %dl,%dl
- 6bf:	75 39                	jne    6fa <printf+0x5a>
- 6c1:	e9 c2 00 00 00       	jmp    788 <printf+0xe8>
- 6c6:	66 90                	xchg   %ax,%ax
+ 6c7:	0f b6 13             	movzbl (%ebx),%edx
+ 6ca:	83 c3 01             	add    $0x1,%ebx
+ 6cd:	84 d2                	test   %dl,%dl
+ 6cf:	75 39                	jne    70a <printf+0x5a>
+ 6d1:	e9 c2 00 00 00       	jmp    798 <printf+0xe8>
+ 6d6:	66 90                	xchg   %ax,%ax
     c = fmt[i] & 0xff;
     if(state == 0){
       if(c == '%'){
- 6c8:	83 fa 25             	cmp    $0x25,%edx
- 6cb:	0f 84 bf 00 00 00    	je     790 <printf+0xf0>
+ 6d8:	83 fa 25             	cmp    $0x25,%edx
+ 6db:	0f 84 bf 00 00 00    	je     7a0 <printf+0xf0>
   write(fd, &c, 1);
- 6d1:	8d 45 e2             	lea    -0x1e(%ebp),%eax
- 6d4:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
- 6db:	00 
- 6dc:	89 44 24 04          	mov    %eax,0x4(%esp)
- 6e0:	89 34 24             	mov    %esi,(%esp)
+ 6e1:	8d 45 e2             	lea    -0x1e(%ebp),%eax
+ 6e4:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+ 6eb:	00 
+ 6ec:	89 44 24 04          	mov    %eax,0x4(%esp)
+ 6f0:	89 34 24             	mov    %esi,(%esp)
         state = '%';
       } else {
         putc(fd, c);
- 6e3:	88 55 e2             	mov    %dl,-0x1e(%ebp)
+ 6f3:	88 55 e2             	mov    %dl,-0x1e(%ebp)
   write(fd, &c, 1);
- 6e6:	e8 87 fe ff ff       	call   572 <write>
- 6eb:	83 c3 01             	add    $0x1,%ebx
+ 6f6:	e8 77 fe ff ff       	call   572 <write>
+ 6fb:	83 c3 01             	add    $0x1,%ebx
   for(i = 0; fmt[i]; i++){
- 6ee:	0f b6 53 ff          	movzbl -0x1(%ebx),%edx
- 6f2:	84 d2                	test   %dl,%dl
- 6f4:	0f 84 8e 00 00 00    	je     788 <printf+0xe8>
+ 6fe:	0f b6 53 ff          	movzbl -0x1(%ebx),%edx
+ 702:	84 d2                	test   %dl,%dl
+ 704:	0f 84 8e 00 00 00    	je     798 <printf+0xe8>
     if(state == 0){
- 6fa:	85 ff                	test   %edi,%edi
+ 70a:	85 ff                	test   %edi,%edi
     c = fmt[i] & 0xff;
- 6fc:	0f be c2             	movsbl %dl,%eax
+ 70c:	0f be c2             	movsbl %dl,%eax
     if(state == 0){
- 6ff:	74 c7                	je     6c8 <printf+0x28>
+ 70f:	74 c7                	je     6d8 <printf+0x28>
       }
     } else if(state == '%'){
- 701:	83 ff 25             	cmp    $0x25,%edi
- 704:	75 e5                	jne    6eb <printf+0x4b>
+ 711:	83 ff 25             	cmp    $0x25,%edi
+ 714:	75 e5                	jne    6fb <printf+0x4b>
       if(c == 'd'){
- 706:	83 fa 64             	cmp    $0x64,%edx
- 709:	0f 84 31 01 00 00    	je     840 <printf+0x1a0>
+ 716:	83 fa 64             	cmp    $0x64,%edx
+ 719:	0f 84 31 01 00 00    	je     850 <printf+0x1a0>
         printint(fd, *ap, 10, 1);
         ap++;
       } else if(c == 'x' || c == 'p'){
- 70f:	25 f7 00 00 00       	and    $0xf7,%eax
- 714:	83 f8 70             	cmp    $0x70,%eax
- 717:	0f 84 83 00 00 00    	je     7a0 <printf+0x100>
+ 71f:	25 f7 00 00 00       	and    $0xf7,%eax
+ 724:	83 f8 70             	cmp    $0x70,%eax
+ 727:	0f 84 83 00 00 00    	je     7b0 <printf+0x100>
         printint(fd, *ap, 16, 0);
         ap++;
       } else if(c == 's'){
- 71d:	83 fa 73             	cmp    $0x73,%edx
- 720:	0f 84 a2 00 00 00    	je     7c8 <printf+0x128>
+ 72d:	83 fa 73             	cmp    $0x73,%edx
+ 730:	0f 84 a2 00 00 00    	je     7d8 <printf+0x128>
           s = "(null)";
         while(*s != 0){
           putc(fd, *s);
           s++;
         }
       } else if(c == 'c'){
- 726:	83 fa 63             	cmp    $0x63,%edx
- 729:	0f 84 35 01 00 00    	je     864 <printf+0x1c4>
+ 736:	83 fa 63             	cmp    $0x63,%edx
+ 739:	0f 84 35 01 00 00    	je     874 <printf+0x1c4>
         putc(fd, *ap);
         ap++;
       } else if(c == '%'){
- 72f:	83 fa 25             	cmp    $0x25,%edx
- 732:	0f 84 e0 00 00 00    	je     818 <printf+0x178>
+ 73f:	83 fa 25             	cmp    $0x25,%edx
+ 742:	0f 84 e0 00 00 00    	je     828 <printf+0x178>
   write(fd, &c, 1);
- 738:	8d 45 e6             	lea    -0x1a(%ebp),%eax
- 73b:	83 c3 01             	add    $0x1,%ebx
- 73e:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
- 745:	00 
+ 748:	8d 45 e6             	lea    -0x1a(%ebp),%eax
+ 74b:	83 c3 01             	add    $0x1,%ebx
+ 74e:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+ 755:	00 
       } else {
         // Unknown % sequence.  Print it to draw attention.
         putc(fd, '%');
         putc(fd, c);
       }
       state = 0;
- 746:	31 ff                	xor    %edi,%edi
+ 756:	31 ff                	xor    %edi,%edi
   write(fd, &c, 1);
- 748:	89 44 24 04          	mov    %eax,0x4(%esp)
- 74c:	89 34 24             	mov    %esi,(%esp)
- 74f:	89 55 d0             	mov    %edx,-0x30(%ebp)
- 752:	c6 45 e6 25          	movb   $0x25,-0x1a(%ebp)
- 756:	e8 17 fe ff ff       	call   572 <write>
+ 758:	89 44 24 04          	mov    %eax,0x4(%esp)
+ 75c:	89 34 24             	mov    %esi,(%esp)
+ 75f:	89 55 d0             	mov    %edx,-0x30(%ebp)
+ 762:	c6 45 e6 25          	movb   $0x25,-0x1a(%ebp)
+ 766:	e8 07 fe ff ff       	call   572 <write>
         putc(fd, c);
- 75b:	8b 55 d0             	mov    -0x30(%ebp),%edx
+ 76b:	8b 55 d0             	mov    -0x30(%ebp),%edx
   write(fd, &c, 1);
- 75e:	8d 45 e7             	lea    -0x19(%ebp),%eax
- 761:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
- 768:	00 
- 769:	89 44 24 04          	mov    %eax,0x4(%esp)
- 76d:	89 34 24             	mov    %esi,(%esp)
+ 76e:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 771:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+ 778:	00 
+ 779:	89 44 24 04          	mov    %eax,0x4(%esp)
+ 77d:	89 34 24             	mov    %esi,(%esp)
         putc(fd, c);
- 770:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 780:	88 55 e7             	mov    %dl,-0x19(%ebp)
   write(fd, &c, 1);
- 773:	e8 fa fd ff ff       	call   572 <write>
+ 783:	e8 ea fd ff ff       	call   572 <write>
   for(i = 0; fmt[i]; i++){
- 778:	0f b6 53 ff          	movzbl -0x1(%ebx),%edx
- 77c:	84 d2                	test   %dl,%dl
- 77e:	0f 85 76 ff ff ff    	jne    6fa <printf+0x5a>
- 784:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 788:	0f b6 53 ff          	movzbl -0x1(%ebx),%edx
+ 78c:	84 d2                	test   %dl,%dl
+ 78e:	0f 85 76 ff ff ff    	jne    70a <printf+0x5a>
+ 794:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     }
   }
 }
- 788:	83 c4 3c             	add    $0x3c,%esp
- 78b:	5b                   	pop    %ebx
- 78c:	5e                   	pop    %esi
- 78d:	5f                   	pop    %edi
- 78e:	5d                   	pop    %ebp
- 78f:	c3                   	ret    
+ 798:	83 c4 3c             	add    $0x3c,%esp
+ 79b:	5b                   	pop    %ebx
+ 79c:	5e                   	pop    %esi
+ 79d:	5f                   	pop    %edi
+ 79e:	5d                   	pop    %ebp
+ 79f:	c3                   	ret    
         state = '%';
- 790:	bf 25 00 00 00       	mov    $0x25,%edi
- 795:	e9 51 ff ff ff       	jmp    6eb <printf+0x4b>
- 79a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 7a0:	bf 25 00 00 00       	mov    $0x25,%edi
+ 7a5:	e9 51 ff ff ff       	jmp    6fb <printf+0x4b>
+ 7aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         printint(fd, *ap, 16, 0);
- 7a0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
- 7a3:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 7b0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+ 7b3:	b9 10 00 00 00       	mov    $0x10,%ecx
       state = 0;
- 7a8:	31 ff                	xor    %edi,%edi
+ 7b8:	31 ff                	xor    %edi,%edi
         printint(fd, *ap, 16, 0);
- 7aa:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
- 7b1:	8b 10                	mov    (%eax),%edx
- 7b3:	89 f0                	mov    %esi,%eax
- 7b5:	e8 46 fe ff ff       	call   600 <printint>
+ 7ba:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+ 7c1:	8b 10                	mov    (%eax),%edx
+ 7c3:	89 f0                	mov    %esi,%eax
+ 7c5:	e8 46 fe ff ff       	call   610 <printint>
         ap++;
- 7ba:	83 45 d4 04          	addl   $0x4,-0x2c(%ebp)
- 7be:	e9 28 ff ff ff       	jmp    6eb <printf+0x4b>
- 7c3:	90                   	nop
- 7c4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 7ca:	83 45 d4 04          	addl   $0x4,-0x2c(%ebp)
+ 7ce:	e9 28 ff ff ff       	jmp    6fb <printf+0x4b>
+ 7d3:	90                   	nop
+ 7d4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
         s = (char*)*ap;
- 7c8:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+ 7d8:	8b 45 d4             	mov    -0x2c(%ebp),%eax
         ap++;
- 7cb:	83 45 d4 04          	addl   $0x4,-0x2c(%ebp)
+ 7db:	83 45 d4 04          	addl   $0x4,-0x2c(%ebp)
         s = (char*)*ap;
- 7cf:	8b 38                	mov    (%eax),%edi
+ 7df:	8b 38                	mov    (%eax),%edi
           s = "(null)";
- 7d1:	b8 3e 0a 00 00       	mov    $0xa3e,%eax
- 7d6:	85 ff                	test   %edi,%edi
- 7d8:	0f 44 f8             	cmove  %eax,%edi
+ 7e1:	b8 4e 0a 00 00       	mov    $0xa4e,%eax
+ 7e6:	85 ff                	test   %edi,%edi
+ 7e8:	0f 44 f8             	cmove  %eax,%edi
         while(*s != 0){
- 7db:	0f b6 07             	movzbl (%edi),%eax
- 7de:	84 c0                	test   %al,%al
- 7e0:	74 2a                	je     80c <printf+0x16c>
- 7e2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
- 7e8:	88 45 e3             	mov    %al,-0x1d(%ebp)
+ 7eb:	0f b6 07             	movzbl (%edi),%eax
+ 7ee:	84 c0                	test   %al,%al
+ 7f0:	74 2a                	je     81c <printf+0x16c>
+ 7f2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 7f8:	88 45 e3             	mov    %al,-0x1d(%ebp)
   write(fd, &c, 1);
- 7eb:	8d 45 e3             	lea    -0x1d(%ebp),%eax
+ 7fb:	8d 45 e3             	lea    -0x1d(%ebp),%eax
           s++;
- 7ee:	83 c7 01             	add    $0x1,%edi
+ 7fe:	83 c7 01             	add    $0x1,%edi
   write(fd, &c, 1);
- 7f1:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
- 7f8:	00 
- 7f9:	89 44 24 04          	mov    %eax,0x4(%esp)
- 7fd:	89 34 24             	mov    %esi,(%esp)
- 800:	e8 6d fd ff ff       	call   572 <write>
+ 801:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+ 808:	00 
+ 809:	89 44 24 04          	mov    %eax,0x4(%esp)
+ 80d:	89 34 24             	mov    %esi,(%esp)
+ 810:	e8 5d fd ff ff       	call   572 <write>
         while(*s != 0){
- 805:	0f b6 07             	movzbl (%edi),%eax
- 808:	84 c0                	test   %al,%al
- 80a:	75 dc                	jne    7e8 <printf+0x148>
+ 815:	0f b6 07             	movzbl (%edi),%eax
+ 818:	84 c0                	test   %al,%al
+ 81a:	75 dc                	jne    7f8 <printf+0x148>
       state = 0;
- 80c:	31 ff                	xor    %edi,%edi
- 80e:	e9 d8 fe ff ff       	jmp    6eb <printf+0x4b>
- 813:	90                   	nop
- 814:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 81c:	31 ff                	xor    %edi,%edi
+ 81e:	e9 d8 fe ff ff       	jmp    6fb <printf+0x4b>
+ 823:	90                   	nop
+ 824:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   write(fd, &c, 1);
- 818:	8d 45 e5             	lea    -0x1b(%ebp),%eax
+ 828:	8d 45 e5             	lea    -0x1b(%ebp),%eax
       state = 0;
- 81b:	31 ff                	xor    %edi,%edi
+ 82b:	31 ff                	xor    %edi,%edi
   write(fd, &c, 1);
- 81d:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
- 824:	00 
- 825:	89 44 24 04          	mov    %eax,0x4(%esp)
- 829:	89 34 24             	mov    %esi,(%esp)
- 82c:	c6 45 e5 25          	movb   $0x25,-0x1b(%ebp)
- 830:	e8 3d fd ff ff       	call   572 <write>
- 835:	e9 b1 fe ff ff       	jmp    6eb <printf+0x4b>
- 83a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 82d:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+ 834:	00 
+ 835:	89 44 24 04          	mov    %eax,0x4(%esp)
+ 839:	89 34 24             	mov    %esi,(%esp)
+ 83c:	c6 45 e5 25          	movb   $0x25,-0x1b(%ebp)
+ 840:	e8 2d fd ff ff       	call   572 <write>
+ 845:	e9 b1 fe ff ff       	jmp    6fb <printf+0x4b>
+ 84a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         printint(fd, *ap, 10, 1);
- 840:	8b 45 d4             	mov    -0x2c(%ebp),%eax
- 843:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 850:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+ 853:	b9 0a 00 00 00       	mov    $0xa,%ecx
       state = 0;
- 848:	66 31 ff             	xor    %di,%di
+ 858:	66 31 ff             	xor    %di,%di
         printint(fd, *ap, 10, 1);
- 84b:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
- 852:	8b 10                	mov    (%eax),%edx
- 854:	89 f0                	mov    %esi,%eax
- 856:	e8 a5 fd ff ff       	call   600 <printint>
+ 85b:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+ 862:	8b 10                	mov    (%eax),%edx
+ 864:	89 f0                	mov    %esi,%eax
+ 866:	e8 a5 fd ff ff       	call   610 <printint>
         ap++;
- 85b:	83 45 d4 04          	addl   $0x4,-0x2c(%ebp)
- 85f:	e9 87 fe ff ff       	jmp    6eb <printf+0x4b>
+ 86b:	83 45 d4 04          	addl   $0x4,-0x2c(%ebp)
+ 86f:	e9 87 fe ff ff       	jmp    6fb <printf+0x4b>
         putc(fd, *ap);
- 864:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+ 874:	8b 45 d4             	mov    -0x2c(%ebp),%eax
       state = 0;
- 867:	31 ff                	xor    %edi,%edi
+ 877:	31 ff                	xor    %edi,%edi
         putc(fd, *ap);
- 869:	8b 00                	mov    (%eax),%eax
+ 879:	8b 00                	mov    (%eax),%eax
   write(fd, &c, 1);
- 86b:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
- 872:	00 
- 873:	89 34 24             	mov    %esi,(%esp)
+ 87b:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+ 882:	00 
+ 883:	89 34 24             	mov    %esi,(%esp)
         putc(fd, *ap);
- 876:	88 45 e4             	mov    %al,-0x1c(%ebp)
+ 886:	88 45 e4             	mov    %al,-0x1c(%ebp)
   write(fd, &c, 1);
- 879:	8d 45 e4             	lea    -0x1c(%ebp),%eax
- 87c:	89 44 24 04          	mov    %eax,0x4(%esp)
- 880:	e8 ed fc ff ff       	call   572 <write>
+ 889:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+ 88c:	89 44 24 04          	mov    %eax,0x4(%esp)
+ 890:	e8 dd fc ff ff       	call   572 <write>
         ap++;
- 885:	83 45 d4 04          	addl   $0x4,-0x2c(%ebp)
- 889:	e9 5d fe ff ff       	jmp    6eb <printf+0x4b>
- 88e:	66 90                	xchg   %ax,%ax
+ 895:	83 45 d4 04          	addl   $0x4,-0x2c(%ebp)
+ 899:	e9 5d fe ff ff       	jmp    6fb <printf+0x4b>
+ 89e:	66 90                	xchg   %ax,%ax
 
-00000890 <free>:
+000008a0 <free>:
 static Header base;
 static Header *freep;
 
 void
 free(void *ap)
 {
- 890:	55                   	push   %ebp
+ 8a0:	55                   	push   %ebp
   Header *bp, *p;
 
   bp = (Header*)ap - 1;
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 891:	a1 a0 0d 00 00       	mov    0xda0,%eax
+ 8a1:	a1 c0 0d 00 00       	mov    0xdc0,%eax
 {
- 896:	89 e5                	mov    %esp,%ebp
- 898:	57                   	push   %edi
- 899:	56                   	push   %esi
- 89a:	53                   	push   %ebx
- 89b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 8a6:	89 e5                	mov    %esp,%ebp
+ 8a8:	57                   	push   %edi
+ 8a9:	56                   	push   %esi
+ 8aa:	53                   	push   %ebx
+ 8ab:	8b 5d 08             	mov    0x8(%ebp),%ebx
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 89e:	8b 08                	mov    (%eax),%ecx
+ 8ae:	8b 08                	mov    (%eax),%ecx
   bp = (Header*)ap - 1;
- 8a0:	8d 53 f8             	lea    -0x8(%ebx),%edx
+ 8b0:	8d 53 f8             	lea    -0x8(%ebx),%edx
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 8a3:	39 d0                	cmp    %edx,%eax
- 8a5:	72 11                	jb     8b8 <free+0x28>
- 8a7:	90                   	nop
+ 8b3:	39 d0                	cmp    %edx,%eax
+ 8b5:	72 11                	jb     8c8 <free+0x28>
+ 8b7:	90                   	nop
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 8a8:	39 c8                	cmp    %ecx,%eax
- 8aa:	72 04                	jb     8b0 <free+0x20>
- 8ac:	39 ca                	cmp    %ecx,%edx
- 8ae:	72 10                	jb     8c0 <free+0x30>
- 8b0:	89 c8                	mov    %ecx,%eax
+ 8b8:	39 c8                	cmp    %ecx,%eax
+ 8ba:	72 04                	jb     8c0 <free+0x20>
+ 8bc:	39 ca                	cmp    %ecx,%edx
+ 8be:	72 10                	jb     8d0 <free+0x30>
+ 8c0:	89 c8                	mov    %ecx,%eax
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 8b2:	39 d0                	cmp    %edx,%eax
+ 8c2:	39 d0                	cmp    %edx,%eax
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 8b4:	8b 08                	mov    (%eax),%ecx
+ 8c4:	8b 08                	mov    (%eax),%ecx
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 8b6:	73 f0                	jae    8a8 <free+0x18>
- 8b8:	39 ca                	cmp    %ecx,%edx
- 8ba:	72 04                	jb     8c0 <free+0x30>
+ 8c6:	73 f0                	jae    8b8 <free+0x18>
+ 8c8:	39 ca                	cmp    %ecx,%edx
+ 8ca:	72 04                	jb     8d0 <free+0x30>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 8bc:	39 c8                	cmp    %ecx,%eax
- 8be:	72 f0                	jb     8b0 <free+0x20>
+ 8cc:	39 c8                	cmp    %ecx,%eax
+ 8ce:	72 f0                	jb     8c0 <free+0x20>
       break;
   if(bp + bp->s.size == p->s.ptr){
- 8c0:	8b 73 fc             	mov    -0x4(%ebx),%esi
- 8c3:	8d 3c f2             	lea    (%edx,%esi,8),%edi
- 8c6:	39 cf                	cmp    %ecx,%edi
- 8c8:	74 1e                	je     8e8 <free+0x58>
+ 8d0:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 8d3:	8d 3c f2             	lea    (%edx,%esi,8),%edi
+ 8d6:	39 cf                	cmp    %ecx,%edi
+ 8d8:	74 1e                	je     8f8 <free+0x58>
     bp->s.size += p->s.ptr->s.size;
     bp->s.ptr = p->s.ptr->s.ptr;
   } else
     bp->s.ptr = p->s.ptr;
- 8ca:	89 4b f8             	mov    %ecx,-0x8(%ebx)
+ 8da:	89 4b f8             	mov    %ecx,-0x8(%ebx)
   if(p + p->s.size == bp){
- 8cd:	8b 48 04             	mov    0x4(%eax),%ecx
- 8d0:	8d 34 c8             	lea    (%eax,%ecx,8),%esi
- 8d3:	39 f2                	cmp    %esi,%edx
- 8d5:	74 28                	je     8ff <free+0x6f>
+ 8dd:	8b 48 04             	mov    0x4(%eax),%ecx
+ 8e0:	8d 34 c8             	lea    (%eax,%ecx,8),%esi
+ 8e3:	39 f2                	cmp    %esi,%edx
+ 8e5:	74 28                	je     90f <free+0x6f>
     p->s.size += bp->s.size;
     p->s.ptr = bp->s.ptr;
   } else
     p->s.ptr = bp;
- 8d7:	89 10                	mov    %edx,(%eax)
+ 8e7:	89 10                	mov    %edx,(%eax)
   freep = p;
- 8d9:	a3 a0 0d 00 00       	mov    %eax,0xda0
+ 8e9:	a3 c0 0d 00 00       	mov    %eax,0xdc0
 }
- 8de:	5b                   	pop    %ebx
- 8df:	5e                   	pop    %esi
- 8e0:	5f                   	pop    %edi
- 8e1:	5d                   	pop    %ebp
- 8e2:	c3                   	ret    
- 8e3:	90                   	nop
- 8e4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 8ee:	5b                   	pop    %ebx
+ 8ef:	5e                   	pop    %esi
+ 8f0:	5f                   	pop    %edi
+ 8f1:	5d                   	pop    %ebp
+ 8f2:	c3                   	ret    
+ 8f3:	90                   	nop
+ 8f4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     bp->s.size += p->s.ptr->s.size;
- 8e8:	03 71 04             	add    0x4(%ecx),%esi
- 8eb:	89 73 fc             	mov    %esi,-0x4(%ebx)
+ 8f8:	03 71 04             	add    0x4(%ecx),%esi
+ 8fb:	89 73 fc             	mov    %esi,-0x4(%ebx)
     bp->s.ptr = p->s.ptr->s.ptr;
- 8ee:	8b 08                	mov    (%eax),%ecx
- 8f0:	8b 09                	mov    (%ecx),%ecx
- 8f2:	89 4b f8             	mov    %ecx,-0x8(%ebx)
+ 8fe:	8b 08                	mov    (%eax),%ecx
+ 900:	8b 09                	mov    (%ecx),%ecx
+ 902:	89 4b f8             	mov    %ecx,-0x8(%ebx)
   if(p + p->s.size == bp){
- 8f5:	8b 48 04             	mov    0x4(%eax),%ecx
- 8f8:	8d 34 c8             	lea    (%eax,%ecx,8),%esi
- 8fb:	39 f2                	cmp    %esi,%edx
- 8fd:	75 d8                	jne    8d7 <free+0x47>
+ 905:	8b 48 04             	mov    0x4(%eax),%ecx
+ 908:	8d 34 c8             	lea    (%eax,%ecx,8),%esi
+ 90b:	39 f2                	cmp    %esi,%edx
+ 90d:	75 d8                	jne    8e7 <free+0x47>
     p->s.size += bp->s.size;
- 8ff:	03 4b fc             	add    -0x4(%ebx),%ecx
+ 90f:	03 4b fc             	add    -0x4(%ebx),%ecx
   freep = p;
- 902:	a3 a0 0d 00 00       	mov    %eax,0xda0
+ 912:	a3 c0 0d 00 00       	mov    %eax,0xdc0
     p->s.size += bp->s.size;
- 907:	89 48 04             	mov    %ecx,0x4(%eax)
+ 917:	89 48 04             	mov    %ecx,0x4(%eax)
     p->s.ptr = bp->s.ptr;
- 90a:	8b 53 f8             	mov    -0x8(%ebx),%edx
- 90d:	89 10                	mov    %edx,(%eax)
+ 91a:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 91d:	89 10                	mov    %edx,(%eax)
 }
- 90f:	5b                   	pop    %ebx
- 910:	5e                   	pop    %esi
- 911:	5f                   	pop    %edi
- 912:	5d                   	pop    %ebp
- 913:	c3                   	ret    
- 914:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
- 91a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
-
-00000920 <malloc>:
+ 91f:	5b                   	pop    %ebx
+ 920:	5e                   	pop    %esi
+ 921:	5f                   	pop    %edi
+ 922:	5d                   	pop    %ebp
+ 923:	c3                   	ret    
+ 924:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 92a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+00000930 <malloc>:
   return freep;
 }
 
 void*
 malloc(uint nbytes)
 {
- 920:	55                   	push   %ebp
- 921:	89 e5                	mov    %esp,%ebp
- 923:	57                   	push   %edi
- 924:	56                   	push   %esi
- 925:	53                   	push   %ebx
- 926:	83 ec 1c             	sub    $0x1c,%esp
+ 930:	55                   	push   %ebp
+ 931:	89 e5                	mov    %esp,%ebp
+ 933:	57                   	push   %edi
+ 934:	56                   	push   %esi
+ 935:	53                   	push   %ebx
+ 936:	83 ec 1c             	sub    $0x1c,%esp
   Header *p, *prevp;
   uint nunits;
 
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 929:	8b 45 08             	mov    0x8(%ebp),%eax
+ 939:	8b 45 08             	mov    0x8(%ebp),%eax
   if((prevp = freep) == 0){
- 92c:	8b 1d a0 0d 00 00    	mov    0xda0,%ebx
+ 93c:	8b 1d c0 0d 00 00    	mov    0xdc0,%ebx
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 932:	8d 48 07             	lea    0x7(%eax),%ecx
- 935:	c1 e9 03             	shr    $0x3,%ecx
+ 942:	8d 48 07             	lea    0x7(%eax),%ecx
+ 945:	c1 e9 03             	shr    $0x3,%ecx
   if((prevp = freep) == 0){
- 938:	85 db                	test   %ebx,%ebx
+ 948:	85 db                	test   %ebx,%ebx
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 93a:	8d 71 01             	lea    0x1(%ecx),%esi
+ 94a:	8d 71 01             	lea    0x1(%ecx),%esi
   if((prevp = freep) == 0){
- 93d:	0f 84 9b 00 00 00    	je     9de <malloc+0xbe>
- 943:	8b 13                	mov    (%ebx),%edx
- 945:	8b 7a 04             	mov    0x4(%edx),%edi
+ 94d:	0f 84 9b 00 00 00    	je     9ee <malloc+0xbe>
+ 953:	8b 13                	mov    (%ebx),%edx
+ 955:	8b 7a 04             	mov    0x4(%edx),%edi
     base.s.ptr = freep = prevp = &base;
     base.s.size = 0;
   }
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
     if(p->s.size >= nunits){
- 948:	39 fe                	cmp    %edi,%esi
- 94a:	76 64                	jbe    9b0 <malloc+0x90>
- 94c:	8d 04 f5 00 00 00 00 	lea    0x0(,%esi,8),%eax
+ 958:	39 fe                	cmp    %edi,%esi
+ 95a:	76 64                	jbe    9c0 <malloc+0x90>
+ 95c:	8d 04 f5 00 00 00 00 	lea    0x0(,%esi,8),%eax
   if(nu < 4096)
- 953:	bb 00 80 00 00       	mov    $0x8000,%ebx
- 958:	89 45 e4             	mov    %eax,-0x1c(%ebp)
- 95b:	eb 0e                	jmp    96b <malloc+0x4b>
- 95d:	8d 76 00             	lea    0x0(%esi),%esi
+ 963:	bb 00 80 00 00       	mov    $0x8000,%ebx
+ 968:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+ 96b:	eb 0e                	jmp    97b <malloc+0x4b>
+ 96d:	8d 76 00             	lea    0x0(%esi),%esi
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 960:	8b 02                	mov    (%edx),%eax
+ 970:	8b 02                	mov    (%edx),%eax
     if(p->s.size >= nunits){
- 962:	8b 78 04             	mov    0x4(%eax),%edi
- 965:	39 fe                	cmp    %edi,%esi
- 967:	76 4f                	jbe    9b8 <malloc+0x98>
- 969:	89 c2                	mov    %eax,%edx
+ 972:	8b 78 04             	mov    0x4(%eax),%edi
+ 975:	39 fe                	cmp    %edi,%esi
+ 977:	76 4f                	jbe    9c8 <malloc+0x98>
+ 979:	89 c2                	mov    %eax,%edx
         p->s.size = nunits;
       }
       freep = prevp;
       return (void*)(p + 1);
     }
     if(p == freep)
- 96b:	3b 15 a0 0d 00 00    	cmp    0xda0,%edx
- 971:	75 ed                	jne    960 <malloc+0x40>
+ 97b:	3b 15 c0 0d 00 00    	cmp    0xdc0,%edx
+ 981:	75 ed                	jne    970 <malloc+0x40>
   if(nu < 4096)
- 973:	8b 45 e4             	mov    -0x1c(%ebp),%eax
- 976:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
- 97c:	bf 00 10 00 00       	mov    $0x1000,%edi
- 981:	0f 43 fe             	cmovae %esi,%edi
- 984:	0f 42 c3             	cmovb  %ebx,%eax
+ 983:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+ 986:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+ 98c:	bf 00 10 00 00       	mov    $0x1000,%edi
+ 991:	0f 43 fe             	cmovae %esi,%edi
+ 994:	0f 42 c3             	cmovb  %ebx,%eax
   p = sbrk(nu * sizeof(Header));
- 987:	89 04 24             	mov    %eax,(%esp)
- 98a:	e8 4b fc ff ff       	call   5da <sbrk>
+ 997:	89 04 24             	mov    %eax,(%esp)
+ 99a:	e8 3b fc ff ff       	call   5da <sbrk>
   if(p == (char*)-1)
- 98f:	83 f8 ff             	cmp    $0xffffffff,%eax
- 992:	74 18                	je     9ac <malloc+0x8c>
+ 99f:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 9a2:	74 18                	je     9bc <malloc+0x8c>
   hp->s.size = nu;
- 994:	89 78 04             	mov    %edi,0x4(%eax)
+ 9a4:	89 78 04             	mov    %edi,0x4(%eax)
   free((void*)(hp + 1));
- 997:	83 c0 08             	add    $0x8,%eax
- 99a:	89 04 24             	mov    %eax,(%esp)
- 99d:	e8 ee fe ff ff       	call   890 <free>
+ 9a7:	83 c0 08             	add    $0x8,%eax
+ 9aa:	89 04 24             	mov    %eax,(%esp)
+ 9ad:	e8 ee fe ff ff       	call   8a0 <free>
   return freep;
- 9a2:	8b 15 a0 0d 00 00    	mov    0xda0,%edx
+ 9b2:	8b 15 c0 0d 00 00    	mov    0xdc0,%edx
       if((p = morecore(nunits)) == 0)
- 9a8:	85 d2                	test   %edx,%edx
- 9aa:	75 b4                	jne    960 <malloc+0x40>
+ 9b8:	85 d2                	test   %edx,%edx
+ 9ba:	75 b4                	jne    970 <malloc+0x40>
         return 0;
- 9ac:	31 c0                	xor    %eax,%eax
- 9ae:	eb 20                	jmp    9d0 <malloc+0xb0>
+ 9bc:	31 c0                	xor    %eax,%eax
+ 9be:	eb 20                	jmp    9e0 <malloc+0xb0>
     if(p->s.size >= nunits){
- 9b0:	89 d0                	mov    %edx,%eax
- 9b2:	89 da                	mov    %ebx,%edx
- 9b4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 9c0:	89 d0                	mov    %edx,%eax
+ 9c2:	89 da                	mov    %ebx,%edx
+ 9c4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
       if(p->s.size == nunits)
- 9b8:	39 fe                	cmp    %edi,%esi
- 9ba:	74 1c                	je     9d8 <malloc+0xb8>
+ 9c8:	39 fe                	cmp    %edi,%esi
+ 9ca:	74 1c                	je     9e8 <malloc+0xb8>
         p->s.size -= nunits;
- 9bc:	29 f7                	sub    %esi,%edi
- 9be:	89 78 04             	mov    %edi,0x4(%eax)
+ 9cc:	29 f7                	sub    %esi,%edi
+ 9ce:	89 78 04             	mov    %edi,0x4(%eax)
         p += p->s.size;
- 9c1:	8d 04 f8             	lea    (%eax,%edi,8),%eax
+ 9d1:	8d 04 f8             	lea    (%eax,%edi,8),%eax
         p->s.size = nunits;
- 9c4:	89 70 04             	mov    %esi,0x4(%eax)
+ 9d4:	89 70 04             	mov    %esi,0x4(%eax)
       freep = prevp;
- 9c7:	89 15 a0 0d 00 00    	mov    %edx,0xda0
+ 9d7:	89 15 c0 0d 00 00    	mov    %edx,0xdc0
       return (void*)(p + 1);
- 9cd:	83 c0 08             	add    $0x8,%eax
+ 9dd:	83 c0 08             	add    $0x8,%eax
   }
 }
- 9d0:	83 c4 1c             	add    $0x1c,%esp
- 9d3:	5b                   	pop    %ebx
- 9d4:	5e                   	pop    %esi
- 9d5:	5f                   	pop    %edi
- 9d6:	5d                   	pop    %ebp
- 9d7:	c3                   	ret    
+ 9e0:	83 c4 1c             	add    $0x1c,%esp
+ 9e3:	5b                   	pop    %ebx
+ 9e4:	5e                   	pop    %esi
+ 9e5:	5f                   	pop    %edi
+ 9e6:	5d                   	pop    %ebp
+ 9e7:	c3                   	ret    
         prevp->s.ptr = p->s.ptr;
- 9d8:	8b 08                	mov    (%eax),%ecx
- 9da:	89 0a                	mov    %ecx,(%edx)
- 9dc:	eb e9                	jmp    9c7 <malloc+0xa7>
+ 9e8:	8b 08                	mov    (%eax),%ecx
+ 9ea:	89 0a                	mov    %ecx,(%edx)
+ 9ec:	eb e9                	jmp    9d7 <malloc+0xa7>
     base.s.ptr = freep = prevp = &base;
- 9de:	c7 05 a0 0d 00 00 a4 	movl   $0xda4,0xda0
- 9e5:	0d 00 00 
+ 9ee:	c7 05 c0 0d 00 00 c4 	movl   $0xdc4,0xdc0
+ 9f5:	0d 00 00 
     base.s.size = 0;
- 9e8:	ba a4 0d 00 00       	mov    $0xda4,%edx
+ 9f8:	ba c4 0d 00 00       	mov    $0xdc4,%edx
     base.s.ptr = freep = prevp = &base;
- 9ed:	c7 05 a4 0d 00 00 a4 	movl   $0xda4,0xda4
- 9f4:	0d 00 00 
+ 9fd:	c7 05 c4 0d 00 00 c4 	movl   $0xdc4,0xdc4
+ a04:	0d 00 00 
     base.s.size = 0;
- 9f7:	c7 05 a8 0d 00 00 00 	movl   $0x0,0xda8
- 9fe:	00 00 00 
- a01:	e9 46 ff ff ff       	jmp    94c <malloc+0x2c>
+ a07:	c7 05 c8 0d 00 00 00 	movl   $0x0,0xdc8
+ a0e:	00 00 00 
+ a11:	e9 46 ff ff ff       	jmp    95c <malloc+0x2c>
diff --git a/grep.o b/grep.o
index cd65b20..f726f50 100644
Binary files a/grep.o and b/grep.o differ
diff --git a/grep.sym b/grep.sym
index 82760b5..33bf6f0 100644
--- a/grep.sym
+++ b/grep.sym
@@ -1,7 +1,7 @@
 00000000 .text
-00000a08 .rodata
-00000a58 .eh_frame
-00000da0 .bss
+00000a18 .rodata
+00000a68 .eh_frame
+00000dc0 .bss
 00000000 .comment
 00000000 .debug_aranges
 00000000 .debug_info
@@ -13,27 +13,29 @@
 00000000 grep.c
 00000000 ulib.c
 00000000 printf.c
-00000600 printint
-00000a45 digits.1358
+00000610 printint
+00000a55 digits.1362
 00000000 umalloc.c
-00000da0 freep
-00000da4 base
+00000dc0 freep
+00000dc4 base
 00000330 strcpy
 000005f2 waitpid
-000006a0 printf
+000006b0 printf
 00000520 memmove
 00000140 matchhere
 0000059a mknod
 00000440 gets
 000005d2 getpid
 00000220 grep
-00000920 malloc
+00000930 malloc
 000005e2 sleep
 00000562 pipe
+000005fa setPrior
 00000572 write
 000005aa fstat
 00000582 kill
 000005c2 chdir
+00000602 getPrior
 0000058a exec
 0000055a wait
 0000056a read
@@ -41,16 +43,16 @@
 0000054a fork
 000005da sbrk
 000005ea uptime
-00000d98 __bss_start
+00000da8 __bss_start
 000003e0 memset
 00000000 main
 000000e0 matchstar
 00000360 strcmp
 000005ca dup
-00000dc0 buf
+00000de0 buf
 000004a0 stat
-00000d98 _edata
-000011c0 _end
+00000da8 _edata
+000011e0 _end
 000001d0 match
 000005b2 link
 00000552 exit
@@ -60,4 +62,4 @@
 00000400 strchr
 000005ba mkdir
 0000057a close
-00000890 free
+000008a0 free
diff --git a/ide.o b/ide.o
index 2c43f56..c94a924 100644
Binary files a/ide.o and b/ide.o differ
diff --git a/init.asm b/init.asm
index 12d5b7a..00e6057 100644
--- a/init.asm
+++ b/init.asm
@@ -21,7 +21,7 @@ main(void)
   if(open("console", O_RDWR) < 0){
    a:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
   11:	00 
-  12:	c7 04 24 f6 07 00 00 	movl   $0x7f6,(%esp)
+  12:	c7 04 24 06 08 00 00 	movl   $0x806,(%esp)
   19:	e8 64 03 00 00       	call   382 <open>
   1e:	85 c0                	test   %eax,%eax
   20:	0f 88 c0 00 00 00    	js     e6 <main+0xe6>
@@ -38,10 +38,10 @@ main(void)
 
   for(;;){
     printf(1, "init: starting sh\n");
-  40:	c7 44 24 04 fe 07 00 	movl   $0x7fe,0x4(%esp)
+  40:	c7 44 24 04 0e 08 00 	movl   $0x80e,0x4(%esp)
   47:	00 
   48:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-  4f:	e8 3c 04 00 00       	call   490 <printf>
+  4f:	e8 4c 04 00 00       	call   4a0 <printf>
     pid = fork();
   54:	e8 e1 02 00 00       	call   33a <fork>
     if(pid < 0){
@@ -69,29 +69,29 @@ main(void)
   78:	39 d8                	cmp    %ebx,%eax
   7a:	74 c4                	je     40 <main+0x40>
       printf(1, "zombie!\n");
-  7c:	c7 44 24 04 3d 08 00 	movl   $0x83d,0x4(%esp)
+  7c:	c7 44 24 04 4d 08 00 	movl   $0x84d,0x4(%esp)
   83:	00 
   84:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-  8b:	e8 00 04 00 00       	call   490 <printf>
+  8b:	e8 10 04 00 00       	call   4a0 <printf>
   90:	eb d6                	jmp    68 <main+0x68>
       printf(1, "init: fork failed\n");
-  92:	c7 44 24 04 11 08 00 	movl   $0x811,0x4(%esp)
+  92:	c7 44 24 04 21 08 00 	movl   $0x821,0x4(%esp)
   99:	00 
   9a:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-  a1:	e8 ea 03 00 00       	call   490 <printf>
+  a1:	e8 fa 03 00 00       	call   4a0 <printf>
       exit(0);
   a6:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
   ad:	e8 90 02 00 00       	call   342 <exit>
       exec("sh", argv);
-  b2:	c7 44 24 04 c4 0a 00 	movl   $0xac4,0x4(%esp)
+  b2:	c7 44 24 04 d4 0a 00 	movl   $0xad4,0x4(%esp)
   b9:	00 
-  ba:	c7 04 24 24 08 00 00 	movl   $0x824,(%esp)
+  ba:	c7 04 24 34 08 00 00 	movl   $0x834,(%esp)
   c1:	e8 b4 02 00 00       	call   37a <exec>
       printf(1, "init: exec sh failed\n");
-  c6:	c7 44 24 04 27 08 00 	movl   $0x827,0x4(%esp)
+  c6:	c7 44 24 04 37 08 00 	movl   $0x837,0x4(%esp)
   cd:	00 
   ce:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-  d5:	e8 b6 03 00 00       	call   490 <printf>
+  d5:	e8 c6 03 00 00       	call   4a0 <printf>
       exit(0);
   da:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
   e1:	e8 5c 02 00 00       	call   342 <exit>
@@ -100,12 +100,12 @@ main(void)
   ed:	00 
   ee:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
   f5:	00 
-  f6:	c7 04 24 f6 07 00 00 	movl   $0x7f6,(%esp)
+  f6:	c7 04 24 06 08 00 00 	movl   $0x806,(%esp)
   fd:	e8 88 02 00 00       	call   38a <mknod>
     open("console", O_RDWR);
  102:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
  109:	00 
- 10a:	c7 04 24 f6 07 00 00 	movl   $0x7f6,(%esp)
+ 10a:	c7 04 24 06 08 00 00 	movl   $0x806,(%esp)
  111:	e8 6c 02 00 00       	call   382 <open>
  116:	e9 0b ff ff ff       	jmp    26 <main+0x26>
  11b:	66 90                	xchg   %ax,%ax
@@ -626,580 +626,592 @@ SYSCALL(uptime)
  3e1:	c3                   	ret    
 
 000003e2 <waitpid>:
+SYSCALL(waitpid)
  3e2:	b8 16 00 00 00       	mov    $0x16,%eax
  3e7:	cd 40                	int    $0x40
  3e9:	c3                   	ret    
- 3ea:	66 90                	xchg   %ax,%ax
- 3ec:	66 90                	xchg   %ax,%ax
- 3ee:	66 90                	xchg   %ax,%ax
 
-000003f0 <printint>:
+000003ea <setPrior>:
+SYSCALL(setPrior)
+ 3ea:	b8 17 00 00 00       	mov    $0x17,%eax
+ 3ef:	cd 40                	int    $0x40
+ 3f1:	c3                   	ret    
+
+000003f2 <getPrior>:
+ 3f2:	b8 18 00 00 00       	mov    $0x18,%eax
+ 3f7:	cd 40                	int    $0x40
+ 3f9:	c3                   	ret    
+ 3fa:	66 90                	xchg   %ax,%ax
+ 3fc:	66 90                	xchg   %ax,%ax
+ 3fe:	66 90                	xchg   %ax,%ax
+
+00000400 <printint>:
   write(fd, &c, 1);
 }
 
 static void
 printint(int fd, int xx, int base, int sgn)
 {
- 3f0:	55                   	push   %ebp
- 3f1:	89 e5                	mov    %esp,%ebp
- 3f3:	57                   	push   %edi
- 3f4:	56                   	push   %esi
- 3f5:	89 c6                	mov    %eax,%esi
- 3f7:	53                   	push   %ebx
- 3f8:	83 ec 4c             	sub    $0x4c,%esp
+ 400:	55                   	push   %ebp
+ 401:	89 e5                	mov    %esp,%ebp
+ 403:	57                   	push   %edi
+ 404:	56                   	push   %esi
+ 405:	89 c6                	mov    %eax,%esi
+ 407:	53                   	push   %ebx
+ 408:	83 ec 4c             	sub    $0x4c,%esp
   char buf[16];
   int i, neg;
   uint x;
 
   neg = 0;
   if(sgn && xx < 0){
- 3fb:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 3fe:	85 db                	test   %ebx,%ebx
- 400:	74 09                	je     40b <printint+0x1b>
- 402:	89 d0                	mov    %edx,%eax
- 404:	c1 e8 1f             	shr    $0x1f,%eax
- 407:	84 c0                	test   %al,%al
- 409:	75 75                	jne    480 <printint+0x90>
+ 40b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 40e:	85 db                	test   %ebx,%ebx
+ 410:	74 09                	je     41b <printint+0x1b>
+ 412:	89 d0                	mov    %edx,%eax
+ 414:	c1 e8 1f             	shr    $0x1f,%eax
+ 417:	84 c0                	test   %al,%al
+ 419:	75 75                	jne    490 <printint+0x90>
     neg = 1;
     x = -xx;
   } else {
     x = xx;
- 40b:	89 d0                	mov    %edx,%eax
+ 41b:	89 d0                	mov    %edx,%eax
   neg = 0;
- 40d:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
- 414:	89 75 c0             	mov    %esi,-0x40(%ebp)
+ 41d:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
+ 424:	89 75 c0             	mov    %esi,-0x40(%ebp)
   }
 
   i = 0;
- 417:	31 ff                	xor    %edi,%edi
- 419:	89 ce                	mov    %ecx,%esi
- 41b:	8d 5d d7             	lea    -0x29(%ebp),%ebx
- 41e:	eb 02                	jmp    422 <printint+0x32>
+ 427:	31 ff                	xor    %edi,%edi
+ 429:	89 ce                	mov    %ecx,%esi
+ 42b:	8d 5d d7             	lea    -0x29(%ebp),%ebx
+ 42e:	eb 02                	jmp    432 <printint+0x32>
   do{
     buf[i++] = digits[x % base];
- 420:	89 cf                	mov    %ecx,%edi
- 422:	31 d2                	xor    %edx,%edx
- 424:	f7 f6                	div    %esi
- 426:	8d 4f 01             	lea    0x1(%edi),%ecx
- 429:	0f b6 92 4d 08 00 00 	movzbl 0x84d(%edx),%edx
+ 430:	89 cf                	mov    %ecx,%edi
+ 432:	31 d2                	xor    %edx,%edx
+ 434:	f7 f6                	div    %esi
+ 436:	8d 4f 01             	lea    0x1(%edi),%ecx
+ 439:	0f b6 92 5d 08 00 00 	movzbl 0x85d(%edx),%edx
   }while((x /= base) != 0);
- 430:	85 c0                	test   %eax,%eax
+ 440:	85 c0                	test   %eax,%eax
     buf[i++] = digits[x % base];
- 432:	88 14 0b             	mov    %dl,(%ebx,%ecx,1)
+ 442:	88 14 0b             	mov    %dl,(%ebx,%ecx,1)
   }while((x /= base) != 0);
- 435:	75 e9                	jne    420 <printint+0x30>
+ 445:	75 e9                	jne    430 <printint+0x30>
   if(neg)
- 437:	8b 55 c4             	mov    -0x3c(%ebp),%edx
+ 447:	8b 55 c4             	mov    -0x3c(%ebp),%edx
     buf[i++] = digits[x % base];
- 43a:	89 c8                	mov    %ecx,%eax
- 43c:	8b 75 c0             	mov    -0x40(%ebp),%esi
+ 44a:	89 c8                	mov    %ecx,%eax
+ 44c:	8b 75 c0             	mov    -0x40(%ebp),%esi
   if(neg)
- 43f:	85 d2                	test   %edx,%edx
- 441:	74 08                	je     44b <printint+0x5b>
+ 44f:	85 d2                	test   %edx,%edx
+ 451:	74 08                	je     45b <printint+0x5b>
     buf[i++] = '-';
- 443:	8d 4f 02             	lea    0x2(%edi),%ecx
- 446:	c6 44 05 d8 2d       	movb   $0x2d,-0x28(%ebp,%eax,1)
+ 453:	8d 4f 02             	lea    0x2(%edi),%ecx
+ 456:	c6 44 05 d8 2d       	movb   $0x2d,-0x28(%ebp,%eax,1)
 
   while(--i >= 0)
- 44b:	8d 79 ff             	lea    -0x1(%ecx),%edi
- 44e:	66 90                	xchg   %ax,%ax
- 450:	0f b6 44 3d d8       	movzbl -0x28(%ebp,%edi,1),%eax
- 455:	83 ef 01             	sub    $0x1,%edi
+ 45b:	8d 79 ff             	lea    -0x1(%ecx),%edi
+ 45e:	66 90                	xchg   %ax,%ax
+ 460:	0f b6 44 3d d8       	movzbl -0x28(%ebp,%edi,1),%eax
+ 465:	83 ef 01             	sub    $0x1,%edi
   write(fd, &c, 1);
- 458:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
- 45f:	00 
- 460:	89 5c 24 04          	mov    %ebx,0x4(%esp)
- 464:	89 34 24             	mov    %esi,(%esp)
- 467:	88 45 d7             	mov    %al,-0x29(%ebp)
- 46a:	e8 f3 fe ff ff       	call   362 <write>
+ 468:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+ 46f:	00 
+ 470:	89 5c 24 04          	mov    %ebx,0x4(%esp)
+ 474:	89 34 24             	mov    %esi,(%esp)
+ 477:	88 45 d7             	mov    %al,-0x29(%ebp)
+ 47a:	e8 e3 fe ff ff       	call   362 <write>
   while(--i >= 0)
- 46f:	83 ff ff             	cmp    $0xffffffff,%edi
- 472:	75 dc                	jne    450 <printint+0x60>
+ 47f:	83 ff ff             	cmp    $0xffffffff,%edi
+ 482:	75 dc                	jne    460 <printint+0x60>
     putc(fd, buf[i]);
 }
- 474:	83 c4 4c             	add    $0x4c,%esp
- 477:	5b                   	pop    %ebx
- 478:	5e                   	pop    %esi
- 479:	5f                   	pop    %edi
- 47a:	5d                   	pop    %ebp
- 47b:	c3                   	ret    
- 47c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 484:	83 c4 4c             	add    $0x4c,%esp
+ 487:	5b                   	pop    %ebx
+ 488:	5e                   	pop    %esi
+ 489:	5f                   	pop    %edi
+ 48a:	5d                   	pop    %ebp
+ 48b:	c3                   	ret    
+ 48c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     x = -xx;
- 480:	89 d0                	mov    %edx,%eax
- 482:	f7 d8                	neg    %eax
+ 490:	89 d0                	mov    %edx,%eax
+ 492:	f7 d8                	neg    %eax
     neg = 1;
- 484:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
- 48b:	eb 87                	jmp    414 <printint+0x24>
- 48d:	8d 76 00             	lea    0x0(%esi),%esi
+ 494:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
+ 49b:	eb 87                	jmp    424 <printint+0x24>
+ 49d:	8d 76 00             	lea    0x0(%esi),%esi
 
-00000490 <printf>:
+000004a0 <printf>:
 
 // Print to the given fd. Only understands %d, %x, %p, %s.
 void
 printf(int fd, const char *fmt, ...)
 {
- 490:	55                   	push   %ebp
- 491:	89 e5                	mov    %esp,%ebp
- 493:	57                   	push   %edi
+ 4a0:	55                   	push   %ebp
+ 4a1:	89 e5                	mov    %esp,%ebp
+ 4a3:	57                   	push   %edi
   char *s;
   int c, i, state;
   uint *ap;
 
   state = 0;
- 494:	31 ff                	xor    %edi,%edi
+ 4a4:	31 ff                	xor    %edi,%edi
 {
- 496:	56                   	push   %esi
- 497:	53                   	push   %ebx
- 498:	83 ec 3c             	sub    $0x3c,%esp
+ 4a6:	56                   	push   %esi
+ 4a7:	53                   	push   %ebx
+ 4a8:	83 ec 3c             	sub    $0x3c,%esp
   ap = (uint*)(void*)&fmt + 1;
   for(i = 0; fmt[i]; i++){
- 49b:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+ 4ab:	8b 5d 0c             	mov    0xc(%ebp),%ebx
   ap = (uint*)(void*)&fmt + 1;
- 49e:	8d 45 10             	lea    0x10(%ebp),%eax
+ 4ae:	8d 45 10             	lea    0x10(%ebp),%eax
 {
- 4a1:	8b 75 08             	mov    0x8(%ebp),%esi
+ 4b1:	8b 75 08             	mov    0x8(%ebp),%esi
   ap = (uint*)(void*)&fmt + 1;
- 4a4:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ 4b4:	89 45 d4             	mov    %eax,-0x2c(%ebp)
   for(i = 0; fmt[i]; i++){
- 4a7:	0f b6 13             	movzbl (%ebx),%edx
- 4aa:	83 c3 01             	add    $0x1,%ebx
- 4ad:	84 d2                	test   %dl,%dl
- 4af:	75 39                	jne    4ea <printf+0x5a>
- 4b1:	e9 c2 00 00 00       	jmp    578 <printf+0xe8>
- 4b6:	66 90                	xchg   %ax,%ax
+ 4b7:	0f b6 13             	movzbl (%ebx),%edx
+ 4ba:	83 c3 01             	add    $0x1,%ebx
+ 4bd:	84 d2                	test   %dl,%dl
+ 4bf:	75 39                	jne    4fa <printf+0x5a>
+ 4c1:	e9 c2 00 00 00       	jmp    588 <printf+0xe8>
+ 4c6:	66 90                	xchg   %ax,%ax
     c = fmt[i] & 0xff;
     if(state == 0){
       if(c == '%'){
- 4b8:	83 fa 25             	cmp    $0x25,%edx
- 4bb:	0f 84 bf 00 00 00    	je     580 <printf+0xf0>
+ 4c8:	83 fa 25             	cmp    $0x25,%edx
+ 4cb:	0f 84 bf 00 00 00    	je     590 <printf+0xf0>
   write(fd, &c, 1);
- 4c1:	8d 45 e2             	lea    -0x1e(%ebp),%eax
- 4c4:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
- 4cb:	00 
- 4cc:	89 44 24 04          	mov    %eax,0x4(%esp)
- 4d0:	89 34 24             	mov    %esi,(%esp)
+ 4d1:	8d 45 e2             	lea    -0x1e(%ebp),%eax
+ 4d4:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+ 4db:	00 
+ 4dc:	89 44 24 04          	mov    %eax,0x4(%esp)
+ 4e0:	89 34 24             	mov    %esi,(%esp)
         state = '%';
       } else {
         putc(fd, c);
- 4d3:	88 55 e2             	mov    %dl,-0x1e(%ebp)
+ 4e3:	88 55 e2             	mov    %dl,-0x1e(%ebp)
   write(fd, &c, 1);
- 4d6:	e8 87 fe ff ff       	call   362 <write>
- 4db:	83 c3 01             	add    $0x1,%ebx
+ 4e6:	e8 77 fe ff ff       	call   362 <write>
+ 4eb:	83 c3 01             	add    $0x1,%ebx
   for(i = 0; fmt[i]; i++){
- 4de:	0f b6 53 ff          	movzbl -0x1(%ebx),%edx
- 4e2:	84 d2                	test   %dl,%dl
- 4e4:	0f 84 8e 00 00 00    	je     578 <printf+0xe8>
+ 4ee:	0f b6 53 ff          	movzbl -0x1(%ebx),%edx
+ 4f2:	84 d2                	test   %dl,%dl
+ 4f4:	0f 84 8e 00 00 00    	je     588 <printf+0xe8>
     if(state == 0){
- 4ea:	85 ff                	test   %edi,%edi
+ 4fa:	85 ff                	test   %edi,%edi
     c = fmt[i] & 0xff;
- 4ec:	0f be c2             	movsbl %dl,%eax
+ 4fc:	0f be c2             	movsbl %dl,%eax
     if(state == 0){
- 4ef:	74 c7                	je     4b8 <printf+0x28>
+ 4ff:	74 c7                	je     4c8 <printf+0x28>
       }
     } else if(state == '%'){
- 4f1:	83 ff 25             	cmp    $0x25,%edi
- 4f4:	75 e5                	jne    4db <printf+0x4b>
+ 501:	83 ff 25             	cmp    $0x25,%edi
+ 504:	75 e5                	jne    4eb <printf+0x4b>
       if(c == 'd'){
- 4f6:	83 fa 64             	cmp    $0x64,%edx
- 4f9:	0f 84 31 01 00 00    	je     630 <printf+0x1a0>
+ 506:	83 fa 64             	cmp    $0x64,%edx
+ 509:	0f 84 31 01 00 00    	je     640 <printf+0x1a0>
         printint(fd, *ap, 10, 1);
         ap++;
       } else if(c == 'x' || c == 'p'){
- 4ff:	25 f7 00 00 00       	and    $0xf7,%eax
- 504:	83 f8 70             	cmp    $0x70,%eax
- 507:	0f 84 83 00 00 00    	je     590 <printf+0x100>
+ 50f:	25 f7 00 00 00       	and    $0xf7,%eax
+ 514:	83 f8 70             	cmp    $0x70,%eax
+ 517:	0f 84 83 00 00 00    	je     5a0 <printf+0x100>
         printint(fd, *ap, 16, 0);
         ap++;
       } else if(c == 's'){
- 50d:	83 fa 73             	cmp    $0x73,%edx
- 510:	0f 84 a2 00 00 00    	je     5b8 <printf+0x128>
+ 51d:	83 fa 73             	cmp    $0x73,%edx
+ 520:	0f 84 a2 00 00 00    	je     5c8 <printf+0x128>
           s = "(null)";
         while(*s != 0){
           putc(fd, *s);
           s++;
         }
       } else if(c == 'c'){
- 516:	83 fa 63             	cmp    $0x63,%edx
- 519:	0f 84 35 01 00 00    	je     654 <printf+0x1c4>
+ 526:	83 fa 63             	cmp    $0x63,%edx
+ 529:	0f 84 35 01 00 00    	je     664 <printf+0x1c4>
         putc(fd, *ap);
         ap++;
       } else if(c == '%'){
- 51f:	83 fa 25             	cmp    $0x25,%edx
- 522:	0f 84 e0 00 00 00    	je     608 <printf+0x178>
+ 52f:	83 fa 25             	cmp    $0x25,%edx
+ 532:	0f 84 e0 00 00 00    	je     618 <printf+0x178>
   write(fd, &c, 1);
- 528:	8d 45 e6             	lea    -0x1a(%ebp),%eax
- 52b:	83 c3 01             	add    $0x1,%ebx
- 52e:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
- 535:	00 
+ 538:	8d 45 e6             	lea    -0x1a(%ebp),%eax
+ 53b:	83 c3 01             	add    $0x1,%ebx
+ 53e:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+ 545:	00 
       } else {
         // Unknown % sequence.  Print it to draw attention.
         putc(fd, '%');
         putc(fd, c);
       }
       state = 0;
- 536:	31 ff                	xor    %edi,%edi
+ 546:	31 ff                	xor    %edi,%edi
   write(fd, &c, 1);
- 538:	89 44 24 04          	mov    %eax,0x4(%esp)
- 53c:	89 34 24             	mov    %esi,(%esp)
- 53f:	89 55 d0             	mov    %edx,-0x30(%ebp)
- 542:	c6 45 e6 25          	movb   $0x25,-0x1a(%ebp)
- 546:	e8 17 fe ff ff       	call   362 <write>
+ 548:	89 44 24 04          	mov    %eax,0x4(%esp)
+ 54c:	89 34 24             	mov    %esi,(%esp)
+ 54f:	89 55 d0             	mov    %edx,-0x30(%ebp)
+ 552:	c6 45 e6 25          	movb   $0x25,-0x1a(%ebp)
+ 556:	e8 07 fe ff ff       	call   362 <write>
         putc(fd, c);
- 54b:	8b 55 d0             	mov    -0x30(%ebp),%edx
+ 55b:	8b 55 d0             	mov    -0x30(%ebp),%edx
   write(fd, &c, 1);
- 54e:	8d 45 e7             	lea    -0x19(%ebp),%eax
- 551:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
- 558:	00 
- 559:	89 44 24 04          	mov    %eax,0x4(%esp)
- 55d:	89 34 24             	mov    %esi,(%esp)
+ 55e:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 561:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+ 568:	00 
+ 569:	89 44 24 04          	mov    %eax,0x4(%esp)
+ 56d:	89 34 24             	mov    %esi,(%esp)
         putc(fd, c);
- 560:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 570:	88 55 e7             	mov    %dl,-0x19(%ebp)
   write(fd, &c, 1);
- 563:	e8 fa fd ff ff       	call   362 <write>
+ 573:	e8 ea fd ff ff       	call   362 <write>
   for(i = 0; fmt[i]; i++){
- 568:	0f b6 53 ff          	movzbl -0x1(%ebx),%edx
- 56c:	84 d2                	test   %dl,%dl
- 56e:	0f 85 76 ff ff ff    	jne    4ea <printf+0x5a>
- 574:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 578:	0f b6 53 ff          	movzbl -0x1(%ebx),%edx
+ 57c:	84 d2                	test   %dl,%dl
+ 57e:	0f 85 76 ff ff ff    	jne    4fa <printf+0x5a>
+ 584:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     }
   }
 }
- 578:	83 c4 3c             	add    $0x3c,%esp
- 57b:	5b                   	pop    %ebx
- 57c:	5e                   	pop    %esi
- 57d:	5f                   	pop    %edi
- 57e:	5d                   	pop    %ebp
- 57f:	c3                   	ret    
+ 588:	83 c4 3c             	add    $0x3c,%esp
+ 58b:	5b                   	pop    %ebx
+ 58c:	5e                   	pop    %esi
+ 58d:	5f                   	pop    %edi
+ 58e:	5d                   	pop    %ebp
+ 58f:	c3                   	ret    
         state = '%';
- 580:	bf 25 00 00 00       	mov    $0x25,%edi
- 585:	e9 51 ff ff ff       	jmp    4db <printf+0x4b>
- 58a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 590:	bf 25 00 00 00       	mov    $0x25,%edi
+ 595:	e9 51 ff ff ff       	jmp    4eb <printf+0x4b>
+ 59a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         printint(fd, *ap, 16, 0);
- 590:	8b 45 d4             	mov    -0x2c(%ebp),%eax
- 593:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 5a0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+ 5a3:	b9 10 00 00 00       	mov    $0x10,%ecx
       state = 0;
- 598:	31 ff                	xor    %edi,%edi
+ 5a8:	31 ff                	xor    %edi,%edi
         printint(fd, *ap, 16, 0);
- 59a:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
- 5a1:	8b 10                	mov    (%eax),%edx
- 5a3:	89 f0                	mov    %esi,%eax
- 5a5:	e8 46 fe ff ff       	call   3f0 <printint>
+ 5aa:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+ 5b1:	8b 10                	mov    (%eax),%edx
+ 5b3:	89 f0                	mov    %esi,%eax
+ 5b5:	e8 46 fe ff ff       	call   400 <printint>
         ap++;
- 5aa:	83 45 d4 04          	addl   $0x4,-0x2c(%ebp)
- 5ae:	e9 28 ff ff ff       	jmp    4db <printf+0x4b>
- 5b3:	90                   	nop
- 5b4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 5ba:	83 45 d4 04          	addl   $0x4,-0x2c(%ebp)
+ 5be:	e9 28 ff ff ff       	jmp    4eb <printf+0x4b>
+ 5c3:	90                   	nop
+ 5c4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
         s = (char*)*ap;
- 5b8:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+ 5c8:	8b 45 d4             	mov    -0x2c(%ebp),%eax
         ap++;
- 5bb:	83 45 d4 04          	addl   $0x4,-0x2c(%ebp)
+ 5cb:	83 45 d4 04          	addl   $0x4,-0x2c(%ebp)
         s = (char*)*ap;
- 5bf:	8b 38                	mov    (%eax),%edi
+ 5cf:	8b 38                	mov    (%eax),%edi
           s = "(null)";
- 5c1:	b8 46 08 00 00       	mov    $0x846,%eax
- 5c6:	85 ff                	test   %edi,%edi
- 5c8:	0f 44 f8             	cmove  %eax,%edi
+ 5d1:	b8 56 08 00 00       	mov    $0x856,%eax
+ 5d6:	85 ff                	test   %edi,%edi
+ 5d8:	0f 44 f8             	cmove  %eax,%edi
         while(*s != 0){
- 5cb:	0f b6 07             	movzbl (%edi),%eax
- 5ce:	84 c0                	test   %al,%al
- 5d0:	74 2a                	je     5fc <printf+0x16c>
- 5d2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
- 5d8:	88 45 e3             	mov    %al,-0x1d(%ebp)
+ 5db:	0f b6 07             	movzbl (%edi),%eax
+ 5de:	84 c0                	test   %al,%al
+ 5e0:	74 2a                	je     60c <printf+0x16c>
+ 5e2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 5e8:	88 45 e3             	mov    %al,-0x1d(%ebp)
   write(fd, &c, 1);
- 5db:	8d 45 e3             	lea    -0x1d(%ebp),%eax
+ 5eb:	8d 45 e3             	lea    -0x1d(%ebp),%eax
           s++;
- 5de:	83 c7 01             	add    $0x1,%edi
+ 5ee:	83 c7 01             	add    $0x1,%edi
   write(fd, &c, 1);
- 5e1:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
- 5e8:	00 
- 5e9:	89 44 24 04          	mov    %eax,0x4(%esp)
- 5ed:	89 34 24             	mov    %esi,(%esp)
- 5f0:	e8 6d fd ff ff       	call   362 <write>
+ 5f1:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+ 5f8:	00 
+ 5f9:	89 44 24 04          	mov    %eax,0x4(%esp)
+ 5fd:	89 34 24             	mov    %esi,(%esp)
+ 600:	e8 5d fd ff ff       	call   362 <write>
         while(*s != 0){
- 5f5:	0f b6 07             	movzbl (%edi),%eax
- 5f8:	84 c0                	test   %al,%al
- 5fa:	75 dc                	jne    5d8 <printf+0x148>
+ 605:	0f b6 07             	movzbl (%edi),%eax
+ 608:	84 c0                	test   %al,%al
+ 60a:	75 dc                	jne    5e8 <printf+0x148>
       state = 0;
- 5fc:	31 ff                	xor    %edi,%edi
- 5fe:	e9 d8 fe ff ff       	jmp    4db <printf+0x4b>
- 603:	90                   	nop
- 604:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 60c:	31 ff                	xor    %edi,%edi
+ 60e:	e9 d8 fe ff ff       	jmp    4eb <printf+0x4b>
+ 613:	90                   	nop
+ 614:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   write(fd, &c, 1);
- 608:	8d 45 e5             	lea    -0x1b(%ebp),%eax
+ 618:	8d 45 e5             	lea    -0x1b(%ebp),%eax
       state = 0;
- 60b:	31 ff                	xor    %edi,%edi
+ 61b:	31 ff                	xor    %edi,%edi
   write(fd, &c, 1);
- 60d:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
- 614:	00 
- 615:	89 44 24 04          	mov    %eax,0x4(%esp)
- 619:	89 34 24             	mov    %esi,(%esp)
- 61c:	c6 45 e5 25          	movb   $0x25,-0x1b(%ebp)
- 620:	e8 3d fd ff ff       	call   362 <write>
- 625:	e9 b1 fe ff ff       	jmp    4db <printf+0x4b>
- 62a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 61d:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+ 624:	00 
+ 625:	89 44 24 04          	mov    %eax,0x4(%esp)
+ 629:	89 34 24             	mov    %esi,(%esp)
+ 62c:	c6 45 e5 25          	movb   $0x25,-0x1b(%ebp)
+ 630:	e8 2d fd ff ff       	call   362 <write>
+ 635:	e9 b1 fe ff ff       	jmp    4eb <printf+0x4b>
+ 63a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         printint(fd, *ap, 10, 1);
- 630:	8b 45 d4             	mov    -0x2c(%ebp),%eax
- 633:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 640:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+ 643:	b9 0a 00 00 00       	mov    $0xa,%ecx
       state = 0;
- 638:	66 31 ff             	xor    %di,%di
+ 648:	66 31 ff             	xor    %di,%di
         printint(fd, *ap, 10, 1);
- 63b:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
- 642:	8b 10                	mov    (%eax),%edx
- 644:	89 f0                	mov    %esi,%eax
- 646:	e8 a5 fd ff ff       	call   3f0 <printint>
+ 64b:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+ 652:	8b 10                	mov    (%eax),%edx
+ 654:	89 f0                	mov    %esi,%eax
+ 656:	e8 a5 fd ff ff       	call   400 <printint>
         ap++;
- 64b:	83 45 d4 04          	addl   $0x4,-0x2c(%ebp)
- 64f:	e9 87 fe ff ff       	jmp    4db <printf+0x4b>
+ 65b:	83 45 d4 04          	addl   $0x4,-0x2c(%ebp)
+ 65f:	e9 87 fe ff ff       	jmp    4eb <printf+0x4b>
         putc(fd, *ap);
- 654:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+ 664:	8b 45 d4             	mov    -0x2c(%ebp),%eax
       state = 0;
- 657:	31 ff                	xor    %edi,%edi
+ 667:	31 ff                	xor    %edi,%edi
         putc(fd, *ap);
- 659:	8b 00                	mov    (%eax),%eax
+ 669:	8b 00                	mov    (%eax),%eax
   write(fd, &c, 1);
- 65b:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
- 662:	00 
- 663:	89 34 24             	mov    %esi,(%esp)
+ 66b:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+ 672:	00 
+ 673:	89 34 24             	mov    %esi,(%esp)
         putc(fd, *ap);
- 666:	88 45 e4             	mov    %al,-0x1c(%ebp)
+ 676:	88 45 e4             	mov    %al,-0x1c(%ebp)
   write(fd, &c, 1);
- 669:	8d 45 e4             	lea    -0x1c(%ebp),%eax
- 66c:	89 44 24 04          	mov    %eax,0x4(%esp)
- 670:	e8 ed fc ff ff       	call   362 <write>
+ 679:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+ 67c:	89 44 24 04          	mov    %eax,0x4(%esp)
+ 680:	e8 dd fc ff ff       	call   362 <write>
         ap++;
- 675:	83 45 d4 04          	addl   $0x4,-0x2c(%ebp)
- 679:	e9 5d fe ff ff       	jmp    4db <printf+0x4b>
- 67e:	66 90                	xchg   %ax,%ax
+ 685:	83 45 d4 04          	addl   $0x4,-0x2c(%ebp)
+ 689:	e9 5d fe ff ff       	jmp    4eb <printf+0x4b>
+ 68e:	66 90                	xchg   %ax,%ax
 
-00000680 <free>:
+00000690 <free>:
 static Header base;
 static Header *freep;
 
 void
 free(void *ap)
 {
- 680:	55                   	push   %ebp
+ 690:	55                   	push   %ebp
   Header *bp, *p;
 
   bp = (Header*)ap - 1;
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 681:	a1 cc 0a 00 00       	mov    0xacc,%eax
+ 691:	a1 dc 0a 00 00       	mov    0xadc,%eax
 {
- 686:	89 e5                	mov    %esp,%ebp
- 688:	57                   	push   %edi
- 689:	56                   	push   %esi
- 68a:	53                   	push   %ebx
- 68b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 696:	89 e5                	mov    %esp,%ebp
+ 698:	57                   	push   %edi
+ 699:	56                   	push   %esi
+ 69a:	53                   	push   %ebx
+ 69b:	8b 5d 08             	mov    0x8(%ebp),%ebx
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 68e:	8b 08                	mov    (%eax),%ecx
+ 69e:	8b 08                	mov    (%eax),%ecx
   bp = (Header*)ap - 1;
- 690:	8d 53 f8             	lea    -0x8(%ebx),%edx
+ 6a0:	8d 53 f8             	lea    -0x8(%ebx),%edx
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 693:	39 d0                	cmp    %edx,%eax
- 695:	72 11                	jb     6a8 <free+0x28>
- 697:	90                   	nop
+ 6a3:	39 d0                	cmp    %edx,%eax
+ 6a5:	72 11                	jb     6b8 <free+0x28>
+ 6a7:	90                   	nop
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 698:	39 c8                	cmp    %ecx,%eax
- 69a:	72 04                	jb     6a0 <free+0x20>
- 69c:	39 ca                	cmp    %ecx,%edx
- 69e:	72 10                	jb     6b0 <free+0x30>
- 6a0:	89 c8                	mov    %ecx,%eax
+ 6a8:	39 c8                	cmp    %ecx,%eax
+ 6aa:	72 04                	jb     6b0 <free+0x20>
+ 6ac:	39 ca                	cmp    %ecx,%edx
+ 6ae:	72 10                	jb     6c0 <free+0x30>
+ 6b0:	89 c8                	mov    %ecx,%eax
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 6a2:	39 d0                	cmp    %edx,%eax
+ 6b2:	39 d0                	cmp    %edx,%eax
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 6a4:	8b 08                	mov    (%eax),%ecx
+ 6b4:	8b 08                	mov    (%eax),%ecx
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 6a6:	73 f0                	jae    698 <free+0x18>
- 6a8:	39 ca                	cmp    %ecx,%edx
- 6aa:	72 04                	jb     6b0 <free+0x30>
+ 6b6:	73 f0                	jae    6a8 <free+0x18>
+ 6b8:	39 ca                	cmp    %ecx,%edx
+ 6ba:	72 04                	jb     6c0 <free+0x30>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 6ac:	39 c8                	cmp    %ecx,%eax
- 6ae:	72 f0                	jb     6a0 <free+0x20>
+ 6bc:	39 c8                	cmp    %ecx,%eax
+ 6be:	72 f0                	jb     6b0 <free+0x20>
       break;
   if(bp + bp->s.size == p->s.ptr){
- 6b0:	8b 73 fc             	mov    -0x4(%ebx),%esi
- 6b3:	8d 3c f2             	lea    (%edx,%esi,8),%edi
- 6b6:	39 cf                	cmp    %ecx,%edi
- 6b8:	74 1e                	je     6d8 <free+0x58>
+ 6c0:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 6c3:	8d 3c f2             	lea    (%edx,%esi,8),%edi
+ 6c6:	39 cf                	cmp    %ecx,%edi
+ 6c8:	74 1e                	je     6e8 <free+0x58>
     bp->s.size += p->s.ptr->s.size;
     bp->s.ptr = p->s.ptr->s.ptr;
   } else
     bp->s.ptr = p->s.ptr;
- 6ba:	89 4b f8             	mov    %ecx,-0x8(%ebx)
+ 6ca:	89 4b f8             	mov    %ecx,-0x8(%ebx)
   if(p + p->s.size == bp){
- 6bd:	8b 48 04             	mov    0x4(%eax),%ecx
- 6c0:	8d 34 c8             	lea    (%eax,%ecx,8),%esi
- 6c3:	39 f2                	cmp    %esi,%edx
- 6c5:	74 28                	je     6ef <free+0x6f>
+ 6cd:	8b 48 04             	mov    0x4(%eax),%ecx
+ 6d0:	8d 34 c8             	lea    (%eax,%ecx,8),%esi
+ 6d3:	39 f2                	cmp    %esi,%edx
+ 6d5:	74 28                	je     6ff <free+0x6f>
     p->s.size += bp->s.size;
     p->s.ptr = bp->s.ptr;
   } else
     p->s.ptr = bp;
- 6c7:	89 10                	mov    %edx,(%eax)
+ 6d7:	89 10                	mov    %edx,(%eax)
   freep = p;
- 6c9:	a3 cc 0a 00 00       	mov    %eax,0xacc
+ 6d9:	a3 dc 0a 00 00       	mov    %eax,0xadc
 }
- 6ce:	5b                   	pop    %ebx
- 6cf:	5e                   	pop    %esi
- 6d0:	5f                   	pop    %edi
- 6d1:	5d                   	pop    %ebp
- 6d2:	c3                   	ret    
- 6d3:	90                   	nop
- 6d4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 6de:	5b                   	pop    %ebx
+ 6df:	5e                   	pop    %esi
+ 6e0:	5f                   	pop    %edi
+ 6e1:	5d                   	pop    %ebp
+ 6e2:	c3                   	ret    
+ 6e3:	90                   	nop
+ 6e4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     bp->s.size += p->s.ptr->s.size;
- 6d8:	03 71 04             	add    0x4(%ecx),%esi
- 6db:	89 73 fc             	mov    %esi,-0x4(%ebx)
+ 6e8:	03 71 04             	add    0x4(%ecx),%esi
+ 6eb:	89 73 fc             	mov    %esi,-0x4(%ebx)
     bp->s.ptr = p->s.ptr->s.ptr;
- 6de:	8b 08                	mov    (%eax),%ecx
- 6e0:	8b 09                	mov    (%ecx),%ecx
- 6e2:	89 4b f8             	mov    %ecx,-0x8(%ebx)
+ 6ee:	8b 08                	mov    (%eax),%ecx
+ 6f0:	8b 09                	mov    (%ecx),%ecx
+ 6f2:	89 4b f8             	mov    %ecx,-0x8(%ebx)
   if(p + p->s.size == bp){
- 6e5:	8b 48 04             	mov    0x4(%eax),%ecx
- 6e8:	8d 34 c8             	lea    (%eax,%ecx,8),%esi
- 6eb:	39 f2                	cmp    %esi,%edx
- 6ed:	75 d8                	jne    6c7 <free+0x47>
+ 6f5:	8b 48 04             	mov    0x4(%eax),%ecx
+ 6f8:	8d 34 c8             	lea    (%eax,%ecx,8),%esi
+ 6fb:	39 f2                	cmp    %esi,%edx
+ 6fd:	75 d8                	jne    6d7 <free+0x47>
     p->s.size += bp->s.size;
- 6ef:	03 4b fc             	add    -0x4(%ebx),%ecx
+ 6ff:	03 4b fc             	add    -0x4(%ebx),%ecx
   freep = p;
- 6f2:	a3 cc 0a 00 00       	mov    %eax,0xacc
+ 702:	a3 dc 0a 00 00       	mov    %eax,0xadc
     p->s.size += bp->s.size;
- 6f7:	89 48 04             	mov    %ecx,0x4(%eax)
+ 707:	89 48 04             	mov    %ecx,0x4(%eax)
     p->s.ptr = bp->s.ptr;
- 6fa:	8b 53 f8             	mov    -0x8(%ebx),%edx
- 6fd:	89 10                	mov    %edx,(%eax)
+ 70a:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 70d:	89 10                	mov    %edx,(%eax)
 }
- 6ff:	5b                   	pop    %ebx
- 700:	5e                   	pop    %esi
- 701:	5f                   	pop    %edi
- 702:	5d                   	pop    %ebp
- 703:	c3                   	ret    
- 704:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
- 70a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
-
-00000710 <malloc>:
+ 70f:	5b                   	pop    %ebx
+ 710:	5e                   	pop    %esi
+ 711:	5f                   	pop    %edi
+ 712:	5d                   	pop    %ebp
+ 713:	c3                   	ret    
+ 714:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 71a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+00000720 <malloc>:
   return freep;
 }
 
 void*
 malloc(uint nbytes)
 {
- 710:	55                   	push   %ebp
- 711:	89 e5                	mov    %esp,%ebp
- 713:	57                   	push   %edi
- 714:	56                   	push   %esi
- 715:	53                   	push   %ebx
- 716:	83 ec 1c             	sub    $0x1c,%esp
+ 720:	55                   	push   %ebp
+ 721:	89 e5                	mov    %esp,%ebp
+ 723:	57                   	push   %edi
+ 724:	56                   	push   %esi
+ 725:	53                   	push   %ebx
+ 726:	83 ec 1c             	sub    $0x1c,%esp
   Header *p, *prevp;
   uint nunits;
 
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 719:	8b 45 08             	mov    0x8(%ebp),%eax
+ 729:	8b 45 08             	mov    0x8(%ebp),%eax
   if((prevp = freep) == 0){
- 71c:	8b 1d cc 0a 00 00    	mov    0xacc,%ebx
+ 72c:	8b 1d dc 0a 00 00    	mov    0xadc,%ebx
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 722:	8d 48 07             	lea    0x7(%eax),%ecx
- 725:	c1 e9 03             	shr    $0x3,%ecx
+ 732:	8d 48 07             	lea    0x7(%eax),%ecx
+ 735:	c1 e9 03             	shr    $0x3,%ecx
   if((prevp = freep) == 0){
- 728:	85 db                	test   %ebx,%ebx
+ 738:	85 db                	test   %ebx,%ebx
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 72a:	8d 71 01             	lea    0x1(%ecx),%esi
+ 73a:	8d 71 01             	lea    0x1(%ecx),%esi
   if((prevp = freep) == 0){
- 72d:	0f 84 9b 00 00 00    	je     7ce <malloc+0xbe>
- 733:	8b 13                	mov    (%ebx),%edx
- 735:	8b 7a 04             	mov    0x4(%edx),%edi
+ 73d:	0f 84 9b 00 00 00    	je     7de <malloc+0xbe>
+ 743:	8b 13                	mov    (%ebx),%edx
+ 745:	8b 7a 04             	mov    0x4(%edx),%edi
     base.s.ptr = freep = prevp = &base;
     base.s.size = 0;
   }
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
     if(p->s.size >= nunits){
- 738:	39 fe                	cmp    %edi,%esi
- 73a:	76 64                	jbe    7a0 <malloc+0x90>
- 73c:	8d 04 f5 00 00 00 00 	lea    0x0(,%esi,8),%eax
+ 748:	39 fe                	cmp    %edi,%esi
+ 74a:	76 64                	jbe    7b0 <malloc+0x90>
+ 74c:	8d 04 f5 00 00 00 00 	lea    0x0(,%esi,8),%eax
   if(nu < 4096)
- 743:	bb 00 80 00 00       	mov    $0x8000,%ebx
- 748:	89 45 e4             	mov    %eax,-0x1c(%ebp)
- 74b:	eb 0e                	jmp    75b <malloc+0x4b>
- 74d:	8d 76 00             	lea    0x0(%esi),%esi
+ 753:	bb 00 80 00 00       	mov    $0x8000,%ebx
+ 758:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+ 75b:	eb 0e                	jmp    76b <malloc+0x4b>
+ 75d:	8d 76 00             	lea    0x0(%esi),%esi
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 750:	8b 02                	mov    (%edx),%eax
+ 760:	8b 02                	mov    (%edx),%eax
     if(p->s.size >= nunits){
- 752:	8b 78 04             	mov    0x4(%eax),%edi
- 755:	39 fe                	cmp    %edi,%esi
- 757:	76 4f                	jbe    7a8 <malloc+0x98>
- 759:	89 c2                	mov    %eax,%edx
+ 762:	8b 78 04             	mov    0x4(%eax),%edi
+ 765:	39 fe                	cmp    %edi,%esi
+ 767:	76 4f                	jbe    7b8 <malloc+0x98>
+ 769:	89 c2                	mov    %eax,%edx
         p->s.size = nunits;
       }
       freep = prevp;
       return (void*)(p + 1);
     }
     if(p == freep)
- 75b:	3b 15 cc 0a 00 00    	cmp    0xacc,%edx
- 761:	75 ed                	jne    750 <malloc+0x40>
+ 76b:	3b 15 dc 0a 00 00    	cmp    0xadc,%edx
+ 771:	75 ed                	jne    760 <malloc+0x40>
   if(nu < 4096)
- 763:	8b 45 e4             	mov    -0x1c(%ebp),%eax
- 766:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
- 76c:	bf 00 10 00 00       	mov    $0x1000,%edi
- 771:	0f 43 fe             	cmovae %esi,%edi
- 774:	0f 42 c3             	cmovb  %ebx,%eax
+ 773:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+ 776:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+ 77c:	bf 00 10 00 00       	mov    $0x1000,%edi
+ 781:	0f 43 fe             	cmovae %esi,%edi
+ 784:	0f 42 c3             	cmovb  %ebx,%eax
   p = sbrk(nu * sizeof(Header));
- 777:	89 04 24             	mov    %eax,(%esp)
- 77a:	e8 4b fc ff ff       	call   3ca <sbrk>
+ 787:	89 04 24             	mov    %eax,(%esp)
+ 78a:	e8 3b fc ff ff       	call   3ca <sbrk>
   if(p == (char*)-1)
- 77f:	83 f8 ff             	cmp    $0xffffffff,%eax
- 782:	74 18                	je     79c <malloc+0x8c>
+ 78f:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 792:	74 18                	je     7ac <malloc+0x8c>
   hp->s.size = nu;
- 784:	89 78 04             	mov    %edi,0x4(%eax)
+ 794:	89 78 04             	mov    %edi,0x4(%eax)
   free((void*)(hp + 1));
- 787:	83 c0 08             	add    $0x8,%eax
- 78a:	89 04 24             	mov    %eax,(%esp)
- 78d:	e8 ee fe ff ff       	call   680 <free>
+ 797:	83 c0 08             	add    $0x8,%eax
+ 79a:	89 04 24             	mov    %eax,(%esp)
+ 79d:	e8 ee fe ff ff       	call   690 <free>
   return freep;
- 792:	8b 15 cc 0a 00 00    	mov    0xacc,%edx
+ 7a2:	8b 15 dc 0a 00 00    	mov    0xadc,%edx
       if((p = morecore(nunits)) == 0)
- 798:	85 d2                	test   %edx,%edx
- 79a:	75 b4                	jne    750 <malloc+0x40>
+ 7a8:	85 d2                	test   %edx,%edx
+ 7aa:	75 b4                	jne    760 <malloc+0x40>
         return 0;
- 79c:	31 c0                	xor    %eax,%eax
- 79e:	eb 20                	jmp    7c0 <malloc+0xb0>
+ 7ac:	31 c0                	xor    %eax,%eax
+ 7ae:	eb 20                	jmp    7d0 <malloc+0xb0>
     if(p->s.size >= nunits){
- 7a0:	89 d0                	mov    %edx,%eax
- 7a2:	89 da                	mov    %ebx,%edx
- 7a4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 7b0:	89 d0                	mov    %edx,%eax
+ 7b2:	89 da                	mov    %ebx,%edx
+ 7b4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
       if(p->s.size == nunits)
- 7a8:	39 fe                	cmp    %edi,%esi
- 7aa:	74 1c                	je     7c8 <malloc+0xb8>
+ 7b8:	39 fe                	cmp    %edi,%esi
+ 7ba:	74 1c                	je     7d8 <malloc+0xb8>
         p->s.size -= nunits;
- 7ac:	29 f7                	sub    %esi,%edi
- 7ae:	89 78 04             	mov    %edi,0x4(%eax)
+ 7bc:	29 f7                	sub    %esi,%edi
+ 7be:	89 78 04             	mov    %edi,0x4(%eax)
         p += p->s.size;
- 7b1:	8d 04 f8             	lea    (%eax,%edi,8),%eax
+ 7c1:	8d 04 f8             	lea    (%eax,%edi,8),%eax
         p->s.size = nunits;
- 7b4:	89 70 04             	mov    %esi,0x4(%eax)
+ 7c4:	89 70 04             	mov    %esi,0x4(%eax)
       freep = prevp;
- 7b7:	89 15 cc 0a 00 00    	mov    %edx,0xacc
+ 7c7:	89 15 dc 0a 00 00    	mov    %edx,0xadc
       return (void*)(p + 1);
- 7bd:	83 c0 08             	add    $0x8,%eax
+ 7cd:	83 c0 08             	add    $0x8,%eax
   }
 }
- 7c0:	83 c4 1c             	add    $0x1c,%esp
- 7c3:	5b                   	pop    %ebx
- 7c4:	5e                   	pop    %esi
- 7c5:	5f                   	pop    %edi
- 7c6:	5d                   	pop    %ebp
- 7c7:	c3                   	ret    
+ 7d0:	83 c4 1c             	add    $0x1c,%esp
+ 7d3:	5b                   	pop    %ebx
+ 7d4:	5e                   	pop    %esi
+ 7d5:	5f                   	pop    %edi
+ 7d6:	5d                   	pop    %ebp
+ 7d7:	c3                   	ret    
         prevp->s.ptr = p->s.ptr;
- 7c8:	8b 08                	mov    (%eax),%ecx
- 7ca:	89 0a                	mov    %ecx,(%edx)
- 7cc:	eb e9                	jmp    7b7 <malloc+0xa7>
+ 7d8:	8b 08                	mov    (%eax),%ecx
+ 7da:	89 0a                	mov    %ecx,(%edx)
+ 7dc:	eb e9                	jmp    7c7 <malloc+0xa7>
     base.s.ptr = freep = prevp = &base;
- 7ce:	c7 05 cc 0a 00 00 d0 	movl   $0xad0,0xacc
- 7d5:	0a 00 00 
+ 7de:	c7 05 dc 0a 00 00 e0 	movl   $0xae0,0xadc
+ 7e5:	0a 00 00 
     base.s.size = 0;
- 7d8:	ba d0 0a 00 00       	mov    $0xad0,%edx
+ 7e8:	ba e0 0a 00 00       	mov    $0xae0,%edx
     base.s.ptr = freep = prevp = &base;
- 7dd:	c7 05 d0 0a 00 00 d0 	movl   $0xad0,0xad0
- 7e4:	0a 00 00 
+ 7ed:	c7 05 e0 0a 00 00 e0 	movl   $0xae0,0xae0
+ 7f4:	0a 00 00 
     base.s.size = 0;
- 7e7:	c7 05 d4 0a 00 00 00 	movl   $0x0,0xad4
- 7ee:	00 00 00 
- 7f1:	e9 46 ff ff ff       	jmp    73c <malloc+0x2c>
+ 7f7:	c7 05 e4 0a 00 00 00 	movl   $0x0,0xae4
+ 7fe:	00 00 00 
+ 801:	e9 46 ff ff ff       	jmp    74c <malloc+0x2c>
diff --git a/init.o b/init.o
index 2cfd2de..49616c5 100644
Binary files a/init.o and b/init.o differ
diff --git a/init.sym b/init.sym
index a6bd89c..7cfe4a4 100644
--- a/init.sym
+++ b/init.sym
@@ -1,8 +1,8 @@
 00000000 .text
-000007f6 .rodata
-00000860 .eh_frame
-00000ac4 .data
-00000acc .bss
+00000806 .rodata
+00000870 .eh_frame
+00000ad4 .data
+00000adc .bss
 00000000 .comment
 00000000 .debug_aranges
 00000000 .debug_info
@@ -14,26 +14,28 @@
 00000000 init.c
 00000000 ulib.c
 00000000 printf.c
-000003f0 printint
-0000084d digits.1358
+00000400 printint
+0000085d digits.1362
 00000000 umalloc.c
-00000acc freep
-00000ad0 base
+00000adc freep
+00000ae0 base
 00000120 strcpy
 000003e2 waitpid
-00000490 printf
-00000ac4 argv
+000004a0 printf
+00000ad4 argv
 00000310 memmove
 0000038a mknod
 00000230 gets
 000003c2 getpid
-00000710 malloc
+00000720 malloc
 000003d2 sleep
 00000352 pipe
+000003ea setPrior
 00000362 write
 0000039a fstat
 00000372 kill
 000003b2 chdir
+000003f2 getPrior
 0000037a exec
 0000034a wait
 0000035a read
@@ -41,14 +43,14 @@
 0000033a fork
 000003ca sbrk
 000003da uptime
-00000acc __bss_start
+00000adc __bss_start
 000001d0 memset
 00000000 main
 00000150 strcmp
 000003ba dup
 00000290 stat
-00000acc _edata
-00000ad8 _end
+00000adc _edata
+00000ae8 _end
 000003a2 link
 00000342 exit
 000002e0 atoi
@@ -57,4 +59,4 @@
 000001f0 strchr
 000003aa mkdir
 0000036a close
-00000680 free
+00000690 free
diff --git a/kalloc.o b/kalloc.o
index b28e681..a27e3da 100644
Binary files a/kalloc.o and b/kalloc.o differ
diff --git a/kbd.o b/kbd.o
index c53785d..ceea29a 100644
Binary files a/kbd.o and b/kbd.o differ
diff --git a/kernel b/kernel
index 5cfe13d..849fd65 100755
Binary files a/kernel and b/kernel differ
diff --git a/kernel.asm b/kernel.asm
index b7b504b..dcf687c 100644
--- a/kernel.asm
+++ b/kernel.asm
@@ -74,10 +74,10 @@ binit(void)
 {
 80100049:	83 ec 14             	sub    $0x14,%esp
   initlock(&bcache.lock, "bcache");
-8010004c:	c7 44 24 04 20 6e 10 	movl   $0x80106e20,0x4(%esp)
+8010004c:	c7 44 24 04 e0 6f 10 	movl   $0x80106fe0,0x4(%esp)
 80100053:	80 
 80100054:	c7 04 24 c0 b5 10 80 	movl   $0x8010b5c0,(%esp)
-8010005b:	e8 80 41 00 00       	call   801041e0 <initlock>
+8010005b:	e8 f0 42 00 00       	call   80104350 <initlock>
   bcache.head.next = &bcache.head;
 80100060:	ba bc fc 10 80       	mov    $0x8010fcbc,%edx
   bcache.head.prev = &bcache.head;
@@ -99,9 +99,9 @@ binit(void)
 8010008a:	c7 43 50 bc fc 10 80 	movl   $0x8010fcbc,0x50(%ebx)
     initsleeplock(&b->lock, "buffer");
 80100091:	89 04 24             	mov    %eax,(%esp)
-80100094:	c7 44 24 04 27 6e 10 	movl   $0x80106e27,0x4(%esp)
+80100094:	c7 44 24 04 e7 6f 10 	movl   $0x80106fe7,0x4(%esp)
 8010009b:	80 
-8010009c:	e8 0f 40 00 00       	call   801040b0 <initsleeplock>
+8010009c:	e8 7f 41 00 00       	call   80104220 <initsleeplock>
     bcache.head.next->prev = b;
 801000a1:	a1 10 fd 10 80       	mov    0x8010fd10,%eax
 801000a6:	89 58 50             	mov    %ebx,0x50(%eax)
@@ -140,7 +140,7 @@ bread(uint dev, uint blockno)
 {
 801000e3:	8b 7d 0c             	mov    0xc(%ebp),%edi
   acquire(&bcache.lock);
-801000e6:	e8 65 42 00 00       	call   80104350 <acquire>
+801000e6:	e8 d5 43 00 00       	call   801044c0 <acquire>
   for(b = bcache.head.next; b != &bcache.head; b = b->next){
 801000eb:	8b 1d 10 fd 10 80    	mov    0x8010fd10,%ebx
 801000f1:	81 fb bc fc 10 80    	cmp    $0x8010fcbc,%ebx
@@ -185,11 +185,11 @@ bread(uint dev, uint blockno)
 80100153:	c7 43 4c 01 00 00 00 	movl   $0x1,0x4c(%ebx)
       release(&bcache.lock);
 8010015a:	c7 04 24 c0 b5 10 80 	movl   $0x8010b5c0,(%esp)
-80100161:	e8 5a 42 00 00       	call   801043c0 <release>
+80100161:	e8 ca 43 00 00       	call   80104530 <release>
       acquiresleep(&b->lock);
 80100166:	8d 43 0c             	lea    0xc(%ebx),%eax
 80100169:	89 04 24             	mov    %eax,(%esp)
-8010016c:	e8 7f 3f 00 00       	call   801040f0 <acquiresleep>
+8010016c:	e8 ef 40 00 00       	call   80104260 <acquiresleep>
   struct buf *b;
 
   b = bget(dev, blockno);
@@ -210,7 +210,7 @@ bread(uint dev, uint blockno)
 80100186:	5d                   	pop    %ebp
 80100187:	c3                   	ret    
   panic("bget: no buffers");
-80100188:	c7 04 24 2e 6e 10 80 	movl   $0x80106e2e,(%esp)
+80100188:	c7 04 24 ee 6f 10 80 	movl   $0x80106fee,(%esp)
 8010018f:	e8 cc 01 00 00       	call   80100360 <panic>
 80100194:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 8010019a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
@@ -229,7 +229,7 @@ bwrite(struct buf *b)
   if(!holdingsleep(&b->lock))
 801001aa:	8d 43 0c             	lea    0xc(%ebx),%eax
 801001ad:	89 04 24             	mov    %eax,(%esp)
-801001b0:	e8 db 3f 00 00       	call   80104190 <holdingsleep>
+801001b0:	e8 4b 41 00 00       	call   80104300 <holdingsleep>
 801001b5:	85 c0                	test   %eax,%eax
 801001b7:	74 10                	je     801001c9 <bwrite+0x29>
     panic("bwrite");
@@ -244,7 +244,7 @@ bwrite(struct buf *b)
   iderw(b);
 801001c4:	e9 57 1f 00 00       	jmp    80102120 <iderw>
     panic("bwrite");
-801001c9:	c7 04 24 3f 6e 10 80 	movl   $0x80106e3f,(%esp)
+801001c9:	c7 04 24 ff 6f 10 80 	movl   $0x80106fff,(%esp)
 801001d0:	e8 8b 01 00 00       	call   80100360 <panic>
 801001d5:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 801001d9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
@@ -265,18 +265,18 @@ brelse(struct buf *b)
   if(!holdingsleep(&b->lock))
 801001eb:	8d 73 0c             	lea    0xc(%ebx),%esi
 801001ee:	89 34 24             	mov    %esi,(%esp)
-801001f1:	e8 9a 3f 00 00       	call   80104190 <holdingsleep>
+801001f1:	e8 0a 41 00 00       	call   80104300 <holdingsleep>
 801001f6:	85 c0                	test   %eax,%eax
 801001f8:	74 5b                	je     80100255 <brelse+0x75>
     panic("brelse");
 
   releasesleep(&b->lock);
 801001fa:	89 34 24             	mov    %esi,(%esp)
-801001fd:	e8 4e 3f 00 00       	call   80104150 <releasesleep>
+801001fd:	e8 be 40 00 00       	call   801042c0 <releasesleep>
 
   acquire(&bcache.lock);
 80100202:	c7 04 24 c0 b5 10 80 	movl   $0x8010b5c0,(%esp)
-80100209:	e8 42 41 00 00       	call   80104350 <acquire>
+80100209:	e8 b2 42 00 00       	call   801044c0 <acquire>
   b->refcnt--;
   if (b->refcnt == 0) {
 8010020e:	83 6b 4c 01          	subl   $0x1,0x4c(%ebx)
@@ -311,9 +311,9 @@ brelse(struct buf *b)
 8010024e:	5e                   	pop    %esi
 8010024f:	5d                   	pop    %ebp
   release(&bcache.lock);
-80100250:	e9 6b 41 00 00       	jmp    801043c0 <release>
+80100250:	e9 db 42 00 00       	jmp    80104530 <release>
     panic("brelse");
-80100255:	c7 04 24 46 6e 10 80 	movl   $0x80106e46,(%esp)
+80100255:	c7 04 24 06 70 10 80 	movl   $0x80107006,(%esp)
 8010025c:	e8 ff 00 00 00       	call   80100360 <panic>
 80100261:	66 90                	xchg   %ax,%ax
 80100263:	66 90                	xchg   %ax,%ax
@@ -348,7 +348,7 @@ consoleread(struct inode *ip, char *dst, int n)
   target = n;
   acquire(&cons.lock);
 80100287:	c7 04 24 20 a5 10 80 	movl   $0x8010a520,(%esp)
-8010028e:	e8 bd 40 00 00       	call   80104350 <acquire>
+8010028e:	e8 2d 42 00 00       	call   801044c0 <acquire>
   while(n > 0){
 80100293:	8b 55 10             	mov    0x10(%ebp),%edx
 80100296:	85 d2                	test   %edx,%edx
@@ -371,7 +371,7 @@ consoleread(struct inode *ip, char *dst, int n)
 801002b4:	c7 44 24 04 20 a5 10 	movl   $0x8010a520,0x4(%esp)
 801002bb:	80 
 801002bc:	c7 04 24 a0 ff 10 80 	movl   $0x8010ffa0,(%esp)
-801002c3:	e8 48 39 00 00       	call   80103c10 <sleep>
+801002c3:	e8 b8 3a 00 00       	call   80103d80 <sleep>
     while(input.r == input.w){
 801002c8:	a1 a0 ff 10 80       	mov    0x8010ffa0,%eax
 801002cd:	3b 05 a4 ff 10 80    	cmp    0x8010ffa4,%eax
@@ -411,7 +411,7 @@ consoleread(struct inode *ip, char *dst, int n)
   release(&cons.lock);
 80100307:	c7 04 24 20 a5 10 80 	movl   $0x8010a520,(%esp)
 8010030e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
-80100311:	e8 aa 40 00 00       	call   801043c0 <release>
+80100311:	e8 1a 42 00 00       	call   80104530 <release>
   ilock(ip);
 80100316:	89 3c 24             	mov    %edi,(%esp)
 80100319:	e8 92 13 00 00       	call   801016b0 <ilock>
@@ -423,7 +423,7 @@ consoleread(struct inode *ip, char *dst, int n)
 80100324:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
         release(&cons.lock);
 80100328:	c7 04 24 20 a5 10 80 	movl   $0x8010a520,(%esp)
-8010032f:	e8 8c 40 00 00       	call   801043c0 <release>
+8010032f:	e8 fc 41 00 00       	call   80104530 <release>
         ilock(ip);
 80100334:	89 3c 24             	mov    %edi,(%esp)
 80100337:	e8 74 13 00 00       	call   801016b0 <ilock>
@@ -471,7 +471,7 @@ cli(void)
   cprintf("lapicid %d: panic: ", lapicid());
 80100376:	e8 e5 23 00 00       	call   80102760 <lapicid>
 8010037b:	8d 75 f8             	lea    -0x8(%ebp),%esi
-8010037e:	c7 04 24 4d 6e 10 80 	movl   $0x80106e4d,(%esp)
+8010037e:	c7 04 24 0d 70 10 80 	movl   $0x8010700d,(%esp)
 80100385:	89 44 24 04          	mov    %eax,0x4(%esp)
 80100389:	e8 c2 02 00 00       	call   80100650 <cprintf>
   cprintf(s);
@@ -479,18 +479,18 @@ cli(void)
 80100391:	89 04 24             	mov    %eax,(%esp)
 80100394:	e8 b7 02 00 00       	call   80100650 <cprintf>
   cprintf("\n");
-80100399:	c7 04 24 9b 77 10 80 	movl   $0x8010779b,(%esp)
+80100399:	c7 04 24 ed 75 10 80 	movl   $0x801075ed,(%esp)
 801003a0:	e8 ab 02 00 00       	call   80100650 <cprintf>
   getcallerpcs(&s, pcs);
 801003a5:	8d 45 08             	lea    0x8(%ebp),%eax
 801003a8:	89 5c 24 04          	mov    %ebx,0x4(%esp)
 801003ac:	89 04 24             	mov    %eax,(%esp)
-801003af:	e8 4c 3e 00 00       	call   80104200 <getcallerpcs>
+801003af:	e8 bc 3f 00 00       	call   80104370 <getcallerpcs>
 801003b4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     cprintf(" %p", pcs[i]);
 801003b8:	8b 03                	mov    (%ebx),%eax
 801003ba:	83 c3 04             	add    $0x4,%ebx
-801003bd:	c7 04 24 61 6e 10 80 	movl   $0x80106e61,(%esp)
+801003bd:	c7 04 24 21 70 10 80 	movl   $0x80107021,(%esp)
 801003c4:	89 44 24 04          	mov    %eax,0x4(%esp)
 801003c8:	e8 83 02 00 00       	call   80100650 <cprintf>
   for(i=0; i<10; i++)
@@ -523,7 +523,7 @@ cli(void)
 80100400:	0f 84 ac 00 00 00    	je     801004b2 <consputc+0xd2>
     uartputc(c);
 80100406:	89 04 24             	mov    %eax,(%esp)
-80100409:	e8 72 55 00 00       	call   80105980 <uartputc>
+80100409:	e8 42 57 00 00       	call   80105b50 <uartputc>
   asm volatile("out %0,%1" : : "a" (data), "d" (port));
 8010040e:	bf d4 03 00 00       	mov    $0x3d4,%edi
 80100413:	b8 0e 00 00 00       	mov    $0xe,%eax
@@ -595,11 +595,11 @@ cli(void)
 801004b1:	c3                   	ret    
     uartputc('\b'); uartputc(' '); uartputc('\b');
 801004b2:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
-801004b9:	e8 c2 54 00 00       	call   80105980 <uartputc>
+801004b9:	e8 92 56 00 00       	call   80105b50 <uartputc>
 801004be:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
-801004c5:	e8 b6 54 00 00       	call   80105980 <uartputc>
+801004c5:	e8 86 56 00 00       	call   80105b50 <uartputc>
 801004ca:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
-801004d1:	e8 aa 54 00 00       	call   80105980 <uartputc>
+801004d1:	e8 7a 56 00 00       	call   80105b50 <uartputc>
 801004d6:	e9 33 ff ff ff       	jmp    8010040e <consputc+0x2e>
     memmove(crt, crt+80, sizeof(crt[0])*23*80);
 801004db:	c7 44 24 08 60 0e 00 	movl   $0xe60,0x8(%esp)
@@ -613,7 +613,7 @@ cli(void)
 801004ee:	8d b4 1b 00 80 0b 80 	lea    -0x7ff48000(%ebx,%ebx,1),%esi
     memmove(crt, crt+80, sizeof(crt[0])*23*80);
 801004f5:	c7 04 24 00 80 0b 80 	movl   $0x800b8000,(%esp)
-801004fc:	e8 af 3f 00 00       	call   801044b0 <memmove>
+801004fc:	e8 1f 41 00 00       	call   80104620 <memmove>
     memset(crt+pos, 0, sizeof(crt[0])*(24*80 - pos));
 80100501:	b8 d0 07 00 00       	mov    $0x7d0,%eax
 80100506:	29 f8                	sub    %edi,%eax
@@ -622,12 +622,12 @@ cli(void)
 8010050d:	89 44 24 08          	mov    %eax,0x8(%esp)
 80100511:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
 80100518:	00 
-80100519:	e8 f2 3e 00 00       	call   80104410 <memset>
+80100519:	e8 62 40 00 00       	call   80104580 <memset>
 8010051e:	89 f1                	mov    %esi,%ecx
 80100520:	be 07 00 00 00       	mov    $0x7,%esi
 80100525:	e9 59 ff ff ff       	jmp    80100483 <consputc+0xa3>
     panic("pos under/overflow");
-8010052a:	c7 04 24 65 6e 10 80 	movl   $0x80106e65,(%esp)
+8010052a:	c7 04 24 25 70 10 80 	movl   $0x80107025,(%esp)
 80100531:	e8 2a fe ff ff       	call   80100360 <panic>
     if(pos > 0) --pos;
 80100536:	85 c9                	test   %ecx,%ecx
@@ -674,7 +674,7 @@ cli(void)
 80100592:	31 d2                	xor    %edx,%edx
 80100594:	f7 f6                	div    %esi
 80100596:	8d 59 01             	lea    0x1(%ecx),%ebx
-80100599:	0f b6 92 90 6e 10 80 	movzbl -0x7fef9170(%edx),%edx
+80100599:	0f b6 92 50 70 10 80 	movzbl -0x7fef8fb0(%edx),%edx
   }while((x /= base) != 0);
 801005a0:	85 c0                	test   %eax,%eax
     buf[i++] = digits[x % base];
@@ -738,7 +738,7 @@ consolewrite(struct inode *ip, char *buf, int n)
 80100602:	e8 89 11 00 00       	call   80101790 <iunlock>
   acquire(&cons.lock);
 80100607:	c7 04 24 20 a5 10 80 	movl   $0x8010a520,(%esp)
-8010060e:	e8 3d 3d 00 00       	call   80104350 <acquire>
+8010060e:	e8 ad 3e 00 00       	call   801044c0 <acquire>
 80100613:	8b 7d 0c             	mov    0xc(%ebp),%edi
   for(i = 0; i < n; i++)
 80100616:	85 f6                	test   %esi,%esi
@@ -754,7 +754,7 @@ consolewrite(struct inode *ip, char *buf, int n)
 8010062d:	75 f1                	jne    80100620 <consolewrite+0x30>
   release(&cons.lock);
 8010062f:	c7 04 24 20 a5 10 80 	movl   $0x8010a520,(%esp)
-80100636:	e8 85 3d 00 00       	call   801043c0 <release>
+80100636:	e8 f5 3e 00 00       	call   80104530 <release>
   ilock(ip);
 8010063b:	8b 45 08             	mov    0x8(%ebp),%eax
 8010063e:	89 04 24             	mov    %eax,(%esp)
@@ -844,7 +844,7 @@ consolewrite(struct inode *ip, char *buf, int n)
 801006ea:	74 0c                	je     801006f8 <cprintf+0xa8>
     release(&cons.lock);
 801006ec:	c7 04 24 20 a5 10 80 	movl   $0x8010a520,(%esp)
-801006f3:	e8 c8 3c 00 00       	call   801043c0 <release>
+801006f3:	e8 38 3e 00 00       	call   80104530 <release>
 }
 801006f8:	83 c4 1c             	add    $0x1c,%esp
 801006fb:	5b                   	pop    %ebx
@@ -890,7 +890,7 @@ consolewrite(struct inode *ip, char *buf, int n)
 8010075b:	8b 36                	mov    (%esi),%esi
 8010075d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
         s = "(null)";
-80100760:	b8 78 6e 10 80       	mov    $0x80106e78,%eax
+80100760:	b8 38 70 10 80       	mov    $0x80107038,%eax
 80100765:	85 f6                	test   %esi,%esi
 80100767:	0f 44 f0             	cmove  %eax,%esi
       for(; *s; s++)
@@ -911,10 +911,10 @@ consolewrite(struct inode *ip, char *buf, int n)
 8010078f:	90                   	nop
     acquire(&cons.lock);
 80100790:	c7 04 24 20 a5 10 80 	movl   $0x8010a520,(%esp)
-80100797:	e8 b4 3b 00 00       	call   80104350 <acquire>
+80100797:	e8 24 3d 00 00       	call   801044c0 <acquire>
 8010079c:	e9 c8 fe ff ff       	jmp    80100669 <cprintf+0x19>
     panic("null fmt");
-801007a1:	c7 04 24 7f 6e 10 80 	movl   $0x80106e7f,(%esp)
+801007a1:	c7 04 24 3f 70 10 80 	movl   $0x8010703f,(%esp)
 801007a8:	e8 b3 fb ff ff       	call   80100360 <panic>
 801007ad:	8d 76 00             	lea    0x0(%esi),%esi
 
@@ -932,7 +932,7 @@ consolewrite(struct inode *ip, char *buf, int n)
 801007bb:	8b 5d 08             	mov    0x8(%ebp),%ebx
   acquire(&cons.lock);
 801007be:	c7 04 24 20 a5 10 80 	movl   $0x8010a520,(%esp)
-801007c5:	e8 86 3b 00 00       	call   80104350 <acquire>
+801007c5:	e8 f6 3c 00 00       	call   801044c0 <acquire>
 801007ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
   while((c = getc()) >= 0){
 801007d0:	ff d3                	call   *%ebx
@@ -966,7 +966,7 @@ consolewrite(struct inode *ip, char *buf, int n)
 80100819:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
   release(&cons.lock);
 80100820:	c7 04 24 20 a5 10 80 	movl   $0x8010a520,(%esp)
-80100827:	e8 94 3b 00 00       	call   801043c0 <release>
+80100827:	e8 04 3d 00 00       	call   80104530 <release>
   if(doprocdump) {
 8010082c:	85 f6                	test   %esi,%esi
 8010082e:	0f 85 ec 00 00 00    	jne    80100920 <consoleintr+0x170>
@@ -1019,7 +1019,7 @@ consolewrite(struct inode *ip, char *buf, int n)
           input.w = input.e;
 801008ad:	a3 a4 ff 10 80       	mov    %eax,0x8010ffa4
           wakeup(&input.r);
-801008b2:	e8 39 36 00 00       	call   80103ef0 <wakeup>
+801008b2:	e8 a9 37 00 00       	call   80104060 <wakeup>
 801008b7:	e9 14 ff ff ff       	jmp    801007d0 <consoleintr+0x20>
 801008bc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
       while(input.e != input.w &&
@@ -1057,7 +1057,7 @@ consolewrite(struct inode *ip, char *buf, int n)
 80100925:	5f                   	pop    %edi
 80100926:	5d                   	pop    %ebp
     procdump();  // now call procdump() wo. cons.lock held
-80100927:	e9 b4 36 00 00       	jmp    80103fe0 <procdump>
+80100927:	e9 24 38 00 00       	jmp    80104150 <procdump>
         input.buf[input.e++ % INPUT_BUF] = c;
 8010092c:	c6 80 20 ff 10 80 0a 	movb   $0xa,-0x7fef00e0(%eax)
         consputc(c);
@@ -1077,10 +1077,10 @@ consoleinit(void)
 80100951:	89 e5                	mov    %esp,%ebp
 80100953:	83 ec 18             	sub    $0x18,%esp
   initlock(&cons.lock, "console");
-80100956:	c7 44 24 04 88 6e 10 	movl   $0x80106e88,0x4(%esp)
+80100956:	c7 44 24 04 48 70 10 	movl   $0x80107048,0x4(%esp)
 8010095d:	80 
 8010095e:	c7 04 24 20 a5 10 80 	movl   $0x8010a520,(%esp)
-80100965:	e8 76 38 00 00       	call   801041e0 <initlock>
+80100965:	e8 e6 39 00 00       	call   80104350 <initlock>
 
   devsw[CONSOLE].write = consolewrite;
   devsw[CONSOLE].read = consoleread;
@@ -1185,7 +1185,7 @@ exec(char *path, char **argv)
 80100a27:	45 4c 46 
 80100a2a:	75 d4                	jne    80100a00 <exec+0x60>
   if((pgdir = setupkvm()) == 0)
-80100a2c:	e8 3f 61 00 00       	call   80106b70 <setupkvm>
+80100a2c:	e8 0f 63 00 00       	call   80106d40 <setupkvm>
 80100a31:	85 c0                	test   %eax,%eax
 80100a33:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
 80100a39:	74 c5                	je     80100a00 <exec+0x60>
@@ -1232,7 +1232,7 @@ exec(char *path, char **argv)
 80100ac5:	89 44 24 04          	mov    %eax,0x4(%esp)
 80100ac9:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
 80100acf:	89 04 24             	mov    %eax,(%esp)
-80100ad2:	e8 09 5f 00 00       	call   801069e0 <allocuvm>
+80100ad2:	e8 d9 60 00 00       	call   80106bb0 <allocuvm>
 80100ad7:	85 c0                	test   %eax,%eax
 80100ad9:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
 80100adf:	74 3f                	je     80100b20 <exec+0x180>
@@ -1249,13 +1249,13 @@ exec(char *path, char **argv)
 80100b06:	8b 95 08 ff ff ff    	mov    -0xf8(%ebp),%edx
 80100b0c:	89 04 24             	mov    %eax,(%esp)
 80100b0f:	89 54 24 0c          	mov    %edx,0xc(%esp)
-80100b13:	e8 08 5e 00 00       	call   80106920 <loaduvm>
+80100b13:	e8 d8 5f 00 00       	call   80106af0 <loaduvm>
 80100b18:	85 c0                	test   %eax,%eax
 80100b1a:	0f 89 40 ff ff ff    	jns    80100a60 <exec+0xc0>
     freevm(pgdir);
 80100b20:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
 80100b26:	89 04 24             	mov    %eax,(%esp)
-80100b29:	e8 c2 5f 00 00       	call   80106af0 <freevm>
+80100b29:	e8 92 61 00 00       	call   80106cc0 <freevm>
 80100b2e:	e9 cd fe ff ff       	jmp    80100a00 <exec+0x60>
   iunlockput(ip);
 80100b33:	89 1c 24             	mov    %ebx,(%esp)
@@ -1274,21 +1274,21 @@ exec(char *path, char **argv)
 80100b5f:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
 80100b65:	89 54 24 08          	mov    %edx,0x8(%esp)
 80100b69:	89 04 24             	mov    %eax,(%esp)
-80100b6c:	e8 6f 5e 00 00       	call   801069e0 <allocuvm>
+80100b6c:	e8 3f 60 00 00       	call   80106bb0 <allocuvm>
 80100b71:	85 c0                	test   %eax,%eax
 80100b73:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
 80100b79:	75 33                	jne    80100bae <exec+0x20e>
     freevm(pgdir);
 80100b7b:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
 80100b81:	89 04 24             	mov    %eax,(%esp)
-80100b84:	e8 67 5f 00 00       	call   80106af0 <freevm>
+80100b84:	e8 37 61 00 00       	call   80106cc0 <freevm>
   return -1;
 80100b89:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 80100b8e:	e9 7f fe ff ff       	jmp    80100a12 <exec+0x72>
     end_op();
 80100b93:	e8 e8 1f 00 00       	call   80102b80 <end_op>
     cprintf("exec: fail\n");
-80100b98:	c7 04 24 a1 6e 10 80 	movl   $0x80106ea1,(%esp)
+80100b98:	c7 04 24 61 70 10 80 	movl   $0x80107061,(%esp)
 80100b9f:	e8 ac fa ff ff       	call   80100650 <cprintf>
     return -1;
 80100ba4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
@@ -1300,7 +1300,7 @@ exec(char *path, char **argv)
 80100bbb:	89 44 24 04          	mov    %eax,0x4(%esp)
 80100bbf:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
 80100bc5:	89 04 24             	mov    %eax,(%esp)
-80100bc8:	e8 53 60 00 00       	call   80106c20 <clearpteu>
+80100bc8:	e8 23 62 00 00       	call   80106df0 <clearpteu>
   for(argc = 0; argv[argc]; argc++) {
 80100bcd:	8b 45 0c             	mov    0xc(%ebp),%eax
 80100bd0:	8b 00                	mov    (%eax),%eax
@@ -1323,7 +1323,7 @@ exec(char *path, char **argv)
     sp = (sp - (strlen(argv[argc]) + 1)) & ~3;
 80100bf8:	89 04 24             	mov    %eax,(%esp)
 80100bfb:	89 95 ec fe ff ff    	mov    %edx,-0x114(%ebp)
-80100c01:	e8 2a 3a 00 00       	call   80104630 <strlen>
+80100c01:	e8 9a 3b 00 00       	call   801047a0 <strlen>
 80100c06:	f7 d0                	not    %eax
 80100c08:	01 c3                	add    %eax,%ebx
     if(copyout(pgdir, sp, argv[argc], strlen(argv[argc]) + 1) < 0)
@@ -1332,7 +1332,7 @@ exec(char *path, char **argv)
 80100c0c:	83 e3 fc             	and    $0xfffffffc,%ebx
     if(copyout(pgdir, sp, argv[argc], strlen(argv[argc]) + 1) < 0)
 80100c0f:	89 04 24             	mov    %eax,(%esp)
-80100c12:	e8 19 3a 00 00       	call   80104630 <strlen>
+80100c12:	e8 89 3b 00 00       	call   801047a0 <strlen>
 80100c17:	83 c0 01             	add    $0x1,%eax
 80100c1a:	89 44 24 0c          	mov    %eax,0xc(%esp)
 80100c1e:	8b 06                	mov    (%esi),%eax
@@ -1340,7 +1340,7 @@ exec(char *path, char **argv)
 80100c24:	89 44 24 08          	mov    %eax,0x8(%esp)
 80100c28:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
 80100c2e:	89 04 24             	mov    %eax,(%esp)
-80100c31:	e8 4a 61 00 00       	call   80106d80 <copyout>
+80100c31:	e8 1a 63 00 00       	call   80106f50 <copyout>
 80100c36:	85 c0                	test   %eax,%eax
 80100c38:	0f 88 3d ff ff ff    	js     80100b7b <exec+0x1db>
   for(argc = 0; argv[argc]; argc++) {
@@ -1381,7 +1381,7 @@ exec(char *path, char **argv)
   ustack[2] = sp - (argc+1)*4;  // argv pointer
 80100c9e:	89 95 60 ff ff ff    	mov    %edx,-0xa0(%ebp)
   if(copyout(pgdir, sp, ustack, (3+argc+1)*4) < 0)
-80100ca4:	e8 d7 60 00 00       	call   80106d80 <copyout>
+80100ca4:	e8 a7 62 00 00       	call   80106f50 <copyout>
 80100ca9:	85 c0                	test   %eax,%eax
 80100cab:	0f 88 ca fe ff ff    	js     80100b7b <exec+0x1db>
   for(last=s=path; *s; s++)
@@ -1411,7 +1411,7 @@ exec(char *path, char **argv)
 80100ce9:	89 f8                	mov    %edi,%eax
 80100ceb:	83 c0 6c             	add    $0x6c,%eax
 80100cee:	89 04 24             	mov    %eax,(%esp)
-80100cf1:	e8 fa 38 00 00       	call   801045f0 <safestrcpy>
+80100cf1:	e8 6a 3a 00 00       	call   80104760 <safestrcpy>
   curproc->pgdir = pgdir;
 80100cf6:	8b 8d f0 fe ff ff    	mov    -0x110(%ebp),%ecx
   oldpgdir = curproc->pgdir;
@@ -1431,10 +1431,10 @@ exec(char *path, char **argv)
 80100d19:	89 58 44             	mov    %ebx,0x44(%eax)
   switchuvm(curproc);
 80100d1c:	89 3c 24             	mov    %edi,(%esp)
-80100d1f:	e8 6c 5a 00 00       	call   80106790 <switchuvm>
+80100d1f:	e8 3c 5c 00 00       	call   80106960 <switchuvm>
   freevm(oldpgdir);
 80100d24:	89 34 24             	mov    %esi,(%esp)
-80100d27:	e8 c4 5d 00 00       	call   80106af0 <freevm>
+80100d27:	e8 94 5f 00 00       	call   80106cc0 <freevm>
   return 0;
 80100d2c:	31 c0                	xor    %eax,%eax
 80100d2e:	e9 df fc ff ff       	jmp    80100a12 <exec+0x72>
@@ -1460,10 +1460,10 @@ fileinit(void)
 80100d51:	89 e5                	mov    %esp,%ebp
 80100d53:	83 ec 18             	sub    $0x18,%esp
   initlock(&ftable.lock, "ftable");
-80100d56:	c7 44 24 04 ad 6e 10 	movl   $0x80106ead,0x4(%esp)
+80100d56:	c7 44 24 04 6d 70 10 	movl   $0x8010706d,0x4(%esp)
 80100d5d:	80 
 80100d5e:	c7 04 24 c0 ff 10 80 	movl   $0x8010ffc0,(%esp)
-80100d65:	e8 76 34 00 00       	call   801041e0 <initlock>
+80100d65:	e8 e6 35 00 00       	call   80104350 <initlock>
 }
 80100d6a:	c9                   	leave  
 80100d6b:	c3                   	ret    
@@ -1487,7 +1487,7 @@ filealloc(void)
 80100d79:	83 ec 14             	sub    $0x14,%esp
   acquire(&ftable.lock);
 80100d7c:	c7 04 24 c0 ff 10 80 	movl   $0x8010ffc0,(%esp)
-80100d83:	e8 c8 35 00 00       	call   80104350 <acquire>
+80100d83:	e8 38 37 00 00       	call   801044c0 <acquire>
 80100d88:	eb 11                	jmp    80100d9b <filealloc+0x2b>
 80100d8a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
   for(f = ftable.file; f < ftable.file + NFILE; f++){
@@ -1504,7 +1504,7 @@ filealloc(void)
       f->ref = 1;
 80100da9:	c7 43 04 01 00 00 00 	movl   $0x1,0x4(%ebx)
       release(&ftable.lock);
-80100db0:	e8 0b 36 00 00       	call   801043c0 <release>
+80100db0:	e8 7b 37 00 00       	call   80104530 <release>
       return f;
     }
   }
@@ -1521,7 +1521,7 @@ filealloc(void)
 80100dbd:	8d 76 00             	lea    0x0(%esi),%esi
   release(&ftable.lock);
 80100dc0:	c7 04 24 c0 ff 10 80 	movl   $0x8010ffc0,(%esp)
-80100dc7:	e8 f4 35 00 00       	call   801043c0 <release>
+80100dc7:	e8 64 37 00 00       	call   80104530 <release>
 }
 80100dcc:	83 c4 14             	add    $0x14,%esp
   return 0;
@@ -1546,7 +1546,7 @@ filedup(struct file *f)
 80100de7:	8b 5d 08             	mov    0x8(%ebp),%ebx
   acquire(&ftable.lock);
 80100dea:	c7 04 24 c0 ff 10 80 	movl   $0x8010ffc0,(%esp)
-80100df1:	e8 5a 35 00 00       	call   80104350 <acquire>
+80100df1:	e8 ca 36 00 00       	call   801044c0 <acquire>
   if(f->ref < 1)
 80100df6:	8b 43 04             	mov    0x4(%ebx),%eax
 80100df9:	85 c0                	test   %eax,%eax
@@ -1557,7 +1557,7 @@ filedup(struct file *f)
 80100e00:	89 43 04             	mov    %eax,0x4(%ebx)
   release(&ftable.lock);
 80100e03:	c7 04 24 c0 ff 10 80 	movl   $0x8010ffc0,(%esp)
-80100e0a:	e8 b1 35 00 00       	call   801043c0 <release>
+80100e0a:	e8 21 37 00 00       	call   80104530 <release>
   return f;
 }
 80100e0f:	83 c4 14             	add    $0x14,%esp
@@ -1566,7 +1566,7 @@ filedup(struct file *f)
 80100e15:	5d                   	pop    %ebp
 80100e16:	c3                   	ret    
     panic("filedup");
-80100e17:	c7 04 24 b4 6e 10 80 	movl   $0x80106eb4,(%esp)
+80100e17:	c7 04 24 74 70 10 80 	movl   $0x80107074,(%esp)
 80100e1e:	e8 3d f5 ff ff       	call   80100360 <panic>
 80100e23:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 80100e29:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
@@ -1588,7 +1588,7 @@ fileclose(struct file *f)
 
   acquire(&ftable.lock);
 80100e3c:	c7 04 24 c0 ff 10 80 	movl   $0x8010ffc0,(%esp)
-80100e43:	e8 08 35 00 00       	call   80104350 <acquire>
+80100e43:	e8 78 36 00 00       	call   801044c0 <acquire>
   if(f->ref < 1)
 80100e48:	8b 57 04             	mov    0x4(%edi),%edx
 80100e4b:	85 d2                	test   %edx,%edx
@@ -1613,7 +1613,7 @@ fileclose(struct file *f)
 80100e69:	5f                   	pop    %edi
 80100e6a:	5d                   	pop    %ebp
     release(&ftable.lock);
-80100e6b:	e9 50 35 00 00       	jmp    801043c0 <release>
+80100e6b:	e9 c0 36 00 00       	jmp    80104530 <release>
   ff = *f;
 80100e70:	0f b6 47 09          	movzbl 0x9(%edi),%eax
 80100e74:	8b 37                	mov    (%edi),%esi
@@ -1628,7 +1628,7 @@ fileclose(struct file *f)
   ff = *f;
 80100e8c:	89 45 e0             	mov    %eax,-0x20(%ebp)
   release(&ftable.lock);
-80100e8f:	e8 2c 35 00 00       	call   801043c0 <release>
+80100e8f:	e8 9c 36 00 00       	call   80104530 <release>
   if(ff.type == FD_PIPE)
 80100e94:	83 fe 01             	cmp    $0x1,%esi
 80100e97:	74 0f                	je     80100ea8 <fileclose+0x78>
@@ -1665,7 +1665,7 @@ fileclose(struct file *f)
     end_op();
 80100ed7:	e9 a4 1c 00 00       	jmp    80102b80 <end_op>
     panic("fileclose");
-80100edc:	c7 04 24 bc 6e 10 80 	movl   $0x80106ebc,(%esp)
+80100edc:	c7 04 24 7c 70 10 80 	movl   $0x8010707c,(%esp)
 80100ee3:	e8 78 f4 ff ff       	call   80100360 <panic>
 80100ee8:	90                   	nop
 80100ee9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
@@ -1799,7 +1799,7 @@ fileread(struct file *f, char *addr, int n)
 80100fc0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 80100fc5:	eb d8                	jmp    80100f9f <fileread+0x5f>
   panic("fileread");
-80100fc7:	c7 04 24 c6 6e 10 80 	movl   $0x80106ec6,(%esp)
+80100fc7:	c7 04 24 86 70 10 80 	movl   $0x80107086,(%esp)
 80100fce:	e8 8d f3 ff ff       	call   80100360 <panic>
 80100fd3:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 80100fd9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
@@ -1951,10 +1951,10 @@ filewrite(struct file *f, char *addr, int n)
     return pipewrite(f->pipe, addr, n);
 801010dc:	e9 0f 22 00 00       	jmp    801032f0 <pipewrite>
         panic("short filewrite");
-801010e1:	c7 04 24 cf 6e 10 80 	movl   $0x80106ecf,(%esp)
+801010e1:	c7 04 24 8f 70 10 80 	movl   $0x8010708f,(%esp)
 801010e8:	e8 73 f2 ff ff       	call   80100360 <panic>
   panic("filewrite");
-801010ed:	c7 04 24 d5 6e 10 80 	movl   $0x80106ed5,(%esp)
+801010ed:	c7 04 24 95 70 10 80 	movl   $0x80107095,(%esp)
 801010f4:	e8 67 f2 ff ff       	call   80100360 <panic>
 801010f9:	66 90                	xchg   %ax,%ax
 801010fb:	66 90                	xchg   %ax,%ax
@@ -2026,7 +2026,7 @@ bfree(int dev, uint b)
 80101163:	5d                   	pop    %ebp
 80101164:	c3                   	ret    
     panic("freeing free block");
-80101165:	c7 04 24 df 6e 10 80 	movl   $0x80106edf,(%esp)
+80101165:	c7 04 24 9f 70 10 80 	movl   $0x8010709f,(%esp)
 8010116c:	e8 ef f1 ff ff       	call   80100360 <panic>
 80101171:	eb 0d                	jmp    80101180 <balloc>
 80101173:	90                   	nop
@@ -2109,7 +2109,7 @@ bfree(int dev, uint b)
 80101219:	3b 05 c0 09 11 80    	cmp    0x801109c0,%eax
 8010121f:	0f 82 7b ff ff ff    	jb     801011a0 <balloc+0x20>
   panic("balloc: out of blocks");
-80101225:	c7 04 24 f2 6e 10 80 	movl   $0x80106ef2,(%esp)
+80101225:	c7 04 24 b2 70 10 80 	movl   $0x801070b2,(%esp)
 8010122c:	e8 2f f1 ff ff       	call   80100360 <panic>
 80101231:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
         bp->data[bi/8] |= m;  // Mark block in use.
@@ -2137,7 +2137,7 @@ bfree(int dev, uint b)
   memset(bp->data, 0, BSIZE);
 80101272:	8d 40 5c             	lea    0x5c(%eax),%eax
 80101275:	89 04 24             	mov    %eax,(%esp)
-80101278:	e8 93 31 00 00       	call   80104410 <memset>
+80101278:	e8 03 33 00 00       	call   80104580 <memset>
   log_write(bp);
 8010127d:	89 1c 24             	mov    %ebx,(%esp)
 80101280:	e8 2b 1a 00 00       	call   80102cb0 <log_write>
@@ -2185,7 +2185,7 @@ iget(uint dev, uint inum)
 {
 801012b9:	89 55 e4             	mov    %edx,-0x1c(%ebp)
   acquire(&icache.lock);
-801012bc:	e8 8f 30 00 00       	call   80104350 <acquire>
+801012bc:	e8 ff 31 00 00       	call   801044c0 <acquire>
   for(ip = &icache.inode[0]; ip < &icache.inode[NINODE]; ip++){
 801012c1:	8b 55 e4             	mov    -0x1c(%ebp),%edx
 801012c4:	eb 14                	jmp    801012da <iget+0x3a>
@@ -2219,7 +2219,7 @@ iget(uint dev, uint inum)
       ip->ref++;
 801012f6:	89 4b 08             	mov    %ecx,0x8(%ebx)
       release(&icache.lock);
-801012f9:	e8 c2 30 00 00       	call   801043c0 <release>
+801012f9:	e8 32 32 00 00       	call   80104530 <release>
   ip->ref = 1;
   ip->valid = 0;
   release(&icache.lock);
@@ -2254,7 +2254,7 @@ iget(uint dev, uint inum)
 80101330:	c7 46 4c 00 00 00 00 	movl   $0x0,0x4c(%esi)
   release(&icache.lock);
 80101337:	c7 04 24 e0 09 11 80 	movl   $0x801109e0,(%esp)
-8010133e:	e8 7d 30 00 00       	call   801043c0 <release>
+8010133e:	e8 ed 31 00 00       	call   80104530 <release>
 }
 80101343:	83 c4 1c             	add    $0x1c,%esp
 80101346:	89 f0                	mov    %esi,%eax
@@ -2264,7 +2264,7 @@ iget(uint dev, uint inum)
 8010134b:	5d                   	pop    %ebp
 8010134c:	c3                   	ret    
     panic("iget: no inodes");
-8010134d:	c7 04 24 08 6f 10 80 	movl   $0x80106f08,(%esp)
+8010134d:	c7 04 24 c8 70 10 80 	movl   $0x801070c8,(%esp)
 80101354:	e8 07 f0 ff ff       	call   80100360 <panic>
 80101359:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 
@@ -2370,7 +2370,7 @@ bmap(struct inode *ip, uint bn)
 801013ff:	89 83 8c 00 00 00    	mov    %eax,0x8c(%ebx)
 80101405:	eb 93                	jmp    8010139a <bmap+0x3a>
   panic("bmap: out of range");
-80101407:	c7 04 24 18 6f 10 80 	movl   $0x80106f18,(%esp)
+80101407:	c7 04 24 d8 70 10 80 	movl   $0x801070d8,(%esp)
 8010140e:	e8 4d ef ff ff       	call   80100360 <panic>
 80101413:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 80101419:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
@@ -2400,7 +2400,7 @@ bmap(struct inode *ip, uint bn)
   memmove(sb, bp->data, sizeof(*sb));
 8010144b:	8d 40 5c             	lea    0x5c(%eax),%eax
 8010144e:	89 44 24 04          	mov    %eax,0x4(%esp)
-80101452:	e8 59 30 00 00       	call   801044b0 <memmove>
+80101452:	e8 c9 31 00 00       	call   80104620 <memmove>
   brelse(bp);
 80101457:	89 5d 08             	mov    %ebx,0x8(%ebp)
 }
@@ -2421,16 +2421,16 @@ bmap(struct inode *ip, uint bn)
 80101474:	bb 20 0a 11 80       	mov    $0x80110a20,%ebx
 80101479:	83 ec 24             	sub    $0x24,%esp
   initlock(&icache.lock, "icache");
-8010147c:	c7 44 24 04 2b 6f 10 	movl   $0x80106f2b,0x4(%esp)
+8010147c:	c7 44 24 04 eb 70 10 	movl   $0x801070eb,0x4(%esp)
 80101483:	80 
 80101484:	c7 04 24 e0 09 11 80 	movl   $0x801109e0,(%esp)
-8010148b:	e8 50 2d 00 00       	call   801041e0 <initlock>
+8010148b:	e8 c0 2e 00 00       	call   80104350 <initlock>
     initsleeplock(&icache.inode[i].lock, "inode");
 80101490:	89 1c 24             	mov    %ebx,(%esp)
 80101493:	81 c3 90 00 00 00    	add    $0x90,%ebx
-80101499:	c7 44 24 04 32 6f 10 	movl   $0x80106f32,0x4(%esp)
+80101499:	c7 44 24 04 f2 70 10 	movl   $0x801070f2,0x4(%esp)
 801014a0:	80 
-801014a1:	e8 0a 2c 00 00       	call   801040b0 <initsleeplock>
+801014a1:	e8 7a 2d 00 00       	call   80104220 <initsleeplock>
   for(i = 0; i < NINODE; i++) {
 801014a6:	81 fb 40 26 11 80    	cmp    $0x80112640,%ebx
 801014ac:	75 e2                	jne    80101490 <iinit+0x20>
@@ -2442,7 +2442,7 @@ bmap(struct inode *ip, uint bn)
 801014bc:	e8 5f ff ff ff       	call   80101420 <readsb>
   cprintf("sb: size %d nblocks %d ninodes %d nlog %d logstart %d\
 801014c1:	a1 d8 09 11 80       	mov    0x801109d8,%eax
-801014c6:	c7 04 24 98 6f 10 80 	movl   $0x80106f98,(%esp)
+801014c6:	c7 04 24 58 71 10 80 	movl   $0x80107158,(%esp)
 801014cd:	89 44 24 1c          	mov    %eax,0x1c(%esp)
 801014d1:	a1 d4 09 11 80       	mov    0x801109d4,%eax
 801014d6:	89 44 24 18          	mov    %eax,0x18(%esp)
@@ -2520,7 +2520,7 @@ bmap(struct inode *ip, uint bn)
 801015a2:	00 
 801015a3:	89 55 dc             	mov    %edx,-0x24(%ebp)
 801015a6:	89 4d e0             	mov    %ecx,-0x20(%ebp)
-801015a9:	e8 62 2e 00 00       	call   80104410 <memset>
+801015a9:	e8 d2 2f 00 00       	call   80104580 <memset>
       dip->type = type;
 801015ae:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
       log_write(bp);   // mark it allocated on the disk
@@ -2553,7 +2553,7 @@ bmap(struct inode *ip, uint bn)
       return iget(dev, inum);
 801015dc:	e9 bf fc ff ff       	jmp    801012a0 <iget>
   panic("ialloc: no inodes");
-801015e1:	c7 04 24 38 6f 10 80 	movl   $0x80106f38,(%esp)
+801015e1:	c7 04 24 f8 70 10 80 	movl   $0x801070f8,(%esp)
 801015e8:	e8 73 ed ff ff       	call   80100360 <panic>
 801015ed:	8d 76 00             	lea    0x0(%esi),%esi
 
@@ -2606,7 +2606,7 @@ bmap(struct inode *ip, uint bn)
 80101655:	89 14 24             	mov    %edx,(%esp)
 80101658:	c7 44 24 08 34 00 00 	movl   $0x34,0x8(%esp)
 8010165f:	00 
-80101660:	e8 4b 2e 00 00       	call   801044b0 <memmove>
+80101660:	e8 bb 2f 00 00       	call   80104620 <memmove>
   log_write(bp);
 80101665:	89 34 24             	mov    %esi,(%esp)
 80101668:	e8 43 16 00 00       	call   80102cb0 <log_write>
@@ -2631,12 +2631,12 @@ bmap(struct inode *ip, uint bn)
 80101687:	8b 5d 08             	mov    0x8(%ebp),%ebx
   acquire(&icache.lock);
 8010168a:	c7 04 24 e0 09 11 80 	movl   $0x801109e0,(%esp)
-80101691:	e8 ba 2c 00 00       	call   80104350 <acquire>
+80101691:	e8 2a 2e 00 00       	call   801044c0 <acquire>
   ip->ref++;
 80101696:	83 43 08 01          	addl   $0x1,0x8(%ebx)
   release(&icache.lock);
 8010169a:	c7 04 24 e0 09 11 80 	movl   $0x801109e0,(%esp)
-801016a1:	e8 1a 2d 00 00       	call   801043c0 <release>
+801016a1:	e8 8a 2e 00 00       	call   80104530 <release>
 }
 801016a6:	83 c4 14             	add    $0x14,%esp
 801016a9:	89 d8                	mov    %ebx,%eax
@@ -2662,7 +2662,7 @@ bmap(struct inode *ip, uint bn)
   acquiresleep(&ip->lock);
 801016ce:	8d 43 0c             	lea    0xc(%ebx),%eax
 801016d1:	89 04 24             	mov    %eax,(%esp)
-801016d4:	e8 17 2a 00 00       	call   801040f0 <acquiresleep>
+801016d4:	e8 87 2b 00 00       	call   80104260 <acquiresleep>
   if(ip->valid == 0){
 801016d9:	8b 43 4c             	mov    0x4c(%ebx),%eax
 801016dc:	85 c0                	test   %eax,%eax
@@ -2713,7 +2713,7 @@ bmap(struct inode *ip, uint bn)
 80101740:	c7 44 24 08 34 00 00 	movl   $0x34,0x8(%esp)
 80101747:	00 
 80101748:	89 04 24             	mov    %eax,(%esp)
-8010174b:	e8 60 2d 00 00       	call   801044b0 <memmove>
+8010174b:	e8 d0 2e 00 00       	call   80104620 <memmove>
     brelse(bp);
 80101750:	89 34 24             	mov    %esi,(%esp)
 80101753:	e8 88 ea ff ff       	call   801001e0 <brelse>
@@ -2724,10 +2724,10 @@ bmap(struct inode *ip, uint bn)
     if(ip->type == 0)
 80101764:	0f 85 76 ff ff ff    	jne    801016e0 <ilock+0x30>
       panic("ilock: no type");
-8010176a:	c7 04 24 50 6f 10 80 	movl   $0x80106f50,(%esp)
+8010176a:	c7 04 24 10 71 10 80 	movl   $0x80107110,(%esp)
 80101771:	e8 ea eb ff ff       	call   80100360 <panic>
     panic("ilock");
-80101776:	c7 04 24 4a 6f 10 80 	movl   $0x80106f4a,(%esp)
+80101776:	c7 04 24 0a 71 10 80 	movl   $0x8010710a,(%esp)
 8010177d:	e8 de eb ff ff       	call   80100360 <panic>
 80101782:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 80101789:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
@@ -2745,7 +2745,7 @@ bmap(struct inode *ip, uint bn)
 8010179d:	74 24                	je     801017c3 <iunlock+0x33>
 8010179f:	8d 73 0c             	lea    0xc(%ebx),%esi
 801017a2:	89 34 24             	mov    %esi,(%esp)
-801017a5:	e8 e6 29 00 00       	call   80104190 <holdingsleep>
+801017a5:	e8 56 2b 00 00       	call   80104300 <holdingsleep>
 801017aa:	85 c0                	test   %eax,%eax
 801017ac:	74 15                	je     801017c3 <iunlock+0x33>
 801017ae:	8b 43 08             	mov    0x8(%ebx),%eax
@@ -2759,9 +2759,9 @@ bmap(struct inode *ip, uint bn)
 801017bc:	5e                   	pop    %esi
 801017bd:	5d                   	pop    %ebp
   releasesleep(&ip->lock);
-801017be:	e9 8d 29 00 00       	jmp    80104150 <releasesleep>
+801017be:	e9 fd 2a 00 00       	jmp    801042c0 <releasesleep>
     panic("iunlock");
-801017c3:	c7 04 24 5f 6f 10 80 	movl   $0x80106f5f,(%esp)
+801017c3:	c7 04 24 1f 71 10 80 	movl   $0x8010711f,(%esp)
 801017ca:	e8 91 eb ff ff       	call   80100360 <panic>
 801017cf:	90                   	nop
 
@@ -2777,7 +2777,7 @@ bmap(struct inode *ip, uint bn)
   acquiresleep(&ip->lock);
 801017dc:	8d 7e 0c             	lea    0xc(%esi),%edi
 801017df:	89 3c 24             	mov    %edi,(%esp)
-801017e2:	e8 09 29 00 00       	call   801040f0 <acquiresleep>
+801017e2:	e8 79 2a 00 00       	call   80104260 <acquiresleep>
   if(ip->valid && ip->nlink == 0){
 801017e7:	8b 56 4c             	mov    0x4c(%esi),%edx
 801017ea:	85 d2                	test   %edx,%edx
@@ -2786,10 +2786,10 @@ bmap(struct inode *ip, uint bn)
 801017f3:	74 2b                	je     80101820 <iput+0x50>
   releasesleep(&ip->lock);
 801017f5:	89 3c 24             	mov    %edi,(%esp)
-801017f8:	e8 53 29 00 00       	call   80104150 <releasesleep>
+801017f8:	e8 c3 2a 00 00       	call   801042c0 <releasesleep>
   acquire(&icache.lock);
 801017fd:	c7 04 24 e0 09 11 80 	movl   $0x801109e0,(%esp)
-80101804:	e8 47 2b 00 00       	call   80104350 <acquire>
+80101804:	e8 b7 2c 00 00       	call   801044c0 <acquire>
   ip->ref--;
 80101809:	83 6e 08 01          	subl   $0x1,0x8(%esi)
   release(&icache.lock);
@@ -2801,15 +2801,15 @@ bmap(struct inode *ip, uint bn)
 80101819:	5f                   	pop    %edi
 8010181a:	5d                   	pop    %ebp
   release(&icache.lock);
-8010181b:	e9 a0 2b 00 00       	jmp    801043c0 <release>
+8010181b:	e9 10 2d 00 00       	jmp    80104530 <release>
     acquire(&icache.lock);
 80101820:	c7 04 24 e0 09 11 80 	movl   $0x801109e0,(%esp)
-80101827:	e8 24 2b 00 00       	call   80104350 <acquire>
+80101827:	e8 94 2c 00 00       	call   801044c0 <acquire>
     int r = ip->ref;
 8010182c:	8b 5e 08             	mov    0x8(%esi),%ebx
     release(&icache.lock);
 8010182f:	c7 04 24 e0 09 11 80 	movl   $0x801109e0,(%esp)
-80101836:	e8 85 2b 00 00       	call   801043c0 <release>
+80101836:	e8 f5 2c 00 00       	call   80104530 <release>
     if(r == 1){
 8010183b:	83 fb 01             	cmp    $0x1,%ebx
 8010183e:	75 b5                	jne    801017f5 <iput+0x25>
@@ -3062,7 +3062,7 @@ readi(struct inode *ip, char *dst, uint off, uint n)
     memmove(dst, bp->data + off%BSIZE, m);
 80101a02:	89 55 dc             	mov    %edx,-0x24(%ebp)
 80101a05:	89 04 24             	mov    %eax,(%esp)
-80101a08:	e8 a3 2a 00 00       	call   801044b0 <memmove>
+80101a08:	e8 13 2c 00 00       	call   80104620 <memmove>
     brelse(bp);
 80101a0d:	8b 55 dc             	mov    -0x24(%ebp),%edx
 80101a10:	89 14 24             	mov    %edx,(%esp)
@@ -3192,7 +3192,7 @@ writei(struct inode *ip, char *src, uint off, uint n)
 80101af9:	89 54 24 04          	mov    %edx,0x4(%esp)
 80101afd:	89 5c 24 08          	mov    %ebx,0x8(%esp)
 80101b01:	89 04 24             	mov    %eax,(%esp)
-80101b04:	e8 a7 29 00 00       	call   801044b0 <memmove>
+80101b04:	e8 17 2b 00 00       	call   80104620 <memmove>
     log_write(bp);
 80101b09:	89 3c 24             	mov    %edi,(%esp)
 80101b0c:	e8 9f 11 00 00       	call   80102cb0 <log_write>
@@ -3279,7 +3279,7 @@ namecmp(const char *s, const char *t)
 80101ba1:	89 44 24 04          	mov    %eax,0x4(%esp)
 80101ba5:	8b 45 08             	mov    0x8(%ebp),%eax
 80101ba8:	89 04 24             	mov    %eax,(%esp)
-80101bab:	e8 80 29 00 00       	call   80104530 <strncmp>
+80101bab:	e8 f0 2a 00 00       	call   801046a0 <strncmp>
 }
 80101bb0:	c9                   	leave  
 80101bb1:	c3                   	ret    
@@ -3339,7 +3339,7 @@ dirlookup(struct inode *dp, char *name, uint *poff)
 80101c1e:	c7 44 24 08 0e 00 00 	movl   $0xe,0x8(%esp)
 80101c25:	00 
 80101c26:	89 04 24             	mov    %eax,(%esp)
-80101c29:	e8 02 29 00 00       	call   80104530 <strncmp>
+80101c29:	e8 72 2a 00 00       	call   801046a0 <strncmp>
       continue;
     if(namecmp(name, de.name) == 0){
 80101c2e:	85 c0                	test   %eax,%eax
@@ -3379,10 +3379,10 @@ dirlookup(struct inode *dp, char *name, uint *poff)
 80101c60:	5d                   	pop    %ebp
 80101c61:	c3                   	ret    
       panic("dirlookup read");
-80101c62:	c7 04 24 79 6f 10 80 	movl   $0x80106f79,(%esp)
+80101c62:	c7 04 24 39 71 10 80 	movl   $0x80107139,(%esp)
 80101c69:	e8 f2 e6 ff ff       	call   80100360 <panic>
     panic("dirlookup not DIR");
-80101c6e:	c7 04 24 67 6f 10 80 	movl   $0x80106f67,(%esp)
+80101c6e:	c7 04 24 27 71 10 80 	movl   $0x80107127,(%esp)
 80101c75:	e8 e6 e6 ff ff       	call   80100360 <panic>
 80101c7a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 
@@ -3416,12 +3416,12 @@ namex(char *path, int nameiparent, char *name)
 80101c9e:	8b 70 68             	mov    0x68(%eax),%esi
   acquire(&icache.lock);
 80101ca1:	c7 04 24 e0 09 11 80 	movl   $0x801109e0,(%esp)
-80101ca8:	e8 a3 26 00 00       	call   80104350 <acquire>
+80101ca8:	e8 13 28 00 00       	call   801044c0 <acquire>
   ip->ref++;
 80101cad:	83 46 08 01          	addl   $0x1,0x8(%esi)
   release(&icache.lock);
 80101cb1:	c7 04 24 e0 09 11 80 	movl   $0x801109e0,(%esp)
-80101cb8:	e8 03 27 00 00       	call   801043c0 <release>
+80101cb8:	e8 73 28 00 00       	call   80104530 <release>
 80101cbd:	eb 04                	jmp    80101cc3 <namex+0x43>
 80101cbf:	90                   	nop
     path++;
@@ -3461,7 +3461,7 @@ namex(char *path, int nameiparent, char *name)
 80101d14:	00 
 80101d15:	89 3c 24             	mov    %edi,(%esp)
 80101d18:	89 55 e4             	mov    %edx,-0x1c(%ebp)
-80101d1b:	e8 90 27 00 00       	call   801044b0 <memmove>
+80101d1b:	e8 00 29 00 00       	call   80104620 <memmove>
     path++;
 80101d20:	8b 55 e4             	mov    -0x1c(%ebp),%edx
 80101d23:	89 d3                	mov    %edx,%ebx
@@ -3527,7 +3527,7 @@ namex(char *path, int nameiparent, char *name)
 80101da0:	89 3c 24             	mov    %edi,(%esp)
 80101da3:	89 55 dc             	mov    %edx,-0x24(%ebp)
 80101da6:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
-80101da9:	e8 02 27 00 00       	call   801044b0 <memmove>
+80101da9:	e8 72 28 00 00       	call   80104620 <memmove>
     name[len] = 0;
 80101dae:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
 80101db1:	8b 55 dc             	mov    -0x24(%ebp),%edx
@@ -3643,7 +3643,7 @@ namex(char *path, int nameiparent, char *name)
 80101e99:	89 44 24 04          	mov    %eax,0x4(%esp)
 80101e9d:	8d 45 da             	lea    -0x26(%ebp),%eax
 80101ea0:	89 04 24             	mov    %eax,(%esp)
-80101ea3:	e8 f8 26 00 00       	call   801045a0 <strncpy>
+80101ea3:	e8 68 28 00 00       	call   80104710 <strncpy>
   de.inum = inum;
 80101ea8:	8b 45 10             	mov    0x10(%ebp),%eax
   if(writei(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
@@ -3674,10 +3674,10 @@ namex(char *path, int nameiparent, char *name)
 80101ede:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 80101ee3:	eb e9                	jmp    80101ece <dirlink+0xae>
       panic("dirlink read");
-80101ee5:	c7 04 24 88 6f 10 80 	movl   $0x80106f88,(%esp)
+80101ee5:	c7 04 24 48 71 10 80 	movl   $0x80107148,(%esp)
 80101eec:	e8 6f e4 ff ff       	call   80100360 <panic>
     panic("dirlink");
-80101ef1:	c7 04 24 82 75 10 80 	movl   $0x80107582,(%esp)
+80101ef1:	c7 04 24 aa 77 10 80 	movl   $0x801077aa,(%esp)
 80101ef8:	e8 63 e4 ff ff       	call   80100360 <panic>
 80101efd:	8d 76 00             	lea    0x0(%esi),%esi
 
@@ -3823,10 +3823,10 @@ idestart(struct buf *b)
 80101fdd:	5d                   	pop    %ebp
 80101fde:	c3                   	ret    
     panic("incorrect blockno");
-80101fdf:	c7 04 24 f4 6f 10 80 	movl   $0x80106ff4,(%esp)
+80101fdf:	c7 04 24 b4 71 10 80 	movl   $0x801071b4,(%esp)
 80101fe6:	e8 75 e3 ff ff       	call   80100360 <panic>
     panic("idestart");
-80101feb:	c7 04 24 eb 6f 10 80 	movl   $0x80106feb,(%esp)
+80101feb:	c7 04 24 ab 71 10 80 	movl   $0x801071ab,(%esp)
 80101ff2:	e8 69 e3 ff ff       	call   80100360 <panic>
 80101ff7:	89 f6                	mov    %esi,%esi
 80101ff9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
@@ -3837,10 +3837,10 @@ idestart(struct buf *b)
 80102001:	89 e5                	mov    %esp,%ebp
 80102003:	83 ec 18             	sub    $0x18,%esp
   initlock(&idelock, "ide");
-80102006:	c7 44 24 04 06 70 10 	movl   $0x80107006,0x4(%esp)
+80102006:	c7 44 24 04 c6 71 10 	movl   $0x801071c6,0x4(%esp)
 8010200d:	80 
 8010200e:	c7 04 24 80 a5 10 80 	movl   $0x8010a580,(%esp)
-80102015:	e8 c6 21 00 00       	call   801041e0 <initlock>
+80102015:	e8 36 23 00 00       	call   80104350 <initlock>
   ioapicenable(IRQ_IDE, ncpu - 1);
 8010201a:	a1 00 2d 11 80       	mov    0x80112d00,%eax
 8010201f:	c7 04 24 0e 00 00 00 	movl   $0xe,(%esp)
@@ -3900,7 +3900,7 @@ ideintr(void)
   // First queued buffer is the active request.
   acquire(&idelock);
 80102089:	c7 04 24 80 a5 10 80 	movl   $0x8010a580,(%esp)
-80102090:	e8 bb 22 00 00       	call   80104350 <acquire>
+80102090:	e8 2b 24 00 00       	call   801044c0 <acquire>
 
   if((b = idequeue) == 0){
 80102095:	8b 1d 64 a5 10 80    	mov    0x8010a564,%ebx
@@ -3928,7 +3928,7 @@ ideintr(void)
 801020b7:	89 33                	mov    %esi,(%ebx)
   wakeup(b);
 801020b9:	89 1c 24             	mov    %ebx,(%esp)
-801020bc:	e8 2f 1e 00 00       	call   80103ef0 <wakeup>
+801020bc:	e8 9f 1f 00 00       	call   80104060 <wakeup>
 
   // Start disk on next buf in queue.
   if(idequeue != 0)
@@ -3939,7 +3939,7 @@ ideintr(void)
 801020ca:	e8 71 fe ff ff       	call   80101f40 <idestart>
     release(&idelock);
 801020cf:	c7 04 24 80 a5 10 80 	movl   $0x8010a580,(%esp)
-801020d6:	e8 e5 22 00 00       	call   801043c0 <release>
+801020d6:	e8 55 24 00 00       	call   80104530 <release>
 
   release(&idelock);
 }
@@ -3992,7 +3992,7 @@ iderw(struct buf *b)
   if(!holdingsleep(&b->lock))
 8010212a:	8d 43 0c             	lea    0xc(%ebx),%eax
 8010212d:	89 04 24             	mov    %eax,(%esp)
-80102130:	e8 5b 20 00 00       	call   80104190 <holdingsleep>
+80102130:	e8 cb 21 00 00       	call   80104300 <holdingsleep>
 80102135:	85 c0                	test   %eax,%eax
 80102137:	0f 84 9e 00 00 00    	je     801021db <iderw+0xbb>
     panic("iderw: buf not locked");
@@ -4013,7 +4013,7 @@ iderw(struct buf *b)
 
   acquire(&idelock);  //DOC:acquire-lock
 8010215f:	c7 04 24 80 a5 10 80 	movl   $0x8010a580,(%esp)
-80102166:	e8 e5 21 00 00       	call   80104350 <acquire>
+80102166:	e8 55 23 00 00       	call   801044c0 <acquire>
 
   // Append b to idequeue.
   b->qnext = 0;
@@ -4051,7 +4051,7 @@ iderw(struct buf *b)
 801021a0:	c7 44 24 04 80 a5 10 	movl   $0x8010a580,0x4(%esp)
 801021a7:	80 
 801021a8:	89 1c 24             	mov    %ebx,(%esp)
-801021ab:	e8 60 1a 00 00       	call   80103c10 <sleep>
+801021ab:	e8 d0 1b 00 00       	call   80103d80 <sleep>
   while((b->flags & (B_VALID|B_DIRTY)) != B_VALID){
 801021b0:	8b 13                	mov    (%ebx),%edx
 801021b2:	83 e2 06             	and    $0x6,%edx
@@ -4067,7 +4067,7 @@ iderw(struct buf *b)
 801021c4:	5b                   	pop    %ebx
 801021c5:	5d                   	pop    %ebp
   release(&idelock);
-801021c6:	e9 f5 21 00 00       	jmp    801043c0 <release>
+801021c6:	e9 65 23 00 00       	jmp    80104530 <release>
   for(pp=&idequeue; *pp; pp=&(*pp)->qnext)  //DOC:insert-queue
 801021cb:	b8 64 a5 10 80       	mov    $0x8010a564,%eax
 801021d0:	eb ba                	jmp    8010218c <iderw+0x6c>
@@ -4076,13 +4076,13 @@ iderw(struct buf *b)
 801021d4:	e8 67 fd ff ff       	call   80101f40 <idestart>
 801021d9:	eb bb                	jmp    80102196 <iderw+0x76>
     panic("iderw: buf not locked");
-801021db:	c7 04 24 0a 70 10 80 	movl   $0x8010700a,(%esp)
+801021db:	c7 04 24 ca 71 10 80 	movl   $0x801071ca,(%esp)
 801021e2:	e8 79 e1 ff ff       	call   80100360 <panic>
     panic("iderw: ide disk 1 not present");
-801021e7:	c7 04 24 35 70 10 80 	movl   $0x80107035,(%esp)
+801021e7:	c7 04 24 f5 71 10 80 	movl   $0x801071f5,(%esp)
 801021ee:	e8 6d e1 ff ff       	call   80100360 <panic>
     panic("iderw: nothing to do");
-801021f3:	c7 04 24 20 70 10 80 	movl   $0x80107020,(%esp)
+801021f3:	c7 04 24 e0 71 10 80 	movl   $0x801071e0,(%esp)
 801021fa:	e8 61 e1 ff ff       	call   80100360 <panic>
 801021ff:	90                   	nop
 
@@ -4128,7 +4128,7 @@ ioapicinit(void)
 80102244:	39 c2                	cmp    %eax,%edx
 80102246:	74 12                	je     8010225a <ioapicinit+0x5a>
     cprintf("ioapicinit: id isn't equal to ioapicid; not a MP\n");
-80102248:	c7 04 24 54 70 10 80 	movl   $0x80107054,(%esp)
+80102248:	c7 04 24 14 72 10 80 	movl   $0x80107214,(%esp)
 8010224f:	e8 fc e3 ff ff       	call   80100650 <cprintf>
 80102254:	8b 1d 34 26 11 80    	mov    0x80112634,%ebx
 8010225a:	ba 10 00 00 00       	mov    $0x10,%edx
@@ -4247,7 +4247,7 @@ kfree(char *v)
   if((uint)v % PGSIZE || v < end || V2P(v) >= PHYSTOP)
 801022fa:	f7 c3 ff 0f 00 00    	test   $0xfff,%ebx
 80102300:	75 7c                	jne    8010237e <kfree+0x8e>
-80102302:	81 fb a8 56 11 80    	cmp    $0x801156a8,%ebx
+80102302:	81 fb a8 5b 11 80    	cmp    $0x80115ba8,%ebx
 80102308:	72 74                	jb     8010237e <kfree+0x8e>
 8010230a:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
 80102310:	3d ff ff ff 0d       	cmp    $0xdffffff,%eax
@@ -4261,7 +4261,7 @@ kfree(char *v)
 8010231f:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
 80102326:	00 
 80102327:	89 1c 24             	mov    %ebx,(%esp)
-8010232a:	e8 e1 20 00 00       	call   80104410 <memset>
+8010232a:	e8 51 22 00 00       	call   80104580 <memset>
 
   if(kmem.use_lock)
 8010232f:	8b 15 74 26 11 80    	mov    0x80112674,%edx
@@ -4294,14 +4294,14 @@ kfree(char *v)
 80102362:	5b                   	pop    %ebx
 80102363:	5d                   	pop    %ebp
     release(&kmem.lock);
-80102364:	e9 57 20 00 00       	jmp    801043c0 <release>
+80102364:	e9 c7 21 00 00       	jmp    80104530 <release>
 80102369:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     acquire(&kmem.lock);
 80102370:	c7 04 24 40 26 11 80 	movl   $0x80112640,(%esp)
-80102377:	e8 d4 1f 00 00       	call   80104350 <acquire>
+80102377:	e8 44 21 00 00       	call   801044c0 <acquire>
 8010237c:	eb bb                	jmp    80102339 <kfree+0x49>
     panic("kfree");
-8010237e:	c7 04 24 86 70 10 80 	movl   $0x80107086,(%esp)
+8010237e:	c7 04 24 46 72 10 80 	movl   $0x80107246,(%esp)
 80102385:	e8 d6 df ff ff       	call   80100360 <panic>
 8010238a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 
@@ -4352,10 +4352,10 @@ kfree(char *v)
 801023e5:	83 ec 10             	sub    $0x10,%esp
 801023e8:	8b 75 0c             	mov    0xc(%ebp),%esi
   initlock(&kmem.lock, "kmem");
-801023eb:	c7 44 24 04 8c 70 10 	movl   $0x8010708c,0x4(%esp)
+801023eb:	c7 44 24 04 4c 72 10 	movl   $0x8010724c,0x4(%esp)
 801023f2:	80 
 801023f3:	c7 04 24 40 26 11 80 	movl   $0x80112640,(%esp)
-801023fa:	e8 e1 1d 00 00       	call   801041e0 <initlock>
+801023fa:	e8 51 1f 00 00       	call   80104350 <initlock>
   p = (char*)PGROUNDUP((uint)vstart);
 801023ff:	8b 45 08             	mov    0x8(%ebp),%eax
   kmem.use_lock = 0;
@@ -4459,7 +4459,7 @@ kalloc(void)
 801024c4:	74 0c                	je     801024d2 <kalloc+0x32>
     release(&kmem.lock);
 801024c6:	c7 04 24 40 26 11 80 	movl   $0x80112640,(%esp)
-801024cd:	e8 ee 1e 00 00       	call   801043c0 <release>
+801024cd:	e8 5e 20 00 00       	call   80104530 <release>
   return (char*)r;
 }
 801024d2:	83 c4 14             	add    $0x14,%esp
@@ -4470,7 +4470,7 @@ kalloc(void)
 801024da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     acquire(&kmem.lock);
 801024e0:	c7 04 24 40 26 11 80 	movl   $0x80112640,(%esp)
-801024e7:	e8 64 1e 00 00       	call   80104350 <acquire>
+801024e7:	e8 d4 1f 00 00       	call   801044c0 <acquire>
 801024ec:	a1 74 26 11 80       	mov    0x80112674,%eax
 801024f1:	eb bd                	jmp    801024b0 <kalloc+0x10>
 801024f3:	66 90                	xchg   %ax,%ax
@@ -4515,7 +4515,7 @@ kalloc(void)
 8010252f:	89 c1                	mov    %eax,%ecx
 80102531:	83 e1 7f             	and    $0x7f,%ecx
     shift &= ~(shiftcode[data] | E0ESC);
-80102534:	0f b6 81 c0 71 10 80 	movzbl -0x7fef8e40(%ecx),%eax
+80102534:	0f b6 81 80 73 10 80 	movzbl -0x7fef8c80(%ecx),%eax
 8010253b:	83 c8 40             	or     $0x40,%eax
 8010253e:	0f b6 c0             	movzbl %al,%eax
 80102541:	f7 d0                	not    %eax
@@ -4543,9 +4543,9 @@ kalloc(void)
   }
 
   shift |= shiftcode[data];
-80102568:	0f b6 91 c0 71 10 80 	movzbl -0x7fef8e40(%ecx),%edx
+80102568:	0f b6 91 80 73 10 80 	movzbl -0x7fef8c80(%ecx),%edx
   shift ^= togglecode[data];
-8010256f:	0f b6 81 c0 70 10 80 	movzbl -0x7fef8f40(%ecx),%eax
+8010256f:	0f b6 81 80 72 10 80 	movzbl -0x7fef8d80(%ecx),%eax
   shift |= shiftcode[data];
 80102576:	09 da                	or     %ebx,%edx
   shift ^= togglecode[data];
@@ -4553,7 +4553,7 @@ kalloc(void)
   c = charcode[shift & (CTL | SHIFT)][data];
 8010257a:	89 d0                	mov    %edx,%eax
 8010257c:	83 e0 03             	and    $0x3,%eax
-8010257f:	8b 04 85 a0 70 10 80 	mov    -0x7fef8f60(,%eax,4),%eax
+8010257f:	8b 04 85 60 72 10 80 	mov    -0x7fef8da0(,%eax,4),%eax
   shift ^= togglecode[data];
 80102586:	89 15 b4 a5 10 80    	mov    %edx,0x8010a5b4
   if(shift & CAPSLOCK){
@@ -4971,7 +4971,7 @@ cmostime(struct rtcdate *r)
 80102894:	00 
 80102895:	89 7c 24 04          	mov    %edi,0x4(%esp)
 80102899:	89 1c 24             	mov    %ebx,(%esp)
-8010289c:	e8 bf 1b 00 00       	call   80104460 <memcmp>
+8010289c:	e8 2f 1d 00 00       	call   801045d0 <memcmp>
 801028a1:	85 c0                	test   %eax,%eax
 801028a3:	75 c3                	jne    80102868 <cmostime+0x28>
       break;
@@ -5112,7 +5112,7 @@ install_trans(void)
 801029bd:	89 44 24 04          	mov    %eax,0x4(%esp)
 801029c1:	8d 46 5c             	lea    0x5c(%esi),%eax
 801029c4:	89 04 24             	mov    %eax,(%esp)
-801029c7:	e8 e4 1a 00 00       	call   801044b0 <memmove>
+801029c7:	e8 54 1c 00 00       	call   80104620 <memmove>
     bwrite(dbuf);  // write dst to disk
 801029cc:	89 34 24             	mov    %esi,(%esp)
 801029cf:	e8 cc d7 ff ff       	call   801001a0 <bwrite>
@@ -5204,10 +5204,10 @@ write_head(void)
 80102a75:	83 ec 30             	sub    $0x30,%esp
 80102a78:	8b 5d 08             	mov    0x8(%ebp),%ebx
   initlock(&log.lock, "log");
-80102a7b:	c7 44 24 04 c0 72 10 	movl   $0x801072c0,0x4(%esp)
+80102a7b:	c7 44 24 04 80 74 10 	movl   $0x80107480,0x4(%esp)
 80102a82:	80 
 80102a83:	c7 04 24 80 26 11 80 	movl   $0x80112680,(%esp)
-80102a8a:	e8 51 17 00 00       	call   801041e0 <initlock>
+80102a8a:	e8 c1 18 00 00       	call   80104350 <initlock>
   readsb(dev, &sb);
 80102a8f:	8d 45 dc             	lea    -0x24(%ebp),%eax
 80102a92:	89 44 24 04          	mov    %eax,0x4(%esp)
@@ -5284,7 +5284,7 @@ begin_op(void)
 80102b13:	83 ec 18             	sub    $0x18,%esp
   acquire(&log.lock);
 80102b16:	c7 04 24 80 26 11 80 	movl   $0x80112680,(%esp)
-80102b1d:	e8 2e 18 00 00       	call   80104350 <acquire>
+80102b1d:	e8 9e 19 00 00       	call   801044c0 <acquire>
 80102b22:	eb 18                	jmp    80102b3c <begin_op+0x2c>
 80102b24:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   while(1){
@@ -5293,7 +5293,7 @@ begin_op(void)
 80102b28:	c7 44 24 04 80 26 11 	movl   $0x80112680,0x4(%esp)
 80102b2f:	80 
 80102b30:	c7 04 24 80 26 11 80 	movl   $0x80112680,(%esp)
-80102b37:	e8 d4 10 00 00       	call   80103c10 <sleep>
+80102b37:	e8 44 12 00 00       	call   80103d80 <sleep>
     if(log.committing){
 80102b3c:	a1 c0 26 11 80       	mov    0x801126c0,%eax
 80102b41:	85 c0                	test   %eax,%eax
@@ -5315,7 +5315,7 @@ begin_op(void)
       log.outstanding += 1;
 80102b65:	a3 bc 26 11 80       	mov    %eax,0x801126bc
       release(&log.lock);
-80102b6a:	e8 51 18 00 00       	call   801043c0 <release>
+80102b6a:	e8 c1 19 00 00       	call   80104530 <release>
       break;
     }
   }
@@ -5354,7 +5354,7 @@ end_op(void)
 
   acquire(&log.lock);
 80102b89:	c7 04 24 80 26 11 80 	movl   $0x80112680,(%esp)
-80102b90:	e8 bb 17 00 00       	call   80104350 <acquire>
+80102b90:	e8 2b 19 00 00       	call   801044c0 <acquire>
   log.outstanding -= 1;
 80102b95:	a1 bc 26 11 80       	mov    0x801126bc,%eax
   if(log.committing)
@@ -5389,7 +5389,7 @@ commit()
 80102bc1:	c7 05 c0 26 11 80 01 	movl   $0x1,0x801126c0
 80102bc8:	00 00 00 
   release(&log.lock);
-80102bcb:	e8 f0 17 00 00       	call   801043c0 <release>
+80102bcb:	e8 60 19 00 00       	call   80104530 <release>
   if (log.lh.n > 0) {
 80102bd0:	a1 c8 26 11 80       	mov    0x801126c8,%eax
 80102bd5:	85 c0                	test   %eax,%eax
@@ -5423,7 +5423,7 @@ commit()
 80102c25:	89 44 24 04          	mov    %eax,0x4(%esp)
 80102c29:	8d 46 5c             	lea    0x5c(%esi),%eax
 80102c2c:	89 04 24             	mov    %eax,(%esp)
-80102c2f:	e8 7c 18 00 00       	call   801044b0 <memmove>
+80102c2f:	e8 ec 19 00 00       	call   80104620 <memmove>
     bwrite(to);  // write the log
 80102c34:	89 34 24             	mov    %esi,(%esp)
 80102c37:	e8 64 d5 ff ff       	call   801001a0 <bwrite>
@@ -5448,16 +5448,16 @@ commit()
 80102c68:	e8 93 fd ff ff       	call   80102a00 <write_head>
     acquire(&log.lock);
 80102c6d:	c7 04 24 80 26 11 80 	movl   $0x80112680,(%esp)
-80102c74:	e8 d7 16 00 00       	call   80104350 <acquire>
+80102c74:	e8 47 18 00 00       	call   801044c0 <acquire>
     log.committing = 0;
 80102c79:	c7 05 c0 26 11 80 00 	movl   $0x0,0x801126c0
 80102c80:	00 00 00 
     wakeup(&log);
 80102c83:	c7 04 24 80 26 11 80 	movl   $0x80112680,(%esp)
-80102c8a:	e8 61 12 00 00       	call   80103ef0 <wakeup>
+80102c8a:	e8 d1 13 00 00       	call   80104060 <wakeup>
     release(&log.lock);
 80102c8f:	c7 04 24 80 26 11 80 	movl   $0x80112680,(%esp)
-80102c96:	e8 25 17 00 00       	call   801043c0 <release>
+80102c96:	e8 95 18 00 00       	call   80104530 <release>
 }
 80102c9b:	83 c4 1c             	add    $0x1c,%esp
 80102c9e:	5b                   	pop    %ebx
@@ -5466,7 +5466,7 @@ commit()
 80102ca1:	5d                   	pop    %ebp
 80102ca2:	c3                   	ret    
     panic("log.committing");
-80102ca3:	c7 04 24 c4 72 10 80 	movl   $0x801072c4,(%esp)
+80102ca3:	c7 04 24 84 74 10 80 	movl   $0x80107484,(%esp)
 80102caa:	e8 b1 d6 ff ff       	call   80100360 <panic>
 80102caf:	90                   	nop
 
@@ -5503,7 +5503,7 @@ log_write(struct buf *b)
 
   acquire(&log.lock);
 80102ce6:	c7 04 24 80 26 11 80 	movl   $0x80112680,(%esp)
-80102ced:	e8 5e 16 00 00       	call   80104350 <acquire>
+80102ced:	e8 ce 17 00 00       	call   801044c0 <acquire>
   for (i = 0; i < log.lh.n; i++) {
 80102cf2:	8b 15 c8 26 11 80    	mov    0x801126c8,%edx
 80102cf8:	83 fa 00             	cmp    $0x0,%edx
@@ -5540,7 +5540,7 @@ log_write(struct buf *b)
 80102d3d:	5b                   	pop    %ebx
 80102d3e:	5d                   	pop    %ebp
   release(&log.lock);
-80102d3f:	e9 7c 16 00 00       	jmp    801043c0 <release>
+80102d3f:	e9 ec 17 00 00       	jmp    80104530 <release>
 80102d44:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   log.lh.block[i] = b->blockno;
 80102d48:	89 0c 85 cc 26 11 80 	mov    %ecx,-0x7feed934(,%eax,4)
@@ -5552,10 +5552,10 @@ log_write(struct buf *b)
 80102d5b:	eb ca                	jmp    80102d27 <log_write+0x77>
 80102d5d:	8d 76 00             	lea    0x0(%esi),%esi
     panic("too big a transaction");
-80102d60:	c7 04 24 d3 72 10 80 	movl   $0x801072d3,(%esp)
+80102d60:	c7 04 24 93 74 10 80 	movl   $0x80107493,(%esp)
 80102d67:	e8 f4 d5 ff ff       	call   80100360 <panic>
     panic("log_write outside of trans");
-80102d6c:	c7 04 24 e9 72 10 80 	movl   $0x801072e9,(%esp)
+80102d6c:	c7 04 24 a9 74 10 80 	movl   $0x801074a9,(%esp)
 80102d73:	e8 e8 d5 ff ff       	call   80100360 <panic>
 80102d78:	66 90                	xchg   %ax,%ax
 80102d7a:	66 90                	xchg   %ax,%ax
@@ -5578,11 +5578,11 @@ mpmain(void)
 80102d8c:	89 c3                	mov    %eax,%ebx
 80102d8e:	e8 ed 08 00 00       	call   80103680 <cpuid>
 80102d93:	89 5c 24 08          	mov    %ebx,0x8(%esp)
-80102d97:	c7 04 24 04 73 10 80 	movl   $0x80107304,(%esp)
+80102d97:	c7 04 24 c4 74 10 80 	movl   $0x801074c4,(%esp)
 80102d9e:	89 44 24 04          	mov    %eax,0x4(%esp)
 80102da2:	e8 a9 d8 ff ff       	call   80100650 <cprintf>
   idtinit();       // load idt register
-80102da7:	e8 f4 28 00 00       	call   801056a0 <idtinit>
+80102da7:	e8 c4 2a 00 00       	call   80105870 <idtinit>
   xchg(&(mycpu()->started), 1); // tell startothers() we're up
 80102dac:	e8 4f 08 00 00       	call   80103600 <mycpu>
 80102db1:	89 c2                	mov    %eax,%edx
@@ -5595,7 +5595,7 @@ xchg(volatile uint *addr, uint newval)
 80102db3:	b8 01 00 00 00       	mov    $0x1,%eax
 80102db8:	f0 87 82 a0 00 00 00 	lock xchg %eax,0xa0(%edx)
   scheduler();     // start running processes
-80102dbf:	e8 9c 0b 00 00       	call   80103960 <scheduler>
+80102dbf:	e8 cc 0b 00 00       	call   80103990 <scheduler>
 80102dc4:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 80102dca:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
 
@@ -5605,9 +5605,9 @@ xchg(volatile uint *addr, uint newval)
 80102dd1:	89 e5                	mov    %esp,%ebp
 80102dd3:	83 ec 08             	sub    $0x8,%esp
   switchkvm();
-80102dd6:	e8 95 39 00 00       	call   80106770 <switchkvm>
+80102dd6:	e8 65 3b 00 00       	call   80106940 <switchkvm>
   seginit();
-80102ddb:	e8 d0 38 00 00       	call   801066b0 <seginit>
+80102ddb:	e8 a0 3a 00 00       	call   80106880 <seginit>
   lapicinit();
 80102de0:	e8 8b f8 ff ff       	call   80102670 <lapicinit>
   mpmain();
@@ -5634,17 +5634,17 @@ xchg(volatile uint *addr, uint newval)
   kinit1(end, P2V(4*1024*1024)); // phys page allocator
 80102dff:	c7 44 24 04 00 00 40 	movl   $0x80400000,0x4(%esp)
 80102e06:	80 
-80102e07:	c7 04 24 a8 56 11 80 	movl   $0x801156a8,(%esp)
+80102e07:	c7 04 24 a8 5b 11 80 	movl   $0x80115ba8,(%esp)
 80102e0e:	e8 cd f5 ff ff       	call   801023e0 <kinit1>
   kvmalloc();      // kernel page table
-80102e13:	e8 e8 3d 00 00       	call   80106c00 <kvmalloc>
+80102e13:	e8 b8 3f 00 00       	call   80106dd0 <kvmalloc>
   mpinit();        // detect other processors
 80102e18:	e8 73 01 00 00       	call   80102f90 <mpinit>
 80102e1d:	8d 76 00             	lea    0x0(%esi),%esi
   lapicinit();     // interrupt controller
 80102e20:	e8 4b f8 ff ff       	call   80102670 <lapicinit>
   seginit();       // segment descriptors
-80102e25:	e8 86 38 00 00       	call   801066b0 <seginit>
+80102e25:	e8 56 3a 00 00       	call   80106880 <seginit>
   picinit();       // disable pic
 80102e2a:	e8 21 03 00 00       	call   80103150 <picinit>
 80102e2f:	90                   	nop
@@ -5653,12 +5653,12 @@ xchg(volatile uint *addr, uint newval)
   consoleinit();   // console hardware
 80102e35:	e8 16 db ff ff       	call   80100950 <consoleinit>
   uartinit();      // serial port
-80102e3a:	e8 91 2b 00 00       	call   801059d0 <uartinit>
+80102e3a:	e8 61 2d 00 00       	call   80105ba0 <uartinit>
 80102e3f:	90                   	nop
   pinit();         // process table
 80102e40:	e8 9b 07 00 00       	call   801035e0 <pinit>
   tvinit();        // trap vectors
-80102e45:	e8 b6 27 00 00       	call   80105600 <tvinit>
+80102e45:	e8 86 29 00 00       	call   801057d0 <tvinit>
   binit();         // buffer cache
 80102e4a:	e8 f1 d1 ff ff       	call   80100040 <binit>
 80102e4f:	90                   	nop
@@ -5672,7 +5672,7 @@ xchg(volatile uint *addr, uint newval)
 80102e62:	c7 44 24 04 8c a4 10 	movl   $0x8010a48c,0x4(%esp)
 80102e69:	80 
 80102e6a:	c7 04 24 00 70 00 80 	movl   $0x80007000,(%esp)
-80102e71:	e8 3a 16 00 00       	call   801044b0 <memmove>
+80102e71:	e8 aa 17 00 00       	call   80104620 <memmove>
   for(c = cpus; c < cpus+ncpu; c++){
 80102e76:	69 05 00 2d 11 80 b0 	imul   $0xb0,0x80112d00,%eax
 80102e7d:	00 00 00 
@@ -5767,10 +5767,10 @@ mpsearch1(uint a, int len)
     if(memcmp(p, "_MP_", 4) == 0 && sum(p, sizeof(struct mp)) == 0)
 80102f38:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
 80102f3f:	00 
-80102f40:	c7 44 24 04 18 73 10 	movl   $0x80107318,0x4(%esp)
+80102f40:	c7 44 24 04 d8 74 10 	movl   $0x801074d8,0x4(%esp)
 80102f47:	80 
 80102f48:	89 34 24             	mov    %esi,(%esp)
-80102f4b:	e8 10 15 00 00       	call   80104460 <memcmp>
+80102f4b:	e8 80 16 00 00       	call   801045d0 <memcmp>
 80102f50:	85 c0                	test   %eax,%eax
 80102f52:	75 16                	jne    80102f6a <mpsearch1+0x4a>
 80102f54:	31 c9                	xor    %ecx,%ecx
@@ -5855,13 +5855,13 @@ mpinit(void)
   if(memcmp(conf, "PCMP", 4) != 0)
 80102ff3:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
 80102ffa:	00 
-80102ffb:	c7 44 24 04 1d 73 10 	movl   $0x8010731d,0x4(%esp)
+80102ffb:	c7 44 24 04 dd 74 10 	movl   $0x801074dd,0x4(%esp)
 80103002:	80 
 80103003:	89 04 24             	mov    %eax,(%esp)
   conf = (struct mpconf*) P2V((uint) mp->physaddr);
 80103006:	89 45 e4             	mov    %eax,-0x1c(%ebp)
   if(memcmp(conf, "PCMP", 4) != 0)
-80103009:	e8 52 14 00 00       	call   80104460 <memcmp>
+80103009:	e8 c2 15 00 00       	call   801045d0 <memcmp>
 8010300e:	85 c0                	test   %eax,%eax
 80103010:	0f 85 07 01 00 00    	jne    8010311d <mpinit+0x18d>
   if(conf->version != 1 && conf->version != 4)
@@ -5919,7 +5919,7 @@ mpinit(void)
     switch(*p){
 80103087:	80 f9 04             	cmp    $0x4,%cl
 8010308a:	77 74                	ja     80103100 <mpinit+0x170>
-8010308c:	ff 24 8d 5c 73 10 80 	jmp    *-0x7fef8ca4(,%ecx,4)
+8010308c:	ff 24 8d 1c 75 10 80 	jmp    *-0x7fef8ae4(,%ecx,4)
 80103093:	90                   	nop
 80103094:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
       p += sizeof(struct mpioapic);
@@ -6007,7 +6007,7 @@ mpinit(void)
   if((mp = mpsearch()) == 0 || mp->physaddr == 0)
 80103117:	0f 85 c5 fe ff ff    	jne    80102fe2 <mpinit+0x52>
     panic("Expect to run on an SMP");
-8010311d:	c7 04 24 22 73 10 80 	movl   $0x80107322,(%esp)
+8010311d:	c7 04 24 e2 74 10 80 	movl   $0x801074e2,(%esp)
 80103124:	e8 37 d2 ff ff       	call   80100360 <panic>
 80103129:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
   if(conf->version != 1 && conf->version != 4)
@@ -6015,7 +6015,7 @@ mpinit(void)
 80103132:	0f 84 ed fe ff ff    	je     80103025 <mpinit+0x95>
 80103138:	eb e3                	jmp    8010311d <mpinit+0x18d>
     panic("Didn't find a suitable machine");
-8010313a:	c7 04 24 3c 73 10 80 	movl   $0x8010733c,(%esp)
+8010313a:	c7 04 24 fc 74 10 80 	movl   $0x801074fc,(%esp)
 80103141:	e8 1a d2 ff ff       	call   80100360 <panic>
 80103146:	66 90                	xchg   %ax,%ax
 80103148:	66 90                	xchg   %ax,%ax
@@ -6102,9 +6102,9 @@ pipealloc(struct file **f0, struct file **f1)
 801031d9:	00 00 00 
   initlock(&p->lock, "pipe");
 801031dc:	89 04 24             	mov    %eax,(%esp)
-801031df:	c7 44 24 04 70 73 10 	movl   $0x80107370,0x4(%esp)
+801031df:	c7 44 24 04 30 75 10 	movl   $0x80107530,0x4(%esp)
 801031e6:	80 
-801031e7:	e8 f4 0f 00 00       	call   801041e0 <initlock>
+801031e7:	e8 64 11 00 00       	call   80104350 <initlock>
   (*f0)->type = FD_PIPE;
 801031ec:	8b 06                	mov    (%esi),%eax
 801031ee:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
@@ -6188,7 +6188,7 @@ pipeclose(struct pipe *p, int writable)
 8010326b:	8b 75 0c             	mov    0xc(%ebp),%esi
   acquire(&p->lock);
 8010326e:	89 1c 24             	mov    %ebx,(%esp)
-80103271:	e8 da 10 00 00       	call   80104350 <acquire>
+80103271:	e8 4a 12 00 00       	call   801044c0 <acquire>
   if(writable){
 80103276:	85 f6                	test   %esi,%esi
 80103278:	74 3e                	je     801032b8 <pipeclose+0x58>
@@ -6200,7 +6200,7 @@ pipeclose(struct pipe *p, int writable)
 80103287:	00 00 00 
     wakeup(&p->nread);
 8010328a:	89 04 24             	mov    %eax,(%esp)
-8010328d:	e8 5e 0c 00 00       	call   80103ef0 <wakeup>
+8010328d:	e8 ce 0d 00 00       	call   80104060 <wakeup>
   } else {
     p->readopen = 0;
     wakeup(&p->nwrite);
@@ -6223,7 +6223,7 @@ pipeclose(struct pipe *p, int writable)
 801032ad:	5e                   	pop    %esi
 801032ae:	5d                   	pop    %ebp
     release(&p->lock);
-801032af:	e9 0c 11 00 00       	jmp    801043c0 <release>
+801032af:	e9 7c 12 00 00       	jmp    80104530 <release>
 801032b4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     wakeup(&p->nwrite);
 801032b8:	8d 83 38 02 00 00    	lea    0x238(%ebx),%eax
@@ -6232,12 +6232,12 @@ pipeclose(struct pipe *p, int writable)
 801032c5:	00 00 00 
     wakeup(&p->nwrite);
 801032c8:	89 04 24             	mov    %eax,(%esp)
-801032cb:	e8 20 0c 00 00       	call   80103ef0 <wakeup>
+801032cb:	e8 90 0d 00 00       	call   80104060 <wakeup>
 801032d0:	eb c0                	jmp    80103292 <pipeclose+0x32>
 801032d2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     release(&p->lock);
 801032d8:	89 1c 24             	mov    %ebx,(%esp)
-801032db:	e8 e0 10 00 00       	call   801043c0 <release>
+801032db:	e8 50 12 00 00       	call   80104530 <release>
     kfree((char*)p);
 801032e0:	89 5d 08             	mov    %ebx,0x8(%ebp)
 }
@@ -6266,7 +6266,7 @@ pipewrite(struct pipe *p, char *addr, int n)
 
   acquire(&p->lock);
 801032fc:	89 1c 24             	mov    %ebx,(%esp)
-801032ff:	e8 4c 10 00 00       	call   80104350 <acquire>
+801032ff:	e8 bc 11 00 00       	call   801044c0 <acquire>
   for(i = 0; i < n; i++){
 80103304:	8b 4d 10             	mov    0x10(%ebp),%ecx
 80103307:	85 c9                	test   %ecx,%ecx
@@ -6299,11 +6299,11 @@ pipewrite(struct pipe *p, char *addr, int n)
 8010334a:	75 33                	jne    8010337f <pipewrite+0x8f>
       wakeup(&p->nread);
 8010334c:	89 3c 24             	mov    %edi,(%esp)
-8010334f:	e8 9c 0b 00 00       	call   80103ef0 <wakeup>
+8010334f:	e8 0c 0d 00 00       	call   80104060 <wakeup>
       sleep(&p->nwrite, &p->lock);  //DOC: pipewrite-sleep
 80103354:	89 5c 24 04          	mov    %ebx,0x4(%esp)
 80103358:	89 34 24             	mov    %esi,(%esp)
-8010335b:	e8 b0 08 00 00       	call   80103c10 <sleep>
+8010335b:	e8 20 0a 00 00       	call   80103d80 <sleep>
     while(p->nwrite == p->nread + PIPESIZE){  //DOC: pipewrite-full
 80103360:	8b 83 34 02 00 00    	mov    0x234(%ebx),%eax
 80103366:	8b 93 38 02 00 00    	mov    0x238(%ebx),%edx
@@ -6316,7 +6316,7 @@ pipewrite(struct pipe *p, char *addr, int n)
 8010337d:	75 c1                	jne    80103340 <pipewrite+0x50>
         release(&p->lock);
 8010337f:	89 1c 24             	mov    %ebx,(%esp)
-80103382:	e8 39 10 00 00       	call   801043c0 <release>
+80103382:	e8 a9 11 00 00       	call   80104530 <release>
         return -1;
 80103387:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
     p->data[p->nwrite++ % PIPESIZE] = addr[i];
@@ -6349,10 +6349,10 @@ pipewrite(struct pipe *p, char *addr, int n)
   wakeup(&p->nread);  //DOC: pipewrite-wakeup1
 801033c1:	8d 83 34 02 00 00    	lea    0x234(%ebx),%eax
 801033c7:	89 04 24             	mov    %eax,(%esp)
-801033ca:	e8 21 0b 00 00       	call   80103ef0 <wakeup>
+801033ca:	e8 91 0c 00 00       	call   80104060 <wakeup>
   release(&p->lock);
 801033cf:	89 1c 24             	mov    %ebx,(%esp)
-801033d2:	e8 e9 0f 00 00       	call   801043c0 <release>
+801033d2:	e8 59 11 00 00       	call   80104530 <release>
   return n;
 801033d7:	8b 45 10             	mov    0x10(%ebp),%eax
 801033da:	eb b0                	jmp    8010338c <pipewrite+0x9c>
@@ -6375,7 +6375,7 @@ piperead(struct pipe *p, char *addr, int n)
 
   acquire(&p->lock);
 801033ef:	89 34 24             	mov    %esi,(%esp)
-801033f2:	e8 59 0f 00 00       	call   80104350 <acquire>
+801033f2:	e8 c9 10 00 00       	call   801044c0 <acquire>
   while(p->nread == p->nwrite && p->writeopen){  //DOC: pipe-empty
 801033f7:	8b 86 34 02 00 00    	mov    0x234(%esi),%eax
 801033fd:	3b 86 38 02 00 00    	cmp    0x238(%esi),%eax
@@ -6393,7 +6393,7 @@ piperead(struct pipe *p, char *addr, int n)
 80103417:	90                   	nop
 80103418:	89 74 24 04          	mov    %esi,0x4(%esp)
 8010341c:	89 1c 24             	mov    %ebx,(%esp)
-8010341f:	e8 ec 07 00 00       	call   80103c10 <sleep>
+8010341f:	e8 5c 09 00 00       	call   80103d80 <sleep>
   while(p->nread == p->nwrite && p->writeopen){  //DOC: pipe-empty
 80103424:	8b 86 34 02 00 00    	mov    0x234(%esi),%eax
 8010342a:	3b 86 38 02 00 00    	cmp    0x238(%esi),%eax
@@ -6408,7 +6408,7 @@ piperead(struct pipe *p, char *addr, int n)
 80103446:	74 d0                	je     80103418 <piperead+0x38>
       release(&p->lock);
 80103448:	89 34 24             	mov    %esi,(%esp)
-8010344b:	e8 70 0f 00 00       	call   801043c0 <release>
+8010344b:	e8 e0 10 00 00       	call   80104530 <release>
     addr[i] = p->data[p->nread++ % PIPESIZE];
   }
   wakeup(&p->nwrite);  //DOC: piperead-wakeup
@@ -6452,10 +6452,10 @@ piperead(struct pipe *p, char *addr, int n)
   wakeup(&p->nwrite);  //DOC: piperead-wakeup
 8010349c:	8d 86 38 02 00 00    	lea    0x238(%esi),%eax
 801034a2:	89 04 24             	mov    %eax,(%esp)
-801034a5:	e8 46 0a 00 00       	call   80103ef0 <wakeup>
+801034a5:	e8 b6 0b 00 00       	call   80104060 <wakeup>
   release(&p->lock);
 801034aa:	89 34 24             	mov    %esi,(%esp)
-801034ad:	e8 0e 0f 00 00       	call   801043c0 <release>
+801034ad:	e8 7e 10 00 00       	call   80104530 <release>
 }
 801034b2:	83 c4 1c             	add    $0x1c,%esp
   return i;
@@ -6490,12 +6490,12 @@ allocproc(void)
 801034c9:	83 ec 14             	sub    $0x14,%esp
   acquire(&ptable.lock);
 801034cc:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
-801034d3:	e8 78 0e 00 00       	call   80104350 <acquire>
+801034d3:	e8 e8 0f 00 00       	call   801044c0 <acquire>
 801034d8:	eb 14                	jmp    801034ee <allocproc+0x2e>
 801034da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-801034e0:	81 c3 84 00 00 00    	add    $0x84,%ebx
-801034e6:	81 fb 54 4e 11 80    	cmp    $0x80114e54,%ebx
+801034e0:	81 c3 98 00 00 00    	add    $0x98,%ebx
+801034e6:	81 fb 54 53 11 80    	cmp    $0x80115354,%ebx
 801034ec:	74 7a                	je     80103568 <allocproc+0xa8>
     if(p->state == UNUSED)
 801034ee:	8b 43 0c             	mov    0xc(%ebx),%eax
@@ -6518,7 +6518,7 @@ found:
 8010350b:	89 15 04 a0 10 80    	mov    %edx,0x8010a004
 80103511:	89 43 10             	mov    %eax,0x10(%ebx)
   release(&ptable.lock);
-80103514:	e8 a7 0e 00 00       	call   801043c0 <release>
+80103514:	e8 17 10 00 00       	call   80104530 <release>
 
   // Allocate kernel stack.
   if((p->kstack = kalloc()) == 0){
@@ -6543,7 +6543,7 @@ found:
   sp -= sizeof *p->tf;
 80103530:	89 53 18             	mov    %edx,0x18(%ebx)
   *(uint*)sp = (uint)trapret;
-80103533:	c7 40 14 e7 55 10 80 	movl   $0x801055e7,0x14(%eax)
+80103533:	c7 40 14 c1 57 10 80 	movl   $0x801057c1,0x14(%eax)
   p->context = (struct context*)sp;
   memset(p->context, 0, sizeof *p->context);
 8010353a:	c7 44 24 08 14 00 00 	movl   $0x14,0x8(%esp)
@@ -6554,7 +6554,7 @@ found:
   p->context = (struct context*)sp;
 8010354d:	89 43 1c             	mov    %eax,0x1c(%ebx)
   memset(p->context, 0, sizeof *p->context);
-80103550:	e8 bb 0e 00 00       	call   80104410 <memset>
+80103550:	e8 2b 10 00 00       	call   80104580 <memset>
   p->context->eip = (uint)forkret;
 80103555:	8b 43 1c             	mov    0x1c(%ebx),%eax
 80103558:	c7 40 10 90 35 10 80 	movl   $0x80103590,0x10(%eax)
@@ -6569,7 +6569,7 @@ found:
 80103567:	90                   	nop
   release(&ptable.lock);
 80103568:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
-8010356f:	e8 4c 0e 00 00       	call   801043c0 <release>
+8010356f:	e8 bc 0f 00 00       	call   80104530 <release>
 }
 80103574:	83 c4 14             	add    $0x14,%esp
   return 0;
@@ -6599,7 +6599,7 @@ forkret(void)
   // Still holding ptable.lock from scheduler.
   release(&ptable.lock);
 80103596:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
-8010359d:	e8 1e 0e 00 00       	call   801043c0 <release>
+8010359d:	e8 8e 0f 00 00       	call   80104530 <release>
 
   if (first) {
 801035a2:	a1 00 a0 10 80       	mov    0x8010a000,%eax
@@ -6636,10 +6636,10 @@ forkret(void)
 801035e1:	89 e5                	mov    %esp,%ebp
 801035e3:	83 ec 18             	sub    $0x18,%esp
   initlock(&ptable.lock, "ptable");
-801035e6:	c7 44 24 04 75 73 10 	movl   $0x80107375,0x4(%esp)
+801035e6:	c7 44 24 04 35 75 10 	movl   $0x80107535,0x4(%esp)
 801035ed:	80 
 801035ee:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
-801035f5:	e8 e6 0b 00 00       	call   801041e0 <initlock>
+801035f5:	e8 56 0d 00 00       	call   80104350 <initlock>
 }
 801035fa:	c9                   	leave  
 801035fb:	c3                   	ret    
@@ -6694,10 +6694,10 @@ forkret(void)
 80103656:	31 d2                	xor    %edx,%edx
 80103658:	eb ea                	jmp    80103644 <mycpu+0x44>
   panic("unknown apicid\n");
-8010365a:	c7 04 24 7c 73 10 80 	movl   $0x8010737c,(%esp)
+8010365a:	c7 04 24 3c 75 10 80 	movl   $0x8010753c,(%esp)
 80103661:	e8 fa cc ff ff       	call   80100360 <panic>
     panic("mycpu called with interrupts enabled\n");
-80103666:	c7 04 24 58 74 10 80 	movl   $0x80107458,(%esp)
+80103666:	c7 04 24 64 76 10 80 	movl   $0x80107664,(%esp)
 8010366d:	e8 ee cc ff ff       	call   80100360 <panic>
 80103672:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 80103679:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
@@ -6727,13 +6727,13 @@ myproc(void) {
 801036a3:	53                   	push   %ebx
 801036a4:	83 ec 04             	sub    $0x4,%esp
   pushcli();
-801036a7:	e8 b4 0b 00 00       	call   80104260 <pushcli>
+801036a7:	e8 24 0d 00 00       	call   801043d0 <pushcli>
   c = mycpu();
 801036ac:	e8 4f ff ff ff       	call   80103600 <mycpu>
   p = c->proc;
 801036b1:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
   popcli();
-801036b7:	e8 e4 0b 00 00       	call   801042a0 <popcli>
+801036b7:	e8 54 0d 00 00       	call   80104410 <popcli>
 }
 801036bc:	83 c4 04             	add    $0x4,%esp
 801036bf:	89 d8                	mov    %ebx,%eax
@@ -6755,7 +6755,7 @@ myproc(void) {
   initproc = p;
 801036de:	a3 b8 a5 10 80       	mov    %eax,0x8010a5b8
   if((p->pgdir = setupkvm()) == 0)
-801036e3:	e8 88 34 00 00       	call   80106b70 <setupkvm>
+801036e3:	e8 58 36 00 00       	call   80106d40 <setupkvm>
 801036e8:	85 c0                	test   %eax,%eax
 801036ea:	89 43 04             	mov    %eax,0x4(%ebx)
 801036ed:	0f 84 d4 00 00 00    	je     801037c7 <userinit+0xf7>
@@ -6765,7 +6765,7 @@ myproc(void) {
 801036fd:	00 
 801036fe:	c7 44 24 04 60 a4 10 	movl   $0x8010a460,0x4(%esp)
 80103705:	80 
-80103706:	e8 95 31 00 00       	call   801068a0 <inituvm>
+80103706:	e8 65 33 00 00       	call   80106a70 <inituvm>
   p->sz = PGSIZE;
 8010370b:	c7 03 00 10 00 00    	movl   $0x1000,(%ebx)
   memset(p->tf, 0, sizeof(*p->tf));
@@ -6775,7 +6775,7 @@ myproc(void) {
 80103720:	00 
 80103721:	8b 43 18             	mov    0x18(%ebx),%eax
 80103724:	89 04 24             	mov    %eax,(%esp)
-80103727:	e8 e4 0c 00 00       	call   80104410 <memset>
+80103727:	e8 54 0e 00 00       	call   80104580 <memset>
   p->tf->cs = (SEG_UCODE << 3) | DPL_USER;
 8010372c:	8b 43 18             	mov    0x18(%ebx),%eax
 8010372f:	ba 1b 00 00 00       	mov    $0x1b,%edx
@@ -6807,29 +6807,29 @@ myproc(void) {
 80103778:	8d 43 6c             	lea    0x6c(%ebx),%eax
 8010377b:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
 80103782:	00 
-80103783:	c7 44 24 04 a5 73 10 	movl   $0x801073a5,0x4(%esp)
+80103783:	c7 44 24 04 65 75 10 	movl   $0x80107565,0x4(%esp)
 8010378a:	80 
 8010378b:	89 04 24             	mov    %eax,(%esp)
-8010378e:	e8 5d 0e 00 00       	call   801045f0 <safestrcpy>
+8010378e:	e8 cd 0f 00 00       	call   80104760 <safestrcpy>
   p->cwd = namei("/");
-80103793:	c7 04 24 ae 73 10 80 	movl   $0x801073ae,(%esp)
+80103793:	c7 04 24 6e 75 10 80 	movl   $0x8010756e,(%esp)
 8010379a:	e8 61 e7 ff ff       	call   80101f00 <namei>
 8010379f:	89 43 68             	mov    %eax,0x68(%ebx)
   acquire(&ptable.lock);
 801037a2:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
-801037a9:	e8 a2 0b 00 00       	call   80104350 <acquire>
+801037a9:	e8 12 0d 00 00       	call   801044c0 <acquire>
   p->state = RUNNABLE;
 801037ae:	c7 43 0c 03 00 00 00 	movl   $0x3,0xc(%ebx)
   release(&ptable.lock);
 801037b5:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
-801037bc:	e8 ff 0b 00 00       	call   801043c0 <release>
+801037bc:	e8 6f 0d 00 00       	call   80104530 <release>
 }
 801037c1:	83 c4 14             	add    $0x14,%esp
 801037c4:	5b                   	pop    %ebx
 801037c5:	5d                   	pop    %ebp
 801037c6:	c3                   	ret    
     panic("userinit: out of memory?");
-801037c7:	c7 04 24 8c 73 10 80 	movl   $0x8010738c,(%esp)
+801037c7:	c7 04 24 4c 75 10 80 	movl   $0x8010754c,(%esp)
 801037ce:	e8 8d cb ff ff       	call   80100360 <panic>
 801037d3:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 801037d9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
@@ -6858,14 +6858,14 @@ myproc(void) {
 801037ff:	89 44 24 04          	mov    %eax,0x4(%esp)
 80103803:	8b 43 04             	mov    0x4(%ebx),%eax
 80103806:	89 04 24             	mov    %eax,(%esp)
-80103809:	e8 d2 31 00 00       	call   801069e0 <allocuvm>
+80103809:	e8 a2 33 00 00       	call   80106bb0 <allocuvm>
 8010380e:	85 c0                	test   %eax,%eax
 80103810:	74 36                	je     80103848 <growproc+0x68>
   curproc->sz = sz;
 80103812:	89 03                	mov    %eax,(%ebx)
   switchuvm(curproc);
 80103814:	89 1c 24             	mov    %ebx,(%esp)
-80103817:	e8 74 2f 00 00       	call   80106790 <switchuvm>
+80103817:	e8 44 31 00 00       	call   80106960 <switchuvm>
   return 0;
 8010381c:	31 c0                	xor    %eax,%eax
 }
@@ -6883,7 +6883,7 @@ myproc(void) {
 80103830:	89 44 24 04          	mov    %eax,0x4(%esp)
 80103834:	8b 43 04             	mov    0x4(%ebx),%eax
 80103837:	89 04 24             	mov    %eax,(%esp)
-8010383a:	e8 91 32 00 00       	call   80106ad0 <deallocuvm>
+8010383a:	e8 61 34 00 00       	call   80106ca0 <deallocuvm>
 8010383f:	85 c0                	test   %eax,%eax
 80103841:	75 cf                	jne    80103812 <growproc+0x32>
 80103843:	90                   	nop
@@ -6909,28 +6909,30 @@ myproc(void) {
 80103865:	85 c0                	test   %eax,%eax
 80103867:	89 c7                	mov    %eax,%edi
 80103869:	89 45 e4             	mov    %eax,-0x1c(%ebp)
-8010386c:	0f 84 bc 00 00 00    	je     8010392e <fork+0xde>
+8010386c:	0f 84 ea 00 00 00    	je     8010395c <fork+0x10c>
   if((np->pgdir = copyuvm(curproc->pgdir, curproc->sz)) == 0){
 80103872:	8b 03                	mov    (%ebx),%eax
 80103874:	89 44 24 04          	mov    %eax,0x4(%esp)
 80103878:	8b 43 04             	mov    0x4(%ebx),%eax
 8010387b:	89 04 24             	mov    %eax,(%esp)
-8010387e:	e8 cd 33 00 00       	call   80106c50 <copyuvm>
+8010387e:	e8 9d 35 00 00       	call   80106e20 <copyuvm>
 80103883:	85 c0                	test   %eax,%eax
 80103885:	89 47 04             	mov    %eax,0x4(%edi)
-80103888:	0f 84 a7 00 00 00    	je     80103935 <fork+0xe5>
+80103888:	0f 84 d5 00 00 00    	je     80103963 <fork+0x113>
   np->sz = curproc->sz;
 8010388e:	8b 03                	mov    (%ebx),%eax
-80103890:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
-80103893:	89 01                	mov    %eax,(%ecx)
   *np->tf = *curproc->tf;
-80103895:	8b 79 18             	mov    0x18(%ecx),%edi
-80103898:	89 c8                	mov    %ecx,%eax
+80103890:	b9 13 00 00 00       	mov    $0x13,%ecx
+  np->sz = curproc->sz;
+80103895:	8b 7d e4             	mov    -0x1c(%ebp),%edi
+80103898:	89 07                	mov    %eax,(%edi)
+  *np->tf = *curproc->tf;
+8010389a:	89 f8                	mov    %edi,%eax
   np->parent = curproc;
-8010389a:	89 59 14             	mov    %ebx,0x14(%ecx)
+8010389c:	89 5f 14             	mov    %ebx,0x14(%edi)
   *np->tf = *curproc->tf;
-8010389d:	8b 73 18             	mov    0x18(%ebx),%esi
-801038a0:	b9 13 00 00 00       	mov    $0x13,%ecx
+8010389f:	8b 7f 18             	mov    0x18(%edi),%edi
+801038a2:	8b 73 18             	mov    0x18(%ebx),%esi
 801038a5:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
   for(i = 0; i < NOFILE; i++)
 801038a7:	31 f6                	xor    %esi,%esi
@@ -6946,8079 +6948,8256 @@ myproc(void) {
       np->ofile[i] = filedup(curproc->ofile[i]);
 801038c0:	89 04 24             	mov    %eax,(%esp)
 801038c3:	e8 18 d5 ff ff       	call   80100de0 <filedup>
-801038c8:	8b 55 e4             	mov    -0x1c(%ebp),%edx
-801038cb:	89 44 b2 28          	mov    %eax,0x28(%edx,%esi,4)
+801038c8:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
+801038cb:	89 44 b1 28          	mov    %eax,0x28(%ecx,%esi,4)
   for(i = 0; i < NOFILE; i++)
 801038cf:	83 c6 01             	add    $0x1,%esi
 801038d2:	83 fe 10             	cmp    $0x10,%esi
 801038d5:	75 e1                	jne    801038b8 <fork+0x68>
   np->cwd = idup(curproc->cwd);
 801038d7:	8b 43 68             	mov    0x68(%ebx),%eax
+801038da:	89 04 24             	mov    %eax,(%esp)
+801038dd:	e8 9e dd ff ff       	call   80101680 <idup>
+801038e2:	8b 7d e4             	mov    -0x1c(%ebp),%edi
+801038e5:	89 47 68             	mov    %eax,0x68(%edi)
   safestrcpy(np->name, curproc->name, sizeof(curproc->name));
-801038da:	83 c3 6c             	add    $0x6c,%ebx
-  np->cwd = idup(curproc->cwd);
-801038dd:	89 04 24             	mov    %eax,(%esp)
-801038e0:	e8 9b dd ff ff       	call   80101680 <idup>
-801038e5:	8b 7d e4             	mov    -0x1c(%ebp),%edi
-801038e8:	89 47 68             	mov    %eax,0x68(%edi)
-  safestrcpy(np->name, curproc->name, sizeof(curproc->name));
-801038eb:	8d 47 6c             	lea    0x6c(%edi),%eax
-801038ee:	89 5c 24 04          	mov    %ebx,0x4(%esp)
+801038e8:	8d 43 6c             	lea    0x6c(%ebx),%eax
+801038eb:	89 44 24 04          	mov    %eax,0x4(%esp)
+801038ef:	8d 47 6c             	lea    0x6c(%edi),%eax
 801038f2:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
 801038f9:	00 
 801038fa:	89 04 24             	mov    %eax,(%esp)
-801038fd:	e8 ee 0c 00 00       	call   801045f0 <safestrcpy>
+801038fd:	e8 5e 0e 00 00       	call   80104760 <safestrcpy>
   pid = np->pid;
-80103902:	8b 5f 10             	mov    0x10(%edi),%ebx
+80103902:	8b 77 10             	mov    0x10(%edi),%esi
   acquire(&ptable.lock);
 80103905:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
-8010390c:	e8 3f 0a 00 00       	call   80104350 <acquire>
+8010390c:	e8 af 0b 00 00       	call   801044c0 <acquire>
+  np->starttime = ticks;
+80103911:	a1 a0 5b 11 80       	mov    0x80115ba0,%eax
+  curproc->runtime = time - np->starttime;
+80103916:	8b 15 ac ff 10 80    	mov    0x8010ffac,%edx
   np->state = RUNNABLE;
-80103911:	c7 47 0c 03 00 00 00 	movl   $0x3,0xc(%edi)
+8010391c:	c7 47 0c 03 00 00 00 	movl   $0x3,0xc(%edi)
+  np->runtime = 0;
+80103923:	c7 87 90 00 00 00 00 	movl   $0x0,0x90(%edi)
+8010392a:	00 00 00 
+  np->starttime = ticks;
+8010392d:	89 87 88 00 00 00    	mov    %eax,0x88(%edi)
+  curproc->runtime = time - np->starttime;
+80103933:	29 c2                	sub    %eax,%edx
+80103935:	89 93 90 00 00 00    	mov    %edx,0x90(%ebx)
+  time = np->starttime;
+8010393b:	8b 87 88 00 00 00    	mov    0x88(%edi),%eax
+  release(&ptable.lock);
+80103941:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
+  time = np->starttime;
+80103948:	a3 ac ff 10 80       	mov    %eax,0x8010ffac
   release(&ptable.lock);
-80103918:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
-8010391f:	e8 9c 0a 00 00       	call   801043c0 <release>
+8010394d:	e8 de 0b 00 00       	call   80104530 <release>
   return pid;
-80103924:	89 d8                	mov    %ebx,%eax
-}
-80103926:	83 c4 1c             	add    $0x1c,%esp
-80103929:	5b                   	pop    %ebx
-8010392a:	5e                   	pop    %esi
-8010392b:	5f                   	pop    %edi
-8010392c:	5d                   	pop    %ebp
-8010392d:	c3                   	ret    
+80103952:	89 f0                	mov    %esi,%eax
+}
+80103954:	83 c4 1c             	add    $0x1c,%esp
+80103957:	5b                   	pop    %ebx
+80103958:	5e                   	pop    %esi
+80103959:	5f                   	pop    %edi
+8010395a:	5d                   	pop    %ebp
+8010395b:	c3                   	ret    
     return -1;
-8010392e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80103933:	eb f1                	jmp    80103926 <fork+0xd6>
+8010395c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80103961:	eb f1                	jmp    80103954 <fork+0x104>
     kfree(np->kstack);
-80103935:	8b 7d e4             	mov    -0x1c(%ebp),%edi
-80103938:	8b 47 08             	mov    0x8(%edi),%eax
-8010393b:	89 04 24             	mov    %eax,(%esp)
-8010393e:	e8 ad e9 ff ff       	call   801022f0 <kfree>
+80103963:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
+80103966:	8b 43 08             	mov    0x8(%ebx),%eax
+80103969:	89 04 24             	mov    %eax,(%esp)
+8010396c:	e8 7f e9 ff ff       	call   801022f0 <kfree>
     return -1;
-80103943:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80103971:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
     np->kstack = 0;
-80103948:	c7 47 08 00 00 00 00 	movl   $0x0,0x8(%edi)
+80103976:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%ebx)
     np->state = UNUSED;
-8010394f:	c7 47 0c 00 00 00 00 	movl   $0x0,0xc(%edi)
+8010397d:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
     return -1;
-80103956:	eb ce                	jmp    80103926 <fork+0xd6>
-80103958:	90                   	nop
-80103959:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-
-80103960 <scheduler>:
-{
-80103960:	55                   	push   %ebp
-80103961:	89 e5                	mov    %esp,%ebp
-80103963:	57                   	push   %edi
-80103964:	56                   	push   %esi
-80103965:	53                   	push   %ebx
-80103966:	83 ec 1c             	sub    $0x1c,%esp
+80103984:	eb ce                	jmp    80103954 <fork+0x104>
+80103986:	8d 76 00             	lea    0x0(%esi),%esi
+80103989:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80103990 <scheduler>:
+{
+80103990:	55                   	push   %ebp
+80103991:	89 e5                	mov    %esp,%ebp
+80103993:	57                   	push   %edi
+80103994:	56                   	push   %esi
+80103995:	53                   	push   %ebx
+80103996:	83 ec 1c             	sub    $0x1c,%esp
   struct cpu *c = mycpu();
-80103969:	e8 92 fc ff ff       	call   80103600 <mycpu>
-8010396e:	89 c6                	mov    %eax,%esi
+80103999:	e8 62 fc ff ff       	call   80103600 <mycpu>
   c->proc = 0;
-80103970:	c7 80 ac 00 00 00 00 	movl   $0x0,0xac(%eax)
-80103977:	00 00 00 
-8010397a:	8d 78 04             	lea    0x4(%eax),%edi
-8010397d:	8d 76 00             	lea    0x0(%esi),%esi
+8010399e:	c7 80 ac 00 00 00 00 	movl   $0x0,0xac(%eax)
+801039a5:	00 00 00 
+  struct cpu *c = mycpu();
+801039a8:	89 c6                	mov    %eax,%esi
+801039aa:	8d 40 04             	lea    0x4(%eax),%eax
+801039ad:	89 45 e4             	mov    %eax,-0x1c(%ebp)
   asm volatile("sti");
-80103980:	fb                   	sti    
+801039b0:	fb                   	sti    
     acquire(&ptable.lock);
-80103981:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
-    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-80103988:	bb 54 2d 11 80       	mov    $0x80112d54,%ebx
+801039b1:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
+    int lowP = 50;
+801039b8:	bf 32 00 00 00       	mov    $0x32,%edi
     acquire(&ptable.lock);
-8010398d:	e8 be 09 00 00       	call   80104350 <acquire>
-80103992:	eb 12                	jmp    801039a6 <scheduler+0x46>
-80103994:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801039bd:	e8 fe 0a 00 00       	call   801044c0 <acquire>
+    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+801039c2:	b8 54 2d 11 80       	mov    $0x80112d54,%eax
+801039c7:	eb 13                	jmp    801039dc <scheduler+0x4c>
+801039c9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801039d0:	05 98 00 00 00       	add    $0x98,%eax
+801039d5:	3d 54 53 11 80       	cmp    $0x80115354,%eax
+801039da:	74 1d                	je     801039f9 <scheduler+0x69>
+      if(p->state == RUNNABLE && p->priority < lowP)
+801039dc:	83 78 0c 03          	cmpl   $0x3,0xc(%eax)
+801039e0:	75 ee                	jne    801039d0 <scheduler+0x40>
+801039e2:	8b 88 84 00 00 00    	mov    0x84(%eax),%ecx
+801039e8:	39 cf                	cmp    %ecx,%edi
+801039ea:	0f 4f f9             	cmovg  %ecx,%edi
+    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+801039ed:	05 98 00 00 00       	add    $0x98,%eax
+801039f2:	3d 54 53 11 80       	cmp    $0x80115354,%eax
+801039f7:	75 e3                	jne    801039dc <scheduler+0x4c>
+801039f9:	bb 54 2d 11 80       	mov    $0x80112d54,%ebx
+801039fe:	eb 0e                	jmp    80103a0e <scheduler+0x7e>
     for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-80103998:	81 c3 84 00 00 00    	add    $0x84,%ebx
-8010399e:	81 fb 54 4e 11 80    	cmp    $0x80114e54,%ebx
-801039a4:	74 4a                	je     801039f0 <scheduler+0x90>
+80103a00:	81 c3 98 00 00 00    	add    $0x98,%ebx
+80103a06:	81 fb 54 53 11 80    	cmp    $0x80115354,%ebx
+80103a0c:	74 2a                	je     80103a38 <scheduler+0xa8>
       if(p->state != RUNNABLE)
-801039a6:	83 7b 0c 03          	cmpl   $0x3,0xc(%ebx)
-801039aa:	75 ec                	jne    80103998 <scheduler+0x38>
-      c->proc = p;
-801039ac:	89 9e ac 00 00 00    	mov    %ebx,0xac(%esi)
-      switchuvm(p);
-801039b2:	89 1c 24             	mov    %ebx,(%esp)
+80103a0e:	83 7b 0c 03          	cmpl   $0x3,0xc(%ebx)
+80103a12:	75 ec                	jne    80103a00 <scheduler+0x70>
+      if(p->priority != lowP){
+80103a14:	8b 83 84 00 00 00    	mov    0x84(%ebx),%eax
+80103a1a:	39 c7                	cmp    %eax,%edi
+80103a1c:	74 32                	je     80103a50 <scheduler+0xc0>
+        if (p->priority > 0){
+80103a1e:	85 c0                	test   %eax,%eax
+80103a20:	7e de                	jle    80103a00 <scheduler+0x70>
+          p->priority--;
+80103a22:	83 e8 01             	sub    $0x1,%eax
     for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-801039b5:	81 c3 84 00 00 00    	add    $0x84,%ebx
+80103a25:	81 c3 98 00 00 00    	add    $0x98,%ebx
+          p->priority--;
+80103a2b:	89 43 ec             	mov    %eax,-0x14(%ebx)
+    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+80103a2e:	81 fb 54 53 11 80    	cmp    $0x80115354,%ebx
+80103a34:	75 d8                	jne    80103a0e <scheduler+0x7e>
+80103a36:	66 90                	xchg   %ax,%ax
+    release(&ptable.lock);
+80103a38:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
+80103a3f:	e8 ec 0a 00 00       	call   80104530 <release>
+  }
+80103a44:	e9 67 ff ff ff       	jmp    801039b0 <scheduler+0x20>
+80103a49:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      c->proc = p;
+80103a50:	89 9e ac 00 00 00    	mov    %ebx,0xac(%esi)
       switchuvm(p);
-801039bb:	e8 d0 2d 00 00       	call   80106790 <switchuvm>
+80103a56:	89 1c 24             	mov    %ebx,(%esp)
+80103a59:	e8 02 2f 00 00       	call   80106960 <switchuvm>
       swtch(&(c->scheduler), p->context);
-801039c0:	8b 43 98             	mov    -0x68(%ebx),%eax
+80103a5e:	8b 43 1c             	mov    0x1c(%ebx),%eax
       p->state = RUNNING;
-801039c3:	c7 43 88 04 00 00 00 	movl   $0x4,-0x78(%ebx)
+80103a61:	c7 43 0c 04 00 00 00 	movl   $0x4,0xc(%ebx)
       swtch(&(c->scheduler), p->context);
-801039ca:	89 3c 24             	mov    %edi,(%esp)
-801039cd:	89 44 24 04          	mov    %eax,0x4(%esp)
-801039d1:	e8 75 0c 00 00       	call   8010464b <swtch>
-      switchkvm();
-801039d6:	e8 95 2d 00 00       	call   80106770 <switchkvm>
-    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-801039db:	81 fb 54 4e 11 80    	cmp    $0x80114e54,%ebx
-      c->proc = 0;
-801039e1:	c7 86 ac 00 00 00 00 	movl   $0x0,0xac(%esi)
-801039e8:	00 00 00 
-    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-801039eb:	75 b9                	jne    801039a6 <scheduler+0x46>
-801039ed:	8d 76 00             	lea    0x0(%esi),%esi
-    release(&ptable.lock);
-801039f0:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
-801039f7:	e8 c4 09 00 00       	call   801043c0 <release>
-  }
-801039fc:	eb 82                	jmp    80103980 <scheduler+0x20>
-801039fe:	66 90                	xchg   %ax,%ax
-
-80103a00 <sched>:
-{
-80103a00:	55                   	push   %ebp
-80103a01:	89 e5                	mov    %esp,%ebp
-80103a03:	56                   	push   %esi
-80103a04:	53                   	push   %ebx
-80103a05:	83 ec 10             	sub    $0x10,%esp
+80103a68:	89 44 24 04          	mov    %eax,0x4(%esp)
+80103a6c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+80103a6f:	89 04 24             	mov    %eax,(%esp)
+80103a72:	e8 44 0d 00 00       	call   801047bb <swtch>
+      switchkvm(); 
+80103a77:	e8 c4 2e 00 00       	call   80106940 <switchkvm>
+    c->proc = 0;
+80103a7c:	c7 86 ac 00 00 00 00 	movl   $0x0,0xac(%esi)
+80103a83:	00 00 00 
+80103a86:	e9 75 ff ff ff       	jmp    80103a00 <scheduler+0x70>
+80103a8b:	90                   	nop
+80103a8c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80103a90 <sched>:
+{
+80103a90:	55                   	push   %ebp
+80103a91:	89 e5                	mov    %esp,%ebp
+80103a93:	56                   	push   %esi
+80103a94:	53                   	push   %ebx
+80103a95:	83 ec 10             	sub    $0x10,%esp
   struct proc *p = myproc();
-80103a08:	e8 93 fc ff ff       	call   801036a0 <myproc>
+80103a98:	e8 03 fc ff ff       	call   801036a0 <myproc>
   if(!holding(&ptable.lock))
-80103a0d:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
+80103a9d:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
   struct proc *p = myproc();
-80103a14:	89 c3                	mov    %eax,%ebx
+80103aa4:	89 c3                	mov    %eax,%ebx
   if(!holding(&ptable.lock))
-80103a16:	e8 f5 08 00 00       	call   80104310 <holding>
-80103a1b:	85 c0                	test   %eax,%eax
-80103a1d:	74 4f                	je     80103a6e <sched+0x6e>
+80103aa6:	e8 d5 09 00 00       	call   80104480 <holding>
+80103aab:	85 c0                	test   %eax,%eax
+80103aad:	74 4f                	je     80103afe <sched+0x6e>
   if(mycpu()->ncli != 1)
-80103a1f:	e8 dc fb ff ff       	call   80103600 <mycpu>
-80103a24:	83 b8 a4 00 00 00 01 	cmpl   $0x1,0xa4(%eax)
-80103a2b:	75 65                	jne    80103a92 <sched+0x92>
+80103aaf:	e8 4c fb ff ff       	call   80103600 <mycpu>
+80103ab4:	83 b8 a4 00 00 00 01 	cmpl   $0x1,0xa4(%eax)
+80103abb:	75 65                	jne    80103b22 <sched+0x92>
   if(p->state == RUNNING)
-80103a2d:	83 7b 0c 04          	cmpl   $0x4,0xc(%ebx)
-80103a31:	74 53                	je     80103a86 <sched+0x86>
+80103abd:	83 7b 0c 04          	cmpl   $0x4,0xc(%ebx)
+80103ac1:	74 53                	je     80103b16 <sched+0x86>
   asm volatile("pushfl; popl %0" : "=r" (eflags));
-80103a33:	9c                   	pushf  
-80103a34:	58                   	pop    %eax
+80103ac3:	9c                   	pushf  
+80103ac4:	58                   	pop    %eax
   if(readeflags()&FL_IF)
-80103a35:	f6 c4 02             	test   $0x2,%ah
-80103a38:	75 40                	jne    80103a7a <sched+0x7a>
+80103ac5:	f6 c4 02             	test   $0x2,%ah
+80103ac8:	75 40                	jne    80103b0a <sched+0x7a>
   intena = mycpu()->intena;
-80103a3a:	e8 c1 fb ff ff       	call   80103600 <mycpu>
+80103aca:	e8 31 fb ff ff       	call   80103600 <mycpu>
   swtch(&p->context, mycpu()->scheduler);
-80103a3f:	83 c3 1c             	add    $0x1c,%ebx
+80103acf:	83 c3 1c             	add    $0x1c,%ebx
   intena = mycpu()->intena;
-80103a42:	8b b0 a8 00 00 00    	mov    0xa8(%eax),%esi
+80103ad2:	8b b0 a8 00 00 00    	mov    0xa8(%eax),%esi
   swtch(&p->context, mycpu()->scheduler);
-80103a48:	e8 b3 fb ff ff       	call   80103600 <mycpu>
-80103a4d:	8b 40 04             	mov    0x4(%eax),%eax
-80103a50:	89 1c 24             	mov    %ebx,(%esp)
-80103a53:	89 44 24 04          	mov    %eax,0x4(%esp)
-80103a57:	e8 ef 0b 00 00       	call   8010464b <swtch>
+80103ad8:	e8 23 fb ff ff       	call   80103600 <mycpu>
+80103add:	8b 40 04             	mov    0x4(%eax),%eax
+80103ae0:	89 1c 24             	mov    %ebx,(%esp)
+80103ae3:	89 44 24 04          	mov    %eax,0x4(%esp)
+80103ae7:	e8 cf 0c 00 00       	call   801047bb <swtch>
   mycpu()->intena = intena;
-80103a5c:	e8 9f fb ff ff       	call   80103600 <mycpu>
-80103a61:	89 b0 a8 00 00 00    	mov    %esi,0xa8(%eax)
-}
-80103a67:	83 c4 10             	add    $0x10,%esp
-80103a6a:	5b                   	pop    %ebx
-80103a6b:	5e                   	pop    %esi
-80103a6c:	5d                   	pop    %ebp
-80103a6d:	c3                   	ret    
+80103aec:	e8 0f fb ff ff       	call   80103600 <mycpu>
+80103af1:	89 b0 a8 00 00 00    	mov    %esi,0xa8(%eax)
+}
+80103af7:	83 c4 10             	add    $0x10,%esp
+80103afa:	5b                   	pop    %ebx
+80103afb:	5e                   	pop    %esi
+80103afc:	5d                   	pop    %ebp
+80103afd:	c3                   	ret    
     panic("sched ptable.lock");
-80103a6e:	c7 04 24 b0 73 10 80 	movl   $0x801073b0,(%esp)
-80103a75:	e8 e6 c8 ff ff       	call   80100360 <panic>
+80103afe:	c7 04 24 70 75 10 80 	movl   $0x80107570,(%esp)
+80103b05:	e8 56 c8 ff ff       	call   80100360 <panic>
     panic("sched interruptible");
-80103a7a:	c7 04 24 dc 73 10 80 	movl   $0x801073dc,(%esp)
-80103a81:	e8 da c8 ff ff       	call   80100360 <panic>
+80103b0a:	c7 04 24 9c 75 10 80 	movl   $0x8010759c,(%esp)
+80103b11:	e8 4a c8 ff ff       	call   80100360 <panic>
     panic("sched running");
-80103a86:	c7 04 24 ce 73 10 80 	movl   $0x801073ce,(%esp)
-80103a8d:	e8 ce c8 ff ff       	call   80100360 <panic>
+80103b16:	c7 04 24 8e 75 10 80 	movl   $0x8010758e,(%esp)
+80103b1d:	e8 3e c8 ff ff       	call   80100360 <panic>
     panic("sched locks");
-80103a92:	c7 04 24 c2 73 10 80 	movl   $0x801073c2,(%esp)
-80103a99:	e8 c2 c8 ff ff       	call   80100360 <panic>
-80103a9e:	66 90                	xchg   %ax,%ax
+80103b22:	c7 04 24 82 75 10 80 	movl   $0x80107582,(%esp)
+80103b29:	e8 32 c8 ff ff       	call   80100360 <panic>
+80103b2e:	66 90                	xchg   %ax,%ax
 
-80103aa0 <exit>:
+80103b30 <exit>:
 {
-80103aa0:	55                   	push   %ebp
-80103aa1:	89 e5                	mov    %esp,%ebp
-80103aa3:	56                   	push   %esi
+80103b30:	55                   	push   %ebp
+80103b31:	89 e5                	mov    %esp,%ebp
+80103b33:	56                   	push   %esi
   if(curproc == initproc)
-80103aa4:	31 f6                	xor    %esi,%esi
+80103b34:	31 f6                	xor    %esi,%esi
 {
-80103aa6:	53                   	push   %ebx
-80103aa7:	83 ec 10             	sub    $0x10,%esp
+80103b36:	53                   	push   %ebx
+80103b37:	83 ec 10             	sub    $0x10,%esp
   struct proc *curproc = myproc();
-80103aaa:	e8 f1 fb ff ff       	call   801036a0 <myproc>
+80103b3a:	e8 61 fb ff ff       	call   801036a0 <myproc>
   if(curproc == initproc)
-80103aaf:	3b 05 b8 a5 10 80    	cmp    0x8010a5b8,%eax
+80103b3f:	3b 05 b8 a5 10 80    	cmp    0x8010a5b8,%eax
   struct proc *curproc = myproc();
-80103ab5:	89 c3                	mov    %eax,%ebx
+80103b45:	89 c3                	mov    %eax,%ebx
   if(curproc == initproc)
-80103ab7:	0f 84 03 01 00 00    	je     80103bc0 <exit+0x120>
-80103abd:	8d 76 00             	lea    0x0(%esi),%esi
+80103b47:	0f 84 9e 01 00 00    	je     80103ceb <exit+0x1bb>
+80103b4d:	8d 76 00             	lea    0x0(%esi),%esi
     if(curproc->ofile[fd]){
-80103ac0:	8b 44 b3 28          	mov    0x28(%ebx,%esi,4),%eax
-80103ac4:	85 c0                	test   %eax,%eax
-80103ac6:	74 10                	je     80103ad8 <exit+0x38>
+80103b50:	8b 44 b3 28          	mov    0x28(%ebx,%esi,4),%eax
+80103b54:	85 c0                	test   %eax,%eax
+80103b56:	74 10                	je     80103b68 <exit+0x38>
       fileclose(curproc->ofile[fd]);
-80103ac8:	89 04 24             	mov    %eax,(%esp)
-80103acb:	e8 60 d3 ff ff       	call   80100e30 <fileclose>
+80103b58:	89 04 24             	mov    %eax,(%esp)
+80103b5b:	e8 d0 d2 ff ff       	call   80100e30 <fileclose>
       curproc->ofile[fd] = 0;
-80103ad0:	c7 44 b3 28 00 00 00 	movl   $0x0,0x28(%ebx,%esi,4)
-80103ad7:	00 
+80103b60:	c7 44 b3 28 00 00 00 	movl   $0x0,0x28(%ebx,%esi,4)
+80103b67:	00 
   for(fd = 0; fd < NOFILE; fd++){
-80103ad8:	83 c6 01             	add    $0x1,%esi
-80103adb:	83 fe 10             	cmp    $0x10,%esi
-80103ade:	75 e0                	jne    80103ac0 <exit+0x20>
+80103b68:	83 c6 01             	add    $0x1,%esi
+80103b6b:	83 fe 10             	cmp    $0x10,%esi
+80103b6e:	75 e0                	jne    80103b50 <exit+0x20>
   begin_op();
-80103ae0:	e8 2b f0 ff ff       	call   80102b10 <begin_op>
+80103b70:	e8 9b ef ff ff       	call   80102b10 <begin_op>
   iput(curproc->cwd);
-80103ae5:	8b 43 68             	mov    0x68(%ebx),%eax
-80103ae8:	89 04 24             	mov    %eax,(%esp)
-80103aeb:	e8 e0 dc ff ff       	call   801017d0 <iput>
+80103b75:	8b 43 68             	mov    0x68(%ebx),%eax
+80103b78:	89 04 24             	mov    %eax,(%esp)
+80103b7b:	e8 50 dc ff ff       	call   801017d0 <iput>
   end_op();
-80103af0:	e8 8b f0 ff ff       	call   80102b80 <end_op>
+80103b80:	e8 fb ef ff ff       	call   80102b80 <end_op>
   curproc->cwd = 0;
-80103af5:	c7 43 68 00 00 00 00 	movl   $0x0,0x68(%ebx)
+80103b85:	c7 43 68 00 00 00 00 	movl   $0x0,0x68(%ebx)
   acquire(&ptable.lock);
-80103afc:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
-80103b03:	e8 48 08 00 00       	call   80104350 <acquire>
+80103b8c:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
+80103b93:	e8 28 09 00 00       	call   801044c0 <acquire>
   wakeup1(curproc->parent);
-80103b08:	8b 43 14             	mov    0x14(%ebx),%eax
+80103b98:	8b 43 14             	mov    0x14(%ebx),%eax
 static void
 wakeup1(void *chan)
 {
   struct proc *p;
 
   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-80103b0b:	ba 54 2d 11 80       	mov    $0x80112d54,%edx
-80103b10:	eb 14                	jmp    80103b26 <exit+0x86>
-80103b12:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-80103b18:	81 c2 84 00 00 00    	add    $0x84,%edx
-80103b1e:	81 fa 54 4e 11 80    	cmp    $0x80114e54,%edx
-80103b24:	74 20                	je     80103b46 <exit+0xa6>
+80103b9b:	ba 54 2d 11 80       	mov    $0x80112d54,%edx
+80103ba0:	eb 14                	jmp    80103bb6 <exit+0x86>
+80103ba2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80103ba8:	81 c2 98 00 00 00    	add    $0x98,%edx
+80103bae:	81 fa 54 53 11 80    	cmp    $0x80115354,%edx
+80103bb4:	74 20                	je     80103bd6 <exit+0xa6>
     if(p->state == SLEEPING && p->chan == chan)
-80103b26:	83 7a 0c 02          	cmpl   $0x2,0xc(%edx)
-80103b2a:	75 ec                	jne    80103b18 <exit+0x78>
-80103b2c:	3b 42 20             	cmp    0x20(%edx),%eax
-80103b2f:	75 e7                	jne    80103b18 <exit+0x78>
+80103bb6:	83 7a 0c 02          	cmpl   $0x2,0xc(%edx)
+80103bba:	75 ec                	jne    80103ba8 <exit+0x78>
+80103bbc:	3b 42 20             	cmp    0x20(%edx),%eax
+80103bbf:	75 e7                	jne    80103ba8 <exit+0x78>
       p->state = RUNNABLE;
-80103b31:	c7 42 0c 03 00 00 00 	movl   $0x3,0xc(%edx)
+80103bc1:	c7 42 0c 03 00 00 00 	movl   $0x3,0xc(%edx)
   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-80103b38:	81 c2 84 00 00 00    	add    $0x84,%edx
-80103b3e:	81 fa 54 4e 11 80    	cmp    $0x80114e54,%edx
-80103b44:	75 e0                	jne    80103b26 <exit+0x86>
+80103bc8:	81 c2 98 00 00 00    	add    $0x98,%edx
+80103bce:	81 fa 54 53 11 80    	cmp    $0x80115354,%edx
+80103bd4:	75 e0                	jne    80103bb6 <exit+0x86>
       p->parent = initproc;
-80103b46:	a1 b8 a5 10 80       	mov    0x8010a5b8,%eax
-80103b4b:	b9 54 2d 11 80       	mov    $0x80112d54,%ecx
-80103b50:	eb 14                	jmp    80103b66 <exit+0xc6>
-80103b52:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80103bd6:	a1 b8 a5 10 80       	mov    0x8010a5b8,%eax
+80103bdb:	b9 54 2d 11 80       	mov    $0x80112d54,%ecx
+80103be0:	eb 14                	jmp    80103bf6 <exit+0xc6>
+80103be2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-80103b58:	81 c1 84 00 00 00    	add    $0x84,%ecx
-80103b5e:	81 f9 54 4e 11 80    	cmp    $0x80114e54,%ecx
-80103b64:	74 3c                	je     80103ba2 <exit+0x102>
+80103be8:	81 c1 98 00 00 00    	add    $0x98,%ecx
+80103bee:	81 f9 54 53 11 80    	cmp    $0x80115354,%ecx
+80103bf4:	74 3c                	je     80103c32 <exit+0x102>
     if(p->parent == curproc){
-80103b66:	39 59 14             	cmp    %ebx,0x14(%ecx)
-80103b69:	75 ed                	jne    80103b58 <exit+0xb8>
+80103bf6:	39 59 14             	cmp    %ebx,0x14(%ecx)
+80103bf9:	75 ed                	jne    80103be8 <exit+0xb8>
       if(p->state == ZOMBIE)
-80103b6b:	83 79 0c 05          	cmpl   $0x5,0xc(%ecx)
+80103bfb:	83 79 0c 05          	cmpl   $0x5,0xc(%ecx)
       p->parent = initproc;
-80103b6f:	89 41 14             	mov    %eax,0x14(%ecx)
+80103bff:	89 41 14             	mov    %eax,0x14(%ecx)
       if(p->state == ZOMBIE)
-80103b72:	75 e4                	jne    80103b58 <exit+0xb8>
-80103b74:	ba 54 2d 11 80       	mov    $0x80112d54,%edx
-80103b79:	eb 13                	jmp    80103b8e <exit+0xee>
-80103b7b:	90                   	nop
-80103b7c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80103c02:	75 e4                	jne    80103be8 <exit+0xb8>
+80103c04:	ba 54 2d 11 80       	mov    $0x80112d54,%edx
+80103c09:	eb 13                	jmp    80103c1e <exit+0xee>
+80103c0b:	90                   	nop
+80103c0c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-80103b80:	81 c2 84 00 00 00    	add    $0x84,%edx
-80103b86:	81 fa 54 4e 11 80    	cmp    $0x80114e54,%edx
-80103b8c:	74 ca                	je     80103b58 <exit+0xb8>
+80103c10:	81 c2 98 00 00 00    	add    $0x98,%edx
+80103c16:	81 fa 54 53 11 80    	cmp    $0x80115354,%edx
+80103c1c:	74 ca                	je     80103be8 <exit+0xb8>
     if(p->state == SLEEPING && p->chan == chan)
-80103b8e:	83 7a 0c 02          	cmpl   $0x2,0xc(%edx)
-80103b92:	75 ec                	jne    80103b80 <exit+0xe0>
-80103b94:	3b 42 20             	cmp    0x20(%edx),%eax
-80103b97:	75 e7                	jne    80103b80 <exit+0xe0>
+80103c1e:	83 7a 0c 02          	cmpl   $0x2,0xc(%edx)
+80103c22:	75 ec                	jne    80103c10 <exit+0xe0>
+80103c24:	3b 42 20             	cmp    0x20(%edx),%eax
+80103c27:	75 e7                	jne    80103c10 <exit+0xe0>
       p->state = RUNNABLE;
-80103b99:	c7 42 0c 03 00 00 00 	movl   $0x3,0xc(%edx)
-80103ba0:	eb de                	jmp    80103b80 <exit+0xe0>
+80103c29:	c7 42 0c 03 00 00 00 	movl   $0x3,0xc(%edx)
+80103c30:	eb de                	jmp    80103c10 <exit+0xe0>
+  curproc->endtime = ticks;
+80103c32:	a1 a0 5b 11 80       	mov    0x80115ba0,%eax
+  curproc->turnaround = curproc->endtime - curproc->starttime;
+80103c37:	8b 93 88 00 00 00    	mov    0x88(%ebx),%edx
+80103c3d:	89 c1                	mov    %eax,%ecx
+80103c3f:	29 d1                	sub    %edx,%ecx
+80103c41:	89 8b 94 00 00 00    	mov    %ecx,0x94(%ebx)
+  curproc->endtime = ticks;
+80103c47:	89 83 8c 00 00 00    	mov    %eax,0x8c(%ebx)
+  curproc->runtime += curproc->endtime - time;
+80103c4d:	2b 05 ac ff 10 80    	sub    0x8010ffac,%eax
+80103c53:	01 83 90 00 00 00    	add    %eax,0x90(%ebx)
+  cprintf("PID:%d - Start time: %d \n", curproc->pid, curproc->starttime);
+80103c59:	89 54 24 08          	mov    %edx,0x8(%esp)
+80103c5d:	8b 43 10             	mov    0x10(%ebx),%eax
+80103c60:	c7 04 24 bd 75 10 80 	movl   $0x801075bd,(%esp)
+80103c67:	89 44 24 04          	mov    %eax,0x4(%esp)
+80103c6b:	e8 e0 c9 ff ff       	call   80100650 <cprintf>
+  cprintf("PID:%d - End time: %d \n", curproc->pid, curproc->endtime);
+80103c70:	8b 83 8c 00 00 00    	mov    0x8c(%ebx),%eax
+80103c76:	89 44 24 08          	mov    %eax,0x8(%esp)
+80103c7a:	8b 43 10             	mov    0x10(%ebx),%eax
+80103c7d:	c7 04 24 d7 75 10 80 	movl   $0x801075d7,(%esp)
+80103c84:	89 44 24 04          	mov    %eax,0x4(%esp)
+80103c88:	e8 c3 c9 ff ff       	call   80100650 <cprintf>
+  cprintf("PID:%d - Turnaround time: %d \n", curproc->pid, curproc->turnaround);
+80103c8d:	8b 83 94 00 00 00    	mov    0x94(%ebx),%eax
+80103c93:	89 44 24 08          	mov    %eax,0x8(%esp)
+80103c97:	8b 43 10             	mov    0x10(%ebx),%eax
+80103c9a:	c7 04 24 8c 76 10 80 	movl   $0x8010768c,(%esp)
+80103ca1:	89 44 24 04          	mov    %eax,0x4(%esp)
+80103ca5:	e8 a6 c9 ff ff       	call   80100650 <cprintf>
+  cprintf("PID:%d - Burst time: %d \n", curproc->pid, curproc->turnaround - curproc->runtime);
+80103caa:	8b 83 94 00 00 00    	mov    0x94(%ebx),%eax
+80103cb0:	2b 83 90 00 00 00    	sub    0x90(%ebx),%eax
+80103cb6:	89 44 24 08          	mov    %eax,0x8(%esp)
+80103cba:	8b 43 10             	mov    0x10(%ebx),%eax
+80103cbd:	c7 04 24 ef 75 10 80 	movl   $0x801075ef,(%esp)
+80103cc4:	89 44 24 04          	mov    %eax,0x4(%esp)
+80103cc8:	e8 83 c9 ff ff       	call   80100650 <cprintf>
   curproc->status = stat;
-80103ba2:	8b 45 08             	mov    0x8(%ebp),%eax
+80103ccd:	8b 45 08             	mov    0x8(%ebp),%eax
   curproc->state = ZOMBIE;
-80103ba5:	c7 43 0c 05 00 00 00 	movl   $0x5,0xc(%ebx)
+80103cd0:	c7 43 0c 05 00 00 00 	movl   $0x5,0xc(%ebx)
   curproc->status = stat;
-80103bac:	89 43 7c             	mov    %eax,0x7c(%ebx)
+80103cd7:	89 43 7c             	mov    %eax,0x7c(%ebx)
   sched();
-80103baf:	e8 4c fe ff ff       	call   80103a00 <sched>
+80103cda:	e8 b1 fd ff ff       	call   80103a90 <sched>
   panic("zombie exit");
-80103bb4:	c7 04 24 fd 73 10 80 	movl   $0x801073fd,(%esp)
-80103bbb:	e8 a0 c7 ff ff       	call   80100360 <panic>
+80103cdf:	c7 04 24 09 76 10 80 	movl   $0x80107609,(%esp)
+80103ce6:	e8 75 c6 ff ff       	call   80100360 <panic>
     panic("init exiting");
-80103bc0:	c7 04 24 f0 73 10 80 	movl   $0x801073f0,(%esp)
-80103bc7:	e8 94 c7 ff ff       	call   80100360 <panic>
-80103bcc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80103ceb:	c7 04 24 b0 75 10 80 	movl   $0x801075b0,(%esp)
+80103cf2:	e8 69 c6 ff ff       	call   80100360 <panic>
+80103cf7:	89 f6                	mov    %esi,%esi
+80103cf9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
 
-80103bd0 <yield>:
+80103d00 <yield>:
 {
-80103bd0:	55                   	push   %ebp
-80103bd1:	89 e5                	mov    %esp,%ebp
-80103bd3:	83 ec 18             	sub    $0x18,%esp
+80103d00:	55                   	push   %ebp
+80103d01:	89 e5                	mov    %esp,%ebp
+80103d03:	83 ec 18             	sub    $0x18,%esp
   acquire(&ptable.lock);  //DOC: yieldlock
-80103bd6:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
-80103bdd:	e8 6e 07 00 00       	call   80104350 <acquire>
+80103d06:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
+80103d0d:	e8 ae 07 00 00       	call   801044c0 <acquire>
   myproc()->state = RUNNABLE;
-80103be2:	e8 b9 fa ff ff       	call   801036a0 <myproc>
-80103be7:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
+80103d12:	e8 89 f9 ff ff       	call   801036a0 <myproc>
+80103d17:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
   sched();
-80103bee:	e8 0d fe ff ff       	call   80103a00 <sched>
+80103d1e:	e8 6d fd ff ff       	call   80103a90 <sched>
   release(&ptable.lock);
-80103bf3:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
-80103bfa:	e8 c1 07 00 00       	call   801043c0 <release>
-}
-80103bff:	c9                   	leave  
-80103c00:	c3                   	ret    
-80103c01:	eb 0d                	jmp    80103c10 <sleep>
-80103c03:	90                   	nop
-80103c04:	90                   	nop
-80103c05:	90                   	nop
-80103c06:	90                   	nop
-80103c07:	90                   	nop
-80103c08:	90                   	nop
-80103c09:	90                   	nop
-80103c0a:	90                   	nop
-80103c0b:	90                   	nop
-80103c0c:	90                   	nop
-80103c0d:	90                   	nop
-80103c0e:	90                   	nop
-80103c0f:	90                   	nop
-
-80103c10 <sleep>:
-{
-80103c10:	55                   	push   %ebp
-80103c11:	89 e5                	mov    %esp,%ebp
-80103c13:	57                   	push   %edi
-80103c14:	56                   	push   %esi
-80103c15:	53                   	push   %ebx
-80103c16:	83 ec 1c             	sub    $0x1c,%esp
-80103c19:	8b 7d 08             	mov    0x8(%ebp),%edi
-80103c1c:	8b 75 0c             	mov    0xc(%ebp),%esi
+80103d23:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
+80103d2a:	e8 01 08 00 00       	call   80104530 <release>
+}
+80103d2f:	c9                   	leave  
+80103d30:	c3                   	ret    
+80103d31:	eb 0d                	jmp    80103d40 <setPrior>
+80103d33:	90                   	nop
+80103d34:	90                   	nop
+80103d35:	90                   	nop
+80103d36:	90                   	nop
+80103d37:	90                   	nop
+80103d38:	90                   	nop
+80103d39:	90                   	nop
+80103d3a:	90                   	nop
+80103d3b:	90                   	nop
+80103d3c:	90                   	nop
+80103d3d:	90                   	nop
+80103d3e:	90                   	nop
+80103d3f:	90                   	nop
+
+80103d40 <setPrior>:
+{
+80103d40:	55                   	push   %ebp
+80103d41:	89 e5                	mov    %esp,%ebp
+80103d43:	83 ec 08             	sub    $0x8,%esp
+  struct proc *p = myproc();
+80103d46:	e8 55 f9 ff ff       	call   801036a0 <myproc>
+  p->priority = priority;
+80103d4b:	8b 55 08             	mov    0x8(%ebp),%edx
+80103d4e:	89 90 84 00 00 00    	mov    %edx,0x84(%eax)
+}
+80103d54:	c9                   	leave  
+80103d55:	c3                   	ret    
+80103d56:	8d 76 00             	lea    0x0(%esi),%esi
+80103d59:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80103d60 <getPrior>:
+{
+80103d60:	55                   	push   %ebp
+80103d61:	89 e5                	mov    %esp,%ebp
+80103d63:	83 ec 08             	sub    $0x8,%esp
   struct proc *p = myproc();
-80103c1f:	e8 7c fa ff ff       	call   801036a0 <myproc>
+80103d66:	e8 35 f9 ff ff       	call   801036a0 <myproc>
+  return p->priority;
+80103d6b:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
+}
+80103d71:	c9                   	leave  
+80103d72:	c3                   	ret    
+80103d73:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80103d79:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80103d80 <sleep>:
+{
+80103d80:	55                   	push   %ebp
+80103d81:	89 e5                	mov    %esp,%ebp
+80103d83:	57                   	push   %edi
+80103d84:	56                   	push   %esi
+80103d85:	53                   	push   %ebx
+80103d86:	83 ec 1c             	sub    $0x1c,%esp
+80103d89:	8b 7d 08             	mov    0x8(%ebp),%edi
+80103d8c:	8b 75 0c             	mov    0xc(%ebp),%esi
+  struct proc *p = myproc();
+80103d8f:	e8 0c f9 ff ff       	call   801036a0 <myproc>
   if(p == 0)
-80103c24:	85 c0                	test   %eax,%eax
+80103d94:	85 c0                	test   %eax,%eax
   struct proc *p = myproc();
-80103c26:	89 c3                	mov    %eax,%ebx
+80103d96:	89 c3                	mov    %eax,%ebx
   if(p == 0)
-80103c28:	0f 84 7c 00 00 00    	je     80103caa <sleep+0x9a>
+80103d98:	0f 84 7c 00 00 00    	je     80103e1a <sleep+0x9a>
   if(lk == 0)
-80103c2e:	85 f6                	test   %esi,%esi
-80103c30:	74 6c                	je     80103c9e <sleep+0x8e>
+80103d9e:	85 f6                	test   %esi,%esi
+80103da0:	74 6c                	je     80103e0e <sleep+0x8e>
   if(lk != &ptable.lock){  //DOC: sleeplock0
-80103c32:	81 fe 20 2d 11 80    	cmp    $0x80112d20,%esi
-80103c38:	74 46                	je     80103c80 <sleep+0x70>
+80103da2:	81 fe 20 2d 11 80    	cmp    $0x80112d20,%esi
+80103da8:	74 46                	je     80103df0 <sleep+0x70>
     acquire(&ptable.lock);  //DOC: sleeplock1
-80103c3a:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
-80103c41:	e8 0a 07 00 00       	call   80104350 <acquire>
+80103daa:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
+80103db1:	e8 0a 07 00 00       	call   801044c0 <acquire>
     release(lk);
-80103c46:	89 34 24             	mov    %esi,(%esp)
-80103c49:	e8 72 07 00 00       	call   801043c0 <release>
+80103db6:	89 34 24             	mov    %esi,(%esp)
+80103db9:	e8 72 07 00 00       	call   80104530 <release>
   p->chan = chan;
-80103c4e:	89 7b 20             	mov    %edi,0x20(%ebx)
+80103dbe:	89 7b 20             	mov    %edi,0x20(%ebx)
   p->state = SLEEPING;
-80103c51:	c7 43 0c 02 00 00 00 	movl   $0x2,0xc(%ebx)
+80103dc1:	c7 43 0c 02 00 00 00 	movl   $0x2,0xc(%ebx)
   sched();
-80103c58:	e8 a3 fd ff ff       	call   80103a00 <sched>
+80103dc8:	e8 c3 fc ff ff       	call   80103a90 <sched>
   p->chan = 0;
-80103c5d:	c7 43 20 00 00 00 00 	movl   $0x0,0x20(%ebx)
+80103dcd:	c7 43 20 00 00 00 00 	movl   $0x0,0x20(%ebx)
     release(&ptable.lock);
-80103c64:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
-80103c6b:	e8 50 07 00 00       	call   801043c0 <release>
+80103dd4:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
+80103ddb:	e8 50 07 00 00       	call   80104530 <release>
     acquire(lk);
-80103c70:	89 75 08             	mov    %esi,0x8(%ebp)
+80103de0:	89 75 08             	mov    %esi,0x8(%ebp)
 }
-80103c73:	83 c4 1c             	add    $0x1c,%esp
-80103c76:	5b                   	pop    %ebx
-80103c77:	5e                   	pop    %esi
-80103c78:	5f                   	pop    %edi
-80103c79:	5d                   	pop    %ebp
+80103de3:	83 c4 1c             	add    $0x1c,%esp
+80103de6:	5b                   	pop    %ebx
+80103de7:	5e                   	pop    %esi
+80103de8:	5f                   	pop    %edi
+80103de9:	5d                   	pop    %ebp
     acquire(lk);
-80103c7a:	e9 d1 06 00 00       	jmp    80104350 <acquire>
-80103c7f:	90                   	nop
+80103dea:	e9 d1 06 00 00       	jmp    801044c0 <acquire>
+80103def:	90                   	nop
   p->chan = chan;
-80103c80:	89 78 20             	mov    %edi,0x20(%eax)
+80103df0:	89 78 20             	mov    %edi,0x20(%eax)
   p->state = SLEEPING;
-80103c83:	c7 40 0c 02 00 00 00 	movl   $0x2,0xc(%eax)
+80103df3:	c7 40 0c 02 00 00 00 	movl   $0x2,0xc(%eax)
   sched();
-80103c8a:	e8 71 fd ff ff       	call   80103a00 <sched>
+80103dfa:	e8 91 fc ff ff       	call   80103a90 <sched>
   p->chan = 0;
-80103c8f:	c7 43 20 00 00 00 00 	movl   $0x0,0x20(%ebx)
-}
-80103c96:	83 c4 1c             	add    $0x1c,%esp
-80103c99:	5b                   	pop    %ebx
-80103c9a:	5e                   	pop    %esi
-80103c9b:	5f                   	pop    %edi
-80103c9c:	5d                   	pop    %ebp
-80103c9d:	c3                   	ret    
+80103dff:	c7 43 20 00 00 00 00 	movl   $0x0,0x20(%ebx)
+}
+80103e06:	83 c4 1c             	add    $0x1c,%esp
+80103e09:	5b                   	pop    %ebx
+80103e0a:	5e                   	pop    %esi
+80103e0b:	5f                   	pop    %edi
+80103e0c:	5d                   	pop    %ebp
+80103e0d:	c3                   	ret    
     panic("sleep without lk");
-80103c9e:	c7 04 24 0f 74 10 80 	movl   $0x8010740f,(%esp)
-80103ca5:	e8 b6 c6 ff ff       	call   80100360 <panic>
+80103e0e:	c7 04 24 1b 76 10 80 	movl   $0x8010761b,(%esp)
+80103e15:	e8 46 c5 ff ff       	call   80100360 <panic>
     panic("sleep");
-80103caa:	c7 04 24 09 74 10 80 	movl   $0x80107409,(%esp)
-80103cb1:	e8 aa c6 ff ff       	call   80100360 <panic>
-80103cb6:	8d 76 00             	lea    0x0(%esi),%esi
-80103cb9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
-
-80103cc0 <wait>:
-{
-80103cc0:	55                   	push   %ebp
-80103cc1:	89 e5                	mov    %esp,%ebp
-80103cc3:	57                   	push   %edi
-80103cc4:	56                   	push   %esi
-80103cc5:	53                   	push   %ebx
-80103cc6:	83 ec 1c             	sub    $0x1c,%esp
-80103cc9:	8b 7d 08             	mov    0x8(%ebp),%edi
+80103e1a:	c7 04 24 15 76 10 80 	movl   $0x80107615,(%esp)
+80103e21:	e8 3a c5 ff ff       	call   80100360 <panic>
+80103e26:	8d 76 00             	lea    0x0(%esi),%esi
+80103e29:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80103e30 <wait>:
+{
+80103e30:	55                   	push   %ebp
+80103e31:	89 e5                	mov    %esp,%ebp
+80103e33:	57                   	push   %edi
+80103e34:	56                   	push   %esi
+80103e35:	53                   	push   %ebx
+80103e36:	83 ec 1c             	sub    $0x1c,%esp
+80103e39:	8b 7d 08             	mov    0x8(%ebp),%edi
   struct proc *curproc = myproc();
-80103ccc:	e8 cf f9 ff ff       	call   801036a0 <myproc>
+80103e3c:	e8 5f f8 ff ff       	call   801036a0 <myproc>
   acquire(&ptable.lock);
-80103cd1:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
+80103e41:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
   struct proc *curproc = myproc();
-80103cd8:	89 c6                	mov    %eax,%esi
+80103e48:	89 c6                	mov    %eax,%esi
   acquire(&ptable.lock);
-80103cda:	e8 71 06 00 00       	call   80104350 <acquire>
+80103e4a:	e8 71 06 00 00       	call   801044c0 <acquire>
     havekids = 0;
-80103cdf:	31 c0                	xor    %eax,%eax
+80103e4f:	31 c0                	xor    %eax,%eax
     for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-80103ce1:	bb 54 2d 11 80       	mov    $0x80112d54,%ebx
-80103ce6:	eb 0e                	jmp    80103cf6 <wait+0x36>
-80103ce8:	81 c3 84 00 00 00    	add    $0x84,%ebx
-80103cee:	81 fb 54 4e 11 80    	cmp    $0x80114e54,%ebx
-80103cf4:	74 22                	je     80103d18 <wait+0x58>
+80103e51:	bb 54 2d 11 80       	mov    $0x80112d54,%ebx
+80103e56:	eb 0e                	jmp    80103e66 <wait+0x36>
+80103e58:	81 c3 98 00 00 00    	add    $0x98,%ebx
+80103e5e:	81 fb 54 53 11 80    	cmp    $0x80115354,%ebx
+80103e64:	74 22                	je     80103e88 <wait+0x58>
       if(p->parent != curproc)
-80103cf6:	39 73 14             	cmp    %esi,0x14(%ebx)
-80103cf9:	75 ed                	jne    80103ce8 <wait+0x28>
+80103e66:	39 73 14             	cmp    %esi,0x14(%ebx)
+80103e69:	75 ed                	jne    80103e58 <wait+0x28>
       if(p->state == ZOMBIE){
-80103cfb:	83 7b 0c 05          	cmpl   $0x5,0xc(%ebx)
-80103cff:	74 34                	je     80103d35 <wait+0x75>
+80103e6b:	83 7b 0c 05          	cmpl   $0x5,0xc(%ebx)
+80103e6f:	74 34                	je     80103ea5 <wait+0x75>
     for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-80103d01:	81 c3 84 00 00 00    	add    $0x84,%ebx
+80103e71:	81 c3 98 00 00 00    	add    $0x98,%ebx
       havekids = 1;
-80103d07:	b8 01 00 00 00       	mov    $0x1,%eax
+80103e77:	b8 01 00 00 00       	mov    $0x1,%eax
     for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-80103d0c:	81 fb 54 4e 11 80    	cmp    $0x80114e54,%ebx
-80103d12:	75 e2                	jne    80103cf6 <wait+0x36>
-80103d14:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80103e7c:	81 fb 54 53 11 80    	cmp    $0x80115354,%ebx
+80103e82:	75 e2                	jne    80103e66 <wait+0x36>
+80103e84:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     if(!havekids || curproc->killed){
-80103d18:	85 c0                	test   %eax,%eax
-80103d1a:	74 7f                	je     80103d9b <wait+0xdb>
-80103d1c:	8b 46 24             	mov    0x24(%esi),%eax
-80103d1f:	85 c0                	test   %eax,%eax
-80103d21:	75 78                	jne    80103d9b <wait+0xdb>
+80103e88:	85 c0                	test   %eax,%eax
+80103e8a:	74 7f                	je     80103f0b <wait+0xdb>
+80103e8c:	8b 46 24             	mov    0x24(%esi),%eax
+80103e8f:	85 c0                	test   %eax,%eax
+80103e91:	75 78                	jne    80103f0b <wait+0xdb>
     sleep(curproc, &ptable.lock);  //DOC: wait-sleep
-80103d23:	c7 44 24 04 20 2d 11 	movl   $0x80112d20,0x4(%esp)
-80103d2a:	80 
-80103d2b:	89 34 24             	mov    %esi,(%esp)
-80103d2e:	e8 dd fe ff ff       	call   80103c10 <sleep>
+80103e93:	c7 44 24 04 20 2d 11 	movl   $0x80112d20,0x4(%esp)
+80103e9a:	80 
+80103e9b:	89 34 24             	mov    %esi,(%esp)
+80103e9e:	e8 dd fe ff ff       	call   80103d80 <sleep>
   }
-80103d33:	eb aa                	jmp    80103cdf <wait+0x1f>
+80103ea3:	eb aa                	jmp    80103e4f <wait+0x1f>
         kfree(p->kstack);
-80103d35:	8b 43 08             	mov    0x8(%ebx),%eax
+80103ea5:	8b 43 08             	mov    0x8(%ebx),%eax
         pid = p->pid;
-80103d38:	8b 73 10             	mov    0x10(%ebx),%esi
+80103ea8:	8b 73 10             	mov    0x10(%ebx),%esi
         kfree(p->kstack);
-80103d3b:	89 04 24             	mov    %eax,(%esp)
-80103d3e:	e8 ad e5 ff ff       	call   801022f0 <kfree>
+80103eab:	89 04 24             	mov    %eax,(%esp)
+80103eae:	e8 3d e4 ff ff       	call   801022f0 <kfree>
         freevm(p->pgdir);
-80103d43:	8b 43 04             	mov    0x4(%ebx),%eax
+80103eb3:	8b 43 04             	mov    0x4(%ebx),%eax
         p->kstack = 0;
-80103d46:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%ebx)
+80103eb6:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%ebx)
         freevm(p->pgdir);
-80103d4d:	89 04 24             	mov    %eax,(%esp)
-80103d50:	e8 9b 2d 00 00       	call   80106af0 <freevm>
+80103ebd:	89 04 24             	mov    %eax,(%esp)
+80103ec0:	e8 fb 2d 00 00       	call   80106cc0 <freevm>
         if(status) {
-80103d55:	85 ff                	test   %edi,%edi
+80103ec5:	85 ff                	test   %edi,%edi
         p->pid = 0;
-80103d57:	c7 43 10 00 00 00 00 	movl   $0x0,0x10(%ebx)
+80103ec7:	c7 43 10 00 00 00 00 	movl   $0x0,0x10(%ebx)
         p->parent = 0;
-80103d5e:	c7 43 14 00 00 00 00 	movl   $0x0,0x14(%ebx)
+80103ece:	c7 43 14 00 00 00 00 	movl   $0x0,0x14(%ebx)
         p->name[0] = 0;
-80103d65:	c6 43 6c 00          	movb   $0x0,0x6c(%ebx)
+80103ed5:	c6 43 6c 00          	movb   $0x0,0x6c(%ebx)
         p->killed = 0;
-80103d69:	c7 43 24 00 00 00 00 	movl   $0x0,0x24(%ebx)
+80103ed9:	c7 43 24 00 00 00 00 	movl   $0x0,0x24(%ebx)
         p->state = UNUSED;
-80103d70:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
+80103ee0:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
         if(status) {
-80103d77:	74 05                	je     80103d7e <wait+0xbe>
+80103ee7:	74 05                	je     80103eee <wait+0xbe>
           *status = p->status;
-80103d79:	8b 43 7c             	mov    0x7c(%ebx),%eax
-80103d7c:	89 07                	mov    %eax,(%edi)
+80103ee9:	8b 43 7c             	mov    0x7c(%ebx),%eax
+80103eec:	89 07                	mov    %eax,(%edi)
         release(&ptable.lock);
-80103d7e:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
+80103eee:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
         p->status = 0;
-80103d85:	c7 43 7c 00 00 00 00 	movl   $0x0,0x7c(%ebx)
+80103ef5:	c7 43 7c 00 00 00 00 	movl   $0x0,0x7c(%ebx)
         release(&ptable.lock);
-80103d8c:	e8 2f 06 00 00       	call   801043c0 <release>
+80103efc:	e8 2f 06 00 00       	call   80104530 <release>
 }
-80103d91:	83 c4 1c             	add    $0x1c,%esp
+80103f01:	83 c4 1c             	add    $0x1c,%esp
         return pid;
-80103d94:	89 f0                	mov    %esi,%eax
+80103f04:	89 f0                	mov    %esi,%eax
 }
-80103d96:	5b                   	pop    %ebx
-80103d97:	5e                   	pop    %esi
-80103d98:	5f                   	pop    %edi
-80103d99:	5d                   	pop    %ebp
-80103d9a:	c3                   	ret    
+80103f06:	5b                   	pop    %ebx
+80103f07:	5e                   	pop    %esi
+80103f08:	5f                   	pop    %edi
+80103f09:	5d                   	pop    %ebp
+80103f0a:	c3                   	ret    
       release(&ptable.lock);
-80103d9b:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
-80103da2:	e8 19 06 00 00       	call   801043c0 <release>
+80103f0b:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
+80103f12:	e8 19 06 00 00       	call   80104530 <release>
 }
-80103da7:	83 c4 1c             	add    $0x1c,%esp
+80103f17:	83 c4 1c             	add    $0x1c,%esp
       return -1;
-80103daa:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-}
-80103daf:	5b                   	pop    %ebx
-80103db0:	5e                   	pop    %esi
-80103db1:	5f                   	pop    %edi
-80103db2:	5d                   	pop    %ebp
-80103db3:	c3                   	ret    
-80103db4:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-80103dba:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
-
-80103dc0 <waitpid>:
-{
-80103dc0:	55                   	push   %ebp
-80103dc1:	89 e5                	mov    %esp,%ebp
-80103dc3:	57                   	push   %edi
-80103dc4:	56                   	push   %esi
-80103dc5:	53                   	push   %ebx
-80103dc6:	83 ec 1c             	sub    $0x1c,%esp
-80103dc9:	8b 55 08             	mov    0x8(%ebp),%edx
-80103dcc:	8b 7d 10             	mov    0x10(%ebp),%edi
-80103dcf:	89 55 e0             	mov    %edx,-0x20(%ebp)
+80103f1a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80103f1f:	5b                   	pop    %ebx
+80103f20:	5e                   	pop    %esi
+80103f21:	5f                   	pop    %edi
+80103f22:	5d                   	pop    %ebp
+80103f23:	c3                   	ret    
+80103f24:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80103f2a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+80103f30 <waitpid>:
+{
+80103f30:	55                   	push   %ebp
+80103f31:	89 e5                	mov    %esp,%ebp
+80103f33:	57                   	push   %edi
+80103f34:	56                   	push   %esi
+80103f35:	53                   	push   %ebx
+80103f36:	83 ec 1c             	sub    $0x1c,%esp
+80103f39:	8b 55 08             	mov    0x8(%ebp),%edx
+80103f3c:	8b 7d 10             	mov    0x10(%ebp),%edi
+80103f3f:	89 55 e0             	mov    %edx,-0x20(%ebp)
   struct proc *p, *curproc = myproc();
-80103dd2:	e8 c9 f8 ff ff       	call   801036a0 <myproc>
+80103f42:	e8 59 f7 ff ff       	call   801036a0 <myproc>
   acquire(&ptable.lock);
-80103dd7:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
+80103f47:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
   struct proc *p, *curproc = myproc();
-80103dde:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+80103f4e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
   acquire(&ptable.lock);
-80103de1:	e8 6a 05 00 00       	call   80104350 <acquire>
-80103de6:	8b 55 e0             	mov    -0x20(%ebp),%edx
+80103f51:	e8 6a 05 00 00       	call   801044c0 <acquire>
+80103f56:	8b 55 e0             	mov    -0x20(%ebp),%edx
     found_process = 0;
-80103de9:	31 c0                	xor    %eax,%eax
+80103f59:	31 c0                	xor    %eax,%eax
     for(p = ptable.proc; p < &ptable.proc[NPROC]; p++) {
-80103deb:	bb 54 2d 11 80       	mov    $0x80112d54,%ebx
-80103df0:	eb 14                	jmp    80103e06 <waitpid+0x46>
-80103df2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-80103df8:	81 c3 84 00 00 00    	add    $0x84,%ebx
-80103dfe:	81 fb 54 4e 11 80    	cmp    $0x80114e54,%ebx
-80103e04:	74 29                	je     80103e2f <waitpid+0x6f>
+80103f5b:	bb 54 2d 11 80       	mov    $0x80112d54,%ebx
+80103f60:	eb 14                	jmp    80103f76 <waitpid+0x46>
+80103f62:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80103f68:	81 c3 98 00 00 00    	add    $0x98,%ebx
+80103f6e:	81 fb 54 53 11 80    	cmp    $0x80115354,%ebx
+80103f74:	74 29                	je     80103f9f <waitpid+0x6f>
       if(p->pid != pid) continue;
-80103e06:	8b 73 10             	mov    0x10(%ebx),%esi
-80103e09:	39 d6                	cmp    %edx,%esi
-80103e0b:	75 eb                	jne    80103df8 <waitpid+0x38>
+80103f76:	8b 73 10             	mov    0x10(%ebx),%esi
+80103f79:	39 d6                	cmp    %edx,%esi
+80103f7b:	75 eb                	jne    80103f68 <waitpid+0x38>
       if(p->state == ZOMBIE) {
-80103e0d:	83 7b 0c 05          	cmpl   $0x5,0xc(%ebx)
-80103e11:	74 4d                	je     80103e60 <waitpid+0xa0>
+80103f7d:	83 7b 0c 05          	cmpl   $0x5,0xc(%ebx)
+80103f81:	74 4d                	je     80103fd0 <waitpid+0xa0>
       } else if(options == 1) { 
-80103e13:	83 ff 01             	cmp    $0x1,%edi
-80103e16:	0f 84 a8 00 00 00    	je     80103ec4 <waitpid+0x104>
+80103f83:	83 ff 01             	cmp    $0x1,%edi
+80103f86:	0f 84 a8 00 00 00    	je     80104034 <waitpid+0x104>
     for(p = ptable.proc; p < &ptable.proc[NPROC]; p++) {
-80103e1c:	81 c3 84 00 00 00    	add    $0x84,%ebx
+80103f8c:	81 c3 98 00 00 00    	add    $0x98,%ebx
       found_process = 1;
-80103e22:	b8 01 00 00 00       	mov    $0x1,%eax
+80103f92:	b8 01 00 00 00       	mov    $0x1,%eax
     for(p = ptable.proc; p < &ptable.proc[NPROC]; p++) {
-80103e27:	81 fb 54 4e 11 80    	cmp    $0x80114e54,%ebx
-80103e2d:	75 d7                	jne    80103e06 <waitpid+0x46>
+80103f97:	81 fb 54 53 11 80    	cmp    $0x80115354,%ebx
+80103f9d:	75 d7                	jne    80103f76 <waitpid+0x46>
   if(!found_process || curproc->killed) {
-80103e2f:	85 c0                	test   %eax,%eax
-80103e31:	0f 84 a5 00 00 00    	je     80103edc <waitpid+0x11c>
-80103e37:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-80103e3a:	8b 40 24             	mov    0x24(%eax),%eax
-80103e3d:	85 c0                	test   %eax,%eax
-80103e3f:	0f 85 97 00 00 00    	jne    80103edc <waitpid+0x11c>
+80103f9f:	85 c0                	test   %eax,%eax
+80103fa1:	0f 84 a5 00 00 00    	je     8010404c <waitpid+0x11c>
+80103fa7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+80103faa:	8b 40 24             	mov    0x24(%eax),%eax
+80103fad:	85 c0                	test   %eax,%eax
+80103faf:	0f 85 97 00 00 00    	jne    8010404c <waitpid+0x11c>
     sleep(curproc, &ptable.lock);  //DOC: wait-sleep
-80103e45:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-80103e48:	c7 44 24 04 20 2d 11 	movl   $0x80112d20,0x4(%esp)
-80103e4f:	80 
-80103e50:	89 55 e0             	mov    %edx,-0x20(%ebp)
-80103e53:	89 04 24             	mov    %eax,(%esp)
-80103e56:	e8 b5 fd ff ff       	call   80103c10 <sleep>
+80103fb5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+80103fb8:	c7 44 24 04 20 2d 11 	movl   $0x80112d20,0x4(%esp)
+80103fbf:	80 
+80103fc0:	89 55 e0             	mov    %edx,-0x20(%ebp)
+80103fc3:	89 04 24             	mov    %eax,(%esp)
+80103fc6:	e8 b5 fd ff ff       	call   80103d80 <sleep>
   }
-80103e5b:	8b 55 e0             	mov    -0x20(%ebp),%edx
-80103e5e:	eb 89                	jmp    80103de9 <waitpid+0x29>
+80103fcb:	8b 55 e0             	mov    -0x20(%ebp),%edx
+80103fce:	eb 89                	jmp    80103f59 <waitpid+0x29>
         kfree(p->kstack);
-80103e60:	8b 43 08             	mov    0x8(%ebx),%eax
-80103e63:	89 04 24             	mov    %eax,(%esp)
-80103e66:	e8 85 e4 ff ff       	call   801022f0 <kfree>
+80103fd0:	8b 43 08             	mov    0x8(%ebx),%eax
+80103fd3:	89 04 24             	mov    %eax,(%esp)
+80103fd6:	e8 15 e3 ff ff       	call   801022f0 <kfree>
         freevm(p->pgdir);
-80103e6b:	8b 43 04             	mov    0x4(%ebx),%eax
+80103fdb:	8b 43 04             	mov    0x4(%ebx),%eax
         p->kstack = 0;
-80103e6e:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%ebx)
+80103fde:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%ebx)
         freevm(p->pgdir);
-80103e75:	89 04 24             	mov    %eax,(%esp)
-80103e78:	e8 73 2c 00 00       	call   80106af0 <freevm>
+80103fe5:	89 04 24             	mov    %eax,(%esp)
+80103fe8:	e8 d3 2c 00 00       	call   80106cc0 <freevm>
         if (*status != 0) *status = p->status;
-80103e7d:	8b 45 0c             	mov    0xc(%ebp),%eax
+80103fed:	8b 45 0c             	mov    0xc(%ebp),%eax
         p->pid = 0;
-80103e80:	c7 43 10 00 00 00 00 	movl   $0x0,0x10(%ebx)
+80103ff0:	c7 43 10 00 00 00 00 	movl   $0x0,0x10(%ebx)
         p->parent = 0;
-80103e87:	c7 43 14 00 00 00 00 	movl   $0x0,0x14(%ebx)
+80103ff7:	c7 43 14 00 00 00 00 	movl   $0x0,0x14(%ebx)
         p->name[0] = 0;
-80103e8e:	c6 43 6c 00          	movb   $0x0,0x6c(%ebx)
+80103ffe:	c6 43 6c 00          	movb   $0x0,0x6c(%ebx)
         p->killed = 0;
-80103e92:	c7 43 24 00 00 00 00 	movl   $0x0,0x24(%ebx)
+80104002:	c7 43 24 00 00 00 00 	movl   $0x0,0x24(%ebx)
         p->state = UNUSED;
-80103e99:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
+80104009:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
         if (*status != 0) *status = p->status;
-80103ea0:	8b 10                	mov    (%eax),%edx
-80103ea2:	85 d2                	test   %edx,%edx
-80103ea4:	74 08                	je     80103eae <waitpid+0xee>
-80103ea6:	8b 43 7c             	mov    0x7c(%ebx),%eax
-80103ea9:	8b 4d 0c             	mov    0xc(%ebp),%ecx
-80103eac:	89 01                	mov    %eax,(%ecx)
+80104010:	8b 10                	mov    (%eax),%edx
+80104012:	85 d2                	test   %edx,%edx
+80104014:	74 08                	je     8010401e <waitpid+0xee>
+80104016:	8b 43 7c             	mov    0x7c(%ebx),%eax
+80104019:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+8010401c:	89 01                	mov    %eax,(%ecx)
         release(&ptable.lock);
-80103eae:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
-80103eb5:	e8 06 05 00 00       	call   801043c0 <release>
-}
-80103eba:	83 c4 1c             	add    $0x1c,%esp
-80103ebd:	89 f0                	mov    %esi,%eax
-80103ebf:	5b                   	pop    %ebx
-80103ec0:	5e                   	pop    %esi
-80103ec1:	5f                   	pop    %edi
-80103ec2:	5d                   	pop    %ebp
-80103ec3:	c3                   	ret    
+8010401e:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
+80104025:	e8 06 05 00 00       	call   80104530 <release>
+}
+8010402a:	83 c4 1c             	add    $0x1c,%esp
+8010402d:	89 f0                	mov    %esi,%eax
+8010402f:	5b                   	pop    %ebx
+80104030:	5e                   	pop    %esi
+80104031:	5f                   	pop    %edi
+80104032:	5d                   	pop    %ebp
+80104033:	c3                   	ret    
         release(&ptable.lock);
-80103ec4:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
+80104034:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
         return 0;
-80103ecb:	31 f6                	xor    %esi,%esi
+8010403b:	31 f6                	xor    %esi,%esi
         release(&ptable.lock);
-80103ecd:	e8 ee 04 00 00       	call   801043c0 <release>
-}
-80103ed2:	83 c4 1c             	add    $0x1c,%esp
-80103ed5:	89 f0                	mov    %esi,%eax
-80103ed7:	5b                   	pop    %ebx
-80103ed8:	5e                   	pop    %esi
-80103ed9:	5f                   	pop    %edi
-80103eda:	5d                   	pop    %ebp
-80103edb:	c3                   	ret    
+8010403d:	e8 ee 04 00 00       	call   80104530 <release>
+}
+80104042:	83 c4 1c             	add    $0x1c,%esp
+80104045:	89 f0                	mov    %esi,%eax
+80104047:	5b                   	pop    %ebx
+80104048:	5e                   	pop    %esi
+80104049:	5f                   	pop    %edi
+8010404a:	5d                   	pop    %ebp
+8010404b:	c3                   	ret    
     release(&ptable.lock);
-80103edc:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
+8010404c:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
     return -1;
-80103ee3:	be ff ff ff ff       	mov    $0xffffffff,%esi
+80104053:	be ff ff ff ff       	mov    $0xffffffff,%esi
     release(&ptable.lock);
-80103ee8:	e8 d3 04 00 00       	call   801043c0 <release>
+80104058:	e8 d3 04 00 00       	call   80104530 <release>
     return -1;
-80103eed:	eb cb                	jmp    80103eba <waitpid+0xfa>
-80103eef:	90                   	nop
+8010405d:	eb cb                	jmp    8010402a <waitpid+0xfa>
+8010405f:	90                   	nop
 
-80103ef0 <wakeup>:
+80104060 <wakeup>:
 }
 
 // Wake up all processes sleeping on chan.
 void
 wakeup(void *chan)
 {
-80103ef0:	55                   	push   %ebp
-80103ef1:	89 e5                	mov    %esp,%ebp
-80103ef3:	53                   	push   %ebx
-80103ef4:	83 ec 14             	sub    $0x14,%esp
-80103ef7:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80104060:	55                   	push   %ebp
+80104061:	89 e5                	mov    %esp,%ebp
+80104063:	53                   	push   %ebx
+80104064:	83 ec 14             	sub    $0x14,%esp
+80104067:	8b 5d 08             	mov    0x8(%ebp),%ebx
   acquire(&ptable.lock);
-80103efa:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
-80103f01:	e8 4a 04 00 00       	call   80104350 <acquire>
+8010406a:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
+80104071:	e8 4a 04 00 00       	call   801044c0 <acquire>
   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-80103f06:	b8 54 2d 11 80       	mov    $0x80112d54,%eax
-80103f0b:	eb 0f                	jmp    80103f1c <wakeup+0x2c>
-80103f0d:	8d 76 00             	lea    0x0(%esi),%esi
-80103f10:	05 84 00 00 00       	add    $0x84,%eax
-80103f15:	3d 54 4e 11 80       	cmp    $0x80114e54,%eax
-80103f1a:	74 24                	je     80103f40 <wakeup+0x50>
+80104076:	b8 54 2d 11 80       	mov    $0x80112d54,%eax
+8010407b:	eb 0f                	jmp    8010408c <wakeup+0x2c>
+8010407d:	8d 76 00             	lea    0x0(%esi),%esi
+80104080:	05 98 00 00 00       	add    $0x98,%eax
+80104085:	3d 54 53 11 80       	cmp    $0x80115354,%eax
+8010408a:	74 24                	je     801040b0 <wakeup+0x50>
     if(p->state == SLEEPING && p->chan == chan)
-80103f1c:	83 78 0c 02          	cmpl   $0x2,0xc(%eax)
-80103f20:	75 ee                	jne    80103f10 <wakeup+0x20>
-80103f22:	3b 58 20             	cmp    0x20(%eax),%ebx
-80103f25:	75 e9                	jne    80103f10 <wakeup+0x20>
+8010408c:	83 78 0c 02          	cmpl   $0x2,0xc(%eax)
+80104090:	75 ee                	jne    80104080 <wakeup+0x20>
+80104092:	3b 58 20             	cmp    0x20(%eax),%ebx
+80104095:	75 e9                	jne    80104080 <wakeup+0x20>
       p->state = RUNNABLE;
-80103f27:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
+80104097:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-80103f2e:	05 84 00 00 00       	add    $0x84,%eax
-80103f33:	3d 54 4e 11 80       	cmp    $0x80114e54,%eax
-80103f38:	75 e2                	jne    80103f1c <wakeup+0x2c>
-80103f3a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+8010409e:	05 98 00 00 00       	add    $0x98,%eax
+801040a3:	3d 54 53 11 80       	cmp    $0x80115354,%eax
+801040a8:	75 e2                	jne    8010408c <wakeup+0x2c>
+801040aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
   wakeup1(chan);
   release(&ptable.lock);
-80103f40:	c7 45 08 20 2d 11 80 	movl   $0x80112d20,0x8(%ebp)
+801040b0:	c7 45 08 20 2d 11 80 	movl   $0x80112d20,0x8(%ebp)
 }
-80103f47:	83 c4 14             	add    $0x14,%esp
-80103f4a:	5b                   	pop    %ebx
-80103f4b:	5d                   	pop    %ebp
+801040b7:	83 c4 14             	add    $0x14,%esp
+801040ba:	5b                   	pop    %ebx
+801040bb:	5d                   	pop    %ebp
   release(&ptable.lock);
-80103f4c:	e9 6f 04 00 00       	jmp    801043c0 <release>
-80103f51:	eb 0d                	jmp    80103f60 <kill>
-80103f53:	90                   	nop
-80103f54:	90                   	nop
-80103f55:	90                   	nop
-80103f56:	90                   	nop
-80103f57:	90                   	nop
-80103f58:	90                   	nop
-80103f59:	90                   	nop
-80103f5a:	90                   	nop
-80103f5b:	90                   	nop
-80103f5c:	90                   	nop
-80103f5d:	90                   	nop
-80103f5e:	90                   	nop
-80103f5f:	90                   	nop
-
-80103f60 <kill>:
+801040bc:	e9 6f 04 00 00       	jmp    80104530 <release>
+801040c1:	eb 0d                	jmp    801040d0 <kill>
+801040c3:	90                   	nop
+801040c4:	90                   	nop
+801040c5:	90                   	nop
+801040c6:	90                   	nop
+801040c7:	90                   	nop
+801040c8:	90                   	nop
+801040c9:	90                   	nop
+801040ca:	90                   	nop
+801040cb:	90                   	nop
+801040cc:	90                   	nop
+801040cd:	90                   	nop
+801040ce:	90                   	nop
+801040cf:	90                   	nop
+
+801040d0 <kill>:
 // Kill the process with the given pid.
 // Process won't exit until it returns
 // to user space (see trap in trap.c).
 int
 kill(int pid)
 {
-80103f60:	55                   	push   %ebp
-80103f61:	89 e5                	mov    %esp,%ebp
-80103f63:	53                   	push   %ebx
-80103f64:	83 ec 14             	sub    $0x14,%esp
-80103f67:	8b 5d 08             	mov    0x8(%ebp),%ebx
+801040d0:	55                   	push   %ebp
+801040d1:	89 e5                	mov    %esp,%ebp
+801040d3:	53                   	push   %ebx
+801040d4:	83 ec 14             	sub    $0x14,%esp
+801040d7:	8b 5d 08             	mov    0x8(%ebp),%ebx
   struct proc *p;
 
   acquire(&ptable.lock);
-80103f6a:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
-80103f71:	e8 da 03 00 00       	call   80104350 <acquire>
+801040da:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
+801040e1:	e8 da 03 00 00       	call   801044c0 <acquire>
   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-80103f76:	b8 54 2d 11 80       	mov    $0x80112d54,%eax
-80103f7b:	eb 0f                	jmp    80103f8c <kill+0x2c>
-80103f7d:	8d 76 00             	lea    0x0(%esi),%esi
-80103f80:	05 84 00 00 00       	add    $0x84,%eax
-80103f85:	3d 54 4e 11 80       	cmp    $0x80114e54,%eax
-80103f8a:	74 3c                	je     80103fc8 <kill+0x68>
+801040e6:	b8 54 2d 11 80       	mov    $0x80112d54,%eax
+801040eb:	eb 0f                	jmp    801040fc <kill+0x2c>
+801040ed:	8d 76 00             	lea    0x0(%esi),%esi
+801040f0:	05 98 00 00 00       	add    $0x98,%eax
+801040f5:	3d 54 53 11 80       	cmp    $0x80115354,%eax
+801040fa:	74 3c                	je     80104138 <kill+0x68>
     if(p->pid == pid){
-80103f8c:	39 58 10             	cmp    %ebx,0x10(%eax)
-80103f8f:	75 ef                	jne    80103f80 <kill+0x20>
+801040fc:	39 58 10             	cmp    %ebx,0x10(%eax)
+801040ff:	75 ef                	jne    801040f0 <kill+0x20>
       p->killed = 1;
       // Wake process from sleep if necessary.
       if(p->state == SLEEPING)
-80103f91:	83 78 0c 02          	cmpl   $0x2,0xc(%eax)
+80104101:	83 78 0c 02          	cmpl   $0x2,0xc(%eax)
       p->killed = 1;
-80103f95:	c7 40 24 01 00 00 00 	movl   $0x1,0x24(%eax)
+80104105:	c7 40 24 01 00 00 00 	movl   $0x1,0x24(%eax)
       if(p->state == SLEEPING)
-80103f9c:	74 1a                	je     80103fb8 <kill+0x58>
+8010410c:	74 1a                	je     80104128 <kill+0x58>
         p->state = RUNNABLE;
       release(&ptable.lock);
-80103f9e:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
-80103fa5:	e8 16 04 00 00       	call   801043c0 <release>
+8010410e:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
+80104115:	e8 16 04 00 00       	call   80104530 <release>
       return 0;
     }
   }
   release(&ptable.lock);
   return -1;
 }
-80103faa:	83 c4 14             	add    $0x14,%esp
+8010411a:	83 c4 14             	add    $0x14,%esp
       return 0;
-80103fad:	31 c0                	xor    %eax,%eax
+8010411d:	31 c0                	xor    %eax,%eax
 }
-80103faf:	5b                   	pop    %ebx
-80103fb0:	5d                   	pop    %ebp
-80103fb1:	c3                   	ret    
-80103fb2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+8010411f:	5b                   	pop    %ebx
+80104120:	5d                   	pop    %ebp
+80104121:	c3                   	ret    
+80104122:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         p->state = RUNNABLE;
-80103fb8:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
-80103fbf:	eb dd                	jmp    80103f9e <kill+0x3e>
-80103fc1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104128:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
+8010412f:	eb dd                	jmp    8010410e <kill+0x3e>
+80104131:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
   release(&ptable.lock);
-80103fc8:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
-80103fcf:	e8 ec 03 00 00       	call   801043c0 <release>
+80104138:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
+8010413f:	e8 ec 03 00 00       	call   80104530 <release>
 }
-80103fd4:	83 c4 14             	add    $0x14,%esp
+80104144:	83 c4 14             	add    $0x14,%esp
   return -1;
-80103fd7:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80104147:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 }
-80103fdc:	5b                   	pop    %ebx
-80103fdd:	5d                   	pop    %ebp
-80103fde:	c3                   	ret    
-80103fdf:	90                   	nop
+8010414c:	5b                   	pop    %ebx
+8010414d:	5d                   	pop    %ebp
+8010414e:	c3                   	ret    
+8010414f:	90                   	nop
 
-80103fe0 <procdump>:
+80104150 <procdump>:
 // Print a process listing to console.  For debugging.
 // Runs when user types ^P on console.
 // No lock to avoid wedging a stuck machine further.
 void
 procdump(void)
 {
-80103fe0:	55                   	push   %ebp
-80103fe1:	89 e5                	mov    %esp,%ebp
-80103fe3:	57                   	push   %edi
-80103fe4:	56                   	push   %esi
-80103fe5:	53                   	push   %ebx
-80103fe6:	bb c0 2d 11 80       	mov    $0x80112dc0,%ebx
-80103feb:	83 ec 4c             	sub    $0x4c,%esp
-80103fee:	8d 75 e8             	lea    -0x18(%ebp),%esi
-80103ff1:	eb 23                	jmp    80104016 <procdump+0x36>
-80103ff3:	90                   	nop
-80103ff4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80104150:	55                   	push   %ebp
+80104151:	89 e5                	mov    %esp,%ebp
+80104153:	57                   	push   %edi
+80104154:	56                   	push   %esi
+80104155:	53                   	push   %ebx
+80104156:	bb c0 2d 11 80       	mov    $0x80112dc0,%ebx
+8010415b:	83 ec 4c             	sub    $0x4c,%esp
+8010415e:	8d 75 e8             	lea    -0x18(%ebp),%esi
+80104161:	eb 23                	jmp    80104186 <procdump+0x36>
+80104163:	90                   	nop
+80104164:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     if(p->state == SLEEPING){
       getcallerpcs((uint*)p->context->ebp+2, pc);
       for(i=0; i<10 && pc[i] != 0; i++)
         cprintf(" %p", pc[i]);
     }
     cprintf("\n");
-80103ff8:	c7 04 24 9b 77 10 80 	movl   $0x8010779b,(%esp)
-80103fff:	e8 4c c6 ff ff       	call   80100650 <cprintf>
-80104004:	81 c3 84 00 00 00    	add    $0x84,%ebx
+80104168:	c7 04 24 ed 75 10 80 	movl   $0x801075ed,(%esp)
+8010416f:	e8 dc c4 ff ff       	call   80100650 <cprintf>
+80104174:	81 c3 98 00 00 00    	add    $0x98,%ebx
   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-8010400a:	81 fb c0 4e 11 80    	cmp    $0x80114ec0,%ebx
-80104010:	0f 84 8a 00 00 00    	je     801040a0 <procdump+0xc0>
+8010417a:	81 fb c0 53 11 80    	cmp    $0x801153c0,%ebx
+80104180:	0f 84 8a 00 00 00    	je     80104210 <procdump+0xc0>
     if(p->state == UNUSED)
-80104016:	8b 43 a0             	mov    -0x60(%ebx),%eax
-80104019:	85 c0                	test   %eax,%eax
-8010401b:	74 e7                	je     80104004 <procdump+0x24>
+80104186:	8b 43 a0             	mov    -0x60(%ebx),%eax
+80104189:	85 c0                	test   %eax,%eax
+8010418b:	74 e7                	je     80104174 <procdump+0x24>
     if(p->state >= 0 && p->state < NELEM(states) && states[p->state])
-8010401d:	83 f8 05             	cmp    $0x5,%eax
+8010418d:	83 f8 05             	cmp    $0x5,%eax
       state = "???";
-80104020:	ba 20 74 10 80       	mov    $0x80107420,%edx
+80104190:	ba 2c 76 10 80       	mov    $0x8010762c,%edx
     if(p->state >= 0 && p->state < NELEM(states) && states[p->state])
-80104025:	77 11                	ja     80104038 <procdump+0x58>
-80104027:	8b 14 85 80 74 10 80 	mov    -0x7fef8b80(,%eax,4),%edx
+80104195:	77 11                	ja     801041a8 <procdump+0x58>
+80104197:	8b 14 85 ac 76 10 80 	mov    -0x7fef8954(,%eax,4),%edx
       state = "???";
-8010402e:	b8 20 74 10 80       	mov    $0x80107420,%eax
-80104033:	85 d2                	test   %edx,%edx
-80104035:	0f 44 d0             	cmove  %eax,%edx
+8010419e:	b8 2c 76 10 80       	mov    $0x8010762c,%eax
+801041a3:	85 d2                	test   %edx,%edx
+801041a5:	0f 44 d0             	cmove  %eax,%edx
     cprintf("%d %s %s", p->pid, state, p->name);
-80104038:	8b 43 a4             	mov    -0x5c(%ebx),%eax
-8010403b:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
-8010403f:	89 54 24 08          	mov    %edx,0x8(%esp)
-80104043:	c7 04 24 24 74 10 80 	movl   $0x80107424,(%esp)
-8010404a:	89 44 24 04          	mov    %eax,0x4(%esp)
-8010404e:	e8 fd c5 ff ff       	call   80100650 <cprintf>
+801041a8:	8b 43 a4             	mov    -0x5c(%ebx),%eax
+801041ab:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
+801041af:	89 54 24 08          	mov    %edx,0x8(%esp)
+801041b3:	c7 04 24 30 76 10 80 	movl   $0x80107630,(%esp)
+801041ba:	89 44 24 04          	mov    %eax,0x4(%esp)
+801041be:	e8 8d c4 ff ff       	call   80100650 <cprintf>
     if(p->state == SLEEPING){
-80104053:	83 7b a0 02          	cmpl   $0x2,-0x60(%ebx)
-80104057:	75 9f                	jne    80103ff8 <procdump+0x18>
+801041c3:	83 7b a0 02          	cmpl   $0x2,-0x60(%ebx)
+801041c7:	75 9f                	jne    80104168 <procdump+0x18>
       getcallerpcs((uint*)p->context->ebp+2, pc);
-80104059:	8d 45 c0             	lea    -0x40(%ebp),%eax
-8010405c:	89 44 24 04          	mov    %eax,0x4(%esp)
-80104060:	8b 43 b0             	mov    -0x50(%ebx),%eax
-80104063:	8d 7d c0             	lea    -0x40(%ebp),%edi
-80104066:	8b 40 0c             	mov    0xc(%eax),%eax
-80104069:	83 c0 08             	add    $0x8,%eax
-8010406c:	89 04 24             	mov    %eax,(%esp)
-8010406f:	e8 8c 01 00 00       	call   80104200 <getcallerpcs>
-80104074:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801041c9:	8d 45 c0             	lea    -0x40(%ebp),%eax
+801041cc:	89 44 24 04          	mov    %eax,0x4(%esp)
+801041d0:	8b 43 b0             	mov    -0x50(%ebx),%eax
+801041d3:	8d 7d c0             	lea    -0x40(%ebp),%edi
+801041d6:	8b 40 0c             	mov    0xc(%eax),%eax
+801041d9:	83 c0 08             	add    $0x8,%eax
+801041dc:	89 04 24             	mov    %eax,(%esp)
+801041df:	e8 8c 01 00 00       	call   80104370 <getcallerpcs>
+801041e4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
       for(i=0; i<10 && pc[i] != 0; i++)
-80104078:	8b 17                	mov    (%edi),%edx
-8010407a:	85 d2                	test   %edx,%edx
-8010407c:	0f 84 76 ff ff ff    	je     80103ff8 <procdump+0x18>
+801041e8:	8b 17                	mov    (%edi),%edx
+801041ea:	85 d2                	test   %edx,%edx
+801041ec:	0f 84 76 ff ff ff    	je     80104168 <procdump+0x18>
         cprintf(" %p", pc[i]);
-80104082:	89 54 24 04          	mov    %edx,0x4(%esp)
-80104086:	83 c7 04             	add    $0x4,%edi
-80104089:	c7 04 24 61 6e 10 80 	movl   $0x80106e61,(%esp)
-80104090:	e8 bb c5 ff ff       	call   80100650 <cprintf>
+801041f2:	89 54 24 04          	mov    %edx,0x4(%esp)
+801041f6:	83 c7 04             	add    $0x4,%edi
+801041f9:	c7 04 24 21 70 10 80 	movl   $0x80107021,(%esp)
+80104200:	e8 4b c4 ff ff       	call   80100650 <cprintf>
       for(i=0; i<10 && pc[i] != 0; i++)
-80104095:	39 f7                	cmp    %esi,%edi
-80104097:	75 df                	jne    80104078 <procdump+0x98>
-80104099:	e9 5a ff ff ff       	jmp    80103ff8 <procdump+0x18>
-8010409e:	66 90                	xchg   %ax,%ax
+80104205:	39 f7                	cmp    %esi,%edi
+80104207:	75 df                	jne    801041e8 <procdump+0x98>
+80104209:	e9 5a ff ff ff       	jmp    80104168 <procdump+0x18>
+8010420e:	66 90                	xchg   %ax,%ax
   }
 }
-801040a0:	83 c4 4c             	add    $0x4c,%esp
-801040a3:	5b                   	pop    %ebx
-801040a4:	5e                   	pop    %esi
-801040a5:	5f                   	pop    %edi
-801040a6:	5d                   	pop    %ebp
-801040a7:	c3                   	ret    
-801040a8:	66 90                	xchg   %ax,%ax
-801040aa:	66 90                	xchg   %ax,%ax
-801040ac:	66 90                	xchg   %ax,%ax
-801040ae:	66 90                	xchg   %ax,%ax
-
-801040b0 <initsleeplock>:
+80104210:	83 c4 4c             	add    $0x4c,%esp
+80104213:	5b                   	pop    %ebx
+80104214:	5e                   	pop    %esi
+80104215:	5f                   	pop    %edi
+80104216:	5d                   	pop    %ebp
+80104217:	c3                   	ret    
+80104218:	66 90                	xchg   %ax,%ax
+8010421a:	66 90                	xchg   %ax,%ax
+8010421c:	66 90                	xchg   %ax,%ax
+8010421e:	66 90                	xchg   %ax,%ax
+
+80104220 <initsleeplock>:
 #include "spinlock.h"
 #include "sleeplock.h"
 
 void
 initsleeplock(struct sleeplock *lk, char *name)
 {
-801040b0:	55                   	push   %ebp
-801040b1:	89 e5                	mov    %esp,%ebp
-801040b3:	53                   	push   %ebx
-801040b4:	83 ec 14             	sub    $0x14,%esp
-801040b7:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80104220:	55                   	push   %ebp
+80104221:	89 e5                	mov    %esp,%ebp
+80104223:	53                   	push   %ebx
+80104224:	83 ec 14             	sub    $0x14,%esp
+80104227:	8b 5d 08             	mov    0x8(%ebp),%ebx
   initlock(&lk->lk, "sleep lock");
-801040ba:	c7 44 24 04 98 74 10 	movl   $0x80107498,0x4(%esp)
-801040c1:	80 
-801040c2:	8d 43 04             	lea    0x4(%ebx),%eax
-801040c5:	89 04 24             	mov    %eax,(%esp)
-801040c8:	e8 13 01 00 00       	call   801041e0 <initlock>
+8010422a:	c7 44 24 04 c4 76 10 	movl   $0x801076c4,0x4(%esp)
+80104231:	80 
+80104232:	8d 43 04             	lea    0x4(%ebx),%eax
+80104235:	89 04 24             	mov    %eax,(%esp)
+80104238:	e8 13 01 00 00       	call   80104350 <initlock>
   lk->name = name;
-801040cd:	8b 45 0c             	mov    0xc(%ebp),%eax
+8010423d:	8b 45 0c             	mov    0xc(%ebp),%eax
   lk->locked = 0;
-801040d0:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
+80104240:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
   lk->pid = 0;
-801040d6:	c7 43 3c 00 00 00 00 	movl   $0x0,0x3c(%ebx)
+80104246:	c7 43 3c 00 00 00 00 	movl   $0x0,0x3c(%ebx)
   lk->name = name;
-801040dd:	89 43 38             	mov    %eax,0x38(%ebx)
+8010424d:	89 43 38             	mov    %eax,0x38(%ebx)
 }
-801040e0:	83 c4 14             	add    $0x14,%esp
-801040e3:	5b                   	pop    %ebx
-801040e4:	5d                   	pop    %ebp
-801040e5:	c3                   	ret    
-801040e6:	8d 76 00             	lea    0x0(%esi),%esi
-801040e9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+80104250:	83 c4 14             	add    $0x14,%esp
+80104253:	5b                   	pop    %ebx
+80104254:	5d                   	pop    %ebp
+80104255:	c3                   	ret    
+80104256:	8d 76 00             	lea    0x0(%esi),%esi
+80104259:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
 
-801040f0 <acquiresleep>:
+80104260 <acquiresleep>:
 
 void
 acquiresleep(struct sleeplock *lk)
 {
-801040f0:	55                   	push   %ebp
-801040f1:	89 e5                	mov    %esp,%ebp
-801040f3:	56                   	push   %esi
-801040f4:	53                   	push   %ebx
-801040f5:	83 ec 10             	sub    $0x10,%esp
-801040f8:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80104260:	55                   	push   %ebp
+80104261:	89 e5                	mov    %esp,%ebp
+80104263:	56                   	push   %esi
+80104264:	53                   	push   %ebx
+80104265:	83 ec 10             	sub    $0x10,%esp
+80104268:	8b 5d 08             	mov    0x8(%ebp),%ebx
   acquire(&lk->lk);
-801040fb:	8d 73 04             	lea    0x4(%ebx),%esi
-801040fe:	89 34 24             	mov    %esi,(%esp)
-80104101:	e8 4a 02 00 00       	call   80104350 <acquire>
+8010426b:	8d 73 04             	lea    0x4(%ebx),%esi
+8010426e:	89 34 24             	mov    %esi,(%esp)
+80104271:	e8 4a 02 00 00       	call   801044c0 <acquire>
   while (lk->locked) {
-80104106:	8b 13                	mov    (%ebx),%edx
-80104108:	85 d2                	test   %edx,%edx
-8010410a:	74 16                	je     80104122 <acquiresleep+0x32>
-8010410c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80104276:	8b 13                	mov    (%ebx),%edx
+80104278:	85 d2                	test   %edx,%edx
+8010427a:	74 16                	je     80104292 <acquiresleep+0x32>
+8010427c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     sleep(lk, &lk->lk);
-80104110:	89 74 24 04          	mov    %esi,0x4(%esp)
-80104114:	89 1c 24             	mov    %ebx,(%esp)
-80104117:	e8 f4 fa ff ff       	call   80103c10 <sleep>
+80104280:	89 74 24 04          	mov    %esi,0x4(%esp)
+80104284:	89 1c 24             	mov    %ebx,(%esp)
+80104287:	e8 f4 fa ff ff       	call   80103d80 <sleep>
   while (lk->locked) {
-8010411c:	8b 03                	mov    (%ebx),%eax
-8010411e:	85 c0                	test   %eax,%eax
-80104120:	75 ee                	jne    80104110 <acquiresleep+0x20>
+8010428c:	8b 03                	mov    (%ebx),%eax
+8010428e:	85 c0                	test   %eax,%eax
+80104290:	75 ee                	jne    80104280 <acquiresleep+0x20>
   }
   lk->locked = 1;
-80104122:	c7 03 01 00 00 00    	movl   $0x1,(%ebx)
+80104292:	c7 03 01 00 00 00    	movl   $0x1,(%ebx)
   lk->pid = myproc()->pid;
-80104128:	e8 73 f5 ff ff       	call   801036a0 <myproc>
-8010412d:	8b 40 10             	mov    0x10(%eax),%eax
-80104130:	89 43 3c             	mov    %eax,0x3c(%ebx)
+80104298:	e8 03 f4 ff ff       	call   801036a0 <myproc>
+8010429d:	8b 40 10             	mov    0x10(%eax),%eax
+801042a0:	89 43 3c             	mov    %eax,0x3c(%ebx)
   release(&lk->lk);
-80104133:	89 75 08             	mov    %esi,0x8(%ebp)
+801042a3:	89 75 08             	mov    %esi,0x8(%ebp)
 }
-80104136:	83 c4 10             	add    $0x10,%esp
-80104139:	5b                   	pop    %ebx
-8010413a:	5e                   	pop    %esi
-8010413b:	5d                   	pop    %ebp
+801042a6:	83 c4 10             	add    $0x10,%esp
+801042a9:	5b                   	pop    %ebx
+801042aa:	5e                   	pop    %esi
+801042ab:	5d                   	pop    %ebp
   release(&lk->lk);
-8010413c:	e9 7f 02 00 00       	jmp    801043c0 <release>
-80104141:	eb 0d                	jmp    80104150 <releasesleep>
-80104143:	90                   	nop
-80104144:	90                   	nop
-80104145:	90                   	nop
-80104146:	90                   	nop
-80104147:	90                   	nop
-80104148:	90                   	nop
-80104149:	90                   	nop
-8010414a:	90                   	nop
-8010414b:	90                   	nop
-8010414c:	90                   	nop
-8010414d:	90                   	nop
-8010414e:	90                   	nop
-8010414f:	90                   	nop
-
-80104150 <releasesleep>:
+801042ac:	e9 7f 02 00 00       	jmp    80104530 <release>
+801042b1:	eb 0d                	jmp    801042c0 <releasesleep>
+801042b3:	90                   	nop
+801042b4:	90                   	nop
+801042b5:	90                   	nop
+801042b6:	90                   	nop
+801042b7:	90                   	nop
+801042b8:	90                   	nop
+801042b9:	90                   	nop
+801042ba:	90                   	nop
+801042bb:	90                   	nop
+801042bc:	90                   	nop
+801042bd:	90                   	nop
+801042be:	90                   	nop
+801042bf:	90                   	nop
+
+801042c0 <releasesleep>:
 
 void
 releasesleep(struct sleeplock *lk)
 {
-80104150:	55                   	push   %ebp
-80104151:	89 e5                	mov    %esp,%ebp
-80104153:	56                   	push   %esi
-80104154:	53                   	push   %ebx
-80104155:	83 ec 10             	sub    $0x10,%esp
-80104158:	8b 5d 08             	mov    0x8(%ebp),%ebx
+801042c0:	55                   	push   %ebp
+801042c1:	89 e5                	mov    %esp,%ebp
+801042c3:	56                   	push   %esi
+801042c4:	53                   	push   %ebx
+801042c5:	83 ec 10             	sub    $0x10,%esp
+801042c8:	8b 5d 08             	mov    0x8(%ebp),%ebx
   acquire(&lk->lk);
-8010415b:	8d 73 04             	lea    0x4(%ebx),%esi
-8010415e:	89 34 24             	mov    %esi,(%esp)
-80104161:	e8 ea 01 00 00       	call   80104350 <acquire>
+801042cb:	8d 73 04             	lea    0x4(%ebx),%esi
+801042ce:	89 34 24             	mov    %esi,(%esp)
+801042d1:	e8 ea 01 00 00       	call   801044c0 <acquire>
   lk->locked = 0;
-80104166:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
+801042d6:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
   lk->pid = 0;
-8010416c:	c7 43 3c 00 00 00 00 	movl   $0x0,0x3c(%ebx)
+801042dc:	c7 43 3c 00 00 00 00 	movl   $0x0,0x3c(%ebx)
   wakeup(lk);
-80104173:	89 1c 24             	mov    %ebx,(%esp)
-80104176:	e8 75 fd ff ff       	call   80103ef0 <wakeup>
+801042e3:	89 1c 24             	mov    %ebx,(%esp)
+801042e6:	e8 75 fd ff ff       	call   80104060 <wakeup>
   release(&lk->lk);
-8010417b:	89 75 08             	mov    %esi,0x8(%ebp)
+801042eb:	89 75 08             	mov    %esi,0x8(%ebp)
 }
-8010417e:	83 c4 10             	add    $0x10,%esp
-80104181:	5b                   	pop    %ebx
-80104182:	5e                   	pop    %esi
-80104183:	5d                   	pop    %ebp
+801042ee:	83 c4 10             	add    $0x10,%esp
+801042f1:	5b                   	pop    %ebx
+801042f2:	5e                   	pop    %esi
+801042f3:	5d                   	pop    %ebp
   release(&lk->lk);
-80104184:	e9 37 02 00 00       	jmp    801043c0 <release>
-80104189:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801042f4:	e9 37 02 00 00       	jmp    80104530 <release>
+801042f9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 
-80104190 <holdingsleep>:
+80104300 <holdingsleep>:
 
 int
 holdingsleep(struct sleeplock *lk)
 {
-80104190:	55                   	push   %ebp
-80104191:	89 e5                	mov    %esp,%ebp
-80104193:	57                   	push   %edi
+80104300:	55                   	push   %ebp
+80104301:	89 e5                	mov    %esp,%ebp
+80104303:	57                   	push   %edi
   int r;
   
   acquire(&lk->lk);
   r = lk->locked && (lk->pid == myproc()->pid);
-80104194:	31 ff                	xor    %edi,%edi
+80104304:	31 ff                	xor    %edi,%edi
 {
-80104196:	56                   	push   %esi
-80104197:	53                   	push   %ebx
-80104198:	83 ec 1c             	sub    $0x1c,%esp
-8010419b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80104306:	56                   	push   %esi
+80104307:	53                   	push   %ebx
+80104308:	83 ec 1c             	sub    $0x1c,%esp
+8010430b:	8b 5d 08             	mov    0x8(%ebp),%ebx
   acquire(&lk->lk);
-8010419e:	8d 73 04             	lea    0x4(%ebx),%esi
-801041a1:	89 34 24             	mov    %esi,(%esp)
-801041a4:	e8 a7 01 00 00       	call   80104350 <acquire>
+8010430e:	8d 73 04             	lea    0x4(%ebx),%esi
+80104311:	89 34 24             	mov    %esi,(%esp)
+80104314:	e8 a7 01 00 00       	call   801044c0 <acquire>
   r = lk->locked && (lk->pid == myproc()->pid);
-801041a9:	8b 03                	mov    (%ebx),%eax
-801041ab:	85 c0                	test   %eax,%eax
-801041ad:	74 13                	je     801041c2 <holdingsleep+0x32>
-801041af:	8b 5b 3c             	mov    0x3c(%ebx),%ebx
-801041b2:	e8 e9 f4 ff ff       	call   801036a0 <myproc>
-801041b7:	3b 58 10             	cmp    0x10(%eax),%ebx
-801041ba:	0f 94 c0             	sete   %al
-801041bd:	0f b6 c0             	movzbl %al,%eax
-801041c0:	89 c7                	mov    %eax,%edi
+80104319:	8b 03                	mov    (%ebx),%eax
+8010431b:	85 c0                	test   %eax,%eax
+8010431d:	74 13                	je     80104332 <holdingsleep+0x32>
+8010431f:	8b 5b 3c             	mov    0x3c(%ebx),%ebx
+80104322:	e8 79 f3 ff ff       	call   801036a0 <myproc>
+80104327:	3b 58 10             	cmp    0x10(%eax),%ebx
+8010432a:	0f 94 c0             	sete   %al
+8010432d:	0f b6 c0             	movzbl %al,%eax
+80104330:	89 c7                	mov    %eax,%edi
   release(&lk->lk);
-801041c2:	89 34 24             	mov    %esi,(%esp)
-801041c5:	e8 f6 01 00 00       	call   801043c0 <release>
+80104332:	89 34 24             	mov    %esi,(%esp)
+80104335:	e8 f6 01 00 00       	call   80104530 <release>
   return r;
 }
-801041ca:	83 c4 1c             	add    $0x1c,%esp
-801041cd:	89 f8                	mov    %edi,%eax
-801041cf:	5b                   	pop    %ebx
-801041d0:	5e                   	pop    %esi
-801041d1:	5f                   	pop    %edi
-801041d2:	5d                   	pop    %ebp
-801041d3:	c3                   	ret    
-801041d4:	66 90                	xchg   %ax,%ax
-801041d6:	66 90                	xchg   %ax,%ax
-801041d8:	66 90                	xchg   %ax,%ax
-801041da:	66 90                	xchg   %ax,%ax
-801041dc:	66 90                	xchg   %ax,%ax
-801041de:	66 90                	xchg   %ax,%ax
-
-801041e0 <initlock>:
+8010433a:	83 c4 1c             	add    $0x1c,%esp
+8010433d:	89 f8                	mov    %edi,%eax
+8010433f:	5b                   	pop    %ebx
+80104340:	5e                   	pop    %esi
+80104341:	5f                   	pop    %edi
+80104342:	5d                   	pop    %ebp
+80104343:	c3                   	ret    
+80104344:	66 90                	xchg   %ax,%ax
+80104346:	66 90                	xchg   %ax,%ax
+80104348:	66 90                	xchg   %ax,%ax
+8010434a:	66 90                	xchg   %ax,%ax
+8010434c:	66 90                	xchg   %ax,%ax
+8010434e:	66 90                	xchg   %ax,%ax
+
+80104350 <initlock>:
 #include "proc.h"
 #include "spinlock.h"
 
 void
 initlock(struct spinlock *lk, char *name)
 {
-801041e0:	55                   	push   %ebp
-801041e1:	89 e5                	mov    %esp,%ebp
-801041e3:	8b 45 08             	mov    0x8(%ebp),%eax
+80104350:	55                   	push   %ebp
+80104351:	89 e5                	mov    %esp,%ebp
+80104353:	8b 45 08             	mov    0x8(%ebp),%eax
   lk->name = name;
-801041e6:	8b 55 0c             	mov    0xc(%ebp),%edx
+80104356:	8b 55 0c             	mov    0xc(%ebp),%edx
   lk->locked = 0;
-801041e9:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
+80104359:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   lk->name = name;
-801041ef:	89 50 04             	mov    %edx,0x4(%eax)
+8010435f:	89 50 04             	mov    %edx,0x4(%eax)
   lk->cpu = 0;
-801041f2:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
+80104362:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
 }
-801041f9:	5d                   	pop    %ebp
-801041fa:	c3                   	ret    
-801041fb:	90                   	nop
-801041fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80104369:	5d                   	pop    %ebp
+8010436a:	c3                   	ret    
+8010436b:	90                   	nop
+8010436c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
-80104200 <getcallerpcs>:
+80104370 <getcallerpcs>:
 }
 
 // Record the current call stack in pcs[] by following the %ebp chain.
 void
 getcallerpcs(void *v, uint pcs[])
 {
-80104200:	55                   	push   %ebp
-80104201:	89 e5                	mov    %esp,%ebp
+80104370:	55                   	push   %ebp
+80104371:	89 e5                	mov    %esp,%ebp
   uint *ebp;
   int i;
 
   ebp = (uint*)v - 2;
-80104203:	8b 45 08             	mov    0x8(%ebp),%eax
+80104373:	8b 45 08             	mov    0x8(%ebp),%eax
 {
-80104206:	8b 4d 0c             	mov    0xc(%ebp),%ecx
-80104209:	53                   	push   %ebx
+80104376:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+80104379:	53                   	push   %ebx
   ebp = (uint*)v - 2;
-8010420a:	8d 50 f8             	lea    -0x8(%eax),%edx
+8010437a:	8d 50 f8             	lea    -0x8(%eax),%edx
   for(i = 0; i < 10; i++){
-8010420d:	31 c0                	xor    %eax,%eax
-8010420f:	90                   	nop
+8010437d:	31 c0                	xor    %eax,%eax
+8010437f:	90                   	nop
     if(ebp == 0 || ebp < (uint*)KERNBASE || ebp == (uint*)0xffffffff)
-80104210:	8d 9a 00 00 00 80    	lea    -0x80000000(%edx),%ebx
-80104216:	81 fb fe ff ff 7f    	cmp    $0x7ffffffe,%ebx
-8010421c:	77 1a                	ja     80104238 <getcallerpcs+0x38>
+80104380:	8d 9a 00 00 00 80    	lea    -0x80000000(%edx),%ebx
+80104386:	81 fb fe ff ff 7f    	cmp    $0x7ffffffe,%ebx
+8010438c:	77 1a                	ja     801043a8 <getcallerpcs+0x38>
       break;
     pcs[i] = ebp[1];     // saved %eip
-8010421e:	8b 5a 04             	mov    0x4(%edx),%ebx
-80104221:	89 1c 81             	mov    %ebx,(%ecx,%eax,4)
+8010438e:	8b 5a 04             	mov    0x4(%edx),%ebx
+80104391:	89 1c 81             	mov    %ebx,(%ecx,%eax,4)
   for(i = 0; i < 10; i++){
-80104224:	83 c0 01             	add    $0x1,%eax
+80104394:	83 c0 01             	add    $0x1,%eax
     ebp = (uint*)ebp[0]; // saved %ebp
-80104227:	8b 12                	mov    (%edx),%edx
+80104397:	8b 12                	mov    (%edx),%edx
   for(i = 0; i < 10; i++){
-80104229:	83 f8 0a             	cmp    $0xa,%eax
-8010422c:	75 e2                	jne    80104210 <getcallerpcs+0x10>
+80104399:	83 f8 0a             	cmp    $0xa,%eax
+8010439c:	75 e2                	jne    80104380 <getcallerpcs+0x10>
   }
   for(; i < 10; i++)
     pcs[i] = 0;
 }
-8010422e:	5b                   	pop    %ebx
-8010422f:	5d                   	pop    %ebp
-80104230:	c3                   	ret    
-80104231:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010439e:	5b                   	pop    %ebx
+8010439f:	5d                   	pop    %ebp
+801043a0:	c3                   	ret    
+801043a1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     pcs[i] = 0;
-80104238:	c7 04 81 00 00 00 00 	movl   $0x0,(%ecx,%eax,4)
+801043a8:	c7 04 81 00 00 00 00 	movl   $0x0,(%ecx,%eax,4)
   for(; i < 10; i++)
-8010423f:	83 c0 01             	add    $0x1,%eax
-80104242:	83 f8 0a             	cmp    $0xa,%eax
-80104245:	74 e7                	je     8010422e <getcallerpcs+0x2e>
+801043af:	83 c0 01             	add    $0x1,%eax
+801043b2:	83 f8 0a             	cmp    $0xa,%eax
+801043b5:	74 e7                	je     8010439e <getcallerpcs+0x2e>
     pcs[i] = 0;
-80104247:	c7 04 81 00 00 00 00 	movl   $0x0,(%ecx,%eax,4)
+801043b7:	c7 04 81 00 00 00 00 	movl   $0x0,(%ecx,%eax,4)
   for(; i < 10; i++)
-8010424e:	83 c0 01             	add    $0x1,%eax
-80104251:	83 f8 0a             	cmp    $0xa,%eax
-80104254:	75 e2                	jne    80104238 <getcallerpcs+0x38>
-80104256:	eb d6                	jmp    8010422e <getcallerpcs+0x2e>
-80104258:	90                   	nop
-80104259:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-
-80104260 <pushcli>:
+801043be:	83 c0 01             	add    $0x1,%eax
+801043c1:	83 f8 0a             	cmp    $0xa,%eax
+801043c4:	75 e2                	jne    801043a8 <getcallerpcs+0x38>
+801043c6:	eb d6                	jmp    8010439e <getcallerpcs+0x2e>
+801043c8:	90                   	nop
+801043c9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+801043d0 <pushcli>:
 // it takes two popcli to undo two pushcli.  Also, if interrupts
 // are off, then pushcli, popcli leaves them off.
 
 void
 pushcli(void)
 {
-80104260:	55                   	push   %ebp
-80104261:	89 e5                	mov    %esp,%ebp
-80104263:	53                   	push   %ebx
-80104264:	83 ec 04             	sub    $0x4,%esp
-80104267:	9c                   	pushf  
-80104268:	5b                   	pop    %ebx
+801043d0:	55                   	push   %ebp
+801043d1:	89 e5                	mov    %esp,%ebp
+801043d3:	53                   	push   %ebx
+801043d4:	83 ec 04             	sub    $0x4,%esp
+801043d7:	9c                   	pushf  
+801043d8:	5b                   	pop    %ebx
   asm volatile("cli");
-80104269:	fa                   	cli    
+801043d9:	fa                   	cli    
   int eflags;
 
   eflags = readeflags();
   cli();
   if(mycpu()->ncli == 0)
-8010426a:	e8 91 f3 ff ff       	call   80103600 <mycpu>
-8010426f:	8b 80 a4 00 00 00    	mov    0xa4(%eax),%eax
-80104275:	85 c0                	test   %eax,%eax
-80104277:	75 11                	jne    8010428a <pushcli+0x2a>
+801043da:	e8 21 f2 ff ff       	call   80103600 <mycpu>
+801043df:	8b 80 a4 00 00 00    	mov    0xa4(%eax),%eax
+801043e5:	85 c0                	test   %eax,%eax
+801043e7:	75 11                	jne    801043fa <pushcli+0x2a>
     mycpu()->intena = eflags & FL_IF;
-80104279:	e8 82 f3 ff ff       	call   80103600 <mycpu>
-8010427e:	81 e3 00 02 00 00    	and    $0x200,%ebx
-80104284:	89 98 a8 00 00 00    	mov    %ebx,0xa8(%eax)
+801043e9:	e8 12 f2 ff ff       	call   80103600 <mycpu>
+801043ee:	81 e3 00 02 00 00    	and    $0x200,%ebx
+801043f4:	89 98 a8 00 00 00    	mov    %ebx,0xa8(%eax)
   mycpu()->ncli += 1;
-8010428a:	e8 71 f3 ff ff       	call   80103600 <mycpu>
-8010428f:	83 80 a4 00 00 00 01 	addl   $0x1,0xa4(%eax)
+801043fa:	e8 01 f2 ff ff       	call   80103600 <mycpu>
+801043ff:	83 80 a4 00 00 00 01 	addl   $0x1,0xa4(%eax)
 }
-80104296:	83 c4 04             	add    $0x4,%esp
-80104299:	5b                   	pop    %ebx
-8010429a:	5d                   	pop    %ebp
-8010429b:	c3                   	ret    
-8010429c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80104406:	83 c4 04             	add    $0x4,%esp
+80104409:	5b                   	pop    %ebx
+8010440a:	5d                   	pop    %ebp
+8010440b:	c3                   	ret    
+8010440c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
-801042a0 <popcli>:
+80104410 <popcli>:
 
 void
 popcli(void)
 {
-801042a0:	55                   	push   %ebp
-801042a1:	89 e5                	mov    %esp,%ebp
-801042a3:	83 ec 18             	sub    $0x18,%esp
+80104410:	55                   	push   %ebp
+80104411:	89 e5                	mov    %esp,%ebp
+80104413:	83 ec 18             	sub    $0x18,%esp
   asm volatile("pushfl; popl %0" : "=r" (eflags));
-801042a6:	9c                   	pushf  
-801042a7:	58                   	pop    %eax
+80104416:	9c                   	pushf  
+80104417:	58                   	pop    %eax
   if(readeflags()&FL_IF)
-801042a8:	f6 c4 02             	test   $0x2,%ah
-801042ab:	75 49                	jne    801042f6 <popcli+0x56>
+80104418:	f6 c4 02             	test   $0x2,%ah
+8010441b:	75 49                	jne    80104466 <popcli+0x56>
     panic("popcli - interruptible");
   if(--mycpu()->ncli < 0)
-801042ad:	e8 4e f3 ff ff       	call   80103600 <mycpu>
-801042b2:	8b 88 a4 00 00 00    	mov    0xa4(%eax),%ecx
-801042b8:	8d 51 ff             	lea    -0x1(%ecx),%edx
-801042bb:	85 d2                	test   %edx,%edx
-801042bd:	89 90 a4 00 00 00    	mov    %edx,0xa4(%eax)
-801042c3:	78 25                	js     801042ea <popcli+0x4a>
+8010441d:	e8 de f1 ff ff       	call   80103600 <mycpu>
+80104422:	8b 88 a4 00 00 00    	mov    0xa4(%eax),%ecx
+80104428:	8d 51 ff             	lea    -0x1(%ecx),%edx
+8010442b:	85 d2                	test   %edx,%edx
+8010442d:	89 90 a4 00 00 00    	mov    %edx,0xa4(%eax)
+80104433:	78 25                	js     8010445a <popcli+0x4a>
     panic("popcli");
   if(mycpu()->ncli == 0 && mycpu()->intena)
-801042c5:	e8 36 f3 ff ff       	call   80103600 <mycpu>
-801042ca:	8b 90 a4 00 00 00    	mov    0xa4(%eax),%edx
-801042d0:	85 d2                	test   %edx,%edx
-801042d2:	74 04                	je     801042d8 <popcli+0x38>
+80104435:	e8 c6 f1 ff ff       	call   80103600 <mycpu>
+8010443a:	8b 90 a4 00 00 00    	mov    0xa4(%eax),%edx
+80104440:	85 d2                	test   %edx,%edx
+80104442:	74 04                	je     80104448 <popcli+0x38>
     sti();
 }
-801042d4:	c9                   	leave  
-801042d5:	c3                   	ret    
-801042d6:	66 90                	xchg   %ax,%ax
+80104444:	c9                   	leave  
+80104445:	c3                   	ret    
+80104446:	66 90                	xchg   %ax,%ax
   if(mycpu()->ncli == 0 && mycpu()->intena)
-801042d8:	e8 23 f3 ff ff       	call   80103600 <mycpu>
-801042dd:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
-801042e3:	85 c0                	test   %eax,%eax
-801042e5:	74 ed                	je     801042d4 <popcli+0x34>
+80104448:	e8 b3 f1 ff ff       	call   80103600 <mycpu>
+8010444d:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
+80104453:	85 c0                	test   %eax,%eax
+80104455:	74 ed                	je     80104444 <popcli+0x34>
   asm volatile("sti");
-801042e7:	fb                   	sti    
+80104457:	fb                   	sti    
 }
-801042e8:	c9                   	leave  
-801042e9:	c3                   	ret    
+80104458:	c9                   	leave  
+80104459:	c3                   	ret    
     panic("popcli");
-801042ea:	c7 04 24 ba 74 10 80 	movl   $0x801074ba,(%esp)
-801042f1:	e8 6a c0 ff ff       	call   80100360 <panic>
+8010445a:	c7 04 24 e6 76 10 80 	movl   $0x801076e6,(%esp)
+80104461:	e8 fa be ff ff       	call   80100360 <panic>
     panic("popcli - interruptible");
-801042f6:	c7 04 24 a3 74 10 80 	movl   $0x801074a3,(%esp)
-801042fd:	e8 5e c0 ff ff       	call   80100360 <panic>
-80104302:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80104309:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+80104466:	c7 04 24 cf 76 10 80 	movl   $0x801076cf,(%esp)
+8010446d:	e8 ee be ff ff       	call   80100360 <panic>
+80104472:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104479:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
 
-80104310 <holding>:
+80104480 <holding>:
 {
-80104310:	55                   	push   %ebp
-80104311:	89 e5                	mov    %esp,%ebp
-80104313:	56                   	push   %esi
+80104480:	55                   	push   %ebp
+80104481:	89 e5                	mov    %esp,%ebp
+80104483:	56                   	push   %esi
   r = lock->locked && lock->cpu == mycpu();
-80104314:	31 f6                	xor    %esi,%esi
+80104484:	31 f6                	xor    %esi,%esi
 {
-80104316:	53                   	push   %ebx
-80104317:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80104486:	53                   	push   %ebx
+80104487:	8b 5d 08             	mov    0x8(%ebp),%ebx
   pushcli();
-8010431a:	e8 41 ff ff ff       	call   80104260 <pushcli>
+8010448a:	e8 41 ff ff ff       	call   801043d0 <pushcli>
   r = lock->locked && lock->cpu == mycpu();
-8010431f:	8b 03                	mov    (%ebx),%eax
-80104321:	85 c0                	test   %eax,%eax
-80104323:	74 12                	je     80104337 <holding+0x27>
-80104325:	8b 5b 08             	mov    0x8(%ebx),%ebx
-80104328:	e8 d3 f2 ff ff       	call   80103600 <mycpu>
-8010432d:	39 c3                	cmp    %eax,%ebx
-8010432f:	0f 94 c0             	sete   %al
-80104332:	0f b6 c0             	movzbl %al,%eax
-80104335:	89 c6                	mov    %eax,%esi
+8010448f:	8b 03                	mov    (%ebx),%eax
+80104491:	85 c0                	test   %eax,%eax
+80104493:	74 12                	je     801044a7 <holding+0x27>
+80104495:	8b 5b 08             	mov    0x8(%ebx),%ebx
+80104498:	e8 63 f1 ff ff       	call   80103600 <mycpu>
+8010449d:	39 c3                	cmp    %eax,%ebx
+8010449f:	0f 94 c0             	sete   %al
+801044a2:	0f b6 c0             	movzbl %al,%eax
+801044a5:	89 c6                	mov    %eax,%esi
   popcli();
-80104337:	e8 64 ff ff ff       	call   801042a0 <popcli>
-}
-8010433c:	89 f0                	mov    %esi,%eax
-8010433e:	5b                   	pop    %ebx
-8010433f:	5e                   	pop    %esi
-80104340:	5d                   	pop    %ebp
-80104341:	c3                   	ret    
-80104342:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80104349:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
-
-80104350 <acquire>:
-{
-80104350:	55                   	push   %ebp
-80104351:	89 e5                	mov    %esp,%ebp
-80104353:	53                   	push   %ebx
-80104354:	83 ec 14             	sub    $0x14,%esp
+801044a7:	e8 64 ff ff ff       	call   80104410 <popcli>
+}
+801044ac:	89 f0                	mov    %esi,%eax
+801044ae:	5b                   	pop    %ebx
+801044af:	5e                   	pop    %esi
+801044b0:	5d                   	pop    %ebp
+801044b1:	c3                   	ret    
+801044b2:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801044b9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+801044c0 <acquire>:
+{
+801044c0:	55                   	push   %ebp
+801044c1:	89 e5                	mov    %esp,%ebp
+801044c3:	53                   	push   %ebx
+801044c4:	83 ec 14             	sub    $0x14,%esp
   pushcli(); // disable interrupts to avoid deadlock.
-80104357:	e8 04 ff ff ff       	call   80104260 <pushcli>
+801044c7:	e8 04 ff ff ff       	call   801043d0 <pushcli>
   if(holding(lk))
-8010435c:	8b 45 08             	mov    0x8(%ebp),%eax
-8010435f:	89 04 24             	mov    %eax,(%esp)
-80104362:	e8 a9 ff ff ff       	call   80104310 <holding>
-80104367:	85 c0                	test   %eax,%eax
-80104369:	75 3a                	jne    801043a5 <acquire+0x55>
+801044cc:	8b 45 08             	mov    0x8(%ebp),%eax
+801044cf:	89 04 24             	mov    %eax,(%esp)
+801044d2:	e8 a9 ff ff ff       	call   80104480 <holding>
+801044d7:	85 c0                	test   %eax,%eax
+801044d9:	75 3a                	jne    80104515 <acquire+0x55>
   asm volatile("lock; xchgl %0, %1" :
-8010436b:	b9 01 00 00 00       	mov    $0x1,%ecx
+801044db:	b9 01 00 00 00       	mov    $0x1,%ecx
   while(xchg(&lk->locked, 1) != 0)
-80104370:	8b 55 08             	mov    0x8(%ebp),%edx
-80104373:	89 c8                	mov    %ecx,%eax
-80104375:	f0 87 02             	lock xchg %eax,(%edx)
-80104378:	85 c0                	test   %eax,%eax
-8010437a:	75 f4                	jne    80104370 <acquire+0x20>
+801044e0:	8b 55 08             	mov    0x8(%ebp),%edx
+801044e3:	89 c8                	mov    %ecx,%eax
+801044e5:	f0 87 02             	lock xchg %eax,(%edx)
+801044e8:	85 c0                	test   %eax,%eax
+801044ea:	75 f4                	jne    801044e0 <acquire+0x20>
   __sync_synchronize();
-8010437c:	0f ae f0             	mfence 
+801044ec:	0f ae f0             	mfence 
   lk->cpu = mycpu();
-8010437f:	8b 5d 08             	mov    0x8(%ebp),%ebx
-80104382:	e8 79 f2 ff ff       	call   80103600 <mycpu>
-80104387:	89 43 08             	mov    %eax,0x8(%ebx)
+801044ef:	8b 5d 08             	mov    0x8(%ebp),%ebx
+801044f2:	e8 09 f1 ff ff       	call   80103600 <mycpu>
+801044f7:	89 43 08             	mov    %eax,0x8(%ebx)
   getcallerpcs(&lk, lk->pcs);
-8010438a:	8b 45 08             	mov    0x8(%ebp),%eax
-8010438d:	83 c0 0c             	add    $0xc,%eax
-80104390:	89 44 24 04          	mov    %eax,0x4(%esp)
-80104394:	8d 45 08             	lea    0x8(%ebp),%eax
-80104397:	89 04 24             	mov    %eax,(%esp)
-8010439a:	e8 61 fe ff ff       	call   80104200 <getcallerpcs>
-}
-8010439f:	83 c4 14             	add    $0x14,%esp
-801043a2:	5b                   	pop    %ebx
-801043a3:	5d                   	pop    %ebp
-801043a4:	c3                   	ret    
+801044fa:	8b 45 08             	mov    0x8(%ebp),%eax
+801044fd:	83 c0 0c             	add    $0xc,%eax
+80104500:	89 44 24 04          	mov    %eax,0x4(%esp)
+80104504:	8d 45 08             	lea    0x8(%ebp),%eax
+80104507:	89 04 24             	mov    %eax,(%esp)
+8010450a:	e8 61 fe ff ff       	call   80104370 <getcallerpcs>
+}
+8010450f:	83 c4 14             	add    $0x14,%esp
+80104512:	5b                   	pop    %ebx
+80104513:	5d                   	pop    %ebp
+80104514:	c3                   	ret    
     panic("acquire");
-801043a5:	c7 04 24 c1 74 10 80 	movl   $0x801074c1,(%esp)
-801043ac:	e8 af bf ff ff       	call   80100360 <panic>
-801043b1:	eb 0d                	jmp    801043c0 <release>
-801043b3:	90                   	nop
-801043b4:	90                   	nop
-801043b5:	90                   	nop
-801043b6:	90                   	nop
-801043b7:	90                   	nop
-801043b8:	90                   	nop
-801043b9:	90                   	nop
-801043ba:	90                   	nop
-801043bb:	90                   	nop
-801043bc:	90                   	nop
-801043bd:	90                   	nop
-801043be:	90                   	nop
-801043bf:	90                   	nop
-
-801043c0 <release>:
-{
-801043c0:	55                   	push   %ebp
-801043c1:	89 e5                	mov    %esp,%ebp
-801043c3:	53                   	push   %ebx
-801043c4:	83 ec 14             	sub    $0x14,%esp
-801043c7:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80104515:	c7 04 24 ed 76 10 80 	movl   $0x801076ed,(%esp)
+8010451c:	e8 3f be ff ff       	call   80100360 <panic>
+80104521:	eb 0d                	jmp    80104530 <release>
+80104523:	90                   	nop
+80104524:	90                   	nop
+80104525:	90                   	nop
+80104526:	90                   	nop
+80104527:	90                   	nop
+80104528:	90                   	nop
+80104529:	90                   	nop
+8010452a:	90                   	nop
+8010452b:	90                   	nop
+8010452c:	90                   	nop
+8010452d:	90                   	nop
+8010452e:	90                   	nop
+8010452f:	90                   	nop
+
+80104530 <release>:
+{
+80104530:	55                   	push   %ebp
+80104531:	89 e5                	mov    %esp,%ebp
+80104533:	53                   	push   %ebx
+80104534:	83 ec 14             	sub    $0x14,%esp
+80104537:	8b 5d 08             	mov    0x8(%ebp),%ebx
   if(!holding(lk))
-801043ca:	89 1c 24             	mov    %ebx,(%esp)
-801043cd:	e8 3e ff ff ff       	call   80104310 <holding>
-801043d2:	85 c0                	test   %eax,%eax
-801043d4:	74 21                	je     801043f7 <release+0x37>
+8010453a:	89 1c 24             	mov    %ebx,(%esp)
+8010453d:	e8 3e ff ff ff       	call   80104480 <holding>
+80104542:	85 c0                	test   %eax,%eax
+80104544:	74 21                	je     80104567 <release+0x37>
   lk->pcs[0] = 0;
-801043d6:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
+80104546:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
   lk->cpu = 0;
-801043dd:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%ebx)
+8010454d:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%ebx)
   __sync_synchronize();
-801043e4:	0f ae f0             	mfence 
+80104554:	0f ae f0             	mfence 
   asm volatile("movl $0, %0" : "+m" (lk->locked) : );
-801043e7:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
+80104557:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
 }
-801043ed:	83 c4 14             	add    $0x14,%esp
-801043f0:	5b                   	pop    %ebx
-801043f1:	5d                   	pop    %ebp
+8010455d:	83 c4 14             	add    $0x14,%esp
+80104560:	5b                   	pop    %ebx
+80104561:	5d                   	pop    %ebp
   popcli();
-801043f2:	e9 a9 fe ff ff       	jmp    801042a0 <popcli>
+80104562:	e9 a9 fe ff ff       	jmp    80104410 <popcli>
     panic("release");
-801043f7:	c7 04 24 c9 74 10 80 	movl   $0x801074c9,(%esp)
-801043fe:	e8 5d bf ff ff       	call   80100360 <panic>
-80104403:	66 90                	xchg   %ax,%ax
-80104405:	66 90                	xchg   %ax,%ax
-80104407:	66 90                	xchg   %ax,%ax
-80104409:	66 90                	xchg   %ax,%ax
-8010440b:	66 90                	xchg   %ax,%ax
-8010440d:	66 90                	xchg   %ax,%ax
-8010440f:	90                   	nop
-
-80104410 <memset>:
+80104567:	c7 04 24 f5 76 10 80 	movl   $0x801076f5,(%esp)
+8010456e:	e8 ed bd ff ff       	call   80100360 <panic>
+80104573:	66 90                	xchg   %ax,%ax
+80104575:	66 90                	xchg   %ax,%ax
+80104577:	66 90                	xchg   %ax,%ax
+80104579:	66 90                	xchg   %ax,%ax
+8010457b:	66 90                	xchg   %ax,%ax
+8010457d:	66 90                	xchg   %ax,%ax
+8010457f:	90                   	nop
+
+80104580 <memset>:
 #include "types.h"
 #include "x86.h"
 
 void*
 memset(void *dst, int c, uint n)
 {
-80104410:	55                   	push   %ebp
-80104411:	89 e5                	mov    %esp,%ebp
-80104413:	8b 55 08             	mov    0x8(%ebp),%edx
-80104416:	57                   	push   %edi
-80104417:	8b 4d 10             	mov    0x10(%ebp),%ecx
-8010441a:	53                   	push   %ebx
+80104580:	55                   	push   %ebp
+80104581:	89 e5                	mov    %esp,%ebp
+80104583:	8b 55 08             	mov    0x8(%ebp),%edx
+80104586:	57                   	push   %edi
+80104587:	8b 4d 10             	mov    0x10(%ebp),%ecx
+8010458a:	53                   	push   %ebx
   if ((int)dst%4 == 0 && n%4 == 0){
-8010441b:	f6 c2 03             	test   $0x3,%dl
-8010441e:	75 05                	jne    80104425 <memset+0x15>
-80104420:	f6 c1 03             	test   $0x3,%cl
-80104423:	74 13                	je     80104438 <memset+0x28>
+8010458b:	f6 c2 03             	test   $0x3,%dl
+8010458e:	75 05                	jne    80104595 <memset+0x15>
+80104590:	f6 c1 03             	test   $0x3,%cl
+80104593:	74 13                	je     801045a8 <memset+0x28>
   asm volatile("cld; rep stosb" :
-80104425:	89 d7                	mov    %edx,%edi
-80104427:	8b 45 0c             	mov    0xc(%ebp),%eax
-8010442a:	fc                   	cld    
-8010442b:	f3 aa                	rep stos %al,%es:(%edi)
+80104595:	89 d7                	mov    %edx,%edi
+80104597:	8b 45 0c             	mov    0xc(%ebp),%eax
+8010459a:	fc                   	cld    
+8010459b:	f3 aa                	rep stos %al,%es:(%edi)
     c &= 0xFF;
     stosl(dst, (c<<24)|(c<<16)|(c<<8)|c, n/4);
   } else
     stosb(dst, c, n);
   return dst;
 }
-8010442d:	5b                   	pop    %ebx
-8010442e:	89 d0                	mov    %edx,%eax
-80104430:	5f                   	pop    %edi
-80104431:	5d                   	pop    %ebp
-80104432:	c3                   	ret    
-80104433:	90                   	nop
-80104434:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010459d:	5b                   	pop    %ebx
+8010459e:	89 d0                	mov    %edx,%eax
+801045a0:	5f                   	pop    %edi
+801045a1:	5d                   	pop    %ebp
+801045a2:	c3                   	ret    
+801045a3:	90                   	nop
+801045a4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     c &= 0xFF;
-80104438:	0f b6 7d 0c          	movzbl 0xc(%ebp),%edi
+801045a8:	0f b6 7d 0c          	movzbl 0xc(%ebp),%edi
     stosl(dst, (c<<24)|(c<<16)|(c<<8)|c, n/4);
-8010443c:	c1 e9 02             	shr    $0x2,%ecx
-8010443f:	89 f8                	mov    %edi,%eax
-80104441:	89 fb                	mov    %edi,%ebx
-80104443:	c1 e0 18             	shl    $0x18,%eax
-80104446:	c1 e3 10             	shl    $0x10,%ebx
-80104449:	09 d8                	or     %ebx,%eax
-8010444b:	09 f8                	or     %edi,%eax
-8010444d:	c1 e7 08             	shl    $0x8,%edi
-80104450:	09 f8                	or     %edi,%eax
+801045ac:	c1 e9 02             	shr    $0x2,%ecx
+801045af:	89 f8                	mov    %edi,%eax
+801045b1:	89 fb                	mov    %edi,%ebx
+801045b3:	c1 e0 18             	shl    $0x18,%eax
+801045b6:	c1 e3 10             	shl    $0x10,%ebx
+801045b9:	09 d8                	or     %ebx,%eax
+801045bb:	09 f8                	or     %edi,%eax
+801045bd:	c1 e7 08             	shl    $0x8,%edi
+801045c0:	09 f8                	or     %edi,%eax
   asm volatile("cld; rep stosl" :
-80104452:	89 d7                	mov    %edx,%edi
-80104454:	fc                   	cld    
-80104455:	f3 ab                	rep stos %eax,%es:(%edi)
+801045c2:	89 d7                	mov    %edx,%edi
+801045c4:	fc                   	cld    
+801045c5:	f3 ab                	rep stos %eax,%es:(%edi)
 }
-80104457:	5b                   	pop    %ebx
-80104458:	89 d0                	mov    %edx,%eax
-8010445a:	5f                   	pop    %edi
-8010445b:	5d                   	pop    %ebp
-8010445c:	c3                   	ret    
-8010445d:	8d 76 00             	lea    0x0(%esi),%esi
+801045c7:	5b                   	pop    %ebx
+801045c8:	89 d0                	mov    %edx,%eax
+801045ca:	5f                   	pop    %edi
+801045cb:	5d                   	pop    %ebp
+801045cc:	c3                   	ret    
+801045cd:	8d 76 00             	lea    0x0(%esi),%esi
 
-80104460 <memcmp>:
+801045d0 <memcmp>:
 
 int
 memcmp(const void *v1, const void *v2, uint n)
 {
-80104460:	55                   	push   %ebp
-80104461:	89 e5                	mov    %esp,%ebp
-80104463:	8b 45 10             	mov    0x10(%ebp),%eax
-80104466:	57                   	push   %edi
-80104467:	56                   	push   %esi
-80104468:	8b 75 0c             	mov    0xc(%ebp),%esi
-8010446b:	53                   	push   %ebx
-8010446c:	8b 5d 08             	mov    0x8(%ebp),%ebx
+801045d0:	55                   	push   %ebp
+801045d1:	89 e5                	mov    %esp,%ebp
+801045d3:	8b 45 10             	mov    0x10(%ebp),%eax
+801045d6:	57                   	push   %edi
+801045d7:	56                   	push   %esi
+801045d8:	8b 75 0c             	mov    0xc(%ebp),%esi
+801045db:	53                   	push   %ebx
+801045dc:	8b 5d 08             	mov    0x8(%ebp),%ebx
   const uchar *s1, *s2;
 
   s1 = v1;
   s2 = v2;
   while(n-- > 0){
-8010446f:	85 c0                	test   %eax,%eax
-80104471:	8d 78 ff             	lea    -0x1(%eax),%edi
-80104474:	74 26                	je     8010449c <memcmp+0x3c>
+801045df:	85 c0                	test   %eax,%eax
+801045e1:	8d 78 ff             	lea    -0x1(%eax),%edi
+801045e4:	74 26                	je     8010460c <memcmp+0x3c>
     if(*s1 != *s2)
-80104476:	0f b6 03             	movzbl (%ebx),%eax
-80104479:	31 d2                	xor    %edx,%edx
-8010447b:	0f b6 0e             	movzbl (%esi),%ecx
-8010447e:	38 c8                	cmp    %cl,%al
-80104480:	74 16                	je     80104498 <memcmp+0x38>
-80104482:	eb 24                	jmp    801044a8 <memcmp+0x48>
-80104484:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80104488:	0f b6 44 13 01       	movzbl 0x1(%ebx,%edx,1),%eax
-8010448d:	83 c2 01             	add    $0x1,%edx
-80104490:	0f b6 0c 16          	movzbl (%esi,%edx,1),%ecx
-80104494:	38 c8                	cmp    %cl,%al
-80104496:	75 10                	jne    801044a8 <memcmp+0x48>
+801045e6:	0f b6 03             	movzbl (%ebx),%eax
+801045e9:	31 d2                	xor    %edx,%edx
+801045eb:	0f b6 0e             	movzbl (%esi),%ecx
+801045ee:	38 c8                	cmp    %cl,%al
+801045f0:	74 16                	je     80104608 <memcmp+0x38>
+801045f2:	eb 24                	jmp    80104618 <memcmp+0x48>
+801045f4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801045f8:	0f b6 44 13 01       	movzbl 0x1(%ebx,%edx,1),%eax
+801045fd:	83 c2 01             	add    $0x1,%edx
+80104600:	0f b6 0c 16          	movzbl (%esi,%edx,1),%ecx
+80104604:	38 c8                	cmp    %cl,%al
+80104606:	75 10                	jne    80104618 <memcmp+0x48>
   while(n-- > 0){
-80104498:	39 fa                	cmp    %edi,%edx
-8010449a:	75 ec                	jne    80104488 <memcmp+0x28>
+80104608:	39 fa                	cmp    %edi,%edx
+8010460a:	75 ec                	jne    801045f8 <memcmp+0x28>
       return *s1 - *s2;
     s1++, s2++;
   }
 
   return 0;
 }
-8010449c:	5b                   	pop    %ebx
+8010460c:	5b                   	pop    %ebx
   return 0;
-8010449d:	31 c0                	xor    %eax,%eax
-}
-8010449f:	5e                   	pop    %esi
-801044a0:	5f                   	pop    %edi
-801044a1:	5d                   	pop    %ebp
-801044a2:	c3                   	ret    
-801044a3:	90                   	nop
-801044a4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-801044a8:	5b                   	pop    %ebx
+8010460d:	31 c0                	xor    %eax,%eax
+}
+8010460f:	5e                   	pop    %esi
+80104610:	5f                   	pop    %edi
+80104611:	5d                   	pop    %ebp
+80104612:	c3                   	ret    
+80104613:	90                   	nop
+80104614:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80104618:	5b                   	pop    %ebx
       return *s1 - *s2;
-801044a9:	29 c8                	sub    %ecx,%eax
+80104619:	29 c8                	sub    %ecx,%eax
 }
-801044ab:	5e                   	pop    %esi
-801044ac:	5f                   	pop    %edi
-801044ad:	5d                   	pop    %ebp
-801044ae:	c3                   	ret    
-801044af:	90                   	nop
+8010461b:	5e                   	pop    %esi
+8010461c:	5f                   	pop    %edi
+8010461d:	5d                   	pop    %ebp
+8010461e:	c3                   	ret    
+8010461f:	90                   	nop
 
-801044b0 <memmove>:
+80104620 <memmove>:
 
 void*
 memmove(void *dst, const void *src, uint n)
 {
-801044b0:	55                   	push   %ebp
-801044b1:	89 e5                	mov    %esp,%ebp
-801044b3:	57                   	push   %edi
-801044b4:	8b 45 08             	mov    0x8(%ebp),%eax
-801044b7:	56                   	push   %esi
-801044b8:	8b 75 0c             	mov    0xc(%ebp),%esi
-801044bb:	53                   	push   %ebx
-801044bc:	8b 5d 10             	mov    0x10(%ebp),%ebx
+80104620:	55                   	push   %ebp
+80104621:	89 e5                	mov    %esp,%ebp
+80104623:	57                   	push   %edi
+80104624:	8b 45 08             	mov    0x8(%ebp),%eax
+80104627:	56                   	push   %esi
+80104628:	8b 75 0c             	mov    0xc(%ebp),%esi
+8010462b:	53                   	push   %ebx
+8010462c:	8b 5d 10             	mov    0x10(%ebp),%ebx
   const char *s;
   char *d;
 
   s = src;
   d = dst;
   if(s < d && s + n > d){
-801044bf:	39 c6                	cmp    %eax,%esi
-801044c1:	73 35                	jae    801044f8 <memmove+0x48>
-801044c3:	8d 0c 1e             	lea    (%esi,%ebx,1),%ecx
-801044c6:	39 c8                	cmp    %ecx,%eax
-801044c8:	73 2e                	jae    801044f8 <memmove+0x48>
+8010462f:	39 c6                	cmp    %eax,%esi
+80104631:	73 35                	jae    80104668 <memmove+0x48>
+80104633:	8d 0c 1e             	lea    (%esi,%ebx,1),%ecx
+80104636:	39 c8                	cmp    %ecx,%eax
+80104638:	73 2e                	jae    80104668 <memmove+0x48>
     s += n;
     d += n;
     while(n-- > 0)
-801044ca:	85 db                	test   %ebx,%ebx
+8010463a:	85 db                	test   %ebx,%ebx
     d += n;
-801044cc:	8d 3c 18             	lea    (%eax,%ebx,1),%edi
+8010463c:	8d 3c 18             	lea    (%eax,%ebx,1),%edi
     while(n-- > 0)
-801044cf:	8d 53 ff             	lea    -0x1(%ebx),%edx
-801044d2:	74 1b                	je     801044ef <memmove+0x3f>
-801044d4:	f7 db                	neg    %ebx
-801044d6:	8d 34 19             	lea    (%ecx,%ebx,1),%esi
-801044d9:	01 fb                	add    %edi,%ebx
-801044db:	90                   	nop
-801044dc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010463f:	8d 53 ff             	lea    -0x1(%ebx),%edx
+80104642:	74 1b                	je     8010465f <memmove+0x3f>
+80104644:	f7 db                	neg    %ebx
+80104646:	8d 34 19             	lea    (%ecx,%ebx,1),%esi
+80104649:	01 fb                	add    %edi,%ebx
+8010464b:	90                   	nop
+8010464c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
       *--d = *--s;
-801044e0:	0f b6 0c 16          	movzbl (%esi,%edx,1),%ecx
-801044e4:	88 0c 13             	mov    %cl,(%ebx,%edx,1)
+80104650:	0f b6 0c 16          	movzbl (%esi,%edx,1),%ecx
+80104654:	88 0c 13             	mov    %cl,(%ebx,%edx,1)
     while(n-- > 0)
-801044e7:	83 ea 01             	sub    $0x1,%edx
-801044ea:	83 fa ff             	cmp    $0xffffffff,%edx
-801044ed:	75 f1                	jne    801044e0 <memmove+0x30>
+80104657:	83 ea 01             	sub    $0x1,%edx
+8010465a:	83 fa ff             	cmp    $0xffffffff,%edx
+8010465d:	75 f1                	jne    80104650 <memmove+0x30>
   } else
     while(n-- > 0)
       *d++ = *s++;
 
   return dst;
 }
-801044ef:	5b                   	pop    %ebx
-801044f0:	5e                   	pop    %esi
-801044f1:	5f                   	pop    %edi
-801044f2:	5d                   	pop    %ebp
-801044f3:	c3                   	ret    
-801044f4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010465f:	5b                   	pop    %ebx
+80104660:	5e                   	pop    %esi
+80104661:	5f                   	pop    %edi
+80104662:	5d                   	pop    %ebp
+80104663:	c3                   	ret    
+80104664:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     while(n-- > 0)
-801044f8:	31 d2                	xor    %edx,%edx
-801044fa:	85 db                	test   %ebx,%ebx
-801044fc:	74 f1                	je     801044ef <memmove+0x3f>
-801044fe:	66 90                	xchg   %ax,%ax
+80104668:	31 d2                	xor    %edx,%edx
+8010466a:	85 db                	test   %ebx,%ebx
+8010466c:	74 f1                	je     8010465f <memmove+0x3f>
+8010466e:	66 90                	xchg   %ax,%ax
       *d++ = *s++;
-80104500:	0f b6 0c 16          	movzbl (%esi,%edx,1),%ecx
-80104504:	88 0c 10             	mov    %cl,(%eax,%edx,1)
-80104507:	83 c2 01             	add    $0x1,%edx
+80104670:	0f b6 0c 16          	movzbl (%esi,%edx,1),%ecx
+80104674:	88 0c 10             	mov    %cl,(%eax,%edx,1)
+80104677:	83 c2 01             	add    $0x1,%edx
     while(n-- > 0)
-8010450a:	39 da                	cmp    %ebx,%edx
-8010450c:	75 f2                	jne    80104500 <memmove+0x50>
+8010467a:	39 da                	cmp    %ebx,%edx
+8010467c:	75 f2                	jne    80104670 <memmove+0x50>
 }
-8010450e:	5b                   	pop    %ebx
-8010450f:	5e                   	pop    %esi
-80104510:	5f                   	pop    %edi
-80104511:	5d                   	pop    %ebp
-80104512:	c3                   	ret    
-80104513:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-80104519:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+8010467e:	5b                   	pop    %ebx
+8010467f:	5e                   	pop    %esi
+80104680:	5f                   	pop    %edi
+80104681:	5d                   	pop    %ebp
+80104682:	c3                   	ret    
+80104683:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80104689:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
 
-80104520 <memcpy>:
+80104690 <memcpy>:
 
 // memcpy exists to placate GCC.  Use memmove.
 void*
 memcpy(void *dst, const void *src, uint n)
 {
-80104520:	55                   	push   %ebp
-80104521:	89 e5                	mov    %esp,%ebp
+80104690:	55                   	push   %ebp
+80104691:	89 e5                	mov    %esp,%ebp
   return memmove(dst, src, n);
 }
-80104523:	5d                   	pop    %ebp
+80104693:	5d                   	pop    %ebp
   return memmove(dst, src, n);
-80104524:	eb 8a                	jmp    801044b0 <memmove>
-80104526:	8d 76 00             	lea    0x0(%esi),%esi
-80104529:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+80104694:	eb 8a                	jmp    80104620 <memmove>
+80104696:	8d 76 00             	lea    0x0(%esi),%esi
+80104699:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
 
-80104530 <strncmp>:
+801046a0 <strncmp>:
 
 int
 strncmp(const char *p, const char *q, uint n)
 {
-80104530:	55                   	push   %ebp
-80104531:	89 e5                	mov    %esp,%ebp
-80104533:	56                   	push   %esi
-80104534:	8b 75 10             	mov    0x10(%ebp),%esi
-80104537:	53                   	push   %ebx
-80104538:	8b 4d 08             	mov    0x8(%ebp),%ecx
-8010453b:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+801046a0:	55                   	push   %ebp
+801046a1:	89 e5                	mov    %esp,%ebp
+801046a3:	56                   	push   %esi
+801046a4:	8b 75 10             	mov    0x10(%ebp),%esi
+801046a7:	53                   	push   %ebx
+801046a8:	8b 4d 08             	mov    0x8(%ebp),%ecx
+801046ab:	8b 5d 0c             	mov    0xc(%ebp),%ebx
   while(n > 0 && *p && *p == *q)
-8010453e:	85 f6                	test   %esi,%esi
-80104540:	74 30                	je     80104572 <strncmp+0x42>
-80104542:	0f b6 01             	movzbl (%ecx),%eax
-80104545:	84 c0                	test   %al,%al
-80104547:	74 2f                	je     80104578 <strncmp+0x48>
-80104549:	0f b6 13             	movzbl (%ebx),%edx
-8010454c:	38 d0                	cmp    %dl,%al
-8010454e:	75 46                	jne    80104596 <strncmp+0x66>
-80104550:	8d 51 01             	lea    0x1(%ecx),%edx
-80104553:	01 ce                	add    %ecx,%esi
-80104555:	eb 14                	jmp    8010456b <strncmp+0x3b>
-80104557:	90                   	nop
-80104558:	0f b6 02             	movzbl (%edx),%eax
-8010455b:	84 c0                	test   %al,%al
-8010455d:	74 31                	je     80104590 <strncmp+0x60>
-8010455f:	0f b6 19             	movzbl (%ecx),%ebx
-80104562:	83 c2 01             	add    $0x1,%edx
-80104565:	38 d8                	cmp    %bl,%al
-80104567:	75 17                	jne    80104580 <strncmp+0x50>
+801046ae:	85 f6                	test   %esi,%esi
+801046b0:	74 30                	je     801046e2 <strncmp+0x42>
+801046b2:	0f b6 01             	movzbl (%ecx),%eax
+801046b5:	84 c0                	test   %al,%al
+801046b7:	74 2f                	je     801046e8 <strncmp+0x48>
+801046b9:	0f b6 13             	movzbl (%ebx),%edx
+801046bc:	38 d0                	cmp    %dl,%al
+801046be:	75 46                	jne    80104706 <strncmp+0x66>
+801046c0:	8d 51 01             	lea    0x1(%ecx),%edx
+801046c3:	01 ce                	add    %ecx,%esi
+801046c5:	eb 14                	jmp    801046db <strncmp+0x3b>
+801046c7:	90                   	nop
+801046c8:	0f b6 02             	movzbl (%edx),%eax
+801046cb:	84 c0                	test   %al,%al
+801046cd:	74 31                	je     80104700 <strncmp+0x60>
+801046cf:	0f b6 19             	movzbl (%ecx),%ebx
+801046d2:	83 c2 01             	add    $0x1,%edx
+801046d5:	38 d8                	cmp    %bl,%al
+801046d7:	75 17                	jne    801046f0 <strncmp+0x50>
     n--, p++, q++;
-80104569:	89 cb                	mov    %ecx,%ebx
+801046d9:	89 cb                	mov    %ecx,%ebx
   while(n > 0 && *p && *p == *q)
-8010456b:	39 f2                	cmp    %esi,%edx
+801046db:	39 f2                	cmp    %esi,%edx
     n--, p++, q++;
-8010456d:	8d 4b 01             	lea    0x1(%ebx),%ecx
+801046dd:	8d 4b 01             	lea    0x1(%ebx),%ecx
   while(n > 0 && *p && *p == *q)
-80104570:	75 e6                	jne    80104558 <strncmp+0x28>
+801046e0:	75 e6                	jne    801046c8 <strncmp+0x28>
   if(n == 0)
     return 0;
   return (uchar)*p - (uchar)*q;
 }
-80104572:	5b                   	pop    %ebx
+801046e2:	5b                   	pop    %ebx
     return 0;
-80104573:	31 c0                	xor    %eax,%eax
+801046e3:	31 c0                	xor    %eax,%eax
 }
-80104575:	5e                   	pop    %esi
-80104576:	5d                   	pop    %ebp
-80104577:	c3                   	ret    
-80104578:	0f b6 1b             	movzbl (%ebx),%ebx
+801046e5:	5e                   	pop    %esi
+801046e6:	5d                   	pop    %ebp
+801046e7:	c3                   	ret    
+801046e8:	0f b6 1b             	movzbl (%ebx),%ebx
   while(n > 0 && *p && *p == *q)
-8010457b:	31 c0                	xor    %eax,%eax
-8010457d:	8d 76 00             	lea    0x0(%esi),%esi
+801046eb:	31 c0                	xor    %eax,%eax
+801046ed:	8d 76 00             	lea    0x0(%esi),%esi
   return (uchar)*p - (uchar)*q;
-80104580:	0f b6 d3             	movzbl %bl,%edx
-80104583:	29 d0                	sub    %edx,%eax
-}
-80104585:	5b                   	pop    %ebx
-80104586:	5e                   	pop    %esi
-80104587:	5d                   	pop    %ebp
-80104588:	c3                   	ret    
-80104589:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80104590:	0f b6 5b 01          	movzbl 0x1(%ebx),%ebx
-80104594:	eb ea                	jmp    80104580 <strncmp+0x50>
+801046f0:	0f b6 d3             	movzbl %bl,%edx
+801046f3:	29 d0                	sub    %edx,%eax
+}
+801046f5:	5b                   	pop    %ebx
+801046f6:	5e                   	pop    %esi
+801046f7:	5d                   	pop    %ebp
+801046f8:	c3                   	ret    
+801046f9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104700:	0f b6 5b 01          	movzbl 0x1(%ebx),%ebx
+80104704:	eb ea                	jmp    801046f0 <strncmp+0x50>
   while(n > 0 && *p && *p == *q)
-80104596:	89 d3                	mov    %edx,%ebx
-80104598:	eb e6                	jmp    80104580 <strncmp+0x50>
-8010459a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80104706:	89 d3                	mov    %edx,%ebx
+80104708:	eb e6                	jmp    801046f0 <strncmp+0x50>
+8010470a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 
-801045a0 <strncpy>:
+80104710 <strncpy>:
 
 char*
 strncpy(char *s, const char *t, int n)
 {
-801045a0:	55                   	push   %ebp
-801045a1:	89 e5                	mov    %esp,%ebp
-801045a3:	8b 45 08             	mov    0x8(%ebp),%eax
-801045a6:	56                   	push   %esi
-801045a7:	8b 4d 10             	mov    0x10(%ebp),%ecx
-801045aa:	53                   	push   %ebx
-801045ab:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+80104710:	55                   	push   %ebp
+80104711:	89 e5                	mov    %esp,%ebp
+80104713:	8b 45 08             	mov    0x8(%ebp),%eax
+80104716:	56                   	push   %esi
+80104717:	8b 4d 10             	mov    0x10(%ebp),%ecx
+8010471a:	53                   	push   %ebx
+8010471b:	8b 5d 0c             	mov    0xc(%ebp),%ebx
   char *os;
 
   os = s;
   while(n-- > 0 && (*s++ = *t++) != 0)
-801045ae:	89 c2                	mov    %eax,%edx
-801045b0:	eb 19                	jmp    801045cb <strncpy+0x2b>
-801045b2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-801045b8:	83 c3 01             	add    $0x1,%ebx
-801045bb:	0f b6 4b ff          	movzbl -0x1(%ebx),%ecx
-801045bf:	83 c2 01             	add    $0x1,%edx
-801045c2:	84 c9                	test   %cl,%cl
-801045c4:	88 4a ff             	mov    %cl,-0x1(%edx)
-801045c7:	74 09                	je     801045d2 <strncpy+0x32>
-801045c9:	89 f1                	mov    %esi,%ecx
-801045cb:	85 c9                	test   %ecx,%ecx
-801045cd:	8d 71 ff             	lea    -0x1(%ecx),%esi
-801045d0:	7f e6                	jg     801045b8 <strncpy+0x18>
+8010471e:	89 c2                	mov    %eax,%edx
+80104720:	eb 19                	jmp    8010473b <strncpy+0x2b>
+80104722:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80104728:	83 c3 01             	add    $0x1,%ebx
+8010472b:	0f b6 4b ff          	movzbl -0x1(%ebx),%ecx
+8010472f:	83 c2 01             	add    $0x1,%edx
+80104732:	84 c9                	test   %cl,%cl
+80104734:	88 4a ff             	mov    %cl,-0x1(%edx)
+80104737:	74 09                	je     80104742 <strncpy+0x32>
+80104739:	89 f1                	mov    %esi,%ecx
+8010473b:	85 c9                	test   %ecx,%ecx
+8010473d:	8d 71 ff             	lea    -0x1(%ecx),%esi
+80104740:	7f e6                	jg     80104728 <strncpy+0x18>
     ;
   while(n-- > 0)
-801045d2:	31 c9                	xor    %ecx,%ecx
-801045d4:	85 f6                	test   %esi,%esi
-801045d6:	7e 0f                	jle    801045e7 <strncpy+0x47>
+80104742:	31 c9                	xor    %ecx,%ecx
+80104744:	85 f6                	test   %esi,%esi
+80104746:	7e 0f                	jle    80104757 <strncpy+0x47>
     *s++ = 0;
-801045d8:	c6 04 0a 00          	movb   $0x0,(%edx,%ecx,1)
-801045dc:	89 f3                	mov    %esi,%ebx
-801045de:	83 c1 01             	add    $0x1,%ecx
-801045e1:	29 cb                	sub    %ecx,%ebx
+80104748:	c6 04 0a 00          	movb   $0x0,(%edx,%ecx,1)
+8010474c:	89 f3                	mov    %esi,%ebx
+8010474e:	83 c1 01             	add    $0x1,%ecx
+80104751:	29 cb                	sub    %ecx,%ebx
   while(n-- > 0)
-801045e3:	85 db                	test   %ebx,%ebx
-801045e5:	7f f1                	jg     801045d8 <strncpy+0x38>
+80104753:	85 db                	test   %ebx,%ebx
+80104755:	7f f1                	jg     80104748 <strncpy+0x38>
   return os;
 }
-801045e7:	5b                   	pop    %ebx
-801045e8:	5e                   	pop    %esi
-801045e9:	5d                   	pop    %ebp
-801045ea:	c3                   	ret    
-801045eb:	90                   	nop
-801045ec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80104757:	5b                   	pop    %ebx
+80104758:	5e                   	pop    %esi
+80104759:	5d                   	pop    %ebp
+8010475a:	c3                   	ret    
+8010475b:	90                   	nop
+8010475c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
-801045f0 <safestrcpy>:
+80104760 <safestrcpy>:
 
 // Like strncpy but guaranteed to NUL-terminate.
 char*
 safestrcpy(char *s, const char *t, int n)
 {
-801045f0:	55                   	push   %ebp
-801045f1:	89 e5                	mov    %esp,%ebp
-801045f3:	8b 4d 10             	mov    0x10(%ebp),%ecx
-801045f6:	56                   	push   %esi
-801045f7:	8b 45 08             	mov    0x8(%ebp),%eax
-801045fa:	53                   	push   %ebx
-801045fb:	8b 55 0c             	mov    0xc(%ebp),%edx
+80104760:	55                   	push   %ebp
+80104761:	89 e5                	mov    %esp,%ebp
+80104763:	8b 4d 10             	mov    0x10(%ebp),%ecx
+80104766:	56                   	push   %esi
+80104767:	8b 45 08             	mov    0x8(%ebp),%eax
+8010476a:	53                   	push   %ebx
+8010476b:	8b 55 0c             	mov    0xc(%ebp),%edx
   char *os;
 
   os = s;
   if(n <= 0)
-801045fe:	85 c9                	test   %ecx,%ecx
-80104600:	7e 26                	jle    80104628 <safestrcpy+0x38>
-80104602:	8d 74 0a ff          	lea    -0x1(%edx,%ecx,1),%esi
-80104606:	89 c1                	mov    %eax,%ecx
-80104608:	eb 17                	jmp    80104621 <safestrcpy+0x31>
-8010460a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+8010476e:	85 c9                	test   %ecx,%ecx
+80104770:	7e 26                	jle    80104798 <safestrcpy+0x38>
+80104772:	8d 74 0a ff          	lea    -0x1(%edx,%ecx,1),%esi
+80104776:	89 c1                	mov    %eax,%ecx
+80104778:	eb 17                	jmp    80104791 <safestrcpy+0x31>
+8010477a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     return os;
   while(--n > 0 && (*s++ = *t++) != 0)
-80104610:	83 c2 01             	add    $0x1,%edx
-80104613:	0f b6 5a ff          	movzbl -0x1(%edx),%ebx
-80104617:	83 c1 01             	add    $0x1,%ecx
-8010461a:	84 db                	test   %bl,%bl
-8010461c:	88 59 ff             	mov    %bl,-0x1(%ecx)
-8010461f:	74 04                	je     80104625 <safestrcpy+0x35>
-80104621:	39 f2                	cmp    %esi,%edx
-80104623:	75 eb                	jne    80104610 <safestrcpy+0x20>
+80104780:	83 c2 01             	add    $0x1,%edx
+80104783:	0f b6 5a ff          	movzbl -0x1(%edx),%ebx
+80104787:	83 c1 01             	add    $0x1,%ecx
+8010478a:	84 db                	test   %bl,%bl
+8010478c:	88 59 ff             	mov    %bl,-0x1(%ecx)
+8010478f:	74 04                	je     80104795 <safestrcpy+0x35>
+80104791:	39 f2                	cmp    %esi,%edx
+80104793:	75 eb                	jne    80104780 <safestrcpy+0x20>
     ;
   *s = 0;
-80104625:	c6 01 00             	movb   $0x0,(%ecx)
+80104795:	c6 01 00             	movb   $0x0,(%ecx)
   return os;
 }
-80104628:	5b                   	pop    %ebx
-80104629:	5e                   	pop    %esi
-8010462a:	5d                   	pop    %ebp
-8010462b:	c3                   	ret    
-8010462c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80104798:	5b                   	pop    %ebx
+80104799:	5e                   	pop    %esi
+8010479a:	5d                   	pop    %ebp
+8010479b:	c3                   	ret    
+8010479c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
-80104630 <strlen>:
+801047a0 <strlen>:
 
 int
 strlen(const char *s)
 {
-80104630:	55                   	push   %ebp
+801047a0:	55                   	push   %ebp
   int n;
 
   for(n = 0; s[n]; n++)
-80104631:	31 c0                	xor    %eax,%eax
+801047a1:	31 c0                	xor    %eax,%eax
 {
-80104633:	89 e5                	mov    %esp,%ebp
-80104635:	8b 55 08             	mov    0x8(%ebp),%edx
+801047a3:	89 e5                	mov    %esp,%ebp
+801047a5:	8b 55 08             	mov    0x8(%ebp),%edx
   for(n = 0; s[n]; n++)
-80104638:	80 3a 00             	cmpb   $0x0,(%edx)
-8010463b:	74 0c                	je     80104649 <strlen+0x19>
-8010463d:	8d 76 00             	lea    0x0(%esi),%esi
-80104640:	83 c0 01             	add    $0x1,%eax
-80104643:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
-80104647:	75 f7                	jne    80104640 <strlen+0x10>
+801047a8:	80 3a 00             	cmpb   $0x0,(%edx)
+801047ab:	74 0c                	je     801047b9 <strlen+0x19>
+801047ad:	8d 76 00             	lea    0x0(%esi),%esi
+801047b0:	83 c0 01             	add    $0x1,%eax
+801047b3:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+801047b7:	75 f7                	jne    801047b0 <strlen+0x10>
     ;
   return n;
 }
-80104649:	5d                   	pop    %ebp
-8010464a:	c3                   	ret    
+801047b9:	5d                   	pop    %ebp
+801047ba:	c3                   	ret    
 
-8010464b <swtch>:
+801047bb <swtch>:
 # a struct context, and save its address in *old.
 # Switch stacks to new and pop previously-saved registers.
 
 .globl swtch
 swtch:
   movl 4(%esp), %eax
-8010464b:	8b 44 24 04          	mov    0x4(%esp),%eax
+801047bb:	8b 44 24 04          	mov    0x4(%esp),%eax
   movl 8(%esp), %edx
-8010464f:	8b 54 24 08          	mov    0x8(%esp),%edx
+801047bf:	8b 54 24 08          	mov    0x8(%esp),%edx
 
   # Save old callee-saved registers
   pushl %ebp
-80104653:	55                   	push   %ebp
+801047c3:	55                   	push   %ebp
   pushl %ebx
-80104654:	53                   	push   %ebx
+801047c4:	53                   	push   %ebx
   pushl %esi
-80104655:	56                   	push   %esi
+801047c5:	56                   	push   %esi
   pushl %edi
-80104656:	57                   	push   %edi
+801047c6:	57                   	push   %edi
 
   # Switch stacks
   movl %esp, (%eax)
-80104657:	89 20                	mov    %esp,(%eax)
+801047c7:	89 20                	mov    %esp,(%eax)
   movl %edx, %esp
-80104659:	89 d4                	mov    %edx,%esp
+801047c9:	89 d4                	mov    %edx,%esp
 
   # Load new callee-saved registers
   popl %edi
-8010465b:	5f                   	pop    %edi
+801047cb:	5f                   	pop    %edi
   popl %esi
-8010465c:	5e                   	pop    %esi
+801047cc:	5e                   	pop    %esi
   popl %ebx
-8010465d:	5b                   	pop    %ebx
+801047cd:	5b                   	pop    %ebx
   popl %ebp
-8010465e:	5d                   	pop    %ebp
+801047ce:	5d                   	pop    %ebp
   ret
-8010465f:	c3                   	ret    
+801047cf:	c3                   	ret    
 
-80104660 <fetchint>:
+801047d0 <fetchint>:
 // to a saved program counter, and then the first argument.
 
 // Fetch the int at addr from the current process.
 int
 fetchint(uint addr, int *ip)
 {
-80104660:	55                   	push   %ebp
-80104661:	89 e5                	mov    %esp,%ebp
-80104663:	53                   	push   %ebx
-80104664:	83 ec 04             	sub    $0x4,%esp
-80104667:	8b 5d 08             	mov    0x8(%ebp),%ebx
+801047d0:	55                   	push   %ebp
+801047d1:	89 e5                	mov    %esp,%ebp
+801047d3:	53                   	push   %ebx
+801047d4:	83 ec 04             	sub    $0x4,%esp
+801047d7:	8b 5d 08             	mov    0x8(%ebp),%ebx
   struct proc *curproc = myproc();
-8010466a:	e8 31 f0 ff ff       	call   801036a0 <myproc>
+801047da:	e8 c1 ee ff ff       	call   801036a0 <myproc>
 
   if(addr >= curproc->sz || addr+4 > curproc->sz)
-8010466f:	8b 00                	mov    (%eax),%eax
-80104671:	39 d8                	cmp    %ebx,%eax
-80104673:	76 1b                	jbe    80104690 <fetchint+0x30>
-80104675:	8d 53 04             	lea    0x4(%ebx),%edx
-80104678:	39 d0                	cmp    %edx,%eax
-8010467a:	72 14                	jb     80104690 <fetchint+0x30>
+801047df:	8b 00                	mov    (%eax),%eax
+801047e1:	39 d8                	cmp    %ebx,%eax
+801047e3:	76 1b                	jbe    80104800 <fetchint+0x30>
+801047e5:	8d 53 04             	lea    0x4(%ebx),%edx
+801047e8:	39 d0                	cmp    %edx,%eax
+801047ea:	72 14                	jb     80104800 <fetchint+0x30>
     return -1;
   *ip = *(int*)(addr);
-8010467c:	8b 45 0c             	mov    0xc(%ebp),%eax
-8010467f:	8b 13                	mov    (%ebx),%edx
-80104681:	89 10                	mov    %edx,(%eax)
+801047ec:	8b 45 0c             	mov    0xc(%ebp),%eax
+801047ef:	8b 13                	mov    (%ebx),%edx
+801047f1:	89 10                	mov    %edx,(%eax)
   return 0;
-80104683:	31 c0                	xor    %eax,%eax
-}
-80104685:	83 c4 04             	add    $0x4,%esp
-80104688:	5b                   	pop    %ebx
-80104689:	5d                   	pop    %ebp
-8010468a:	c3                   	ret    
-8010468b:	90                   	nop
-8010468c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801047f3:	31 c0                	xor    %eax,%eax
+}
+801047f5:	83 c4 04             	add    $0x4,%esp
+801047f8:	5b                   	pop    %ebx
+801047f9:	5d                   	pop    %ebp
+801047fa:	c3                   	ret    
+801047fb:	90                   	nop
+801047fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     return -1;
-80104690:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80104695:	eb ee                	jmp    80104685 <fetchint+0x25>
-80104697:	89 f6                	mov    %esi,%esi
-80104699:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+80104800:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80104805:	eb ee                	jmp    801047f5 <fetchint+0x25>
+80104807:	89 f6                	mov    %esi,%esi
+80104809:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
 
-801046a0 <fetchstr>:
+80104810 <fetchstr>:
 // Fetch the nul-terminated string at addr from the current process.
 // Doesn't actually copy the string - just sets *pp to point at it.
 // Returns length of string, not including nul.
 int
 fetchstr(uint addr, char **pp)
 {
-801046a0:	55                   	push   %ebp
-801046a1:	89 e5                	mov    %esp,%ebp
-801046a3:	53                   	push   %ebx
-801046a4:	83 ec 04             	sub    $0x4,%esp
-801046a7:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80104810:	55                   	push   %ebp
+80104811:	89 e5                	mov    %esp,%ebp
+80104813:	53                   	push   %ebx
+80104814:	83 ec 04             	sub    $0x4,%esp
+80104817:	8b 5d 08             	mov    0x8(%ebp),%ebx
   char *s, *ep;
   struct proc *curproc = myproc();
-801046aa:	e8 f1 ef ff ff       	call   801036a0 <myproc>
+8010481a:	e8 81 ee ff ff       	call   801036a0 <myproc>
 
   if(addr >= curproc->sz)
-801046af:	39 18                	cmp    %ebx,(%eax)
-801046b1:	76 26                	jbe    801046d9 <fetchstr+0x39>
+8010481f:	39 18                	cmp    %ebx,(%eax)
+80104821:	76 26                	jbe    80104849 <fetchstr+0x39>
     return -1;
   *pp = (char*)addr;
-801046b3:	8b 4d 0c             	mov    0xc(%ebp),%ecx
-801046b6:	89 da                	mov    %ebx,%edx
-801046b8:	89 19                	mov    %ebx,(%ecx)
+80104823:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+80104826:	89 da                	mov    %ebx,%edx
+80104828:	89 19                	mov    %ebx,(%ecx)
   ep = (char*)curproc->sz;
-801046ba:	8b 00                	mov    (%eax),%eax
+8010482a:	8b 00                	mov    (%eax),%eax
   for(s = *pp; s < ep; s++){
-801046bc:	39 c3                	cmp    %eax,%ebx
-801046be:	73 19                	jae    801046d9 <fetchstr+0x39>
+8010482c:	39 c3                	cmp    %eax,%ebx
+8010482e:	73 19                	jae    80104849 <fetchstr+0x39>
     if(*s == 0)
-801046c0:	80 3b 00             	cmpb   $0x0,(%ebx)
-801046c3:	75 0d                	jne    801046d2 <fetchstr+0x32>
-801046c5:	eb 21                	jmp    801046e8 <fetchstr+0x48>
-801046c7:	90                   	nop
-801046c8:	80 3a 00             	cmpb   $0x0,(%edx)
-801046cb:	90                   	nop
-801046cc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-801046d0:	74 16                	je     801046e8 <fetchstr+0x48>
+80104830:	80 3b 00             	cmpb   $0x0,(%ebx)
+80104833:	75 0d                	jne    80104842 <fetchstr+0x32>
+80104835:	eb 21                	jmp    80104858 <fetchstr+0x48>
+80104837:	90                   	nop
+80104838:	80 3a 00             	cmpb   $0x0,(%edx)
+8010483b:	90                   	nop
+8010483c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80104840:	74 16                	je     80104858 <fetchstr+0x48>
   for(s = *pp; s < ep; s++){
-801046d2:	83 c2 01             	add    $0x1,%edx
-801046d5:	39 d0                	cmp    %edx,%eax
-801046d7:	77 ef                	ja     801046c8 <fetchstr+0x28>
+80104842:	83 c2 01             	add    $0x1,%edx
+80104845:	39 d0                	cmp    %edx,%eax
+80104847:	77 ef                	ja     80104838 <fetchstr+0x28>
       return s - *pp;
   }
   return -1;
 }
-801046d9:	83 c4 04             	add    $0x4,%esp
+80104849:	83 c4 04             	add    $0x4,%esp
     return -1;
-801046dc:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+8010484c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 }
-801046e1:	5b                   	pop    %ebx
-801046e2:	5d                   	pop    %ebp
-801046e3:	c3                   	ret    
-801046e4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-801046e8:	83 c4 04             	add    $0x4,%esp
+80104851:	5b                   	pop    %ebx
+80104852:	5d                   	pop    %ebp
+80104853:	c3                   	ret    
+80104854:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80104858:	83 c4 04             	add    $0x4,%esp
       return s - *pp;
-801046eb:	89 d0                	mov    %edx,%eax
-801046ed:	29 d8                	sub    %ebx,%eax
+8010485b:	89 d0                	mov    %edx,%eax
+8010485d:	29 d8                	sub    %ebx,%eax
 }
-801046ef:	5b                   	pop    %ebx
-801046f0:	5d                   	pop    %ebp
-801046f1:	c3                   	ret    
-801046f2:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801046f9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+8010485f:	5b                   	pop    %ebx
+80104860:	5d                   	pop    %ebp
+80104861:	c3                   	ret    
+80104862:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104869:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
 
-80104700 <argint>:
+80104870 <argint>:
 
 // Fetch the nth 32-bit system call argument.
 int
 argint(int n, int *ip)
 {
-80104700:	55                   	push   %ebp
-80104701:	89 e5                	mov    %esp,%ebp
-80104703:	56                   	push   %esi
-80104704:	8b 75 0c             	mov    0xc(%ebp),%esi
-80104707:	53                   	push   %ebx
-80104708:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80104870:	55                   	push   %ebp
+80104871:	89 e5                	mov    %esp,%ebp
+80104873:	56                   	push   %esi
+80104874:	8b 75 0c             	mov    0xc(%ebp),%esi
+80104877:	53                   	push   %ebx
+80104878:	8b 5d 08             	mov    0x8(%ebp),%ebx
   return fetchint((myproc()->tf->esp) + 4 + 4*n, ip);
-8010470b:	e8 90 ef ff ff       	call   801036a0 <myproc>
-80104710:	89 75 0c             	mov    %esi,0xc(%ebp)
-80104713:	8b 40 18             	mov    0x18(%eax),%eax
-80104716:	8b 40 44             	mov    0x44(%eax),%eax
-80104719:	8d 44 98 04          	lea    0x4(%eax,%ebx,4),%eax
-8010471d:	89 45 08             	mov    %eax,0x8(%ebp)
-}
-80104720:	5b                   	pop    %ebx
-80104721:	5e                   	pop    %esi
-80104722:	5d                   	pop    %ebp
+8010487b:	e8 20 ee ff ff       	call   801036a0 <myproc>
+80104880:	89 75 0c             	mov    %esi,0xc(%ebp)
+80104883:	8b 40 18             	mov    0x18(%eax),%eax
+80104886:	8b 40 44             	mov    0x44(%eax),%eax
+80104889:	8d 44 98 04          	lea    0x4(%eax,%ebx,4),%eax
+8010488d:	89 45 08             	mov    %eax,0x8(%ebp)
+}
+80104890:	5b                   	pop    %ebx
+80104891:	5e                   	pop    %esi
+80104892:	5d                   	pop    %ebp
   return fetchint((myproc()->tf->esp) + 4 + 4*n, ip);
-80104723:	e9 38 ff ff ff       	jmp    80104660 <fetchint>
-80104728:	90                   	nop
-80104729:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104893:	e9 38 ff ff ff       	jmp    801047d0 <fetchint>
+80104898:	90                   	nop
+80104899:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 
-80104730 <argptr>:
+801048a0 <argptr>:
 // Fetch the nth word-sized system call argument as a pointer
 // to a block of memory of size bytes.  Check that the pointer
 // lies within the process address space.
 int
 argptr(int n, char **pp, int size)
 {
-80104730:	55                   	push   %ebp
-80104731:	89 e5                	mov    %esp,%ebp
-80104733:	56                   	push   %esi
-80104734:	53                   	push   %ebx
-80104735:	83 ec 20             	sub    $0x20,%esp
-80104738:	8b 5d 10             	mov    0x10(%ebp),%ebx
+801048a0:	55                   	push   %ebp
+801048a1:	89 e5                	mov    %esp,%ebp
+801048a3:	56                   	push   %esi
+801048a4:	53                   	push   %ebx
+801048a5:	83 ec 20             	sub    $0x20,%esp
+801048a8:	8b 5d 10             	mov    0x10(%ebp),%ebx
   int i;
   struct proc *curproc = myproc();
-8010473b:	e8 60 ef ff ff       	call   801036a0 <myproc>
-80104740:	89 c6                	mov    %eax,%esi
+801048ab:	e8 f0 ed ff ff       	call   801036a0 <myproc>
+801048b0:	89 c6                	mov    %eax,%esi
  
   if(argint(n, &i) < 0)
-80104742:	8d 45 f4             	lea    -0xc(%ebp),%eax
-80104745:	89 44 24 04          	mov    %eax,0x4(%esp)
-80104749:	8b 45 08             	mov    0x8(%ebp),%eax
-8010474c:	89 04 24             	mov    %eax,(%esp)
-8010474f:	e8 ac ff ff ff       	call   80104700 <argint>
-80104754:	85 c0                	test   %eax,%eax
-80104756:	78 28                	js     80104780 <argptr+0x50>
+801048b2:	8d 45 f4             	lea    -0xc(%ebp),%eax
+801048b5:	89 44 24 04          	mov    %eax,0x4(%esp)
+801048b9:	8b 45 08             	mov    0x8(%ebp),%eax
+801048bc:	89 04 24             	mov    %eax,(%esp)
+801048bf:	e8 ac ff ff ff       	call   80104870 <argint>
+801048c4:	85 c0                	test   %eax,%eax
+801048c6:	78 28                	js     801048f0 <argptr+0x50>
     return -1;
   if(size < 0 || (uint)i >= curproc->sz || (uint)i+size > curproc->sz)
-80104758:	85 db                	test   %ebx,%ebx
-8010475a:	78 24                	js     80104780 <argptr+0x50>
-8010475c:	8b 55 f4             	mov    -0xc(%ebp),%edx
-8010475f:	8b 06                	mov    (%esi),%eax
-80104761:	39 c2                	cmp    %eax,%edx
-80104763:	73 1b                	jae    80104780 <argptr+0x50>
-80104765:	01 d3                	add    %edx,%ebx
-80104767:	39 d8                	cmp    %ebx,%eax
-80104769:	72 15                	jb     80104780 <argptr+0x50>
+801048c8:	85 db                	test   %ebx,%ebx
+801048ca:	78 24                	js     801048f0 <argptr+0x50>
+801048cc:	8b 55 f4             	mov    -0xc(%ebp),%edx
+801048cf:	8b 06                	mov    (%esi),%eax
+801048d1:	39 c2                	cmp    %eax,%edx
+801048d3:	73 1b                	jae    801048f0 <argptr+0x50>
+801048d5:	01 d3                	add    %edx,%ebx
+801048d7:	39 d8                	cmp    %ebx,%eax
+801048d9:	72 15                	jb     801048f0 <argptr+0x50>
     return -1;
   *pp = (char*)i;
-8010476b:	8b 45 0c             	mov    0xc(%ebp),%eax
-8010476e:	89 10                	mov    %edx,(%eax)
+801048db:	8b 45 0c             	mov    0xc(%ebp),%eax
+801048de:	89 10                	mov    %edx,(%eax)
   return 0;
 }
-80104770:	83 c4 20             	add    $0x20,%esp
+801048e0:	83 c4 20             	add    $0x20,%esp
   return 0;
-80104773:	31 c0                	xor    %eax,%eax
-}
-80104775:	5b                   	pop    %ebx
-80104776:	5e                   	pop    %esi
-80104777:	5d                   	pop    %ebp
-80104778:	c3                   	ret    
-80104779:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80104780:	83 c4 20             	add    $0x20,%esp
+801048e3:	31 c0                	xor    %eax,%eax
+}
+801048e5:	5b                   	pop    %ebx
+801048e6:	5e                   	pop    %esi
+801048e7:	5d                   	pop    %ebp
+801048e8:	c3                   	ret    
+801048e9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801048f0:	83 c4 20             	add    $0x20,%esp
     return -1;
-80104783:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801048f3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 }
-80104788:	5b                   	pop    %ebx
-80104789:	5e                   	pop    %esi
-8010478a:	5d                   	pop    %ebp
-8010478b:	c3                   	ret    
-8010478c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801048f8:	5b                   	pop    %ebx
+801048f9:	5e                   	pop    %esi
+801048fa:	5d                   	pop    %ebp
+801048fb:	c3                   	ret    
+801048fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
-80104790 <argstr>:
+80104900 <argstr>:
 // Check that the pointer is valid and the string is nul-terminated.
 // (There is no shared writable memory, so the string can't change
 // between this check and being used by the kernel.)
 int
 argstr(int n, char **pp)
 {
-80104790:	55                   	push   %ebp
-80104791:	89 e5                	mov    %esp,%ebp
-80104793:	83 ec 28             	sub    $0x28,%esp
+80104900:	55                   	push   %ebp
+80104901:	89 e5                	mov    %esp,%ebp
+80104903:	83 ec 28             	sub    $0x28,%esp
   int addr;
   if(argint(n, &addr) < 0)
-80104796:	8d 45 f4             	lea    -0xc(%ebp),%eax
-80104799:	89 44 24 04          	mov    %eax,0x4(%esp)
-8010479d:	8b 45 08             	mov    0x8(%ebp),%eax
-801047a0:	89 04 24             	mov    %eax,(%esp)
-801047a3:	e8 58 ff ff ff       	call   80104700 <argint>
-801047a8:	85 c0                	test   %eax,%eax
-801047aa:	78 14                	js     801047c0 <argstr+0x30>
+80104906:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80104909:	89 44 24 04          	mov    %eax,0x4(%esp)
+8010490d:	8b 45 08             	mov    0x8(%ebp),%eax
+80104910:	89 04 24             	mov    %eax,(%esp)
+80104913:	e8 58 ff ff ff       	call   80104870 <argint>
+80104918:	85 c0                	test   %eax,%eax
+8010491a:	78 14                	js     80104930 <argstr+0x30>
     return -1;
   return fetchstr(addr, pp);
-801047ac:	8b 45 0c             	mov    0xc(%ebp),%eax
-801047af:	89 44 24 04          	mov    %eax,0x4(%esp)
-801047b3:	8b 45 f4             	mov    -0xc(%ebp),%eax
-801047b6:	89 04 24             	mov    %eax,(%esp)
-801047b9:	e8 e2 fe ff ff       	call   801046a0 <fetchstr>
-}
-801047be:	c9                   	leave  
-801047bf:	c3                   	ret    
+8010491c:	8b 45 0c             	mov    0xc(%ebp),%eax
+8010491f:	89 44 24 04          	mov    %eax,0x4(%esp)
+80104923:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80104926:	89 04 24             	mov    %eax,(%esp)
+80104929:	e8 e2 fe ff ff       	call   80104810 <fetchstr>
+}
+8010492e:	c9                   	leave  
+8010492f:	c3                   	ret    
     return -1;
-801047c0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80104930:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 }
-801047c5:	c9                   	leave  
-801047c6:	c3                   	ret    
-801047c7:	89 f6                	mov    %esi,%esi
-801047c9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+80104935:	c9                   	leave  
+80104936:	c3                   	ret    
+80104937:	89 f6                	mov    %esi,%esi
+80104939:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
 
-801047d0 <syscall>:
-[SYS_waitpid] sys_waitpid,
+80104940 <syscall>:
+[SYS_getPrior] sys_getPrior,
 };
 
 void
 syscall(void)
 {
-801047d0:	55                   	push   %ebp
-801047d1:	89 e5                	mov    %esp,%ebp
-801047d3:	56                   	push   %esi
-801047d4:	53                   	push   %ebx
-801047d5:	83 ec 10             	sub    $0x10,%esp
+80104940:	55                   	push   %ebp
+80104941:	89 e5                	mov    %esp,%ebp
+80104943:	56                   	push   %esi
+80104944:	53                   	push   %ebx
+80104945:	83 ec 10             	sub    $0x10,%esp
   int num;
   struct proc *curproc = myproc();
-801047d8:	e8 c3 ee ff ff       	call   801036a0 <myproc>
+80104948:	e8 53 ed ff ff       	call   801036a0 <myproc>
 
   num = curproc->tf->eax;
-801047dd:	8b 70 18             	mov    0x18(%eax),%esi
+8010494d:	8b 70 18             	mov    0x18(%eax),%esi
   struct proc *curproc = myproc();
-801047e0:	89 c3                	mov    %eax,%ebx
+80104950:	89 c3                	mov    %eax,%ebx
   num = curproc->tf->eax;
-801047e2:	8b 46 1c             	mov    0x1c(%esi),%eax
+80104952:	8b 46 1c             	mov    0x1c(%esi),%eax
   if(num > 0 && num < NELEM(syscalls) && syscalls[num]) {
-801047e5:	8d 50 ff             	lea    -0x1(%eax),%edx
-801047e8:	83 fa 15             	cmp    $0x15,%edx
-801047eb:	77 1b                	ja     80104808 <syscall+0x38>
-801047ed:	8b 14 85 00 75 10 80 	mov    -0x7fef8b00(,%eax,4),%edx
-801047f4:	85 d2                	test   %edx,%edx
-801047f6:	74 10                	je     80104808 <syscall+0x38>
+80104955:	8d 50 ff             	lea    -0x1(%eax),%edx
+80104958:	83 fa 17             	cmp    $0x17,%edx
+8010495b:	77 1b                	ja     80104978 <syscall+0x38>
+8010495d:	8b 14 85 20 77 10 80 	mov    -0x7fef88e0(,%eax,4),%edx
+80104964:	85 d2                	test   %edx,%edx
+80104966:	74 10                	je     80104978 <syscall+0x38>
     curproc->tf->eax = syscalls[num]();
-801047f8:	ff d2                	call   *%edx
-801047fa:	89 46 1c             	mov    %eax,0x1c(%esi)
+80104968:	ff d2                	call   *%edx
+8010496a:	89 46 1c             	mov    %eax,0x1c(%esi)
   } else {
     cprintf("%d %s: unknown sys call %d\n",
             curproc->pid, curproc->name, num);
     curproc->tf->eax = -1;
   }
 }
-801047fd:	83 c4 10             	add    $0x10,%esp
-80104800:	5b                   	pop    %ebx
-80104801:	5e                   	pop    %esi
-80104802:	5d                   	pop    %ebp
-80104803:	c3                   	ret    
-80104804:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010496d:	83 c4 10             	add    $0x10,%esp
+80104970:	5b                   	pop    %ebx
+80104971:	5e                   	pop    %esi
+80104972:	5d                   	pop    %ebp
+80104973:	c3                   	ret    
+80104974:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     cprintf("%d %s: unknown sys call %d\n",
-80104808:	89 44 24 0c          	mov    %eax,0xc(%esp)
+80104978:	89 44 24 0c          	mov    %eax,0xc(%esp)
             curproc->pid, curproc->name, num);
-8010480c:	8d 43 6c             	lea    0x6c(%ebx),%eax
-8010480f:	89 44 24 08          	mov    %eax,0x8(%esp)
+8010497c:	8d 43 6c             	lea    0x6c(%ebx),%eax
+8010497f:	89 44 24 08          	mov    %eax,0x8(%esp)
     cprintf("%d %s: unknown sys call %d\n",
-80104813:	8b 43 10             	mov    0x10(%ebx),%eax
-80104816:	c7 04 24 d1 74 10 80 	movl   $0x801074d1,(%esp)
-8010481d:	89 44 24 04          	mov    %eax,0x4(%esp)
-80104821:	e8 2a be ff ff       	call   80100650 <cprintf>
+80104983:	8b 43 10             	mov    0x10(%ebx),%eax
+80104986:	c7 04 24 fd 76 10 80 	movl   $0x801076fd,(%esp)
+8010498d:	89 44 24 04          	mov    %eax,0x4(%esp)
+80104991:	e8 ba bc ff ff       	call   80100650 <cprintf>
     curproc->tf->eax = -1;
-80104826:	8b 43 18             	mov    0x18(%ebx),%eax
-80104829:	c7 40 1c ff ff ff ff 	movl   $0xffffffff,0x1c(%eax)
-}
-80104830:	83 c4 10             	add    $0x10,%esp
-80104833:	5b                   	pop    %ebx
-80104834:	5e                   	pop    %esi
-80104835:	5d                   	pop    %ebp
-80104836:	c3                   	ret    
-80104837:	66 90                	xchg   %ax,%ax
-80104839:	66 90                	xchg   %ax,%ax
-8010483b:	66 90                	xchg   %ax,%ax
-8010483d:	66 90                	xchg   %ax,%ax
-8010483f:	90                   	nop
-
-80104840 <fdalloc>:
+80104996:	8b 43 18             	mov    0x18(%ebx),%eax
+80104999:	c7 40 1c ff ff ff ff 	movl   $0xffffffff,0x1c(%eax)
+}
+801049a0:	83 c4 10             	add    $0x10,%esp
+801049a3:	5b                   	pop    %ebx
+801049a4:	5e                   	pop    %esi
+801049a5:	5d                   	pop    %ebp
+801049a6:	c3                   	ret    
+801049a7:	66 90                	xchg   %ax,%ax
+801049a9:	66 90                	xchg   %ax,%ax
+801049ab:	66 90                	xchg   %ax,%ax
+801049ad:	66 90                	xchg   %ax,%ax
+801049af:	90                   	nop
+
+801049b0 <fdalloc>:
 
 // Allocate a file descriptor for the given file.
 // Takes over file reference from caller on success.
 static int
 fdalloc(struct file *f)
 {
-80104840:	55                   	push   %ebp
-80104841:	89 e5                	mov    %esp,%ebp
-80104843:	53                   	push   %ebx
-80104844:	89 c3                	mov    %eax,%ebx
-80104846:	83 ec 04             	sub    $0x4,%esp
+801049b0:	55                   	push   %ebp
+801049b1:	89 e5                	mov    %esp,%ebp
+801049b3:	53                   	push   %ebx
+801049b4:	89 c3                	mov    %eax,%ebx
+801049b6:	83 ec 04             	sub    $0x4,%esp
   int fd;
   struct proc *curproc = myproc();
-80104849:	e8 52 ee ff ff       	call   801036a0 <myproc>
+801049b9:	e8 e2 ec ff ff       	call   801036a0 <myproc>
 
   for(fd = 0; fd < NOFILE; fd++){
-8010484e:	31 d2                	xor    %edx,%edx
+801049be:	31 d2                	xor    %edx,%edx
     if(curproc->ofile[fd] == 0){
-80104850:	8b 4c 90 28          	mov    0x28(%eax,%edx,4),%ecx
-80104854:	85 c9                	test   %ecx,%ecx
-80104856:	74 18                	je     80104870 <fdalloc+0x30>
+801049c0:	8b 4c 90 28          	mov    0x28(%eax,%edx,4),%ecx
+801049c4:	85 c9                	test   %ecx,%ecx
+801049c6:	74 18                	je     801049e0 <fdalloc+0x30>
   for(fd = 0; fd < NOFILE; fd++){
-80104858:	83 c2 01             	add    $0x1,%edx
-8010485b:	83 fa 10             	cmp    $0x10,%edx
-8010485e:	75 f0                	jne    80104850 <fdalloc+0x10>
+801049c8:	83 c2 01             	add    $0x1,%edx
+801049cb:	83 fa 10             	cmp    $0x10,%edx
+801049ce:	75 f0                	jne    801049c0 <fdalloc+0x10>
       curproc->ofile[fd] = f;
       return fd;
     }
   }
   return -1;
 }
-80104860:	83 c4 04             	add    $0x4,%esp
+801049d0:	83 c4 04             	add    $0x4,%esp
   return -1;
-80104863:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801049d3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 }
-80104868:	5b                   	pop    %ebx
-80104869:	5d                   	pop    %ebp
-8010486a:	c3                   	ret    
-8010486b:	90                   	nop
-8010486c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801049d8:	5b                   	pop    %ebx
+801049d9:	5d                   	pop    %ebp
+801049da:	c3                   	ret    
+801049db:	90                   	nop
+801049dc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
       curproc->ofile[fd] = f;
-80104870:	89 5c 90 28          	mov    %ebx,0x28(%eax,%edx,4)
+801049e0:	89 5c 90 28          	mov    %ebx,0x28(%eax,%edx,4)
 }
-80104874:	83 c4 04             	add    $0x4,%esp
+801049e4:	83 c4 04             	add    $0x4,%esp
       return fd;
-80104877:	89 d0                	mov    %edx,%eax
+801049e7:	89 d0                	mov    %edx,%eax
 }
-80104879:	5b                   	pop    %ebx
-8010487a:	5d                   	pop    %ebp
-8010487b:	c3                   	ret    
-8010487c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801049e9:	5b                   	pop    %ebx
+801049ea:	5d                   	pop    %ebp
+801049eb:	c3                   	ret    
+801049ec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
-80104880 <create>:
+801049f0 <create>:
   return -1;
 }
 
 static struct inode*
 create(char *path, short type, short major, short minor)
 {
-80104880:	55                   	push   %ebp
-80104881:	89 e5                	mov    %esp,%ebp
-80104883:	57                   	push   %edi
-80104884:	56                   	push   %esi
-80104885:	53                   	push   %ebx
-80104886:	83 ec 3c             	sub    $0x3c,%esp
-80104889:	89 4d d0             	mov    %ecx,-0x30(%ebp)
-8010488c:	8b 4d 08             	mov    0x8(%ebp),%ecx
+801049f0:	55                   	push   %ebp
+801049f1:	89 e5                	mov    %esp,%ebp
+801049f3:	57                   	push   %edi
+801049f4:	56                   	push   %esi
+801049f5:	53                   	push   %ebx
+801049f6:	83 ec 3c             	sub    $0x3c,%esp
+801049f9:	89 4d d0             	mov    %ecx,-0x30(%ebp)
+801049fc:	8b 4d 08             	mov    0x8(%ebp),%ecx
   struct inode *ip, *dp;
   char name[DIRSIZ];
 
   if((dp = nameiparent(path, name)) == 0)
-8010488f:	8d 5d da             	lea    -0x26(%ebp),%ebx
-80104892:	89 5c 24 04          	mov    %ebx,0x4(%esp)
-80104896:	89 04 24             	mov    %eax,(%esp)
+801049ff:	8d 5d da             	lea    -0x26(%ebp),%ebx
+80104a02:	89 5c 24 04          	mov    %ebx,0x4(%esp)
+80104a06:	89 04 24             	mov    %eax,(%esp)
 {
-80104899:	89 55 d4             	mov    %edx,-0x2c(%ebp)
-8010489c:	89 4d cc             	mov    %ecx,-0x34(%ebp)
+80104a09:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+80104a0c:	89 4d cc             	mov    %ecx,-0x34(%ebp)
   if((dp = nameiparent(path, name)) == 0)
-8010489f:	e8 7c d6 ff ff       	call   80101f20 <nameiparent>
-801048a4:	85 c0                	test   %eax,%eax
-801048a6:	89 c7                	mov    %eax,%edi
-801048a8:	0f 84 da 00 00 00    	je     80104988 <create+0x108>
+80104a0f:	e8 0c d5 ff ff       	call   80101f20 <nameiparent>
+80104a14:	85 c0                	test   %eax,%eax
+80104a16:	89 c7                	mov    %eax,%edi
+80104a18:	0f 84 da 00 00 00    	je     80104af8 <create+0x108>
     return 0;
   ilock(dp);
-801048ae:	89 04 24             	mov    %eax,(%esp)
-801048b1:	e8 fa cd ff ff       	call   801016b0 <ilock>
+80104a1e:	89 04 24             	mov    %eax,(%esp)
+80104a21:	e8 8a cc ff ff       	call   801016b0 <ilock>
 
   if((ip = dirlookup(dp, name, 0)) != 0){
-801048b6:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
-801048bd:	00 
-801048be:	89 5c 24 04          	mov    %ebx,0x4(%esp)
-801048c2:	89 3c 24             	mov    %edi,(%esp)
-801048c5:	e8 f6 d2 ff ff       	call   80101bc0 <dirlookup>
-801048ca:	85 c0                	test   %eax,%eax
-801048cc:	89 c6                	mov    %eax,%esi
-801048ce:	74 40                	je     80104910 <create+0x90>
+80104a26:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
+80104a2d:	00 
+80104a2e:	89 5c 24 04          	mov    %ebx,0x4(%esp)
+80104a32:	89 3c 24             	mov    %edi,(%esp)
+80104a35:	e8 86 d1 ff ff       	call   80101bc0 <dirlookup>
+80104a3a:	85 c0                	test   %eax,%eax
+80104a3c:	89 c6                	mov    %eax,%esi
+80104a3e:	74 40                	je     80104a80 <create+0x90>
     iunlockput(dp);
-801048d0:	89 3c 24             	mov    %edi,(%esp)
-801048d3:	e8 38 d0 ff ff       	call   80101910 <iunlockput>
+80104a40:	89 3c 24             	mov    %edi,(%esp)
+80104a43:	e8 c8 ce ff ff       	call   80101910 <iunlockput>
     ilock(ip);
-801048d8:	89 34 24             	mov    %esi,(%esp)
-801048db:	e8 d0 cd ff ff       	call   801016b0 <ilock>
+80104a48:	89 34 24             	mov    %esi,(%esp)
+80104a4b:	e8 60 cc ff ff       	call   801016b0 <ilock>
     if(type == T_FILE && ip->type == T_FILE)
-801048e0:	66 83 7d d4 02       	cmpw   $0x2,-0x2c(%ebp)
-801048e5:	75 11                	jne    801048f8 <create+0x78>
-801048e7:	66 83 7e 50 02       	cmpw   $0x2,0x50(%esi)
-801048ec:	89 f0                	mov    %esi,%eax
-801048ee:	75 08                	jne    801048f8 <create+0x78>
+80104a50:	66 83 7d d4 02       	cmpw   $0x2,-0x2c(%ebp)
+80104a55:	75 11                	jne    80104a68 <create+0x78>
+80104a57:	66 83 7e 50 02       	cmpw   $0x2,0x50(%esi)
+80104a5c:	89 f0                	mov    %esi,%eax
+80104a5e:	75 08                	jne    80104a68 <create+0x78>
     panic("create: dirlink");
 
   iunlockput(dp);
 
   return ip;
 }
-801048f0:	83 c4 3c             	add    $0x3c,%esp
-801048f3:	5b                   	pop    %ebx
-801048f4:	5e                   	pop    %esi
-801048f5:	5f                   	pop    %edi
-801048f6:	5d                   	pop    %ebp
-801048f7:	c3                   	ret    
+80104a60:	83 c4 3c             	add    $0x3c,%esp
+80104a63:	5b                   	pop    %ebx
+80104a64:	5e                   	pop    %esi
+80104a65:	5f                   	pop    %edi
+80104a66:	5d                   	pop    %ebp
+80104a67:	c3                   	ret    
     iunlockput(ip);
-801048f8:	89 34 24             	mov    %esi,(%esp)
-801048fb:	e8 10 d0 ff ff       	call   80101910 <iunlockput>
+80104a68:	89 34 24             	mov    %esi,(%esp)
+80104a6b:	e8 a0 ce ff ff       	call   80101910 <iunlockput>
 }
-80104900:	83 c4 3c             	add    $0x3c,%esp
+80104a70:	83 c4 3c             	add    $0x3c,%esp
     return 0;
-80104903:	31 c0                	xor    %eax,%eax
-}
-80104905:	5b                   	pop    %ebx
-80104906:	5e                   	pop    %esi
-80104907:	5f                   	pop    %edi
-80104908:	5d                   	pop    %ebp
-80104909:	c3                   	ret    
-8010490a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80104a73:	31 c0                	xor    %eax,%eax
+}
+80104a75:	5b                   	pop    %ebx
+80104a76:	5e                   	pop    %esi
+80104a77:	5f                   	pop    %edi
+80104a78:	5d                   	pop    %ebp
+80104a79:	c3                   	ret    
+80104a7a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
   if((ip = ialloc(dp->dev, type)) == 0)
-80104910:	0f bf 45 d4          	movswl -0x2c(%ebp),%eax
-80104914:	89 44 24 04          	mov    %eax,0x4(%esp)
-80104918:	8b 07                	mov    (%edi),%eax
-8010491a:	89 04 24             	mov    %eax,(%esp)
-8010491d:	e8 fe cb ff ff       	call   80101520 <ialloc>
-80104922:	85 c0                	test   %eax,%eax
-80104924:	89 c6                	mov    %eax,%esi
-80104926:	0f 84 bf 00 00 00    	je     801049eb <create+0x16b>
+80104a80:	0f bf 45 d4          	movswl -0x2c(%ebp),%eax
+80104a84:	89 44 24 04          	mov    %eax,0x4(%esp)
+80104a88:	8b 07                	mov    (%edi),%eax
+80104a8a:	89 04 24             	mov    %eax,(%esp)
+80104a8d:	e8 8e ca ff ff       	call   80101520 <ialloc>
+80104a92:	85 c0                	test   %eax,%eax
+80104a94:	89 c6                	mov    %eax,%esi
+80104a96:	0f 84 bf 00 00 00    	je     80104b5b <create+0x16b>
   ilock(ip);
-8010492c:	89 04 24             	mov    %eax,(%esp)
-8010492f:	e8 7c cd ff ff       	call   801016b0 <ilock>
+80104a9c:	89 04 24             	mov    %eax,(%esp)
+80104a9f:	e8 0c cc ff ff       	call   801016b0 <ilock>
   ip->major = major;
-80104934:	0f b7 45 d0          	movzwl -0x30(%ebp),%eax
-80104938:	66 89 46 52          	mov    %ax,0x52(%esi)
+80104aa4:	0f b7 45 d0          	movzwl -0x30(%ebp),%eax
+80104aa8:	66 89 46 52          	mov    %ax,0x52(%esi)
   ip->minor = minor;
-8010493c:	0f b7 45 cc          	movzwl -0x34(%ebp),%eax
-80104940:	66 89 46 54          	mov    %ax,0x54(%esi)
+80104aac:	0f b7 45 cc          	movzwl -0x34(%ebp),%eax
+80104ab0:	66 89 46 54          	mov    %ax,0x54(%esi)
   ip->nlink = 1;
-80104944:	b8 01 00 00 00       	mov    $0x1,%eax
-80104949:	66 89 46 56          	mov    %ax,0x56(%esi)
+80104ab4:	b8 01 00 00 00       	mov    $0x1,%eax
+80104ab9:	66 89 46 56          	mov    %ax,0x56(%esi)
   iupdate(ip);
-8010494d:	89 34 24             	mov    %esi,(%esp)
-80104950:	e8 9b cc ff ff       	call   801015f0 <iupdate>
+80104abd:	89 34 24             	mov    %esi,(%esp)
+80104ac0:	e8 2b cb ff ff       	call   801015f0 <iupdate>
   if(type == T_DIR){  // Create . and .. entries.
-80104955:	66 83 7d d4 01       	cmpw   $0x1,-0x2c(%ebp)
-8010495a:	74 34                	je     80104990 <create+0x110>
+80104ac5:	66 83 7d d4 01       	cmpw   $0x1,-0x2c(%ebp)
+80104aca:	74 34                	je     80104b00 <create+0x110>
   if(dirlink(dp, name, ip->inum) < 0)
-8010495c:	8b 46 04             	mov    0x4(%esi),%eax
-8010495f:	89 5c 24 04          	mov    %ebx,0x4(%esp)
-80104963:	89 3c 24             	mov    %edi,(%esp)
-80104966:	89 44 24 08          	mov    %eax,0x8(%esp)
-8010496a:	e8 b1 d4 ff ff       	call   80101e20 <dirlink>
-8010496f:	85 c0                	test   %eax,%eax
-80104971:	78 6c                	js     801049df <create+0x15f>
+80104acc:	8b 46 04             	mov    0x4(%esi),%eax
+80104acf:	89 5c 24 04          	mov    %ebx,0x4(%esp)
+80104ad3:	89 3c 24             	mov    %edi,(%esp)
+80104ad6:	89 44 24 08          	mov    %eax,0x8(%esp)
+80104ada:	e8 41 d3 ff ff       	call   80101e20 <dirlink>
+80104adf:	85 c0                	test   %eax,%eax
+80104ae1:	78 6c                	js     80104b4f <create+0x15f>
   iunlockput(dp);
-80104973:	89 3c 24             	mov    %edi,(%esp)
-80104976:	e8 95 cf ff ff       	call   80101910 <iunlockput>
+80104ae3:	89 3c 24             	mov    %edi,(%esp)
+80104ae6:	e8 25 ce ff ff       	call   80101910 <iunlockput>
 }
-8010497b:	83 c4 3c             	add    $0x3c,%esp
+80104aeb:	83 c4 3c             	add    $0x3c,%esp
   return ip;
-8010497e:	89 f0                	mov    %esi,%eax
-}
-80104980:	5b                   	pop    %ebx
-80104981:	5e                   	pop    %esi
-80104982:	5f                   	pop    %edi
-80104983:	5d                   	pop    %ebp
-80104984:	c3                   	ret    
-80104985:	8d 76 00             	lea    0x0(%esi),%esi
+80104aee:	89 f0                	mov    %esi,%eax
+}
+80104af0:	5b                   	pop    %ebx
+80104af1:	5e                   	pop    %esi
+80104af2:	5f                   	pop    %edi
+80104af3:	5d                   	pop    %ebp
+80104af4:	c3                   	ret    
+80104af5:	8d 76 00             	lea    0x0(%esi),%esi
     return 0;
-80104988:	31 c0                	xor    %eax,%eax
-8010498a:	e9 61 ff ff ff       	jmp    801048f0 <create+0x70>
-8010498f:	90                   	nop
+80104af8:	31 c0                	xor    %eax,%eax
+80104afa:	e9 61 ff ff ff       	jmp    80104a60 <create+0x70>
+80104aff:	90                   	nop
     dp->nlink++;  // for ".."
-80104990:	66 83 47 56 01       	addw   $0x1,0x56(%edi)
+80104b00:	66 83 47 56 01       	addw   $0x1,0x56(%edi)
     iupdate(dp);
-80104995:	89 3c 24             	mov    %edi,(%esp)
-80104998:	e8 53 cc ff ff       	call   801015f0 <iupdate>
+80104b05:	89 3c 24             	mov    %edi,(%esp)
+80104b08:	e8 e3 ca ff ff       	call   801015f0 <iupdate>
     if(dirlink(ip, ".", ip->inum) < 0 || dirlink(ip, "..", dp->inum) < 0)
-8010499d:	8b 46 04             	mov    0x4(%esi),%eax
-801049a0:	c7 44 24 04 78 75 10 	movl   $0x80107578,0x4(%esp)
-801049a7:	80 
-801049a8:	89 34 24             	mov    %esi,(%esp)
-801049ab:	89 44 24 08          	mov    %eax,0x8(%esp)
-801049af:	e8 6c d4 ff ff       	call   80101e20 <dirlink>
-801049b4:	85 c0                	test   %eax,%eax
-801049b6:	78 1b                	js     801049d3 <create+0x153>
-801049b8:	8b 47 04             	mov    0x4(%edi),%eax
-801049bb:	c7 44 24 04 77 75 10 	movl   $0x80107577,0x4(%esp)
-801049c2:	80 
-801049c3:	89 34 24             	mov    %esi,(%esp)
-801049c6:	89 44 24 08          	mov    %eax,0x8(%esp)
-801049ca:	e8 51 d4 ff ff       	call   80101e20 <dirlink>
-801049cf:	85 c0                	test   %eax,%eax
-801049d1:	79 89                	jns    8010495c <create+0xdc>
+80104b0d:	8b 46 04             	mov    0x4(%esi),%eax
+80104b10:	c7 44 24 04 a0 77 10 	movl   $0x801077a0,0x4(%esp)
+80104b17:	80 
+80104b18:	89 34 24             	mov    %esi,(%esp)
+80104b1b:	89 44 24 08          	mov    %eax,0x8(%esp)
+80104b1f:	e8 fc d2 ff ff       	call   80101e20 <dirlink>
+80104b24:	85 c0                	test   %eax,%eax
+80104b26:	78 1b                	js     80104b43 <create+0x153>
+80104b28:	8b 47 04             	mov    0x4(%edi),%eax
+80104b2b:	c7 44 24 04 9f 77 10 	movl   $0x8010779f,0x4(%esp)
+80104b32:	80 
+80104b33:	89 34 24             	mov    %esi,(%esp)
+80104b36:	89 44 24 08          	mov    %eax,0x8(%esp)
+80104b3a:	e8 e1 d2 ff ff       	call   80101e20 <dirlink>
+80104b3f:	85 c0                	test   %eax,%eax
+80104b41:	79 89                	jns    80104acc <create+0xdc>
       panic("create dots");
-801049d3:	c7 04 24 6b 75 10 80 	movl   $0x8010756b,(%esp)
-801049da:	e8 81 b9 ff ff       	call   80100360 <panic>
+80104b43:	c7 04 24 93 77 10 80 	movl   $0x80107793,(%esp)
+80104b4a:	e8 11 b8 ff ff       	call   80100360 <panic>
     panic("create: dirlink");
-801049df:	c7 04 24 7a 75 10 80 	movl   $0x8010757a,(%esp)
-801049e6:	e8 75 b9 ff ff       	call   80100360 <panic>
+80104b4f:	c7 04 24 a2 77 10 80 	movl   $0x801077a2,(%esp)
+80104b56:	e8 05 b8 ff ff       	call   80100360 <panic>
     panic("create: ialloc");
-801049eb:	c7 04 24 5c 75 10 80 	movl   $0x8010755c,(%esp)
-801049f2:	e8 69 b9 ff ff       	call   80100360 <panic>
-801049f7:	89 f6                	mov    %esi,%esi
-801049f9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+80104b5b:	c7 04 24 84 77 10 80 	movl   $0x80107784,(%esp)
+80104b62:	e8 f9 b7 ff ff       	call   80100360 <panic>
+80104b67:	89 f6                	mov    %esi,%esi
+80104b69:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
 
-80104a00 <argfd.constprop.0>:
+80104b70 <argfd.constprop.0>:
 argfd(int n, int *pfd, struct file **pf)
-80104a00:	55                   	push   %ebp
-80104a01:	89 e5                	mov    %esp,%ebp
-80104a03:	56                   	push   %esi
-80104a04:	89 c6                	mov    %eax,%esi
-80104a06:	53                   	push   %ebx
-80104a07:	89 d3                	mov    %edx,%ebx
-80104a09:	83 ec 20             	sub    $0x20,%esp
+80104b70:	55                   	push   %ebp
+80104b71:	89 e5                	mov    %esp,%ebp
+80104b73:	56                   	push   %esi
+80104b74:	89 c6                	mov    %eax,%esi
+80104b76:	53                   	push   %ebx
+80104b77:	89 d3                	mov    %edx,%ebx
+80104b79:	83 ec 20             	sub    $0x20,%esp
   if(argint(n, &fd) < 0)
-80104a0c:	8d 45 f4             	lea    -0xc(%ebp),%eax
-80104a0f:	89 44 24 04          	mov    %eax,0x4(%esp)
-80104a13:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-80104a1a:	e8 e1 fc ff ff       	call   80104700 <argint>
-80104a1f:	85 c0                	test   %eax,%eax
-80104a21:	78 2d                	js     80104a50 <argfd.constprop.0+0x50>
+80104b7c:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80104b7f:	89 44 24 04          	mov    %eax,0x4(%esp)
+80104b83:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+80104b8a:	e8 e1 fc ff ff       	call   80104870 <argint>
+80104b8f:	85 c0                	test   %eax,%eax
+80104b91:	78 2d                	js     80104bc0 <argfd.constprop.0+0x50>
   if(fd < 0 || fd >= NOFILE || (f=myproc()->ofile[fd]) == 0)
-80104a23:	83 7d f4 0f          	cmpl   $0xf,-0xc(%ebp)
-80104a27:	77 27                	ja     80104a50 <argfd.constprop.0+0x50>
-80104a29:	e8 72 ec ff ff       	call   801036a0 <myproc>
-80104a2e:	8b 55 f4             	mov    -0xc(%ebp),%edx
-80104a31:	8b 44 90 28          	mov    0x28(%eax,%edx,4),%eax
-80104a35:	85 c0                	test   %eax,%eax
-80104a37:	74 17                	je     80104a50 <argfd.constprop.0+0x50>
+80104b93:	83 7d f4 0f          	cmpl   $0xf,-0xc(%ebp)
+80104b97:	77 27                	ja     80104bc0 <argfd.constprop.0+0x50>
+80104b99:	e8 02 eb ff ff       	call   801036a0 <myproc>
+80104b9e:	8b 55 f4             	mov    -0xc(%ebp),%edx
+80104ba1:	8b 44 90 28          	mov    0x28(%eax,%edx,4),%eax
+80104ba5:	85 c0                	test   %eax,%eax
+80104ba7:	74 17                	je     80104bc0 <argfd.constprop.0+0x50>
   if(pfd)
-80104a39:	85 f6                	test   %esi,%esi
-80104a3b:	74 02                	je     80104a3f <argfd.constprop.0+0x3f>
+80104ba9:	85 f6                	test   %esi,%esi
+80104bab:	74 02                	je     80104baf <argfd.constprop.0+0x3f>
     *pfd = fd;
-80104a3d:	89 16                	mov    %edx,(%esi)
+80104bad:	89 16                	mov    %edx,(%esi)
   if(pf)
-80104a3f:	85 db                	test   %ebx,%ebx
-80104a41:	74 1d                	je     80104a60 <argfd.constprop.0+0x60>
+80104baf:	85 db                	test   %ebx,%ebx
+80104bb1:	74 1d                	je     80104bd0 <argfd.constprop.0+0x60>
     *pf = f;
-80104a43:	89 03                	mov    %eax,(%ebx)
+80104bb3:	89 03                	mov    %eax,(%ebx)
   return 0;
-80104a45:	31 c0                	xor    %eax,%eax
-}
-80104a47:	83 c4 20             	add    $0x20,%esp
-80104a4a:	5b                   	pop    %ebx
-80104a4b:	5e                   	pop    %esi
-80104a4c:	5d                   	pop    %ebp
-80104a4d:	c3                   	ret    
-80104a4e:	66 90                	xchg   %ax,%ax
-80104a50:	83 c4 20             	add    $0x20,%esp
+80104bb5:	31 c0                	xor    %eax,%eax
+}
+80104bb7:	83 c4 20             	add    $0x20,%esp
+80104bba:	5b                   	pop    %ebx
+80104bbb:	5e                   	pop    %esi
+80104bbc:	5d                   	pop    %ebp
+80104bbd:	c3                   	ret    
+80104bbe:	66 90                	xchg   %ax,%ax
+80104bc0:	83 c4 20             	add    $0x20,%esp
     return -1;
-80104a53:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80104bc3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 }
-80104a58:	5b                   	pop    %ebx
-80104a59:	5e                   	pop    %esi
-80104a5a:	5d                   	pop    %ebp
-80104a5b:	c3                   	ret    
-80104a5c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80104bc8:	5b                   	pop    %ebx
+80104bc9:	5e                   	pop    %esi
+80104bca:	5d                   	pop    %ebp
+80104bcb:	c3                   	ret    
+80104bcc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   return 0;
-80104a60:	31 c0                	xor    %eax,%eax
-80104a62:	eb e3                	jmp    80104a47 <argfd.constprop.0+0x47>
-80104a64:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-80104a6a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+80104bd0:	31 c0                	xor    %eax,%eax
+80104bd2:	eb e3                	jmp    80104bb7 <argfd.constprop.0+0x47>
+80104bd4:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80104bda:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
 
-80104a70 <sys_dup>:
+80104be0 <sys_dup>:
 {
-80104a70:	55                   	push   %ebp
+80104be0:	55                   	push   %ebp
   if(argfd(0, 0, &f) < 0)
-80104a71:	31 c0                	xor    %eax,%eax
+80104be1:	31 c0                	xor    %eax,%eax
 {
-80104a73:	89 e5                	mov    %esp,%ebp
-80104a75:	53                   	push   %ebx
-80104a76:	83 ec 24             	sub    $0x24,%esp
+80104be3:	89 e5                	mov    %esp,%ebp
+80104be5:	53                   	push   %ebx
+80104be6:	83 ec 24             	sub    $0x24,%esp
   if(argfd(0, 0, &f) < 0)
-80104a79:	8d 55 f4             	lea    -0xc(%ebp),%edx
-80104a7c:	e8 7f ff ff ff       	call   80104a00 <argfd.constprop.0>
-80104a81:	85 c0                	test   %eax,%eax
-80104a83:	78 23                	js     80104aa8 <sys_dup+0x38>
+80104be9:	8d 55 f4             	lea    -0xc(%ebp),%edx
+80104bec:	e8 7f ff ff ff       	call   80104b70 <argfd.constprop.0>
+80104bf1:	85 c0                	test   %eax,%eax
+80104bf3:	78 23                	js     80104c18 <sys_dup+0x38>
   if((fd=fdalloc(f)) < 0)
-80104a85:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80104a88:	e8 b3 fd ff ff       	call   80104840 <fdalloc>
-80104a8d:	85 c0                	test   %eax,%eax
-80104a8f:	89 c3                	mov    %eax,%ebx
-80104a91:	78 15                	js     80104aa8 <sys_dup+0x38>
+80104bf5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80104bf8:	e8 b3 fd ff ff       	call   801049b0 <fdalloc>
+80104bfd:	85 c0                	test   %eax,%eax
+80104bff:	89 c3                	mov    %eax,%ebx
+80104c01:	78 15                	js     80104c18 <sys_dup+0x38>
   filedup(f);
-80104a93:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80104a96:	89 04 24             	mov    %eax,(%esp)
-80104a99:	e8 42 c3 ff ff       	call   80100de0 <filedup>
+80104c03:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80104c06:	89 04 24             	mov    %eax,(%esp)
+80104c09:	e8 d2 c1 ff ff       	call   80100de0 <filedup>
   return fd;
-80104a9e:	89 d8                	mov    %ebx,%eax
+80104c0e:	89 d8                	mov    %ebx,%eax
 }
-80104aa0:	83 c4 24             	add    $0x24,%esp
-80104aa3:	5b                   	pop    %ebx
-80104aa4:	5d                   	pop    %ebp
-80104aa5:	c3                   	ret    
-80104aa6:	66 90                	xchg   %ax,%ax
+80104c10:	83 c4 24             	add    $0x24,%esp
+80104c13:	5b                   	pop    %ebx
+80104c14:	5d                   	pop    %ebp
+80104c15:	c3                   	ret    
+80104c16:	66 90                	xchg   %ax,%ax
     return -1;
-80104aa8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80104aad:	eb f1                	jmp    80104aa0 <sys_dup+0x30>
-80104aaf:	90                   	nop
+80104c18:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80104c1d:	eb f1                	jmp    80104c10 <sys_dup+0x30>
+80104c1f:	90                   	nop
 
-80104ab0 <sys_read>:
+80104c20 <sys_read>:
 {
-80104ab0:	55                   	push   %ebp
+80104c20:	55                   	push   %ebp
   if(argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argptr(1, &p, n) < 0)
-80104ab1:	31 c0                	xor    %eax,%eax
+80104c21:	31 c0                	xor    %eax,%eax
 {
-80104ab3:	89 e5                	mov    %esp,%ebp
-80104ab5:	83 ec 28             	sub    $0x28,%esp
+80104c23:	89 e5                	mov    %esp,%ebp
+80104c25:	83 ec 28             	sub    $0x28,%esp
   if(argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argptr(1, &p, n) < 0)
-80104ab8:	8d 55 ec             	lea    -0x14(%ebp),%edx
-80104abb:	e8 40 ff ff ff       	call   80104a00 <argfd.constprop.0>
-80104ac0:	85 c0                	test   %eax,%eax
-80104ac2:	78 54                	js     80104b18 <sys_read+0x68>
-80104ac4:	8d 45 f0             	lea    -0x10(%ebp),%eax
-80104ac7:	89 44 24 04          	mov    %eax,0x4(%esp)
-80104acb:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-80104ad2:	e8 29 fc ff ff       	call   80104700 <argint>
-80104ad7:	85 c0                	test   %eax,%eax
-80104ad9:	78 3d                	js     80104b18 <sys_read+0x68>
-80104adb:	8b 45 f0             	mov    -0x10(%ebp),%eax
-80104ade:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-80104ae5:	89 44 24 08          	mov    %eax,0x8(%esp)
-80104ae9:	8d 45 f4             	lea    -0xc(%ebp),%eax
-80104aec:	89 44 24 04          	mov    %eax,0x4(%esp)
-80104af0:	e8 3b fc ff ff       	call   80104730 <argptr>
-80104af5:	85 c0                	test   %eax,%eax
-80104af7:	78 1f                	js     80104b18 <sys_read+0x68>
+80104c28:	8d 55 ec             	lea    -0x14(%ebp),%edx
+80104c2b:	e8 40 ff ff ff       	call   80104b70 <argfd.constprop.0>
+80104c30:	85 c0                	test   %eax,%eax
+80104c32:	78 54                	js     80104c88 <sys_read+0x68>
+80104c34:	8d 45 f0             	lea    -0x10(%ebp),%eax
+80104c37:	89 44 24 04          	mov    %eax,0x4(%esp)
+80104c3b:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
+80104c42:	e8 29 fc ff ff       	call   80104870 <argint>
+80104c47:	85 c0                	test   %eax,%eax
+80104c49:	78 3d                	js     80104c88 <sys_read+0x68>
+80104c4b:	8b 45 f0             	mov    -0x10(%ebp),%eax
+80104c4e:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+80104c55:	89 44 24 08          	mov    %eax,0x8(%esp)
+80104c59:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80104c5c:	89 44 24 04          	mov    %eax,0x4(%esp)
+80104c60:	e8 3b fc ff ff       	call   801048a0 <argptr>
+80104c65:	85 c0                	test   %eax,%eax
+80104c67:	78 1f                	js     80104c88 <sys_read+0x68>
   return fileread(f, p, n);
-80104af9:	8b 45 f0             	mov    -0x10(%ebp),%eax
-80104afc:	89 44 24 08          	mov    %eax,0x8(%esp)
-80104b00:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80104b03:	89 44 24 04          	mov    %eax,0x4(%esp)
-80104b07:	8b 45 ec             	mov    -0x14(%ebp),%eax
-80104b0a:	89 04 24             	mov    %eax,(%esp)
-80104b0d:	e8 2e c4 ff ff       	call   80100f40 <fileread>
-}
-80104b12:	c9                   	leave  
-80104b13:	c3                   	ret    
-80104b14:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80104c69:	8b 45 f0             	mov    -0x10(%ebp),%eax
+80104c6c:	89 44 24 08          	mov    %eax,0x8(%esp)
+80104c70:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80104c73:	89 44 24 04          	mov    %eax,0x4(%esp)
+80104c77:	8b 45 ec             	mov    -0x14(%ebp),%eax
+80104c7a:	89 04 24             	mov    %eax,(%esp)
+80104c7d:	e8 be c2 ff ff       	call   80100f40 <fileread>
+}
+80104c82:	c9                   	leave  
+80104c83:	c3                   	ret    
+80104c84:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     return -1;
-80104b18:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80104c88:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 }
-80104b1d:	c9                   	leave  
-80104b1e:	c3                   	ret    
-80104b1f:	90                   	nop
+80104c8d:	c9                   	leave  
+80104c8e:	c3                   	ret    
+80104c8f:	90                   	nop
 
-80104b20 <sys_write>:
+80104c90 <sys_write>:
 {
-80104b20:	55                   	push   %ebp
+80104c90:	55                   	push   %ebp
   if(argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argptr(1, &p, n) < 0)
-80104b21:	31 c0                	xor    %eax,%eax
+80104c91:	31 c0                	xor    %eax,%eax
 {
-80104b23:	89 e5                	mov    %esp,%ebp
-80104b25:	83 ec 28             	sub    $0x28,%esp
+80104c93:	89 e5                	mov    %esp,%ebp
+80104c95:	83 ec 28             	sub    $0x28,%esp
   if(argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argptr(1, &p, n) < 0)
-80104b28:	8d 55 ec             	lea    -0x14(%ebp),%edx
-80104b2b:	e8 d0 fe ff ff       	call   80104a00 <argfd.constprop.0>
-80104b30:	85 c0                	test   %eax,%eax
-80104b32:	78 54                	js     80104b88 <sys_write+0x68>
-80104b34:	8d 45 f0             	lea    -0x10(%ebp),%eax
-80104b37:	89 44 24 04          	mov    %eax,0x4(%esp)
-80104b3b:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-80104b42:	e8 b9 fb ff ff       	call   80104700 <argint>
-80104b47:	85 c0                	test   %eax,%eax
-80104b49:	78 3d                	js     80104b88 <sys_write+0x68>
-80104b4b:	8b 45 f0             	mov    -0x10(%ebp),%eax
-80104b4e:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-80104b55:	89 44 24 08          	mov    %eax,0x8(%esp)
-80104b59:	8d 45 f4             	lea    -0xc(%ebp),%eax
-80104b5c:	89 44 24 04          	mov    %eax,0x4(%esp)
-80104b60:	e8 cb fb ff ff       	call   80104730 <argptr>
-80104b65:	85 c0                	test   %eax,%eax
-80104b67:	78 1f                	js     80104b88 <sys_write+0x68>
+80104c98:	8d 55 ec             	lea    -0x14(%ebp),%edx
+80104c9b:	e8 d0 fe ff ff       	call   80104b70 <argfd.constprop.0>
+80104ca0:	85 c0                	test   %eax,%eax
+80104ca2:	78 54                	js     80104cf8 <sys_write+0x68>
+80104ca4:	8d 45 f0             	lea    -0x10(%ebp),%eax
+80104ca7:	89 44 24 04          	mov    %eax,0x4(%esp)
+80104cab:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
+80104cb2:	e8 b9 fb ff ff       	call   80104870 <argint>
+80104cb7:	85 c0                	test   %eax,%eax
+80104cb9:	78 3d                	js     80104cf8 <sys_write+0x68>
+80104cbb:	8b 45 f0             	mov    -0x10(%ebp),%eax
+80104cbe:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+80104cc5:	89 44 24 08          	mov    %eax,0x8(%esp)
+80104cc9:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80104ccc:	89 44 24 04          	mov    %eax,0x4(%esp)
+80104cd0:	e8 cb fb ff ff       	call   801048a0 <argptr>
+80104cd5:	85 c0                	test   %eax,%eax
+80104cd7:	78 1f                	js     80104cf8 <sys_write+0x68>
   return filewrite(f, p, n);
-80104b69:	8b 45 f0             	mov    -0x10(%ebp),%eax
-80104b6c:	89 44 24 08          	mov    %eax,0x8(%esp)
-80104b70:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80104b73:	89 44 24 04          	mov    %eax,0x4(%esp)
-80104b77:	8b 45 ec             	mov    -0x14(%ebp),%eax
-80104b7a:	89 04 24             	mov    %eax,(%esp)
-80104b7d:	e8 5e c4 ff ff       	call   80100fe0 <filewrite>
-}
-80104b82:	c9                   	leave  
-80104b83:	c3                   	ret    
-80104b84:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80104cd9:	8b 45 f0             	mov    -0x10(%ebp),%eax
+80104cdc:	89 44 24 08          	mov    %eax,0x8(%esp)
+80104ce0:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80104ce3:	89 44 24 04          	mov    %eax,0x4(%esp)
+80104ce7:	8b 45 ec             	mov    -0x14(%ebp),%eax
+80104cea:	89 04 24             	mov    %eax,(%esp)
+80104ced:	e8 ee c2 ff ff       	call   80100fe0 <filewrite>
+}
+80104cf2:	c9                   	leave  
+80104cf3:	c3                   	ret    
+80104cf4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     return -1;
-80104b88:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80104cf8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 }
-80104b8d:	c9                   	leave  
-80104b8e:	c3                   	ret    
-80104b8f:	90                   	nop
+80104cfd:	c9                   	leave  
+80104cfe:	c3                   	ret    
+80104cff:	90                   	nop
 
-80104b90 <sys_close>:
+80104d00 <sys_close>:
 {
-80104b90:	55                   	push   %ebp
-80104b91:	89 e5                	mov    %esp,%ebp
-80104b93:	83 ec 28             	sub    $0x28,%esp
+80104d00:	55                   	push   %ebp
+80104d01:	89 e5                	mov    %esp,%ebp
+80104d03:	83 ec 28             	sub    $0x28,%esp
   if(argfd(0, &fd, &f) < 0)
-80104b96:	8d 55 f4             	lea    -0xc(%ebp),%edx
-80104b99:	8d 45 f0             	lea    -0x10(%ebp),%eax
-80104b9c:	e8 5f fe ff ff       	call   80104a00 <argfd.constprop.0>
-80104ba1:	85 c0                	test   %eax,%eax
-80104ba3:	78 23                	js     80104bc8 <sys_close+0x38>
+80104d06:	8d 55 f4             	lea    -0xc(%ebp),%edx
+80104d09:	8d 45 f0             	lea    -0x10(%ebp),%eax
+80104d0c:	e8 5f fe ff ff       	call   80104b70 <argfd.constprop.0>
+80104d11:	85 c0                	test   %eax,%eax
+80104d13:	78 23                	js     80104d38 <sys_close+0x38>
   myproc()->ofile[fd] = 0;
-80104ba5:	e8 f6 ea ff ff       	call   801036a0 <myproc>
-80104baa:	8b 55 f0             	mov    -0x10(%ebp),%edx
-80104bad:	c7 44 90 28 00 00 00 	movl   $0x0,0x28(%eax,%edx,4)
-80104bb4:	00 
+80104d15:	e8 86 e9 ff ff       	call   801036a0 <myproc>
+80104d1a:	8b 55 f0             	mov    -0x10(%ebp),%edx
+80104d1d:	c7 44 90 28 00 00 00 	movl   $0x0,0x28(%eax,%edx,4)
+80104d24:	00 
   fileclose(f);
-80104bb5:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80104bb8:	89 04 24             	mov    %eax,(%esp)
-80104bbb:	e8 70 c2 ff ff       	call   80100e30 <fileclose>
+80104d25:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80104d28:	89 04 24             	mov    %eax,(%esp)
+80104d2b:	e8 00 c1 ff ff       	call   80100e30 <fileclose>
   return 0;
-80104bc0:	31 c0                	xor    %eax,%eax
+80104d30:	31 c0                	xor    %eax,%eax
 }
-80104bc2:	c9                   	leave  
-80104bc3:	c3                   	ret    
-80104bc4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80104d32:	c9                   	leave  
+80104d33:	c3                   	ret    
+80104d34:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     return -1;
-80104bc8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80104d38:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 }
-80104bcd:	c9                   	leave  
-80104bce:	c3                   	ret    
-80104bcf:	90                   	nop
+80104d3d:	c9                   	leave  
+80104d3e:	c3                   	ret    
+80104d3f:	90                   	nop
 
-80104bd0 <sys_fstat>:
+80104d40 <sys_fstat>:
 {
-80104bd0:	55                   	push   %ebp
+80104d40:	55                   	push   %ebp
   if(argfd(0, 0, &f) < 0 || argptr(1, (void*)&st, sizeof(*st)) < 0)
-80104bd1:	31 c0                	xor    %eax,%eax
+80104d41:	31 c0                	xor    %eax,%eax
 {
-80104bd3:	89 e5                	mov    %esp,%ebp
-80104bd5:	83 ec 28             	sub    $0x28,%esp
+80104d43:	89 e5                	mov    %esp,%ebp
+80104d45:	83 ec 28             	sub    $0x28,%esp
   if(argfd(0, 0, &f) < 0 || argptr(1, (void*)&st, sizeof(*st)) < 0)
-80104bd8:	8d 55 f0             	lea    -0x10(%ebp),%edx
-80104bdb:	e8 20 fe ff ff       	call   80104a00 <argfd.constprop.0>
-80104be0:	85 c0                	test   %eax,%eax
-80104be2:	78 34                	js     80104c18 <sys_fstat+0x48>
-80104be4:	8d 45 f4             	lea    -0xc(%ebp),%eax
-80104be7:	c7 44 24 08 14 00 00 	movl   $0x14,0x8(%esp)
-80104bee:	00 
-80104bef:	89 44 24 04          	mov    %eax,0x4(%esp)
-80104bf3:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-80104bfa:	e8 31 fb ff ff       	call   80104730 <argptr>
-80104bff:	85 c0                	test   %eax,%eax
-80104c01:	78 15                	js     80104c18 <sys_fstat+0x48>
+80104d48:	8d 55 f0             	lea    -0x10(%ebp),%edx
+80104d4b:	e8 20 fe ff ff       	call   80104b70 <argfd.constprop.0>
+80104d50:	85 c0                	test   %eax,%eax
+80104d52:	78 34                	js     80104d88 <sys_fstat+0x48>
+80104d54:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80104d57:	c7 44 24 08 14 00 00 	movl   $0x14,0x8(%esp)
+80104d5e:	00 
+80104d5f:	89 44 24 04          	mov    %eax,0x4(%esp)
+80104d63:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+80104d6a:	e8 31 fb ff ff       	call   801048a0 <argptr>
+80104d6f:	85 c0                	test   %eax,%eax
+80104d71:	78 15                	js     80104d88 <sys_fstat+0x48>
   return filestat(f, st);
-80104c03:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80104c06:	89 44 24 04          	mov    %eax,0x4(%esp)
-80104c0a:	8b 45 f0             	mov    -0x10(%ebp),%eax
-80104c0d:	89 04 24             	mov    %eax,(%esp)
-80104c10:	e8 db c2 ff ff       	call   80100ef0 <filestat>
-}
-80104c15:	c9                   	leave  
-80104c16:	c3                   	ret    
-80104c17:	90                   	nop
+80104d73:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80104d76:	89 44 24 04          	mov    %eax,0x4(%esp)
+80104d7a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+80104d7d:	89 04 24             	mov    %eax,(%esp)
+80104d80:	e8 6b c1 ff ff       	call   80100ef0 <filestat>
+}
+80104d85:	c9                   	leave  
+80104d86:	c3                   	ret    
+80104d87:	90                   	nop
     return -1;
-80104c18:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80104d88:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 }
-80104c1d:	c9                   	leave  
-80104c1e:	c3                   	ret    
-80104c1f:	90                   	nop
+80104d8d:	c9                   	leave  
+80104d8e:	c3                   	ret    
+80104d8f:	90                   	nop
 
-80104c20 <sys_link>:
+80104d90 <sys_link>:
 {
-80104c20:	55                   	push   %ebp
-80104c21:	89 e5                	mov    %esp,%ebp
-80104c23:	57                   	push   %edi
-80104c24:	56                   	push   %esi
-80104c25:	53                   	push   %ebx
-80104c26:	83 ec 3c             	sub    $0x3c,%esp
+80104d90:	55                   	push   %ebp
+80104d91:	89 e5                	mov    %esp,%ebp
+80104d93:	57                   	push   %edi
+80104d94:	56                   	push   %esi
+80104d95:	53                   	push   %ebx
+80104d96:	83 ec 3c             	sub    $0x3c,%esp
   if(argstr(0, &old) < 0 || argstr(1, &new) < 0)
-80104c29:	8d 45 d4             	lea    -0x2c(%ebp),%eax
-80104c2c:	89 44 24 04          	mov    %eax,0x4(%esp)
-80104c30:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-80104c37:	e8 54 fb ff ff       	call   80104790 <argstr>
-80104c3c:	85 c0                	test   %eax,%eax
-80104c3e:	0f 88 e6 00 00 00    	js     80104d2a <sys_link+0x10a>
-80104c44:	8d 45 d0             	lea    -0x30(%ebp),%eax
-80104c47:	89 44 24 04          	mov    %eax,0x4(%esp)
-80104c4b:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-80104c52:	e8 39 fb ff ff       	call   80104790 <argstr>
-80104c57:	85 c0                	test   %eax,%eax
-80104c59:	0f 88 cb 00 00 00    	js     80104d2a <sys_link+0x10a>
+80104d99:	8d 45 d4             	lea    -0x2c(%ebp),%eax
+80104d9c:	89 44 24 04          	mov    %eax,0x4(%esp)
+80104da0:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+80104da7:	e8 54 fb ff ff       	call   80104900 <argstr>
+80104dac:	85 c0                	test   %eax,%eax
+80104dae:	0f 88 e6 00 00 00    	js     80104e9a <sys_link+0x10a>
+80104db4:	8d 45 d0             	lea    -0x30(%ebp),%eax
+80104db7:	89 44 24 04          	mov    %eax,0x4(%esp)
+80104dbb:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+80104dc2:	e8 39 fb ff ff       	call   80104900 <argstr>
+80104dc7:	85 c0                	test   %eax,%eax
+80104dc9:	0f 88 cb 00 00 00    	js     80104e9a <sys_link+0x10a>
   begin_op();
-80104c5f:	e8 ac de ff ff       	call   80102b10 <begin_op>
+80104dcf:	e8 3c dd ff ff       	call   80102b10 <begin_op>
   if((ip = namei(old)) == 0){
-80104c64:	8b 45 d4             	mov    -0x2c(%ebp),%eax
-80104c67:	89 04 24             	mov    %eax,(%esp)
-80104c6a:	e8 91 d2 ff ff       	call   80101f00 <namei>
-80104c6f:	85 c0                	test   %eax,%eax
-80104c71:	89 c3                	mov    %eax,%ebx
-80104c73:	0f 84 ac 00 00 00    	je     80104d25 <sys_link+0x105>
+80104dd4:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+80104dd7:	89 04 24             	mov    %eax,(%esp)
+80104dda:	e8 21 d1 ff ff       	call   80101f00 <namei>
+80104ddf:	85 c0                	test   %eax,%eax
+80104de1:	89 c3                	mov    %eax,%ebx
+80104de3:	0f 84 ac 00 00 00    	je     80104e95 <sys_link+0x105>
   ilock(ip);
-80104c79:	89 04 24             	mov    %eax,(%esp)
-80104c7c:	e8 2f ca ff ff       	call   801016b0 <ilock>
+80104de9:	89 04 24             	mov    %eax,(%esp)
+80104dec:	e8 bf c8 ff ff       	call   801016b0 <ilock>
   if(ip->type == T_DIR){
-80104c81:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
-80104c86:	0f 84 91 00 00 00    	je     80104d1d <sys_link+0xfd>
+80104df1:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
+80104df6:	0f 84 91 00 00 00    	je     80104e8d <sys_link+0xfd>
   ip->nlink++;
-80104c8c:	66 83 43 56 01       	addw   $0x1,0x56(%ebx)
+80104dfc:	66 83 43 56 01       	addw   $0x1,0x56(%ebx)
   if((dp = nameiparent(new, name)) == 0)
-80104c91:	8d 7d da             	lea    -0x26(%ebp),%edi
+80104e01:	8d 7d da             	lea    -0x26(%ebp),%edi
   iupdate(ip);
-80104c94:	89 1c 24             	mov    %ebx,(%esp)
-80104c97:	e8 54 c9 ff ff       	call   801015f0 <iupdate>
+80104e04:	89 1c 24             	mov    %ebx,(%esp)
+80104e07:	e8 e4 c7 ff ff       	call   801015f0 <iupdate>
   iunlock(ip);
-80104c9c:	89 1c 24             	mov    %ebx,(%esp)
-80104c9f:	e8 ec ca ff ff       	call   80101790 <iunlock>
+80104e0c:	89 1c 24             	mov    %ebx,(%esp)
+80104e0f:	e8 7c c9 ff ff       	call   80101790 <iunlock>
   if((dp = nameiparent(new, name)) == 0)
-80104ca4:	8b 45 d0             	mov    -0x30(%ebp),%eax
-80104ca7:	89 7c 24 04          	mov    %edi,0x4(%esp)
-80104cab:	89 04 24             	mov    %eax,(%esp)
-80104cae:	e8 6d d2 ff ff       	call   80101f20 <nameiparent>
-80104cb3:	85 c0                	test   %eax,%eax
-80104cb5:	89 c6                	mov    %eax,%esi
-80104cb7:	74 4f                	je     80104d08 <sys_link+0xe8>
+80104e14:	8b 45 d0             	mov    -0x30(%ebp),%eax
+80104e17:	89 7c 24 04          	mov    %edi,0x4(%esp)
+80104e1b:	89 04 24             	mov    %eax,(%esp)
+80104e1e:	e8 fd d0 ff ff       	call   80101f20 <nameiparent>
+80104e23:	85 c0                	test   %eax,%eax
+80104e25:	89 c6                	mov    %eax,%esi
+80104e27:	74 4f                	je     80104e78 <sys_link+0xe8>
   ilock(dp);
-80104cb9:	89 04 24             	mov    %eax,(%esp)
-80104cbc:	e8 ef c9 ff ff       	call   801016b0 <ilock>
+80104e29:	89 04 24             	mov    %eax,(%esp)
+80104e2c:	e8 7f c8 ff ff       	call   801016b0 <ilock>
   if(dp->dev != ip->dev || dirlink(dp, name, ip->inum) < 0){
-80104cc1:	8b 03                	mov    (%ebx),%eax
-80104cc3:	39 06                	cmp    %eax,(%esi)
-80104cc5:	75 39                	jne    80104d00 <sys_link+0xe0>
-80104cc7:	8b 43 04             	mov    0x4(%ebx),%eax
-80104cca:	89 7c 24 04          	mov    %edi,0x4(%esp)
-80104cce:	89 34 24             	mov    %esi,(%esp)
-80104cd1:	89 44 24 08          	mov    %eax,0x8(%esp)
-80104cd5:	e8 46 d1 ff ff       	call   80101e20 <dirlink>
-80104cda:	85 c0                	test   %eax,%eax
-80104cdc:	78 22                	js     80104d00 <sys_link+0xe0>
+80104e31:	8b 03                	mov    (%ebx),%eax
+80104e33:	39 06                	cmp    %eax,(%esi)
+80104e35:	75 39                	jne    80104e70 <sys_link+0xe0>
+80104e37:	8b 43 04             	mov    0x4(%ebx),%eax
+80104e3a:	89 7c 24 04          	mov    %edi,0x4(%esp)
+80104e3e:	89 34 24             	mov    %esi,(%esp)
+80104e41:	89 44 24 08          	mov    %eax,0x8(%esp)
+80104e45:	e8 d6 cf ff ff       	call   80101e20 <dirlink>
+80104e4a:	85 c0                	test   %eax,%eax
+80104e4c:	78 22                	js     80104e70 <sys_link+0xe0>
   iunlockput(dp);
-80104cde:	89 34 24             	mov    %esi,(%esp)
-80104ce1:	e8 2a cc ff ff       	call   80101910 <iunlockput>
+80104e4e:	89 34 24             	mov    %esi,(%esp)
+80104e51:	e8 ba ca ff ff       	call   80101910 <iunlockput>
   iput(ip);
-80104ce6:	89 1c 24             	mov    %ebx,(%esp)
-80104ce9:	e8 e2 ca ff ff       	call   801017d0 <iput>
+80104e56:	89 1c 24             	mov    %ebx,(%esp)
+80104e59:	e8 72 c9 ff ff       	call   801017d0 <iput>
   end_op();
-80104cee:	e8 8d de ff ff       	call   80102b80 <end_op>
+80104e5e:	e8 1d dd ff ff       	call   80102b80 <end_op>
 }
-80104cf3:	83 c4 3c             	add    $0x3c,%esp
+80104e63:	83 c4 3c             	add    $0x3c,%esp
   return 0;
-80104cf6:	31 c0                	xor    %eax,%eax
-}
-80104cf8:	5b                   	pop    %ebx
-80104cf9:	5e                   	pop    %esi
-80104cfa:	5f                   	pop    %edi
-80104cfb:	5d                   	pop    %ebp
-80104cfc:	c3                   	ret    
-80104cfd:	8d 76 00             	lea    0x0(%esi),%esi
+80104e66:	31 c0                	xor    %eax,%eax
+}
+80104e68:	5b                   	pop    %ebx
+80104e69:	5e                   	pop    %esi
+80104e6a:	5f                   	pop    %edi
+80104e6b:	5d                   	pop    %ebp
+80104e6c:	c3                   	ret    
+80104e6d:	8d 76 00             	lea    0x0(%esi),%esi
     iunlockput(dp);
-80104d00:	89 34 24             	mov    %esi,(%esp)
-80104d03:	e8 08 cc ff ff       	call   80101910 <iunlockput>
+80104e70:	89 34 24             	mov    %esi,(%esp)
+80104e73:	e8 98 ca ff ff       	call   80101910 <iunlockput>
   ilock(ip);
-80104d08:	89 1c 24             	mov    %ebx,(%esp)
-80104d0b:	e8 a0 c9 ff ff       	call   801016b0 <ilock>
+80104e78:	89 1c 24             	mov    %ebx,(%esp)
+80104e7b:	e8 30 c8 ff ff       	call   801016b0 <ilock>
   ip->nlink--;
-80104d10:	66 83 6b 56 01       	subw   $0x1,0x56(%ebx)
+80104e80:	66 83 6b 56 01       	subw   $0x1,0x56(%ebx)
   iupdate(ip);
-80104d15:	89 1c 24             	mov    %ebx,(%esp)
-80104d18:	e8 d3 c8 ff ff       	call   801015f0 <iupdate>
+80104e85:	89 1c 24             	mov    %ebx,(%esp)
+80104e88:	e8 63 c7 ff ff       	call   801015f0 <iupdate>
   iunlockput(ip);
-80104d1d:	89 1c 24             	mov    %ebx,(%esp)
-80104d20:	e8 eb cb ff ff       	call   80101910 <iunlockput>
+80104e8d:	89 1c 24             	mov    %ebx,(%esp)
+80104e90:	e8 7b ca ff ff       	call   80101910 <iunlockput>
   end_op();
-80104d25:	e8 56 de ff ff       	call   80102b80 <end_op>
+80104e95:	e8 e6 dc ff ff       	call   80102b80 <end_op>
 }
-80104d2a:	83 c4 3c             	add    $0x3c,%esp
+80104e9a:	83 c4 3c             	add    $0x3c,%esp
   return -1;
-80104d2d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-}
-80104d32:	5b                   	pop    %ebx
-80104d33:	5e                   	pop    %esi
-80104d34:	5f                   	pop    %edi
-80104d35:	5d                   	pop    %ebp
-80104d36:	c3                   	ret    
-80104d37:	89 f6                	mov    %esi,%esi
-80104d39:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
-
-80104d40 <sys_unlink>:
-{
-80104d40:	55                   	push   %ebp
-80104d41:	89 e5                	mov    %esp,%ebp
-80104d43:	57                   	push   %edi
-80104d44:	56                   	push   %esi
-80104d45:	53                   	push   %ebx
-80104d46:	83 ec 5c             	sub    $0x5c,%esp
+80104e9d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80104ea2:	5b                   	pop    %ebx
+80104ea3:	5e                   	pop    %esi
+80104ea4:	5f                   	pop    %edi
+80104ea5:	5d                   	pop    %ebp
+80104ea6:	c3                   	ret    
+80104ea7:	89 f6                	mov    %esi,%esi
+80104ea9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80104eb0 <sys_unlink>:
+{
+80104eb0:	55                   	push   %ebp
+80104eb1:	89 e5                	mov    %esp,%ebp
+80104eb3:	57                   	push   %edi
+80104eb4:	56                   	push   %esi
+80104eb5:	53                   	push   %ebx
+80104eb6:	83 ec 5c             	sub    $0x5c,%esp
   if(argstr(0, &path) < 0)
-80104d49:	8d 45 c0             	lea    -0x40(%ebp),%eax
-80104d4c:	89 44 24 04          	mov    %eax,0x4(%esp)
-80104d50:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-80104d57:	e8 34 fa ff ff       	call   80104790 <argstr>
-80104d5c:	85 c0                	test   %eax,%eax
-80104d5e:	0f 88 76 01 00 00    	js     80104eda <sys_unlink+0x19a>
+80104eb9:	8d 45 c0             	lea    -0x40(%ebp),%eax
+80104ebc:	89 44 24 04          	mov    %eax,0x4(%esp)
+80104ec0:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+80104ec7:	e8 34 fa ff ff       	call   80104900 <argstr>
+80104ecc:	85 c0                	test   %eax,%eax
+80104ece:	0f 88 76 01 00 00    	js     8010504a <sys_unlink+0x19a>
   begin_op();
-80104d64:	e8 a7 dd ff ff       	call   80102b10 <begin_op>
+80104ed4:	e8 37 dc ff ff       	call   80102b10 <begin_op>
   if((dp = nameiparent(path, name)) == 0){
-80104d69:	8b 45 c0             	mov    -0x40(%ebp),%eax
-80104d6c:	8d 5d ca             	lea    -0x36(%ebp),%ebx
-80104d6f:	89 5c 24 04          	mov    %ebx,0x4(%esp)
-80104d73:	89 04 24             	mov    %eax,(%esp)
-80104d76:	e8 a5 d1 ff ff       	call   80101f20 <nameiparent>
-80104d7b:	85 c0                	test   %eax,%eax
-80104d7d:	89 45 b4             	mov    %eax,-0x4c(%ebp)
-80104d80:	0f 84 4f 01 00 00    	je     80104ed5 <sys_unlink+0x195>
+80104ed9:	8b 45 c0             	mov    -0x40(%ebp),%eax
+80104edc:	8d 5d ca             	lea    -0x36(%ebp),%ebx
+80104edf:	89 5c 24 04          	mov    %ebx,0x4(%esp)
+80104ee3:	89 04 24             	mov    %eax,(%esp)
+80104ee6:	e8 35 d0 ff ff       	call   80101f20 <nameiparent>
+80104eeb:	85 c0                	test   %eax,%eax
+80104eed:	89 45 b4             	mov    %eax,-0x4c(%ebp)
+80104ef0:	0f 84 4f 01 00 00    	je     80105045 <sys_unlink+0x195>
   ilock(dp);
-80104d86:	8b 75 b4             	mov    -0x4c(%ebp),%esi
-80104d89:	89 34 24             	mov    %esi,(%esp)
-80104d8c:	e8 1f c9 ff ff       	call   801016b0 <ilock>
+80104ef6:	8b 75 b4             	mov    -0x4c(%ebp),%esi
+80104ef9:	89 34 24             	mov    %esi,(%esp)
+80104efc:	e8 af c7 ff ff       	call   801016b0 <ilock>
   if(namecmp(name, ".") == 0 || namecmp(name, "..") == 0)
-80104d91:	c7 44 24 04 78 75 10 	movl   $0x80107578,0x4(%esp)
-80104d98:	80 
-80104d99:	89 1c 24             	mov    %ebx,(%esp)
-80104d9c:	e8 ef cd ff ff       	call   80101b90 <namecmp>
-80104da1:	85 c0                	test   %eax,%eax
-80104da3:	0f 84 21 01 00 00    	je     80104eca <sys_unlink+0x18a>
-80104da9:	c7 44 24 04 77 75 10 	movl   $0x80107577,0x4(%esp)
-80104db0:	80 
-80104db1:	89 1c 24             	mov    %ebx,(%esp)
-80104db4:	e8 d7 cd ff ff       	call   80101b90 <namecmp>
-80104db9:	85 c0                	test   %eax,%eax
-80104dbb:	0f 84 09 01 00 00    	je     80104eca <sys_unlink+0x18a>
+80104f01:	c7 44 24 04 a0 77 10 	movl   $0x801077a0,0x4(%esp)
+80104f08:	80 
+80104f09:	89 1c 24             	mov    %ebx,(%esp)
+80104f0c:	e8 7f cc ff ff       	call   80101b90 <namecmp>
+80104f11:	85 c0                	test   %eax,%eax
+80104f13:	0f 84 21 01 00 00    	je     8010503a <sys_unlink+0x18a>
+80104f19:	c7 44 24 04 9f 77 10 	movl   $0x8010779f,0x4(%esp)
+80104f20:	80 
+80104f21:	89 1c 24             	mov    %ebx,(%esp)
+80104f24:	e8 67 cc ff ff       	call   80101b90 <namecmp>
+80104f29:	85 c0                	test   %eax,%eax
+80104f2b:	0f 84 09 01 00 00    	je     8010503a <sys_unlink+0x18a>
   if((ip = dirlookup(dp, name, &off)) == 0)
-80104dc1:	8d 45 c4             	lea    -0x3c(%ebp),%eax
-80104dc4:	89 5c 24 04          	mov    %ebx,0x4(%esp)
-80104dc8:	89 44 24 08          	mov    %eax,0x8(%esp)
-80104dcc:	89 34 24             	mov    %esi,(%esp)
-80104dcf:	e8 ec cd ff ff       	call   80101bc0 <dirlookup>
-80104dd4:	85 c0                	test   %eax,%eax
-80104dd6:	89 c3                	mov    %eax,%ebx
-80104dd8:	0f 84 ec 00 00 00    	je     80104eca <sys_unlink+0x18a>
+80104f31:	8d 45 c4             	lea    -0x3c(%ebp),%eax
+80104f34:	89 5c 24 04          	mov    %ebx,0x4(%esp)
+80104f38:	89 44 24 08          	mov    %eax,0x8(%esp)
+80104f3c:	89 34 24             	mov    %esi,(%esp)
+80104f3f:	e8 7c cc ff ff       	call   80101bc0 <dirlookup>
+80104f44:	85 c0                	test   %eax,%eax
+80104f46:	89 c3                	mov    %eax,%ebx
+80104f48:	0f 84 ec 00 00 00    	je     8010503a <sys_unlink+0x18a>
   ilock(ip);
-80104dde:	89 04 24             	mov    %eax,(%esp)
-80104de1:	e8 ca c8 ff ff       	call   801016b0 <ilock>
+80104f4e:	89 04 24             	mov    %eax,(%esp)
+80104f51:	e8 5a c7 ff ff       	call   801016b0 <ilock>
   if(ip->nlink < 1)
-80104de6:	66 83 7b 56 00       	cmpw   $0x0,0x56(%ebx)
-80104deb:	0f 8e 24 01 00 00    	jle    80104f15 <sys_unlink+0x1d5>
+80104f56:	66 83 7b 56 00       	cmpw   $0x0,0x56(%ebx)
+80104f5b:	0f 8e 24 01 00 00    	jle    80105085 <sys_unlink+0x1d5>
   if(ip->type == T_DIR && !isdirempty(ip)){
-80104df1:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
-80104df6:	8d 75 d8             	lea    -0x28(%ebp),%esi
-80104df9:	74 7d                	je     80104e78 <sys_unlink+0x138>
+80104f61:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
+80104f66:	8d 75 d8             	lea    -0x28(%ebp),%esi
+80104f69:	74 7d                	je     80104fe8 <sys_unlink+0x138>
   memset(&de, 0, sizeof(de));
-80104dfb:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
-80104e02:	00 
-80104e03:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
-80104e0a:	00 
-80104e0b:	89 34 24             	mov    %esi,(%esp)
-80104e0e:	e8 fd f5 ff ff       	call   80104410 <memset>
+80104f6b:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
+80104f72:	00 
+80104f73:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+80104f7a:	00 
+80104f7b:	89 34 24             	mov    %esi,(%esp)
+80104f7e:	e8 fd f5 ff ff       	call   80104580 <memset>
   if(writei(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
-80104e13:	8b 45 c4             	mov    -0x3c(%ebp),%eax
-80104e16:	c7 44 24 0c 10 00 00 	movl   $0x10,0xc(%esp)
-80104e1d:	00 
-80104e1e:	89 74 24 04          	mov    %esi,0x4(%esp)
-80104e22:	89 44 24 08          	mov    %eax,0x8(%esp)
-80104e26:	8b 45 b4             	mov    -0x4c(%ebp),%eax
-80104e29:	89 04 24             	mov    %eax,(%esp)
-80104e2c:	e8 2f cc ff ff       	call   80101a60 <writei>
-80104e31:	83 f8 10             	cmp    $0x10,%eax
-80104e34:	0f 85 cf 00 00 00    	jne    80104f09 <sys_unlink+0x1c9>
+80104f83:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+80104f86:	c7 44 24 0c 10 00 00 	movl   $0x10,0xc(%esp)
+80104f8d:	00 
+80104f8e:	89 74 24 04          	mov    %esi,0x4(%esp)
+80104f92:	89 44 24 08          	mov    %eax,0x8(%esp)
+80104f96:	8b 45 b4             	mov    -0x4c(%ebp),%eax
+80104f99:	89 04 24             	mov    %eax,(%esp)
+80104f9c:	e8 bf ca ff ff       	call   80101a60 <writei>
+80104fa1:	83 f8 10             	cmp    $0x10,%eax
+80104fa4:	0f 85 cf 00 00 00    	jne    80105079 <sys_unlink+0x1c9>
   if(ip->type == T_DIR){
-80104e3a:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
-80104e3f:	0f 84 a3 00 00 00    	je     80104ee8 <sys_unlink+0x1a8>
+80104faa:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
+80104faf:	0f 84 a3 00 00 00    	je     80105058 <sys_unlink+0x1a8>
   iunlockput(dp);
-80104e45:	8b 45 b4             	mov    -0x4c(%ebp),%eax
-80104e48:	89 04 24             	mov    %eax,(%esp)
-80104e4b:	e8 c0 ca ff ff       	call   80101910 <iunlockput>
+80104fb5:	8b 45 b4             	mov    -0x4c(%ebp),%eax
+80104fb8:	89 04 24             	mov    %eax,(%esp)
+80104fbb:	e8 50 c9 ff ff       	call   80101910 <iunlockput>
   ip->nlink--;
-80104e50:	66 83 6b 56 01       	subw   $0x1,0x56(%ebx)
+80104fc0:	66 83 6b 56 01       	subw   $0x1,0x56(%ebx)
   iupdate(ip);
-80104e55:	89 1c 24             	mov    %ebx,(%esp)
-80104e58:	e8 93 c7 ff ff       	call   801015f0 <iupdate>
+80104fc5:	89 1c 24             	mov    %ebx,(%esp)
+80104fc8:	e8 23 c6 ff ff       	call   801015f0 <iupdate>
   iunlockput(ip);
-80104e5d:	89 1c 24             	mov    %ebx,(%esp)
-80104e60:	e8 ab ca ff ff       	call   80101910 <iunlockput>
+80104fcd:	89 1c 24             	mov    %ebx,(%esp)
+80104fd0:	e8 3b c9 ff ff       	call   80101910 <iunlockput>
   end_op();
-80104e65:	e8 16 dd ff ff       	call   80102b80 <end_op>
+80104fd5:	e8 a6 db ff ff       	call   80102b80 <end_op>
 }
-80104e6a:	83 c4 5c             	add    $0x5c,%esp
+80104fda:	83 c4 5c             	add    $0x5c,%esp
   return 0;
-80104e6d:	31 c0                	xor    %eax,%eax
-}
-80104e6f:	5b                   	pop    %ebx
-80104e70:	5e                   	pop    %esi
-80104e71:	5f                   	pop    %edi
-80104e72:	5d                   	pop    %ebp
-80104e73:	c3                   	ret    
-80104e74:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80104fdd:	31 c0                	xor    %eax,%eax
+}
+80104fdf:	5b                   	pop    %ebx
+80104fe0:	5e                   	pop    %esi
+80104fe1:	5f                   	pop    %edi
+80104fe2:	5d                   	pop    %ebp
+80104fe3:	c3                   	ret    
+80104fe4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   for(off=2*sizeof(de); off<dp->size; off+=sizeof(de)){
-80104e78:	83 7b 58 20          	cmpl   $0x20,0x58(%ebx)
-80104e7c:	0f 86 79 ff ff ff    	jbe    80104dfb <sys_unlink+0xbb>
-80104e82:	bf 20 00 00 00       	mov    $0x20,%edi
-80104e87:	eb 15                	jmp    80104e9e <sys_unlink+0x15e>
-80104e89:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80104e90:	8d 57 10             	lea    0x10(%edi),%edx
-80104e93:	3b 53 58             	cmp    0x58(%ebx),%edx
-80104e96:	0f 83 5f ff ff ff    	jae    80104dfb <sys_unlink+0xbb>
-80104e9c:	89 d7                	mov    %edx,%edi
+80104fe8:	83 7b 58 20          	cmpl   $0x20,0x58(%ebx)
+80104fec:	0f 86 79 ff ff ff    	jbe    80104f6b <sys_unlink+0xbb>
+80104ff2:	bf 20 00 00 00       	mov    $0x20,%edi
+80104ff7:	eb 15                	jmp    8010500e <sys_unlink+0x15e>
+80104ff9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105000:	8d 57 10             	lea    0x10(%edi),%edx
+80105003:	3b 53 58             	cmp    0x58(%ebx),%edx
+80105006:	0f 83 5f ff ff ff    	jae    80104f6b <sys_unlink+0xbb>
+8010500c:	89 d7                	mov    %edx,%edi
     if(readi(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
-80104e9e:	c7 44 24 0c 10 00 00 	movl   $0x10,0xc(%esp)
-80104ea5:	00 
-80104ea6:	89 7c 24 08          	mov    %edi,0x8(%esp)
-80104eaa:	89 74 24 04          	mov    %esi,0x4(%esp)
-80104eae:	89 1c 24             	mov    %ebx,(%esp)
-80104eb1:	e8 aa ca ff ff       	call   80101960 <readi>
-80104eb6:	83 f8 10             	cmp    $0x10,%eax
-80104eb9:	75 42                	jne    80104efd <sys_unlink+0x1bd>
+8010500e:	c7 44 24 0c 10 00 00 	movl   $0x10,0xc(%esp)
+80105015:	00 
+80105016:	89 7c 24 08          	mov    %edi,0x8(%esp)
+8010501a:	89 74 24 04          	mov    %esi,0x4(%esp)
+8010501e:	89 1c 24             	mov    %ebx,(%esp)
+80105021:	e8 3a c9 ff ff       	call   80101960 <readi>
+80105026:	83 f8 10             	cmp    $0x10,%eax
+80105029:	75 42                	jne    8010506d <sys_unlink+0x1bd>
     if(de.inum != 0)
-80104ebb:	66 83 7d d8 00       	cmpw   $0x0,-0x28(%ebp)
-80104ec0:	74 ce                	je     80104e90 <sys_unlink+0x150>
+8010502b:	66 83 7d d8 00       	cmpw   $0x0,-0x28(%ebp)
+80105030:	74 ce                	je     80105000 <sys_unlink+0x150>
     iunlockput(ip);
-80104ec2:	89 1c 24             	mov    %ebx,(%esp)
-80104ec5:	e8 46 ca ff ff       	call   80101910 <iunlockput>
+80105032:	89 1c 24             	mov    %ebx,(%esp)
+80105035:	e8 d6 c8 ff ff       	call   80101910 <iunlockput>
   iunlockput(dp);
-80104eca:	8b 45 b4             	mov    -0x4c(%ebp),%eax
-80104ecd:	89 04 24             	mov    %eax,(%esp)
-80104ed0:	e8 3b ca ff ff       	call   80101910 <iunlockput>
+8010503a:	8b 45 b4             	mov    -0x4c(%ebp),%eax
+8010503d:	89 04 24             	mov    %eax,(%esp)
+80105040:	e8 cb c8 ff ff       	call   80101910 <iunlockput>
   end_op();
-80104ed5:	e8 a6 dc ff ff       	call   80102b80 <end_op>
+80105045:	e8 36 db ff ff       	call   80102b80 <end_op>
 }
-80104eda:	83 c4 5c             	add    $0x5c,%esp
+8010504a:	83 c4 5c             	add    $0x5c,%esp
   return -1;
-80104edd:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-}
-80104ee2:	5b                   	pop    %ebx
-80104ee3:	5e                   	pop    %esi
-80104ee4:	5f                   	pop    %edi
-80104ee5:	5d                   	pop    %ebp
-80104ee6:	c3                   	ret    
-80104ee7:	90                   	nop
+8010504d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80105052:	5b                   	pop    %ebx
+80105053:	5e                   	pop    %esi
+80105054:	5f                   	pop    %edi
+80105055:	5d                   	pop    %ebp
+80105056:	c3                   	ret    
+80105057:	90                   	nop
     dp->nlink--;
-80104ee8:	8b 45 b4             	mov    -0x4c(%ebp),%eax
-80104eeb:	66 83 68 56 01       	subw   $0x1,0x56(%eax)
+80105058:	8b 45 b4             	mov    -0x4c(%ebp),%eax
+8010505b:	66 83 68 56 01       	subw   $0x1,0x56(%eax)
     iupdate(dp);
-80104ef0:	89 04 24             	mov    %eax,(%esp)
-80104ef3:	e8 f8 c6 ff ff       	call   801015f0 <iupdate>
-80104ef8:	e9 48 ff ff ff       	jmp    80104e45 <sys_unlink+0x105>
+80105060:	89 04 24             	mov    %eax,(%esp)
+80105063:	e8 88 c5 ff ff       	call   801015f0 <iupdate>
+80105068:	e9 48 ff ff ff       	jmp    80104fb5 <sys_unlink+0x105>
       panic("isdirempty: readi");
-80104efd:	c7 04 24 9c 75 10 80 	movl   $0x8010759c,(%esp)
-80104f04:	e8 57 b4 ff ff       	call   80100360 <panic>
+8010506d:	c7 04 24 c4 77 10 80 	movl   $0x801077c4,(%esp)
+80105074:	e8 e7 b2 ff ff       	call   80100360 <panic>
     panic("unlink: writei");
-80104f09:	c7 04 24 ae 75 10 80 	movl   $0x801075ae,(%esp)
-80104f10:	e8 4b b4 ff ff       	call   80100360 <panic>
+80105079:	c7 04 24 d6 77 10 80 	movl   $0x801077d6,(%esp)
+80105080:	e8 db b2 ff ff       	call   80100360 <panic>
     panic("unlink: nlink < 1");
-80104f15:	c7 04 24 8a 75 10 80 	movl   $0x8010758a,(%esp)
-80104f1c:	e8 3f b4 ff ff       	call   80100360 <panic>
-80104f21:	eb 0d                	jmp    80104f30 <sys_open>
-80104f23:	90                   	nop
-80104f24:	90                   	nop
-80104f25:	90                   	nop
-80104f26:	90                   	nop
-80104f27:	90                   	nop
-80104f28:	90                   	nop
-80104f29:	90                   	nop
-80104f2a:	90                   	nop
-80104f2b:	90                   	nop
-80104f2c:	90                   	nop
-80104f2d:	90                   	nop
-80104f2e:	90                   	nop
-80104f2f:	90                   	nop
-
-80104f30 <sys_open>:
+80105085:	c7 04 24 b2 77 10 80 	movl   $0x801077b2,(%esp)
+8010508c:	e8 cf b2 ff ff       	call   80100360 <panic>
+80105091:	eb 0d                	jmp    801050a0 <sys_open>
+80105093:	90                   	nop
+80105094:	90                   	nop
+80105095:	90                   	nop
+80105096:	90                   	nop
+80105097:	90                   	nop
+80105098:	90                   	nop
+80105099:	90                   	nop
+8010509a:	90                   	nop
+8010509b:	90                   	nop
+8010509c:	90                   	nop
+8010509d:	90                   	nop
+8010509e:	90                   	nop
+8010509f:	90                   	nop
+
+801050a0 <sys_open>:
 
 int
 sys_open(void)
 {
-80104f30:	55                   	push   %ebp
-80104f31:	89 e5                	mov    %esp,%ebp
-80104f33:	57                   	push   %edi
-80104f34:	56                   	push   %esi
-80104f35:	53                   	push   %ebx
-80104f36:	83 ec 2c             	sub    $0x2c,%esp
+801050a0:	55                   	push   %ebp
+801050a1:	89 e5                	mov    %esp,%ebp
+801050a3:	57                   	push   %edi
+801050a4:	56                   	push   %esi
+801050a5:	53                   	push   %ebx
+801050a6:	83 ec 2c             	sub    $0x2c,%esp
   char *path;
   int fd, omode;
   struct file *f;
   struct inode *ip;
 
   if(argstr(0, &path) < 0 || argint(1, &omode) < 0)
-80104f39:	8d 45 e0             	lea    -0x20(%ebp),%eax
-80104f3c:	89 44 24 04          	mov    %eax,0x4(%esp)
-80104f40:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-80104f47:	e8 44 f8 ff ff       	call   80104790 <argstr>
-80104f4c:	85 c0                	test   %eax,%eax
-80104f4e:	0f 88 d1 00 00 00    	js     80105025 <sys_open+0xf5>
-80104f54:	8d 45 e4             	lea    -0x1c(%ebp),%eax
-80104f57:	89 44 24 04          	mov    %eax,0x4(%esp)
-80104f5b:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-80104f62:	e8 99 f7 ff ff       	call   80104700 <argint>
-80104f67:	85 c0                	test   %eax,%eax
-80104f69:	0f 88 b6 00 00 00    	js     80105025 <sys_open+0xf5>
+801050a9:	8d 45 e0             	lea    -0x20(%ebp),%eax
+801050ac:	89 44 24 04          	mov    %eax,0x4(%esp)
+801050b0:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+801050b7:	e8 44 f8 ff ff       	call   80104900 <argstr>
+801050bc:	85 c0                	test   %eax,%eax
+801050be:	0f 88 d1 00 00 00    	js     80105195 <sys_open+0xf5>
+801050c4:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+801050c7:	89 44 24 04          	mov    %eax,0x4(%esp)
+801050cb:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+801050d2:	e8 99 f7 ff ff       	call   80104870 <argint>
+801050d7:	85 c0                	test   %eax,%eax
+801050d9:	0f 88 b6 00 00 00    	js     80105195 <sys_open+0xf5>
     return -1;
 
   begin_op();
-80104f6f:	e8 9c db ff ff       	call   80102b10 <begin_op>
+801050df:	e8 2c da ff ff       	call   80102b10 <begin_op>
 
   if(omode & O_CREATE){
-80104f74:	f6 45 e5 02          	testb  $0x2,-0x1b(%ebp)
-80104f78:	0f 85 82 00 00 00    	jne    80105000 <sys_open+0xd0>
+801050e4:	f6 45 e5 02          	testb  $0x2,-0x1b(%ebp)
+801050e8:	0f 85 82 00 00 00    	jne    80105170 <sys_open+0xd0>
     if(ip == 0){
       end_op();
       return -1;
     }
   } else {
     if((ip = namei(path)) == 0){
-80104f7e:	8b 45 e0             	mov    -0x20(%ebp),%eax
-80104f81:	89 04 24             	mov    %eax,(%esp)
-80104f84:	e8 77 cf ff ff       	call   80101f00 <namei>
-80104f89:	85 c0                	test   %eax,%eax
-80104f8b:	89 c6                	mov    %eax,%esi
-80104f8d:	0f 84 8d 00 00 00    	je     80105020 <sys_open+0xf0>
+801050ee:	8b 45 e0             	mov    -0x20(%ebp),%eax
+801050f1:	89 04 24             	mov    %eax,(%esp)
+801050f4:	e8 07 ce ff ff       	call   80101f00 <namei>
+801050f9:	85 c0                	test   %eax,%eax
+801050fb:	89 c6                	mov    %eax,%esi
+801050fd:	0f 84 8d 00 00 00    	je     80105190 <sys_open+0xf0>
       end_op();
       return -1;
     }
     ilock(ip);
-80104f93:	89 04 24             	mov    %eax,(%esp)
-80104f96:	e8 15 c7 ff ff       	call   801016b0 <ilock>
+80105103:	89 04 24             	mov    %eax,(%esp)
+80105106:	e8 a5 c5 ff ff       	call   801016b0 <ilock>
     if(ip->type == T_DIR && omode != O_RDONLY){
-80104f9b:	66 83 7e 50 01       	cmpw   $0x1,0x50(%esi)
-80104fa0:	0f 84 92 00 00 00    	je     80105038 <sys_open+0x108>
+8010510b:	66 83 7e 50 01       	cmpw   $0x1,0x50(%esi)
+80105110:	0f 84 92 00 00 00    	je     801051a8 <sys_open+0x108>
       end_op();
       return -1;
     }
   }
 
   if((f = filealloc()) == 0 || (fd = fdalloc(f)) < 0){
-80104fa6:	e8 c5 bd ff ff       	call   80100d70 <filealloc>
-80104fab:	85 c0                	test   %eax,%eax
-80104fad:	89 c3                	mov    %eax,%ebx
-80104faf:	0f 84 93 00 00 00    	je     80105048 <sys_open+0x118>
-80104fb5:	e8 86 f8 ff ff       	call   80104840 <fdalloc>
-80104fba:	85 c0                	test   %eax,%eax
-80104fbc:	89 c7                	mov    %eax,%edi
-80104fbe:	0f 88 94 00 00 00    	js     80105058 <sys_open+0x128>
+80105116:	e8 55 bc ff ff       	call   80100d70 <filealloc>
+8010511b:	85 c0                	test   %eax,%eax
+8010511d:	89 c3                	mov    %eax,%ebx
+8010511f:	0f 84 93 00 00 00    	je     801051b8 <sys_open+0x118>
+80105125:	e8 86 f8 ff ff       	call   801049b0 <fdalloc>
+8010512a:	85 c0                	test   %eax,%eax
+8010512c:	89 c7                	mov    %eax,%edi
+8010512e:	0f 88 94 00 00 00    	js     801051c8 <sys_open+0x128>
       fileclose(f);
     iunlockput(ip);
     end_op();
     return -1;
   }
   iunlock(ip);
-80104fc4:	89 34 24             	mov    %esi,(%esp)
-80104fc7:	e8 c4 c7 ff ff       	call   80101790 <iunlock>
+80105134:	89 34 24             	mov    %esi,(%esp)
+80105137:	e8 54 c6 ff ff       	call   80101790 <iunlock>
   end_op();
-80104fcc:	e8 af db ff ff       	call   80102b80 <end_op>
+8010513c:	e8 3f da ff ff       	call   80102b80 <end_op>
 
   f->type = FD_INODE;
-80104fd1:	c7 03 02 00 00 00    	movl   $0x2,(%ebx)
+80105141:	c7 03 02 00 00 00    	movl   $0x2,(%ebx)
   f->ip = ip;
   f->off = 0;
   f->readable = !(omode & O_WRONLY);
-80104fd7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+80105147:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   f->ip = ip;
-80104fda:	89 73 10             	mov    %esi,0x10(%ebx)
+8010514a:	89 73 10             	mov    %esi,0x10(%ebx)
   f->off = 0;
-80104fdd:	c7 43 14 00 00 00 00 	movl   $0x0,0x14(%ebx)
+8010514d:	c7 43 14 00 00 00 00 	movl   $0x0,0x14(%ebx)
   f->readable = !(omode & O_WRONLY);
-80104fe4:	89 c2                	mov    %eax,%edx
-80104fe6:	83 e2 01             	and    $0x1,%edx
-80104fe9:	83 f2 01             	xor    $0x1,%edx
+80105154:	89 c2                	mov    %eax,%edx
+80105156:	83 e2 01             	and    $0x1,%edx
+80105159:	83 f2 01             	xor    $0x1,%edx
   f->writable = (omode & O_WRONLY) || (omode & O_RDWR);
-80104fec:	a8 03                	test   $0x3,%al
+8010515c:	a8 03                	test   $0x3,%al
   f->readable = !(omode & O_WRONLY);
-80104fee:	88 53 08             	mov    %dl,0x8(%ebx)
+8010515e:	88 53 08             	mov    %dl,0x8(%ebx)
   return fd;
-80104ff1:	89 f8                	mov    %edi,%eax
+80105161:	89 f8                	mov    %edi,%eax
   f->writable = (omode & O_WRONLY) || (omode & O_RDWR);
-80104ff3:	0f 95 43 09          	setne  0x9(%ebx)
-}
-80104ff7:	83 c4 2c             	add    $0x2c,%esp
-80104ffa:	5b                   	pop    %ebx
-80104ffb:	5e                   	pop    %esi
-80104ffc:	5f                   	pop    %edi
-80104ffd:	5d                   	pop    %ebp
-80104ffe:	c3                   	ret    
-80104fff:	90                   	nop
+80105163:	0f 95 43 09          	setne  0x9(%ebx)
+}
+80105167:	83 c4 2c             	add    $0x2c,%esp
+8010516a:	5b                   	pop    %ebx
+8010516b:	5e                   	pop    %esi
+8010516c:	5f                   	pop    %edi
+8010516d:	5d                   	pop    %ebp
+8010516e:	c3                   	ret    
+8010516f:	90                   	nop
     ip = create(path, T_FILE, 0, 0);
-80105000:	8b 45 e0             	mov    -0x20(%ebp),%eax
-80105003:	31 c9                	xor    %ecx,%ecx
-80105005:	ba 02 00 00 00       	mov    $0x2,%edx
-8010500a:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-80105011:	e8 6a f8 ff ff       	call   80104880 <create>
+80105170:	8b 45 e0             	mov    -0x20(%ebp),%eax
+80105173:	31 c9                	xor    %ecx,%ecx
+80105175:	ba 02 00 00 00       	mov    $0x2,%edx
+8010517a:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+80105181:	e8 6a f8 ff ff       	call   801049f0 <create>
     if(ip == 0){
-80105016:	85 c0                	test   %eax,%eax
+80105186:	85 c0                	test   %eax,%eax
     ip = create(path, T_FILE, 0, 0);
-80105018:	89 c6                	mov    %eax,%esi
+80105188:	89 c6                	mov    %eax,%esi
     if(ip == 0){
-8010501a:	75 8a                	jne    80104fa6 <sys_open+0x76>
-8010501c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010518a:	75 8a                	jne    80105116 <sys_open+0x76>
+8010518c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     end_op();
-80105020:	e8 5b db ff ff       	call   80102b80 <end_op>
+80105190:	e8 eb d9 ff ff       	call   80102b80 <end_op>
 }
-80105025:	83 c4 2c             	add    $0x2c,%esp
+80105195:	83 c4 2c             	add    $0x2c,%esp
     return -1;
-80105028:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-}
-8010502d:	5b                   	pop    %ebx
-8010502e:	5e                   	pop    %esi
-8010502f:	5f                   	pop    %edi
-80105030:	5d                   	pop    %ebp
-80105031:	c3                   	ret    
-80105032:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80105198:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+8010519d:	5b                   	pop    %ebx
+8010519e:	5e                   	pop    %esi
+8010519f:	5f                   	pop    %edi
+801051a0:	5d                   	pop    %ebp
+801051a1:	c3                   	ret    
+801051a2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     if(ip->type == T_DIR && omode != O_RDONLY){
-80105038:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-8010503b:	85 c0                	test   %eax,%eax
-8010503d:	0f 84 63 ff ff ff    	je     80104fa6 <sys_open+0x76>
-80105043:	90                   	nop
-80105044:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801051a8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+801051ab:	85 c0                	test   %eax,%eax
+801051ad:	0f 84 63 ff ff ff    	je     80105116 <sys_open+0x76>
+801051b3:	90                   	nop
+801051b4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     iunlockput(ip);
-80105048:	89 34 24             	mov    %esi,(%esp)
-8010504b:	e8 c0 c8 ff ff       	call   80101910 <iunlockput>
-80105050:	eb ce                	jmp    80105020 <sys_open+0xf0>
-80105052:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+801051b8:	89 34 24             	mov    %esi,(%esp)
+801051bb:	e8 50 c7 ff ff       	call   80101910 <iunlockput>
+801051c0:	eb ce                	jmp    80105190 <sys_open+0xf0>
+801051c2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
       fileclose(f);
-80105058:	89 1c 24             	mov    %ebx,(%esp)
-8010505b:	e8 d0 bd ff ff       	call   80100e30 <fileclose>
-80105060:	eb e6                	jmp    80105048 <sys_open+0x118>
-80105062:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80105069:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+801051c8:	89 1c 24             	mov    %ebx,(%esp)
+801051cb:	e8 60 bc ff ff       	call   80100e30 <fileclose>
+801051d0:	eb e6                	jmp    801051b8 <sys_open+0x118>
+801051d2:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801051d9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
 
-80105070 <sys_mkdir>:
+801051e0 <sys_mkdir>:
 
 int
 sys_mkdir(void)
 {
-80105070:	55                   	push   %ebp
-80105071:	89 e5                	mov    %esp,%ebp
-80105073:	83 ec 28             	sub    $0x28,%esp
+801051e0:	55                   	push   %ebp
+801051e1:	89 e5                	mov    %esp,%ebp
+801051e3:	83 ec 28             	sub    $0x28,%esp
   char *path;
   struct inode *ip;
 
   begin_op();
-80105076:	e8 95 da ff ff       	call   80102b10 <begin_op>
+801051e6:	e8 25 d9 ff ff       	call   80102b10 <begin_op>
   if(argstr(0, &path) < 0 || (ip = create(path, T_DIR, 0, 0)) == 0){
-8010507b:	8d 45 f4             	lea    -0xc(%ebp),%eax
-8010507e:	89 44 24 04          	mov    %eax,0x4(%esp)
-80105082:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-80105089:	e8 02 f7 ff ff       	call   80104790 <argstr>
-8010508e:	85 c0                	test   %eax,%eax
-80105090:	78 2e                	js     801050c0 <sys_mkdir+0x50>
-80105092:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80105095:	31 c9                	xor    %ecx,%ecx
-80105097:	ba 01 00 00 00       	mov    $0x1,%edx
-8010509c:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-801050a3:	e8 d8 f7 ff ff       	call   80104880 <create>
-801050a8:	85 c0                	test   %eax,%eax
-801050aa:	74 14                	je     801050c0 <sys_mkdir+0x50>
+801051eb:	8d 45 f4             	lea    -0xc(%ebp),%eax
+801051ee:	89 44 24 04          	mov    %eax,0x4(%esp)
+801051f2:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+801051f9:	e8 02 f7 ff ff       	call   80104900 <argstr>
+801051fe:	85 c0                	test   %eax,%eax
+80105200:	78 2e                	js     80105230 <sys_mkdir+0x50>
+80105202:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80105205:	31 c9                	xor    %ecx,%ecx
+80105207:	ba 01 00 00 00       	mov    $0x1,%edx
+8010520c:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+80105213:	e8 d8 f7 ff ff       	call   801049f0 <create>
+80105218:	85 c0                	test   %eax,%eax
+8010521a:	74 14                	je     80105230 <sys_mkdir+0x50>
     end_op();
     return -1;
   }
   iunlockput(ip);
-801050ac:	89 04 24             	mov    %eax,(%esp)
-801050af:	e8 5c c8 ff ff       	call   80101910 <iunlockput>
+8010521c:	89 04 24             	mov    %eax,(%esp)
+8010521f:	e8 ec c6 ff ff       	call   80101910 <iunlockput>
   end_op();
-801050b4:	e8 c7 da ff ff       	call   80102b80 <end_op>
+80105224:	e8 57 d9 ff ff       	call   80102b80 <end_op>
   return 0;
-801050b9:	31 c0                	xor    %eax,%eax
+80105229:	31 c0                	xor    %eax,%eax
 }
-801050bb:	c9                   	leave  
-801050bc:	c3                   	ret    
-801050bd:	8d 76 00             	lea    0x0(%esi),%esi
+8010522b:	c9                   	leave  
+8010522c:	c3                   	ret    
+8010522d:	8d 76 00             	lea    0x0(%esi),%esi
     end_op();
-801050c0:	e8 bb da ff ff       	call   80102b80 <end_op>
+80105230:	e8 4b d9 ff ff       	call   80102b80 <end_op>
     return -1;
-801050c5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105235:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 }
-801050ca:	c9                   	leave  
-801050cb:	c3                   	ret    
-801050cc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010523a:	c9                   	leave  
+8010523b:	c3                   	ret    
+8010523c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
-801050d0 <sys_mknod>:
+80105240 <sys_mknod>:
 
 int
 sys_mknod(void)
 {
-801050d0:	55                   	push   %ebp
-801050d1:	89 e5                	mov    %esp,%ebp
-801050d3:	83 ec 28             	sub    $0x28,%esp
+80105240:	55                   	push   %ebp
+80105241:	89 e5                	mov    %esp,%ebp
+80105243:	83 ec 28             	sub    $0x28,%esp
   struct inode *ip;
   char *path;
   int major, minor;
 
   begin_op();
-801050d6:	e8 35 da ff ff       	call   80102b10 <begin_op>
+80105246:	e8 c5 d8 ff ff       	call   80102b10 <begin_op>
   if((argstr(0, &path)) < 0 ||
-801050db:	8d 45 ec             	lea    -0x14(%ebp),%eax
-801050de:	89 44 24 04          	mov    %eax,0x4(%esp)
-801050e2:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-801050e9:	e8 a2 f6 ff ff       	call   80104790 <argstr>
-801050ee:	85 c0                	test   %eax,%eax
-801050f0:	78 5e                	js     80105150 <sys_mknod+0x80>
+8010524b:	8d 45 ec             	lea    -0x14(%ebp),%eax
+8010524e:	89 44 24 04          	mov    %eax,0x4(%esp)
+80105252:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+80105259:	e8 a2 f6 ff ff       	call   80104900 <argstr>
+8010525e:	85 c0                	test   %eax,%eax
+80105260:	78 5e                	js     801052c0 <sys_mknod+0x80>
      argint(1, &major) < 0 ||
-801050f2:	8d 45 f0             	lea    -0x10(%ebp),%eax
-801050f5:	89 44 24 04          	mov    %eax,0x4(%esp)
-801050f9:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-80105100:	e8 fb f5 ff ff       	call   80104700 <argint>
+80105262:	8d 45 f0             	lea    -0x10(%ebp),%eax
+80105265:	89 44 24 04          	mov    %eax,0x4(%esp)
+80105269:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+80105270:	e8 fb f5 ff ff       	call   80104870 <argint>
   if((argstr(0, &path)) < 0 ||
-80105105:	85 c0                	test   %eax,%eax
-80105107:	78 47                	js     80105150 <sys_mknod+0x80>
+80105275:	85 c0                	test   %eax,%eax
+80105277:	78 47                	js     801052c0 <sys_mknod+0x80>
      argint(2, &minor) < 0 ||
-80105109:	8d 45 f4             	lea    -0xc(%ebp),%eax
-8010510c:	89 44 24 04          	mov    %eax,0x4(%esp)
-80105110:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-80105117:	e8 e4 f5 ff ff       	call   80104700 <argint>
+80105279:	8d 45 f4             	lea    -0xc(%ebp),%eax
+8010527c:	89 44 24 04          	mov    %eax,0x4(%esp)
+80105280:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
+80105287:	e8 e4 f5 ff ff       	call   80104870 <argint>
      argint(1, &major) < 0 ||
-8010511c:	85 c0                	test   %eax,%eax
-8010511e:	78 30                	js     80105150 <sys_mknod+0x80>
+8010528c:	85 c0                	test   %eax,%eax
+8010528e:	78 30                	js     801052c0 <sys_mknod+0x80>
      (ip = create(path, T_DEV, major, minor)) == 0){
-80105120:	0f bf 45 f4          	movswl -0xc(%ebp),%eax
+80105290:	0f bf 45 f4          	movswl -0xc(%ebp),%eax
      argint(2, &minor) < 0 ||
-80105124:	ba 03 00 00 00       	mov    $0x3,%edx
+80105294:	ba 03 00 00 00       	mov    $0x3,%edx
      (ip = create(path, T_DEV, major, minor)) == 0){
-80105129:	0f bf 4d f0          	movswl -0x10(%ebp),%ecx
-8010512d:	89 04 24             	mov    %eax,(%esp)
+80105299:	0f bf 4d f0          	movswl -0x10(%ebp),%ecx
+8010529d:	89 04 24             	mov    %eax,(%esp)
      argint(2, &minor) < 0 ||
-80105130:	8b 45 ec             	mov    -0x14(%ebp),%eax
-80105133:	e8 48 f7 ff ff       	call   80104880 <create>
-80105138:	85 c0                	test   %eax,%eax
-8010513a:	74 14                	je     80105150 <sys_mknod+0x80>
+801052a0:	8b 45 ec             	mov    -0x14(%ebp),%eax
+801052a3:	e8 48 f7 ff ff       	call   801049f0 <create>
+801052a8:	85 c0                	test   %eax,%eax
+801052aa:	74 14                	je     801052c0 <sys_mknod+0x80>
     end_op();
     return -1;
   }
   iunlockput(ip);
-8010513c:	89 04 24             	mov    %eax,(%esp)
-8010513f:	e8 cc c7 ff ff       	call   80101910 <iunlockput>
+801052ac:	89 04 24             	mov    %eax,(%esp)
+801052af:	e8 5c c6 ff ff       	call   80101910 <iunlockput>
   end_op();
-80105144:	e8 37 da ff ff       	call   80102b80 <end_op>
+801052b4:	e8 c7 d8 ff ff       	call   80102b80 <end_op>
   return 0;
-80105149:	31 c0                	xor    %eax,%eax
+801052b9:	31 c0                	xor    %eax,%eax
 }
-8010514b:	c9                   	leave  
-8010514c:	c3                   	ret    
-8010514d:	8d 76 00             	lea    0x0(%esi),%esi
+801052bb:	c9                   	leave  
+801052bc:	c3                   	ret    
+801052bd:	8d 76 00             	lea    0x0(%esi),%esi
     end_op();
-80105150:	e8 2b da ff ff       	call   80102b80 <end_op>
+801052c0:	e8 bb d8 ff ff       	call   80102b80 <end_op>
     return -1;
-80105155:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801052c5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 }
-8010515a:	c9                   	leave  
-8010515b:	c3                   	ret    
-8010515c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801052ca:	c9                   	leave  
+801052cb:	c3                   	ret    
+801052cc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
-80105160 <sys_chdir>:
+801052d0 <sys_chdir>:
 
 int
 sys_chdir(void)
 {
-80105160:	55                   	push   %ebp
-80105161:	89 e5                	mov    %esp,%ebp
-80105163:	56                   	push   %esi
-80105164:	53                   	push   %ebx
-80105165:	83 ec 20             	sub    $0x20,%esp
+801052d0:	55                   	push   %ebp
+801052d1:	89 e5                	mov    %esp,%ebp
+801052d3:	56                   	push   %esi
+801052d4:	53                   	push   %ebx
+801052d5:	83 ec 20             	sub    $0x20,%esp
   char *path;
   struct inode *ip;
   struct proc *curproc = myproc();
-80105168:	e8 33 e5 ff ff       	call   801036a0 <myproc>
-8010516d:	89 c6                	mov    %eax,%esi
+801052d8:	e8 c3 e3 ff ff       	call   801036a0 <myproc>
+801052dd:	89 c6                	mov    %eax,%esi
   
   begin_op();
-8010516f:	e8 9c d9 ff ff       	call   80102b10 <begin_op>
+801052df:	e8 2c d8 ff ff       	call   80102b10 <begin_op>
   if(argstr(0, &path) < 0 || (ip = namei(path)) == 0){
-80105174:	8d 45 f4             	lea    -0xc(%ebp),%eax
-80105177:	89 44 24 04          	mov    %eax,0x4(%esp)
-8010517b:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-80105182:	e8 09 f6 ff ff       	call   80104790 <argstr>
-80105187:	85 c0                	test   %eax,%eax
-80105189:	78 4a                	js     801051d5 <sys_chdir+0x75>
-8010518b:	8b 45 f4             	mov    -0xc(%ebp),%eax
-8010518e:	89 04 24             	mov    %eax,(%esp)
-80105191:	e8 6a cd ff ff       	call   80101f00 <namei>
-80105196:	85 c0                	test   %eax,%eax
-80105198:	89 c3                	mov    %eax,%ebx
-8010519a:	74 39                	je     801051d5 <sys_chdir+0x75>
+801052e4:	8d 45 f4             	lea    -0xc(%ebp),%eax
+801052e7:	89 44 24 04          	mov    %eax,0x4(%esp)
+801052eb:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+801052f2:	e8 09 f6 ff ff       	call   80104900 <argstr>
+801052f7:	85 c0                	test   %eax,%eax
+801052f9:	78 4a                	js     80105345 <sys_chdir+0x75>
+801052fb:	8b 45 f4             	mov    -0xc(%ebp),%eax
+801052fe:	89 04 24             	mov    %eax,(%esp)
+80105301:	e8 fa cb ff ff       	call   80101f00 <namei>
+80105306:	85 c0                	test   %eax,%eax
+80105308:	89 c3                	mov    %eax,%ebx
+8010530a:	74 39                	je     80105345 <sys_chdir+0x75>
     end_op();
     return -1;
   }
   ilock(ip);
-8010519c:	89 04 24             	mov    %eax,(%esp)
-8010519f:	e8 0c c5 ff ff       	call   801016b0 <ilock>
+8010530c:	89 04 24             	mov    %eax,(%esp)
+8010530f:	e8 9c c3 ff ff       	call   801016b0 <ilock>
   if(ip->type != T_DIR){
-801051a4:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
+80105314:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
     iunlockput(ip);
-801051a9:	89 1c 24             	mov    %ebx,(%esp)
+80105319:	89 1c 24             	mov    %ebx,(%esp)
   if(ip->type != T_DIR){
-801051ac:	75 22                	jne    801051d0 <sys_chdir+0x70>
+8010531c:	75 22                	jne    80105340 <sys_chdir+0x70>
     end_op();
     return -1;
   }
   iunlock(ip);
-801051ae:	e8 dd c5 ff ff       	call   80101790 <iunlock>
+8010531e:	e8 6d c4 ff ff       	call   80101790 <iunlock>
   iput(curproc->cwd);
-801051b3:	8b 46 68             	mov    0x68(%esi),%eax
-801051b6:	89 04 24             	mov    %eax,(%esp)
-801051b9:	e8 12 c6 ff ff       	call   801017d0 <iput>
+80105323:	8b 46 68             	mov    0x68(%esi),%eax
+80105326:	89 04 24             	mov    %eax,(%esp)
+80105329:	e8 a2 c4 ff ff       	call   801017d0 <iput>
   end_op();
-801051be:	e8 bd d9 ff ff       	call   80102b80 <end_op>
+8010532e:	e8 4d d8 ff ff       	call   80102b80 <end_op>
   curproc->cwd = ip;
   return 0;
-801051c3:	31 c0                	xor    %eax,%eax
+80105333:	31 c0                	xor    %eax,%eax
   curproc->cwd = ip;
-801051c5:	89 5e 68             	mov    %ebx,0x68(%esi)
-}
-801051c8:	83 c4 20             	add    $0x20,%esp
-801051cb:	5b                   	pop    %ebx
-801051cc:	5e                   	pop    %esi
-801051cd:	5d                   	pop    %ebp
-801051ce:	c3                   	ret    
-801051cf:	90                   	nop
+80105335:	89 5e 68             	mov    %ebx,0x68(%esi)
+}
+80105338:	83 c4 20             	add    $0x20,%esp
+8010533b:	5b                   	pop    %ebx
+8010533c:	5e                   	pop    %esi
+8010533d:	5d                   	pop    %ebp
+8010533e:	c3                   	ret    
+8010533f:	90                   	nop
     iunlockput(ip);
-801051d0:	e8 3b c7 ff ff       	call   80101910 <iunlockput>
+80105340:	e8 cb c5 ff ff       	call   80101910 <iunlockput>
     end_op();
-801051d5:	e8 a6 d9 ff ff       	call   80102b80 <end_op>
+80105345:	e8 36 d8 ff ff       	call   80102b80 <end_op>
 }
-801051da:	83 c4 20             	add    $0x20,%esp
+8010534a:	83 c4 20             	add    $0x20,%esp
     return -1;
-801051dd:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+8010534d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 }
-801051e2:	5b                   	pop    %ebx
-801051e3:	5e                   	pop    %esi
-801051e4:	5d                   	pop    %ebp
-801051e5:	c3                   	ret    
-801051e6:	8d 76 00             	lea    0x0(%esi),%esi
-801051e9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+80105352:	5b                   	pop    %ebx
+80105353:	5e                   	pop    %esi
+80105354:	5d                   	pop    %ebp
+80105355:	c3                   	ret    
+80105356:	8d 76 00             	lea    0x0(%esi),%esi
+80105359:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
 
-801051f0 <sys_exec>:
+80105360 <sys_exec>:
 
 int
 sys_exec(void)
 {
-801051f0:	55                   	push   %ebp
-801051f1:	89 e5                	mov    %esp,%ebp
-801051f3:	57                   	push   %edi
-801051f4:	56                   	push   %esi
-801051f5:	53                   	push   %ebx
-801051f6:	81 ec ac 00 00 00    	sub    $0xac,%esp
+80105360:	55                   	push   %ebp
+80105361:	89 e5                	mov    %esp,%ebp
+80105363:	57                   	push   %edi
+80105364:	56                   	push   %esi
+80105365:	53                   	push   %ebx
+80105366:	81 ec ac 00 00 00    	sub    $0xac,%esp
   char *path, *argv[MAXARG];
   int i;
   uint uargv, uarg;
 
   if(argstr(0, &path) < 0 || argint(1, (int*)&uargv) < 0){
-801051fc:	8d 85 5c ff ff ff    	lea    -0xa4(%ebp),%eax
-80105202:	89 44 24 04          	mov    %eax,0x4(%esp)
-80105206:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-8010520d:	e8 7e f5 ff ff       	call   80104790 <argstr>
-80105212:	85 c0                	test   %eax,%eax
-80105214:	0f 88 84 00 00 00    	js     8010529e <sys_exec+0xae>
-8010521a:	8d 85 60 ff ff ff    	lea    -0xa0(%ebp),%eax
-80105220:	89 44 24 04          	mov    %eax,0x4(%esp)
-80105224:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-8010522b:	e8 d0 f4 ff ff       	call   80104700 <argint>
-80105230:	85 c0                	test   %eax,%eax
-80105232:	78 6a                	js     8010529e <sys_exec+0xae>
+8010536c:	8d 85 5c ff ff ff    	lea    -0xa4(%ebp),%eax
+80105372:	89 44 24 04          	mov    %eax,0x4(%esp)
+80105376:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+8010537d:	e8 7e f5 ff ff       	call   80104900 <argstr>
+80105382:	85 c0                	test   %eax,%eax
+80105384:	0f 88 84 00 00 00    	js     8010540e <sys_exec+0xae>
+8010538a:	8d 85 60 ff ff ff    	lea    -0xa0(%ebp),%eax
+80105390:	89 44 24 04          	mov    %eax,0x4(%esp)
+80105394:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+8010539b:	e8 d0 f4 ff ff       	call   80104870 <argint>
+801053a0:	85 c0                	test   %eax,%eax
+801053a2:	78 6a                	js     8010540e <sys_exec+0xae>
     return -1;
   }
   memset(argv, 0, sizeof(argv));
-80105234:	8d 85 68 ff ff ff    	lea    -0x98(%ebp),%eax
+801053a4:	8d 85 68 ff ff ff    	lea    -0x98(%ebp),%eax
   for(i=0;; i++){
-8010523a:	31 db                	xor    %ebx,%ebx
+801053aa:	31 db                	xor    %ebx,%ebx
   memset(argv, 0, sizeof(argv));
-8010523c:	c7 44 24 08 80 00 00 	movl   $0x80,0x8(%esp)
-80105243:	00 
-80105244:	8d b5 68 ff ff ff    	lea    -0x98(%ebp),%esi
-8010524a:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
-80105251:	00 
-80105252:	8d bd 64 ff ff ff    	lea    -0x9c(%ebp),%edi
-80105258:	89 04 24             	mov    %eax,(%esp)
-8010525b:	e8 b0 f1 ff ff       	call   80104410 <memset>
+801053ac:	c7 44 24 08 80 00 00 	movl   $0x80,0x8(%esp)
+801053b3:	00 
+801053b4:	8d b5 68 ff ff ff    	lea    -0x98(%ebp),%esi
+801053ba:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+801053c1:	00 
+801053c2:	8d bd 64 ff ff ff    	lea    -0x9c(%ebp),%edi
+801053c8:	89 04 24             	mov    %eax,(%esp)
+801053cb:	e8 b0 f1 ff ff       	call   80104580 <memset>
     if(i >= NELEM(argv))
       return -1;
     if(fetchint(uargv+4*i, (int*)&uarg) < 0)
-80105260:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
-80105266:	89 7c 24 04          	mov    %edi,0x4(%esp)
-8010526a:	8d 04 98             	lea    (%eax,%ebx,4),%eax
-8010526d:	89 04 24             	mov    %eax,(%esp)
-80105270:	e8 eb f3 ff ff       	call   80104660 <fetchint>
-80105275:	85 c0                	test   %eax,%eax
-80105277:	78 25                	js     8010529e <sys_exec+0xae>
+801053d0:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
+801053d6:	89 7c 24 04          	mov    %edi,0x4(%esp)
+801053da:	8d 04 98             	lea    (%eax,%ebx,4),%eax
+801053dd:	89 04 24             	mov    %eax,(%esp)
+801053e0:	e8 eb f3 ff ff       	call   801047d0 <fetchint>
+801053e5:	85 c0                	test   %eax,%eax
+801053e7:	78 25                	js     8010540e <sys_exec+0xae>
       return -1;
     if(uarg == 0){
-80105279:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
-8010527f:	85 c0                	test   %eax,%eax
-80105281:	74 2d                	je     801052b0 <sys_exec+0xc0>
+801053e9:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
+801053ef:	85 c0                	test   %eax,%eax
+801053f1:	74 2d                	je     80105420 <sys_exec+0xc0>
       argv[i] = 0;
       break;
     }
     if(fetchstr(uarg, &argv[i]) < 0)
-80105283:	89 74 24 04          	mov    %esi,0x4(%esp)
-80105287:	89 04 24             	mov    %eax,(%esp)
-8010528a:	e8 11 f4 ff ff       	call   801046a0 <fetchstr>
-8010528f:	85 c0                	test   %eax,%eax
-80105291:	78 0b                	js     8010529e <sys_exec+0xae>
+801053f3:	89 74 24 04          	mov    %esi,0x4(%esp)
+801053f7:	89 04 24             	mov    %eax,(%esp)
+801053fa:	e8 11 f4 ff ff       	call   80104810 <fetchstr>
+801053ff:	85 c0                	test   %eax,%eax
+80105401:	78 0b                	js     8010540e <sys_exec+0xae>
   for(i=0;; i++){
-80105293:	83 c3 01             	add    $0x1,%ebx
-80105296:	83 c6 04             	add    $0x4,%esi
+80105403:	83 c3 01             	add    $0x1,%ebx
+80105406:	83 c6 04             	add    $0x4,%esi
     if(i >= NELEM(argv))
-80105299:	83 fb 20             	cmp    $0x20,%ebx
-8010529c:	75 c2                	jne    80105260 <sys_exec+0x70>
+80105409:	83 fb 20             	cmp    $0x20,%ebx
+8010540c:	75 c2                	jne    801053d0 <sys_exec+0x70>
       return -1;
   }
   return exec(path, argv);
 }
-8010529e:	81 c4 ac 00 00 00    	add    $0xac,%esp
+8010540e:	81 c4 ac 00 00 00    	add    $0xac,%esp
     return -1;
-801052a4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-}
-801052a9:	5b                   	pop    %ebx
-801052aa:	5e                   	pop    %esi
-801052ab:	5f                   	pop    %edi
-801052ac:	5d                   	pop    %ebp
-801052ad:	c3                   	ret    
-801052ae:	66 90                	xchg   %ax,%ax
+80105414:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80105419:	5b                   	pop    %ebx
+8010541a:	5e                   	pop    %esi
+8010541b:	5f                   	pop    %edi
+8010541c:	5d                   	pop    %ebp
+8010541d:	c3                   	ret    
+8010541e:	66 90                	xchg   %ax,%ax
   return exec(path, argv);
-801052b0:	8d 85 68 ff ff ff    	lea    -0x98(%ebp),%eax
-801052b6:	89 44 24 04          	mov    %eax,0x4(%esp)
-801052ba:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
+80105420:	8d 85 68 ff ff ff    	lea    -0x98(%ebp),%eax
+80105426:	89 44 24 04          	mov    %eax,0x4(%esp)
+8010542a:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
       argv[i] = 0;
-801052c0:	c7 84 9d 68 ff ff ff 	movl   $0x0,-0x98(%ebp,%ebx,4)
-801052c7:	00 00 00 00 
+80105430:	c7 84 9d 68 ff ff ff 	movl   $0x0,-0x98(%ebp,%ebx,4)
+80105437:	00 00 00 00 
   return exec(path, argv);
-801052cb:	89 04 24             	mov    %eax,(%esp)
-801052ce:	e8 cd b6 ff ff       	call   801009a0 <exec>
+8010543b:	89 04 24             	mov    %eax,(%esp)
+8010543e:	e8 5d b5 ff ff       	call   801009a0 <exec>
 }
-801052d3:	81 c4 ac 00 00 00    	add    $0xac,%esp
-801052d9:	5b                   	pop    %ebx
-801052da:	5e                   	pop    %esi
-801052db:	5f                   	pop    %edi
-801052dc:	5d                   	pop    %ebp
-801052dd:	c3                   	ret    
-801052de:	66 90                	xchg   %ax,%ax
+80105443:	81 c4 ac 00 00 00    	add    $0xac,%esp
+80105449:	5b                   	pop    %ebx
+8010544a:	5e                   	pop    %esi
+8010544b:	5f                   	pop    %edi
+8010544c:	5d                   	pop    %ebp
+8010544d:	c3                   	ret    
+8010544e:	66 90                	xchg   %ax,%ax
 
-801052e0 <sys_pipe>:
+80105450 <sys_pipe>:
 
 int
 sys_pipe(void)
 {
-801052e0:	55                   	push   %ebp
-801052e1:	89 e5                	mov    %esp,%ebp
-801052e3:	53                   	push   %ebx
-801052e4:	83 ec 24             	sub    $0x24,%esp
+80105450:	55                   	push   %ebp
+80105451:	89 e5                	mov    %esp,%ebp
+80105453:	53                   	push   %ebx
+80105454:	83 ec 24             	sub    $0x24,%esp
   int *fd;
   struct file *rf, *wf;
   int fd0, fd1;
 
   if(argptr(0, (void*)&fd, 2*sizeof(fd[0])) < 0)
-801052e7:	8d 45 ec             	lea    -0x14(%ebp),%eax
-801052ea:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
-801052f1:	00 
-801052f2:	89 44 24 04          	mov    %eax,0x4(%esp)
-801052f6:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-801052fd:	e8 2e f4 ff ff       	call   80104730 <argptr>
-80105302:	85 c0                	test   %eax,%eax
-80105304:	78 6d                	js     80105373 <sys_pipe+0x93>
+80105457:	8d 45 ec             	lea    -0x14(%ebp),%eax
+8010545a:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
+80105461:	00 
+80105462:	89 44 24 04          	mov    %eax,0x4(%esp)
+80105466:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+8010546d:	e8 2e f4 ff ff       	call   801048a0 <argptr>
+80105472:	85 c0                	test   %eax,%eax
+80105474:	78 6d                	js     801054e3 <sys_pipe+0x93>
     return -1;
   if(pipealloc(&rf, &wf) < 0)
-80105306:	8d 45 f4             	lea    -0xc(%ebp),%eax
-80105309:	89 44 24 04          	mov    %eax,0x4(%esp)
-8010530d:	8d 45 f0             	lea    -0x10(%ebp),%eax
-80105310:	89 04 24             	mov    %eax,(%esp)
-80105313:	e8 58 de ff ff       	call   80103170 <pipealloc>
-80105318:	85 c0                	test   %eax,%eax
-8010531a:	78 57                	js     80105373 <sys_pipe+0x93>
+80105476:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80105479:	89 44 24 04          	mov    %eax,0x4(%esp)
+8010547d:	8d 45 f0             	lea    -0x10(%ebp),%eax
+80105480:	89 04 24             	mov    %eax,(%esp)
+80105483:	e8 e8 dc ff ff       	call   80103170 <pipealloc>
+80105488:	85 c0                	test   %eax,%eax
+8010548a:	78 57                	js     801054e3 <sys_pipe+0x93>
     return -1;
   fd0 = -1;
   if((fd0 = fdalloc(rf)) < 0 || (fd1 = fdalloc(wf)) < 0){
-8010531c:	8b 45 f0             	mov    -0x10(%ebp),%eax
-8010531f:	e8 1c f5 ff ff       	call   80104840 <fdalloc>
-80105324:	85 c0                	test   %eax,%eax
-80105326:	89 c3                	mov    %eax,%ebx
-80105328:	78 33                	js     8010535d <sys_pipe+0x7d>
-8010532a:	8b 45 f4             	mov    -0xc(%ebp),%eax
-8010532d:	e8 0e f5 ff ff       	call   80104840 <fdalloc>
-80105332:	85 c0                	test   %eax,%eax
-80105334:	78 1a                	js     80105350 <sys_pipe+0x70>
+8010548c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+8010548f:	e8 1c f5 ff ff       	call   801049b0 <fdalloc>
+80105494:	85 c0                	test   %eax,%eax
+80105496:	89 c3                	mov    %eax,%ebx
+80105498:	78 33                	js     801054cd <sys_pipe+0x7d>
+8010549a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+8010549d:	e8 0e f5 ff ff       	call   801049b0 <fdalloc>
+801054a2:	85 c0                	test   %eax,%eax
+801054a4:	78 1a                	js     801054c0 <sys_pipe+0x70>
       myproc()->ofile[fd0] = 0;
     fileclose(rf);
     fileclose(wf);
     return -1;
   }
   fd[0] = fd0;
-80105336:	8b 55 ec             	mov    -0x14(%ebp),%edx
-80105339:	89 1a                	mov    %ebx,(%edx)
+801054a6:	8b 55 ec             	mov    -0x14(%ebp),%edx
+801054a9:	89 1a                	mov    %ebx,(%edx)
   fd[1] = fd1;
-8010533b:	8b 55 ec             	mov    -0x14(%ebp),%edx
-8010533e:	89 42 04             	mov    %eax,0x4(%edx)
+801054ab:	8b 55 ec             	mov    -0x14(%ebp),%edx
+801054ae:	89 42 04             	mov    %eax,0x4(%edx)
   return 0;
 }
-80105341:	83 c4 24             	add    $0x24,%esp
+801054b1:	83 c4 24             	add    $0x24,%esp
   return 0;
-80105344:	31 c0                	xor    %eax,%eax
+801054b4:	31 c0                	xor    %eax,%eax
 }
-80105346:	5b                   	pop    %ebx
-80105347:	5d                   	pop    %ebp
-80105348:	c3                   	ret    
-80105349:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801054b6:	5b                   	pop    %ebx
+801054b7:	5d                   	pop    %ebp
+801054b8:	c3                   	ret    
+801054b9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
       myproc()->ofile[fd0] = 0;
-80105350:	e8 4b e3 ff ff       	call   801036a0 <myproc>
-80105355:	c7 44 98 28 00 00 00 	movl   $0x0,0x28(%eax,%ebx,4)
-8010535c:	00 
+801054c0:	e8 db e1 ff ff       	call   801036a0 <myproc>
+801054c5:	c7 44 98 28 00 00 00 	movl   $0x0,0x28(%eax,%ebx,4)
+801054cc:	00 
     fileclose(rf);
-8010535d:	8b 45 f0             	mov    -0x10(%ebp),%eax
-80105360:	89 04 24             	mov    %eax,(%esp)
-80105363:	e8 c8 ba ff ff       	call   80100e30 <fileclose>
+801054cd:	8b 45 f0             	mov    -0x10(%ebp),%eax
+801054d0:	89 04 24             	mov    %eax,(%esp)
+801054d3:	e8 58 b9 ff ff       	call   80100e30 <fileclose>
     fileclose(wf);
-80105368:	8b 45 f4             	mov    -0xc(%ebp),%eax
-8010536b:	89 04 24             	mov    %eax,(%esp)
-8010536e:	e8 bd ba ff ff       	call   80100e30 <fileclose>
+801054d8:	8b 45 f4             	mov    -0xc(%ebp),%eax
+801054db:	89 04 24             	mov    %eax,(%esp)
+801054de:	e8 4d b9 ff ff       	call   80100e30 <fileclose>
 }
-80105373:	83 c4 24             	add    $0x24,%esp
+801054e3:	83 c4 24             	add    $0x24,%esp
     return -1;
-80105376:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801054e6:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 }
-8010537b:	5b                   	pop    %ebx
-8010537c:	5d                   	pop    %ebp
-8010537d:	c3                   	ret    
-8010537e:	66 90                	xchg   %ax,%ax
+801054eb:	5b                   	pop    %ebx
+801054ec:	5d                   	pop    %ebp
+801054ed:	c3                   	ret    
+801054ee:	66 90                	xchg   %ax,%ax
 
-80105380 <sys_fork>:
+801054f0 <sys_fork>:
 #include "mmu.h"
 #include "proc.h"
 
 int
 sys_fork(void)
 {
-80105380:	55                   	push   %ebp
-80105381:	89 e5                	mov    %esp,%ebp
+801054f0:	55                   	push   %ebp
+801054f1:	89 e5                	mov    %esp,%ebp
   return fork();
 }
-80105383:	5d                   	pop    %ebp
+801054f3:	5d                   	pop    %ebp
   return fork();
-80105384:	e9 c7 e4 ff ff       	jmp    80103850 <fork>
-80105389:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801054f4:	e9 57 e3 ff ff       	jmp    80103850 <fork>
+801054f9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 
-80105390 <sys_exit>:
+80105500 <sys_exit>:
 
 void
 sys_exit(void)
 {
-80105390:	55                   	push   %ebp
-80105391:	89 e5                	mov    %esp,%ebp
-80105393:	83 ec 28             	sub    $0x28,%esp
+80105500:	55                   	push   %ebp
+80105501:	89 e5                	mov    %esp,%ebp
+80105503:	83 ec 28             	sub    $0x28,%esp
   int status;
   if(argint(0,&status) < 0) {
-80105396:	8d 45 f4             	lea    -0xc(%ebp),%eax
-80105399:	89 44 24 04          	mov    %eax,0x4(%esp)
-8010539d:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-801053a4:	e8 57 f3 ff ff       	call   80104700 <argint>
-801053a9:	85 c0                	test   %eax,%eax
-801053ab:	79 03                	jns    801053b0 <sys_exit+0x20>
+80105506:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80105509:	89 44 24 04          	mov    %eax,0x4(%esp)
+8010550d:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+80105514:	e8 57 f3 ff ff       	call   80104870 <argint>
+80105519:	85 c0                	test   %eax,%eax
+8010551b:	79 03                	jns    80105520 <sys_exit+0x20>
     return;
   }
   exit(status);// not reached
 }
-801053ad:	c9                   	leave  
-801053ae:	c3                   	ret    
-801053af:	90                   	nop
+8010551d:	c9                   	leave  
+8010551e:	c3                   	ret    
+8010551f:	90                   	nop
   exit(status);// not reached
-801053b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
-801053b3:	89 04 24             	mov    %eax,(%esp)
-801053b6:	e8 e5 e6 ff ff       	call   80103aa0 <exit>
+80105520:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80105523:	89 04 24             	mov    %eax,(%esp)
+80105526:	e8 05 e6 ff ff       	call   80103b30 <exit>
 }
-801053bb:	c9                   	leave  
-801053bc:	c3                   	ret    
-801053bd:	8d 76 00             	lea    0x0(%esi),%esi
+8010552b:	c9                   	leave  
+8010552c:	c3                   	ret    
+8010552d:	8d 76 00             	lea    0x0(%esi),%esi
 
-801053c0 <sys_wait>:
+80105530 <sys_wait>:
 
 int
 sys_wait(void)
 {
-801053c0:	55                   	push   %ebp
-801053c1:	89 e5                	mov    %esp,%ebp
-801053c3:	83 ec 28             	sub    $0x28,%esp
+80105530:	55                   	push   %ebp
+80105531:	89 e5                	mov    %esp,%ebp
+80105533:	83 ec 28             	sub    $0x28,%esp
   int *status;
   argptr(0, (void*)&status, sizeof(status));
-801053c6:	8d 45 f4             	lea    -0xc(%ebp),%eax
-801053c9:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
-801053d0:	00 
-801053d1:	89 44 24 04          	mov    %eax,0x4(%esp)
-801053d5:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-801053dc:	e8 4f f3 ff ff       	call   80104730 <argptr>
+80105536:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80105539:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
+80105540:	00 
+80105541:	89 44 24 04          	mov    %eax,0x4(%esp)
+80105545:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+8010554c:	e8 4f f3 ff ff       	call   801048a0 <argptr>
   return wait(status);
-801053e1:	8b 45 f4             	mov    -0xc(%ebp),%eax
-801053e4:	89 04 24             	mov    %eax,(%esp)
-801053e7:	e8 d4 e8 ff ff       	call   80103cc0 <wait>
+80105551:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80105554:	89 04 24             	mov    %eax,(%esp)
+80105557:	e8 d4 e8 ff ff       	call   80103e30 <wait>
 }
-801053ec:	c9                   	leave  
-801053ed:	c3                   	ret    
-801053ee:	66 90                	xchg   %ax,%ax
+8010555c:	c9                   	leave  
+8010555d:	c3                   	ret    
+8010555e:	66 90                	xchg   %ax,%ax
 
-801053f0 <sys_kill>:
+80105560 <sys_kill>:
 
 int
 sys_kill(void)
 {
-801053f0:	55                   	push   %ebp
-801053f1:	89 e5                	mov    %esp,%ebp
-801053f3:	83 ec 28             	sub    $0x28,%esp
+80105560:	55                   	push   %ebp
+80105561:	89 e5                	mov    %esp,%ebp
+80105563:	83 ec 28             	sub    $0x28,%esp
   int pid;
 
   if(argint(0, &pid) < 0)
-801053f6:	8d 45 f4             	lea    -0xc(%ebp),%eax
-801053f9:	89 44 24 04          	mov    %eax,0x4(%esp)
-801053fd:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-80105404:	e8 f7 f2 ff ff       	call   80104700 <argint>
-80105409:	85 c0                	test   %eax,%eax
-8010540b:	78 13                	js     80105420 <sys_kill+0x30>
+80105566:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80105569:	89 44 24 04          	mov    %eax,0x4(%esp)
+8010556d:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+80105574:	e8 f7 f2 ff ff       	call   80104870 <argint>
+80105579:	85 c0                	test   %eax,%eax
+8010557b:	78 13                	js     80105590 <sys_kill+0x30>
     return -1;
   return kill(pid);
-8010540d:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80105410:	89 04 24             	mov    %eax,(%esp)
-80105413:	e8 48 eb ff ff       	call   80103f60 <kill>
+8010557d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80105580:	89 04 24             	mov    %eax,(%esp)
+80105583:	e8 48 eb ff ff       	call   801040d0 <kill>
 }
-80105418:	c9                   	leave  
-80105419:	c3                   	ret    
-8010541a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80105588:	c9                   	leave  
+80105589:	c3                   	ret    
+8010558a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     return -1;
-80105420:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105590:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 }
-80105425:	c9                   	leave  
-80105426:	c3                   	ret    
-80105427:	89 f6                	mov    %esi,%esi
-80105429:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+80105595:	c9                   	leave  
+80105596:	c3                   	ret    
+80105597:	89 f6                	mov    %esi,%esi
+80105599:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
 
-80105430 <sys_getpid>:
+801055a0 <sys_getpid>:
 
 int
 sys_getpid(void)
 {
-80105430:	55                   	push   %ebp
-80105431:	89 e5                	mov    %esp,%ebp
-80105433:	83 ec 08             	sub    $0x8,%esp
+801055a0:	55                   	push   %ebp
+801055a1:	89 e5                	mov    %esp,%ebp
+801055a3:	83 ec 08             	sub    $0x8,%esp
   return myproc()->pid;
-80105436:	e8 65 e2 ff ff       	call   801036a0 <myproc>
-8010543b:	8b 40 10             	mov    0x10(%eax),%eax
+801055a6:	e8 f5 e0 ff ff       	call   801036a0 <myproc>
+801055ab:	8b 40 10             	mov    0x10(%eax),%eax
 }
-8010543e:	c9                   	leave  
-8010543f:	c3                   	ret    
+801055ae:	c9                   	leave  
+801055af:	c3                   	ret    
 
-80105440 <sys_sbrk>:
+801055b0 <sys_sbrk>:
 
 int
 sys_sbrk(void)
 {
-80105440:	55                   	push   %ebp
-80105441:	89 e5                	mov    %esp,%ebp
-80105443:	53                   	push   %ebx
-80105444:	83 ec 24             	sub    $0x24,%esp
+801055b0:	55                   	push   %ebp
+801055b1:	89 e5                	mov    %esp,%ebp
+801055b3:	53                   	push   %ebx
+801055b4:	83 ec 24             	sub    $0x24,%esp
   int addr;
   int n;
 
   if(argint(0, &n) < 0)
-80105447:	8d 45 f4             	lea    -0xc(%ebp),%eax
-8010544a:	89 44 24 04          	mov    %eax,0x4(%esp)
-8010544e:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-80105455:	e8 a6 f2 ff ff       	call   80104700 <argint>
-8010545a:	85 c0                	test   %eax,%eax
-8010545c:	78 22                	js     80105480 <sys_sbrk+0x40>
+801055b7:	8d 45 f4             	lea    -0xc(%ebp),%eax
+801055ba:	89 44 24 04          	mov    %eax,0x4(%esp)
+801055be:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+801055c5:	e8 a6 f2 ff ff       	call   80104870 <argint>
+801055ca:	85 c0                	test   %eax,%eax
+801055cc:	78 22                	js     801055f0 <sys_sbrk+0x40>
     return -1;
   addr = myproc()->sz;
-8010545e:	e8 3d e2 ff ff       	call   801036a0 <myproc>
+801055ce:	e8 cd e0 ff ff       	call   801036a0 <myproc>
   if(growproc(n) < 0)
-80105463:	8b 55 f4             	mov    -0xc(%ebp),%edx
+801055d3:	8b 55 f4             	mov    -0xc(%ebp),%edx
   addr = myproc()->sz;
-80105466:	8b 18                	mov    (%eax),%ebx
+801055d6:	8b 18                	mov    (%eax),%ebx
   if(growproc(n) < 0)
-80105468:	89 14 24             	mov    %edx,(%esp)
-8010546b:	e8 70 e3 ff ff       	call   801037e0 <growproc>
-80105470:	85 c0                	test   %eax,%eax
-80105472:	78 0c                	js     80105480 <sys_sbrk+0x40>
+801055d8:	89 14 24             	mov    %edx,(%esp)
+801055db:	e8 00 e2 ff ff       	call   801037e0 <growproc>
+801055e0:	85 c0                	test   %eax,%eax
+801055e2:	78 0c                	js     801055f0 <sys_sbrk+0x40>
     return -1;
   return addr;
-80105474:	89 d8                	mov    %ebx,%eax
+801055e4:	89 d8                	mov    %ebx,%eax
 }
-80105476:	83 c4 24             	add    $0x24,%esp
-80105479:	5b                   	pop    %ebx
-8010547a:	5d                   	pop    %ebp
-8010547b:	c3                   	ret    
-8010547c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801055e6:	83 c4 24             	add    $0x24,%esp
+801055e9:	5b                   	pop    %ebx
+801055ea:	5d                   	pop    %ebp
+801055eb:	c3                   	ret    
+801055ec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     return -1;
-80105480:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80105485:	eb ef                	jmp    80105476 <sys_sbrk+0x36>
-80105487:	89 f6                	mov    %esi,%esi
-80105489:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+801055f0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801055f5:	eb ef                	jmp    801055e6 <sys_sbrk+0x36>
+801055f7:	89 f6                	mov    %esi,%esi
+801055f9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
 
-80105490 <sys_sleep>:
+80105600 <sys_sleep>:
 
 int
 sys_sleep(void)
 {
-80105490:	55                   	push   %ebp
-80105491:	89 e5                	mov    %esp,%ebp
-80105493:	53                   	push   %ebx
-80105494:	83 ec 24             	sub    $0x24,%esp
+80105600:	55                   	push   %ebp
+80105601:	89 e5                	mov    %esp,%ebp
+80105603:	53                   	push   %ebx
+80105604:	83 ec 24             	sub    $0x24,%esp
   int n;
   uint ticks0;
 
   if(argint(0, &n) < 0)
-80105497:	8d 45 f4             	lea    -0xc(%ebp),%eax
-8010549a:	89 44 24 04          	mov    %eax,0x4(%esp)
-8010549e:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-801054a5:	e8 56 f2 ff ff       	call   80104700 <argint>
-801054aa:	85 c0                	test   %eax,%eax
-801054ac:	78 7e                	js     8010552c <sys_sleep+0x9c>
+80105607:	8d 45 f4             	lea    -0xc(%ebp),%eax
+8010560a:	89 44 24 04          	mov    %eax,0x4(%esp)
+8010560e:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+80105615:	e8 56 f2 ff ff       	call   80104870 <argint>
+8010561a:	85 c0                	test   %eax,%eax
+8010561c:	78 7e                	js     8010569c <sys_sleep+0x9c>
     return -1;
   acquire(&tickslock);
-801054ae:	c7 04 24 60 4e 11 80 	movl   $0x80114e60,(%esp)
-801054b5:	e8 96 ee ff ff       	call   80104350 <acquire>
+8010561e:	c7 04 24 60 53 11 80 	movl   $0x80115360,(%esp)
+80105625:	e8 96 ee ff ff       	call   801044c0 <acquire>
   ticks0 = ticks;
   while(ticks - ticks0 < n){
-801054ba:	8b 55 f4             	mov    -0xc(%ebp),%edx
+8010562a:	8b 55 f4             	mov    -0xc(%ebp),%edx
   ticks0 = ticks;
-801054bd:	8b 1d a0 56 11 80    	mov    0x801156a0,%ebx
+8010562d:	8b 1d a0 5b 11 80    	mov    0x80115ba0,%ebx
   while(ticks - ticks0 < n){
-801054c3:	85 d2                	test   %edx,%edx
-801054c5:	75 29                	jne    801054f0 <sys_sleep+0x60>
-801054c7:	eb 4f                	jmp    80105518 <sys_sleep+0x88>
-801054c9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105633:	85 d2                	test   %edx,%edx
+80105635:	75 29                	jne    80105660 <sys_sleep+0x60>
+80105637:	eb 4f                	jmp    80105688 <sys_sleep+0x88>
+80105639:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     if(myproc()->killed){
       release(&tickslock);
       return -1;
     }
     sleep(&ticks, &tickslock);
-801054d0:	c7 44 24 04 60 4e 11 	movl   $0x80114e60,0x4(%esp)
-801054d7:	80 
-801054d8:	c7 04 24 a0 56 11 80 	movl   $0x801156a0,(%esp)
-801054df:	e8 2c e7 ff ff       	call   80103c10 <sleep>
+80105640:	c7 44 24 04 60 53 11 	movl   $0x80115360,0x4(%esp)
+80105647:	80 
+80105648:	c7 04 24 a0 5b 11 80 	movl   $0x80115ba0,(%esp)
+8010564f:	e8 2c e7 ff ff       	call   80103d80 <sleep>
   while(ticks - ticks0 < n){
-801054e4:	a1 a0 56 11 80       	mov    0x801156a0,%eax
-801054e9:	29 d8                	sub    %ebx,%eax
-801054eb:	3b 45 f4             	cmp    -0xc(%ebp),%eax
-801054ee:	73 28                	jae    80105518 <sys_sleep+0x88>
+80105654:	a1 a0 5b 11 80       	mov    0x80115ba0,%eax
+80105659:	29 d8                	sub    %ebx,%eax
+8010565b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
+8010565e:	73 28                	jae    80105688 <sys_sleep+0x88>
     if(myproc()->killed){
-801054f0:	e8 ab e1 ff ff       	call   801036a0 <myproc>
-801054f5:	8b 40 24             	mov    0x24(%eax),%eax
-801054f8:	85 c0                	test   %eax,%eax
-801054fa:	74 d4                	je     801054d0 <sys_sleep+0x40>
+80105660:	e8 3b e0 ff ff       	call   801036a0 <myproc>
+80105665:	8b 40 24             	mov    0x24(%eax),%eax
+80105668:	85 c0                	test   %eax,%eax
+8010566a:	74 d4                	je     80105640 <sys_sleep+0x40>
       release(&tickslock);
-801054fc:	c7 04 24 60 4e 11 80 	movl   $0x80114e60,(%esp)
-80105503:	e8 b8 ee ff ff       	call   801043c0 <release>
+8010566c:	c7 04 24 60 53 11 80 	movl   $0x80115360,(%esp)
+80105673:	e8 b8 ee ff ff       	call   80104530 <release>
       return -1;
-80105508:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105678:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   }
   release(&tickslock);
   return 0;
 }
-8010550d:	83 c4 24             	add    $0x24,%esp
-80105510:	5b                   	pop    %ebx
-80105511:	5d                   	pop    %ebp
-80105512:	c3                   	ret    
-80105513:	90                   	nop
-80105514:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010567d:	83 c4 24             	add    $0x24,%esp
+80105680:	5b                   	pop    %ebx
+80105681:	5d                   	pop    %ebp
+80105682:	c3                   	ret    
+80105683:	90                   	nop
+80105684:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   release(&tickslock);
-80105518:	c7 04 24 60 4e 11 80 	movl   $0x80114e60,(%esp)
-8010551f:	e8 9c ee ff ff       	call   801043c0 <release>
+80105688:	c7 04 24 60 53 11 80 	movl   $0x80115360,(%esp)
+8010568f:	e8 9c ee ff ff       	call   80104530 <release>
 }
-80105524:	83 c4 24             	add    $0x24,%esp
+80105694:	83 c4 24             	add    $0x24,%esp
   return 0;
-80105527:	31 c0                	xor    %eax,%eax
+80105697:	31 c0                	xor    %eax,%eax
 }
-80105529:	5b                   	pop    %ebx
-8010552a:	5d                   	pop    %ebp
-8010552b:	c3                   	ret    
+80105699:	5b                   	pop    %ebx
+8010569a:	5d                   	pop    %ebp
+8010569b:	c3                   	ret    
     return -1;
-8010552c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80105531:	eb da                	jmp    8010550d <sys_sleep+0x7d>
-80105533:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-80105539:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+8010569c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801056a1:	eb da                	jmp    8010567d <sys_sleep+0x7d>
+801056a3:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+801056a9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
 
-80105540 <sys_uptime>:
+801056b0 <sys_uptime>:
 
 // return how many clock tick interrupts have occurred
 // since start.
 int
 sys_uptime(void)
 {
-80105540:	55                   	push   %ebp
-80105541:	89 e5                	mov    %esp,%ebp
-80105543:	53                   	push   %ebx
-80105544:	83 ec 14             	sub    $0x14,%esp
+801056b0:	55                   	push   %ebp
+801056b1:	89 e5                	mov    %esp,%ebp
+801056b3:	53                   	push   %ebx
+801056b4:	83 ec 14             	sub    $0x14,%esp
   uint xticks;
 
   acquire(&tickslock);
-80105547:	c7 04 24 60 4e 11 80 	movl   $0x80114e60,(%esp)
-8010554e:	e8 fd ed ff ff       	call   80104350 <acquire>
+801056b7:	c7 04 24 60 53 11 80 	movl   $0x80115360,(%esp)
+801056be:	e8 fd ed ff ff       	call   801044c0 <acquire>
   xticks = ticks;
-80105553:	8b 1d a0 56 11 80    	mov    0x801156a0,%ebx
+801056c3:	8b 1d a0 5b 11 80    	mov    0x80115ba0,%ebx
   release(&tickslock);
-80105559:	c7 04 24 60 4e 11 80 	movl   $0x80114e60,(%esp)
-80105560:	e8 5b ee ff ff       	call   801043c0 <release>
+801056c9:	c7 04 24 60 53 11 80 	movl   $0x80115360,(%esp)
+801056d0:	e8 5b ee ff ff       	call   80104530 <release>
   return xticks;
 }
-80105565:	83 c4 14             	add    $0x14,%esp
-80105568:	89 d8                	mov    %ebx,%eax
-8010556a:	5b                   	pop    %ebx
-8010556b:	5d                   	pop    %ebp
-8010556c:	c3                   	ret    
-8010556d:	8d 76 00             	lea    0x0(%esi),%esi
+801056d5:	83 c4 14             	add    $0x14,%esp
+801056d8:	89 d8                	mov    %ebx,%eax
+801056da:	5b                   	pop    %ebx
+801056db:	5d                   	pop    %ebp
+801056dc:	c3                   	ret    
+801056dd:	8d 76 00             	lea    0x0(%esi),%esi
 
-80105570 <sys_waitpid>:
+801056e0 <sys_waitpid>:
 
 int
 sys_waitpid(void)
 {
-80105570:	55                   	push   %ebp
-80105571:	89 e5                	mov    %esp,%ebp
-80105573:	83 ec 28             	sub    $0x28,%esp
+801056e0:	55                   	push   %ebp
+801056e1:	89 e5                	mov    %esp,%ebp
+801056e3:	83 ec 28             	sub    $0x28,%esp
   int pid;
   int *status;
   int options = 0;
   if(argint(0, &pid) < 0){
-80105576:	8d 45 f0             	lea    -0x10(%ebp),%eax
-80105579:	89 44 24 04          	mov    %eax,0x4(%esp)
-8010557d:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-80105584:	e8 77 f1 ff ff       	call   80104700 <argint>
-80105589:	85 c0                	test   %eax,%eax
-8010558b:	78 3b                	js     801055c8 <sys_waitpid+0x58>
-        return -1;
-    }
+801056e6:	8d 45 f0             	lea    -0x10(%ebp),%eax
+801056e9:	89 44 24 04          	mov    %eax,0x4(%esp)
+801056ed:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+801056f4:	e8 77 f1 ff ff       	call   80104870 <argint>
+801056f9:	85 c0                	test   %eax,%eax
+801056fb:	78 3b                	js     80105738 <sys_waitpid+0x58>
+    return -1;
+  }
   if(argptr(1,(void*)&status, sizeof(status)) < 0){
-8010558d:	8d 45 f4             	lea    -0xc(%ebp),%eax
-80105590:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
-80105597:	00 
-80105598:	89 44 24 04          	mov    %eax,0x4(%esp)
-8010559c:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-801055a3:	e8 88 f1 ff ff       	call   80104730 <argptr>
-801055a8:	85 c0                	test   %eax,%eax
-801055aa:	78 1c                	js     801055c8 <sys_waitpid+0x58>
-      return -1;
+801056fd:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80105700:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
+80105707:	00 
+80105708:	89 44 24 04          	mov    %eax,0x4(%esp)
+8010570c:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+80105713:	e8 88 f1 ff ff       	call   801048a0 <argptr>
+80105718:	85 c0                	test   %eax,%eax
+8010571a:	78 1c                	js     80105738 <sys_waitpid+0x58>
+    return -1;
   }
   return waitpid(pid, status, options);
-801055ac:	8b 45 f4             	mov    -0xc(%ebp),%eax
-801055af:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
-801055b6:	00 
-801055b7:	89 44 24 04          	mov    %eax,0x4(%esp)
-801055bb:	8b 45 f0             	mov    -0x10(%ebp),%eax
-801055be:	89 04 24             	mov    %eax,(%esp)
-801055c1:	e8 fa e7 ff ff       	call   80103dc0 <waitpid>
-}
-801055c6:	c9                   	leave  
-801055c7:	c3                   	ret    
-        return -1;
-801055c8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+8010571c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+8010571f:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
+80105726:	00 
+80105727:	89 44 24 04          	mov    %eax,0x4(%esp)
+8010572b:	8b 45 f0             	mov    -0x10(%ebp),%eax
+8010572e:	89 04 24             	mov    %eax,(%esp)
+80105731:	e8 fa e7 ff ff       	call   80103f30 <waitpid>
+}
+80105736:	c9                   	leave  
+80105737:	c3                   	ret    
+    return -1;
+80105738:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 }
-801055cd:	c9                   	leave  
-801055ce:	c3                   	ret    
+8010573d:	c9                   	leave  
+8010573e:	c3                   	ret    
+8010573f:	90                   	nop
 
-801055cf <alltraps>:
+80105740 <sys_setPrior>:
+
+int
+sys_setPrior(void)
+{
+80105740:	55                   	push   %ebp
+80105741:	89 e5                	mov    %esp,%ebp
+80105743:	53                   	push   %ebx
+80105744:	83 ec 24             	sub    $0x24,%esp
+  int priority;
+  if(argint(0,&priority) < 0) {
+80105747:	8d 5d f4             	lea    -0xc(%ebp),%ebx
+8010574a:	89 5c 24 04          	mov    %ebx,0x4(%esp)
+8010574e:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+80105755:	e8 16 f1 ff ff       	call   80104870 <argint>
+8010575a:	85 c0                	test   %eax,%eax
+8010575c:	78 2a                	js     80105788 <sys_setPrior+0x48>
+    return -1;
+  }
+  if(argint(0,&priority) > 31) {
+8010575e:	89 5c 24 04          	mov    %ebx,0x4(%esp)
+80105762:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+80105769:	e8 02 f1 ff ff       	call   80104870 <argint>
+8010576e:	83 f8 1f             	cmp    $0x1f,%eax
+80105771:	7f 15                	jg     80105788 <sys_setPrior+0x48>
+    return -1;
+  }
+  setPrior(priority);
+80105773:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80105776:	89 04 24             	mov    %eax,(%esp)
+80105779:	e8 c2 e5 ff ff       	call   80103d40 <setPrior>
+  return 0;
+}
+8010577e:	83 c4 24             	add    $0x24,%esp
+  return 0;
+80105781:	31 c0                	xor    %eax,%eax
+}
+80105783:	5b                   	pop    %ebx
+80105784:	5d                   	pop    %ebp
+80105785:	c3                   	ret    
+80105786:	66 90                	xchg   %ax,%ax
+80105788:	83 c4 24             	add    $0x24,%esp
+    return -1;
+8010578b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80105790:	5b                   	pop    %ebx
+80105791:	5d                   	pop    %ebp
+80105792:	c3                   	ret    
+80105793:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80105799:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+801057a0 <sys_getPrior>:
+
+int
+sys_getPrior(void)
+{
+801057a0:	55                   	push   %ebp
+801057a1:	89 e5                	mov    %esp,%ebp
+  return getPrior();
+801057a3:	5d                   	pop    %ebp
+  return getPrior();
+801057a4:	e9 b7 e5 ff ff       	jmp    80103d60 <getPrior>
+
+801057a9 <alltraps>:
 
   # vectors.S sends all traps here.
 .globl alltraps
 alltraps:
   # Build trap frame.
   pushl %ds
-801055cf:	1e                   	push   %ds
+801057a9:	1e                   	push   %ds
   pushl %es
-801055d0:	06                   	push   %es
+801057aa:	06                   	push   %es
   pushl %fs
-801055d1:	0f a0                	push   %fs
+801057ab:	0f a0                	push   %fs
   pushl %gs
-801055d3:	0f a8                	push   %gs
+801057ad:	0f a8                	push   %gs
   pushal
-801055d5:	60                   	pusha  
+801057af:	60                   	pusha  
   
   # Set up data segments.
   movw $(SEG_KDATA<<3), %ax
-801055d6:	66 b8 10 00          	mov    $0x10,%ax
+801057b0:	66 b8 10 00          	mov    $0x10,%ax
   movw %ax, %ds
-801055da:	8e d8                	mov    %eax,%ds
+801057b4:	8e d8                	mov    %eax,%ds
   movw %ax, %es
-801055dc:	8e c0                	mov    %eax,%es
+801057b6:	8e c0                	mov    %eax,%es
 
   # Call trap(tf), where tf=%esp
   pushl %esp
-801055de:	54                   	push   %esp
+801057b8:	54                   	push   %esp
   call trap
-801055df:	e8 ec 00 00 00       	call   801056d0 <trap>
+801057b9:	e8 e2 00 00 00       	call   801058a0 <trap>
   addl $4, %esp
-801055e4:	83 c4 04             	add    $0x4,%esp
+801057be:	83 c4 04             	add    $0x4,%esp
 
-801055e7 <trapret>:
+801057c1 <trapret>:
 
   # Return falls through to trapret...
 .globl trapret
 trapret:
   popal
-801055e7:	61                   	popa   
+801057c1:	61                   	popa   
   popl %gs
-801055e8:	0f a9                	pop    %gs
+801057c2:	0f a9                	pop    %gs
   popl %fs
-801055ea:	0f a1                	pop    %fs
+801057c4:	0f a1                	pop    %fs
   popl %es
-801055ec:	07                   	pop    %es
+801057c6:	07                   	pop    %es
   popl %ds
-801055ed:	1f                   	pop    %ds
+801057c7:	1f                   	pop    %ds
   addl $0x8, %esp  # trapno and errcode
-801055ee:	83 c4 08             	add    $0x8,%esp
+801057c8:	83 c4 08             	add    $0x8,%esp
   iret
-801055f1:	cf                   	iret   
-801055f2:	66 90                	xchg   %ax,%ax
-801055f4:	66 90                	xchg   %ax,%ax
-801055f6:	66 90                	xchg   %ax,%ax
-801055f8:	66 90                	xchg   %ax,%ax
-801055fa:	66 90                	xchg   %ax,%ax
-801055fc:	66 90                	xchg   %ax,%ax
-801055fe:	66 90                	xchg   %ax,%ax
-
-80105600 <tvinit>:
+801057cb:	cf                   	iret   
+801057cc:	66 90                	xchg   %ax,%ax
+801057ce:	66 90                	xchg   %ax,%ax
+
+801057d0 <tvinit>:
 void
 tvinit(void)
 {
   int i;
 
   for(i = 0; i < 256; i++)
-80105600:	31 c0                	xor    %eax,%eax
-80105602:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+801057d0:	31 c0                	xor    %eax,%eax
+801057d2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     SETGATE(idt[i], 0, SEG_KCODE<<3, vectors[i], 0);
-80105608:	8b 14 85 08 a0 10 80 	mov    -0x7fef5ff8(,%eax,4),%edx
-8010560f:	b9 08 00 00 00       	mov    $0x8,%ecx
-80105614:	66 89 0c c5 a2 4e 11 	mov    %cx,-0x7feeb15e(,%eax,8)
-8010561b:	80 
-8010561c:	c6 04 c5 a4 4e 11 80 	movb   $0x0,-0x7feeb15c(,%eax,8)
-80105623:	00 
-80105624:	c6 04 c5 a5 4e 11 80 	movb   $0x8e,-0x7feeb15b(,%eax,8)
-8010562b:	8e 
-8010562c:	66 89 14 c5 a0 4e 11 	mov    %dx,-0x7feeb160(,%eax,8)
-80105633:	80 
-80105634:	c1 ea 10             	shr    $0x10,%edx
-80105637:	66 89 14 c5 a6 4e 11 	mov    %dx,-0x7feeb15a(,%eax,8)
-8010563e:	80 
+801057d8:	8b 14 85 08 a0 10 80 	mov    -0x7fef5ff8(,%eax,4),%edx
+801057df:	b9 08 00 00 00       	mov    $0x8,%ecx
+801057e4:	66 89 0c c5 a2 53 11 	mov    %cx,-0x7feeac5e(,%eax,8)
+801057eb:	80 
+801057ec:	c6 04 c5 a4 53 11 80 	movb   $0x0,-0x7feeac5c(,%eax,8)
+801057f3:	00 
+801057f4:	c6 04 c5 a5 53 11 80 	movb   $0x8e,-0x7feeac5b(,%eax,8)
+801057fb:	8e 
+801057fc:	66 89 14 c5 a0 53 11 	mov    %dx,-0x7feeac60(,%eax,8)
+80105803:	80 
+80105804:	c1 ea 10             	shr    $0x10,%edx
+80105807:	66 89 14 c5 a6 53 11 	mov    %dx,-0x7feeac5a(,%eax,8)
+8010580e:	80 
   for(i = 0; i < 256; i++)
-8010563f:	83 c0 01             	add    $0x1,%eax
-80105642:	3d 00 01 00 00       	cmp    $0x100,%eax
-80105647:	75 bf                	jne    80105608 <tvinit+0x8>
+8010580f:	83 c0 01             	add    $0x1,%eax
+80105812:	3d 00 01 00 00       	cmp    $0x100,%eax
+80105817:	75 bf                	jne    801057d8 <tvinit+0x8>
 {
-80105649:	55                   	push   %ebp
+80105819:	55                   	push   %ebp
   SETGATE(idt[T_SYSCALL], 1, SEG_KCODE<<3, vectors[T_SYSCALL], DPL_USER);
-8010564a:	ba 08 00 00 00       	mov    $0x8,%edx
+8010581a:	ba 08 00 00 00       	mov    $0x8,%edx
 {
-8010564f:	89 e5                	mov    %esp,%ebp
-80105651:	83 ec 18             	sub    $0x18,%esp
+8010581f:	89 e5                	mov    %esp,%ebp
+80105821:	83 ec 18             	sub    $0x18,%esp
   SETGATE(idt[T_SYSCALL], 1, SEG_KCODE<<3, vectors[T_SYSCALL], DPL_USER);
-80105654:	a1 08 a1 10 80       	mov    0x8010a108,%eax
+80105824:	a1 08 a1 10 80       	mov    0x8010a108,%eax
 
   initlock(&tickslock, "time");
-80105659:	c7 44 24 04 bd 75 10 	movl   $0x801075bd,0x4(%esp)
-80105660:	80 
-80105661:	c7 04 24 60 4e 11 80 	movl   $0x80114e60,(%esp)
+80105829:	c7 44 24 04 e5 77 10 	movl   $0x801077e5,0x4(%esp)
+80105830:	80 
+80105831:	c7 04 24 60 53 11 80 	movl   $0x80115360,(%esp)
   SETGATE(idt[T_SYSCALL], 1, SEG_KCODE<<3, vectors[T_SYSCALL], DPL_USER);
-80105668:	66 89 15 a2 50 11 80 	mov    %dx,0x801150a2
-8010566f:	66 a3 a0 50 11 80    	mov    %ax,0x801150a0
-80105675:	c1 e8 10             	shr    $0x10,%eax
-80105678:	c6 05 a4 50 11 80 00 	movb   $0x0,0x801150a4
-8010567f:	c6 05 a5 50 11 80 ef 	movb   $0xef,0x801150a5
-80105686:	66 a3 a6 50 11 80    	mov    %ax,0x801150a6
+80105838:	66 89 15 a2 55 11 80 	mov    %dx,0x801155a2
+8010583f:	66 a3 a0 55 11 80    	mov    %ax,0x801155a0
+80105845:	c1 e8 10             	shr    $0x10,%eax
+80105848:	c6 05 a4 55 11 80 00 	movb   $0x0,0x801155a4
+8010584f:	c6 05 a5 55 11 80 ef 	movb   $0xef,0x801155a5
+80105856:	66 a3 a6 55 11 80    	mov    %ax,0x801155a6
   initlock(&tickslock, "time");
-8010568c:	e8 4f eb ff ff       	call   801041e0 <initlock>
+8010585c:	e8 ef ea ff ff       	call   80104350 <initlock>
 }
-80105691:	c9                   	leave  
-80105692:	c3                   	ret    
-80105693:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-80105699:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+80105861:	c9                   	leave  
+80105862:	c3                   	ret    
+80105863:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80105869:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
 
-801056a0 <idtinit>:
+80105870 <idtinit>:
 
 void
 idtinit(void)
 {
-801056a0:	55                   	push   %ebp
+80105870:	55                   	push   %ebp
   pd[0] = size-1;
-801056a1:	b8 ff 07 00 00       	mov    $0x7ff,%eax
-801056a6:	89 e5                	mov    %esp,%ebp
-801056a8:	83 ec 10             	sub    $0x10,%esp
-801056ab:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
+80105871:	b8 ff 07 00 00       	mov    $0x7ff,%eax
+80105876:	89 e5                	mov    %esp,%ebp
+80105878:	83 ec 10             	sub    $0x10,%esp
+8010587b:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
   pd[1] = (uint)p;
-801056af:	b8 a0 4e 11 80       	mov    $0x80114ea0,%eax
-801056b4:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
+8010587f:	b8 a0 53 11 80       	mov    $0x801153a0,%eax
+80105884:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   pd[2] = (uint)p >> 16;
-801056b8:	c1 e8 10             	shr    $0x10,%eax
-801056bb:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
+80105888:	c1 e8 10             	shr    $0x10,%eax
+8010588b:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
   asm volatile("lidt (%0)" : : "r" (pd));
-801056bf:	8d 45 fa             	lea    -0x6(%ebp),%eax
-801056c2:	0f 01 18             	lidtl  (%eax)
+8010588f:	8d 45 fa             	lea    -0x6(%ebp),%eax
+80105892:	0f 01 18             	lidtl  (%eax)
   lidt(idt, sizeof(idt));
 }
-801056c5:	c9                   	leave  
-801056c6:	c3                   	ret    
-801056c7:	89 f6                	mov    %esi,%esi
-801056c9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+80105895:	c9                   	leave  
+80105896:	c3                   	ret    
+80105897:	89 f6                	mov    %esi,%esi
+80105899:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
 
-801056d0 <trap>:
+801058a0 <trap>:
 
 //PAGEBREAK: 41
 void
 trap(struct trapframe *tf)
 {
-801056d0:	55                   	push   %ebp
-801056d1:	89 e5                	mov    %esp,%ebp
-801056d3:	57                   	push   %edi
-801056d4:	56                   	push   %esi
-801056d5:	53                   	push   %ebx
-801056d6:	83 ec 3c             	sub    $0x3c,%esp
-801056d9:	8b 5d 08             	mov    0x8(%ebp),%ebx
+801058a0:	55                   	push   %ebp
+801058a1:	89 e5                	mov    %esp,%ebp
+801058a3:	57                   	push   %edi
+801058a4:	56                   	push   %esi
+801058a5:	53                   	push   %ebx
+801058a6:	83 ec 3c             	sub    $0x3c,%esp
+801058a9:	8b 5d 08             	mov    0x8(%ebp),%ebx
   if(tf->trapno == T_SYSCALL){
-801056dc:	8b 43 30             	mov    0x30(%ebx),%eax
-801056df:	83 f8 40             	cmp    $0x40,%eax
-801056e2:	0f 84 a0 01 00 00    	je     80105888 <trap+0x1b8>
+801058ac:	8b 43 30             	mov    0x30(%ebx),%eax
+801058af:	83 f8 40             	cmp    $0x40,%eax
+801058b2:	0f 84 a0 01 00 00    	je     80105a58 <trap+0x1b8>
     if(myproc()->killed)
       exit(0);
     return;
   }
 
   switch(tf->trapno){
-801056e8:	83 e8 20             	sub    $0x20,%eax
-801056eb:	83 f8 1f             	cmp    $0x1f,%eax
-801056ee:	77 08                	ja     801056f8 <trap+0x28>
-801056f0:	ff 24 85 64 76 10 80 	jmp    *-0x7fef899c(,%eax,4)
-801056f7:	90                   	nop
+801058b8:	83 e8 20             	sub    $0x20,%eax
+801058bb:	83 f8 1f             	cmp    $0x1f,%eax
+801058be:	77 08                	ja     801058c8 <trap+0x28>
+801058c0:	ff 24 85 8c 78 10 80 	jmp    *-0x7fef8774(,%eax,4)
+801058c7:	90                   	nop
     lapiceoi();
     break;
 
   //PAGEBREAK: 13
   default:
     if(myproc() == 0 || (tf->cs&3) == 0){
-801056f8:	e8 a3 df ff ff       	call   801036a0 <myproc>
-801056fd:	85 c0                	test   %eax,%eax
-801056ff:	90                   	nop
-80105700:	0f 84 0a 02 00 00    	je     80105910 <trap+0x240>
-80105706:	f6 43 3c 03          	testb  $0x3,0x3c(%ebx)
-8010570a:	0f 84 00 02 00 00    	je     80105910 <trap+0x240>
+801058c8:	e8 d3 dd ff ff       	call   801036a0 <myproc>
+801058cd:	85 c0                	test   %eax,%eax
+801058cf:	90                   	nop
+801058d0:	0f 84 0a 02 00 00    	je     80105ae0 <trap+0x240>
+801058d6:	f6 43 3c 03          	testb  $0x3,0x3c(%ebx)
+801058da:	0f 84 00 02 00 00    	je     80105ae0 <trap+0x240>
 
 static inline uint
 rcr2(void)
 {
   uint val;
   asm volatile("movl %%cr2,%0" : "=r" (val));
-80105710:	0f 20 d1             	mov    %cr2,%ecx
+801058e0:	0f 20 d1             	mov    %cr2,%ecx
       cprintf("unexpected trap %d from cpu %d eip %x (cr2=0x%x)\n",
               tf->trapno, cpuid(), tf->eip, rcr2());
       panic("trap");
     }
     // In user space, assume process misbehaved.
     cprintf("pid %d %s: trap %d err %d on cpu %d "
-80105713:	8b 53 38             	mov    0x38(%ebx),%edx
-80105716:	89 4d d8             	mov    %ecx,-0x28(%ebp)
-80105719:	89 55 dc             	mov    %edx,-0x24(%ebp)
-8010571c:	e8 5f df ff ff       	call   80103680 <cpuid>
-80105721:	8b 73 30             	mov    0x30(%ebx),%esi
-80105724:	89 c7                	mov    %eax,%edi
-80105726:	8b 43 34             	mov    0x34(%ebx),%eax
-80105729:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+801058e3:	8b 53 38             	mov    0x38(%ebx),%edx
+801058e6:	89 4d d8             	mov    %ecx,-0x28(%ebp)
+801058e9:	89 55 dc             	mov    %edx,-0x24(%ebp)
+801058ec:	e8 8f dd ff ff       	call   80103680 <cpuid>
+801058f1:	8b 73 30             	mov    0x30(%ebx),%esi
+801058f4:	89 c7                	mov    %eax,%edi
+801058f6:	8b 43 34             	mov    0x34(%ebx),%eax
+801058f9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
             "eip 0x%x addr 0x%x--kill proc\n",
             myproc()->pid, myproc()->name, tf->trapno,
-8010572c:	e8 6f df ff ff       	call   801036a0 <myproc>
-80105731:	89 45 e0             	mov    %eax,-0x20(%ebp)
-80105734:	e8 67 df ff ff       	call   801036a0 <myproc>
+801058fc:	e8 9f dd ff ff       	call   801036a0 <myproc>
+80105901:	89 45 e0             	mov    %eax,-0x20(%ebp)
+80105904:	e8 97 dd ff ff       	call   801036a0 <myproc>
     cprintf("pid %d %s: trap %d err %d on cpu %d "
-80105739:	8b 55 dc             	mov    -0x24(%ebp),%edx
-8010573c:	89 74 24 0c          	mov    %esi,0xc(%esp)
+80105909:	8b 55 dc             	mov    -0x24(%ebp),%edx
+8010590c:	89 74 24 0c          	mov    %esi,0xc(%esp)
             myproc()->pid, myproc()->name, tf->trapno,
-80105740:	8b 75 e0             	mov    -0x20(%ebp),%esi
+80105910:	8b 75 e0             	mov    -0x20(%ebp),%esi
     cprintf("pid %d %s: trap %d err %d on cpu %d "
-80105743:	8b 4d d8             	mov    -0x28(%ebp),%ecx
-80105746:	89 7c 24 14          	mov    %edi,0x14(%esp)
-8010574a:	89 54 24 18          	mov    %edx,0x18(%esp)
-8010574e:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+80105913:	8b 4d d8             	mov    -0x28(%ebp),%ecx
+80105916:	89 7c 24 14          	mov    %edi,0x14(%esp)
+8010591a:	89 54 24 18          	mov    %edx,0x18(%esp)
+8010591e:	8b 55 e4             	mov    -0x1c(%ebp),%edx
             myproc()->pid, myproc()->name, tf->trapno,
-80105751:	83 c6 6c             	add    $0x6c,%esi
+80105921:	83 c6 6c             	add    $0x6c,%esi
     cprintf("pid %d %s: trap %d err %d on cpu %d "
-80105754:	89 4c 24 1c          	mov    %ecx,0x1c(%esp)
+80105924:	89 4c 24 1c          	mov    %ecx,0x1c(%esp)
             myproc()->pid, myproc()->name, tf->trapno,
-80105758:	89 74 24 08          	mov    %esi,0x8(%esp)
+80105928:	89 74 24 08          	mov    %esi,0x8(%esp)
     cprintf("pid %d %s: trap %d err %d on cpu %d "
-8010575c:	89 54 24 10          	mov    %edx,0x10(%esp)
-80105760:	8b 40 10             	mov    0x10(%eax),%eax
-80105763:	c7 04 24 20 76 10 80 	movl   $0x80107620,(%esp)
-8010576a:	89 44 24 04          	mov    %eax,0x4(%esp)
-8010576e:	e8 dd ae ff ff       	call   80100650 <cprintf>
+8010592c:	89 54 24 10          	mov    %edx,0x10(%esp)
+80105930:	8b 40 10             	mov    0x10(%eax),%eax
+80105933:	c7 04 24 48 78 10 80 	movl   $0x80107848,(%esp)
+8010593a:	89 44 24 04          	mov    %eax,0x4(%esp)
+8010593e:	e8 0d ad ff ff       	call   80100650 <cprintf>
             tf->err, cpuid(), tf->eip, rcr2());
     myproc()->killed = 1;
-80105773:	e8 28 df ff ff       	call   801036a0 <myproc>
-80105778:	c7 40 24 01 00 00 00 	movl   $0x1,0x24(%eax)
-8010577f:	90                   	nop
+80105943:	e8 58 dd ff ff       	call   801036a0 <myproc>
+80105948:	c7 40 24 01 00 00 00 	movl   $0x1,0x24(%eax)
+8010594f:	90                   	nop
   }
 
   // Force process exit if it has been killed and is in user space.
   // (If it is still executing in the kernel, let it keep running
   // until it gets to the regular system call return.)
   if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
-80105780:	e8 1b df ff ff       	call   801036a0 <myproc>
-80105785:	85 c0                	test   %eax,%eax
-80105787:	74 0c                	je     80105795 <trap+0xc5>
-80105789:	e8 12 df ff ff       	call   801036a0 <myproc>
-8010578e:	8b 50 24             	mov    0x24(%eax),%edx
-80105791:	85 d2                	test   %edx,%edx
-80105793:	75 4b                	jne    801057e0 <trap+0x110>
+80105950:	e8 4b dd ff ff       	call   801036a0 <myproc>
+80105955:	85 c0                	test   %eax,%eax
+80105957:	74 0c                	je     80105965 <trap+0xc5>
+80105959:	e8 42 dd ff ff       	call   801036a0 <myproc>
+8010595e:	8b 50 24             	mov    0x24(%eax),%edx
+80105961:	85 d2                	test   %edx,%edx
+80105963:	75 4b                	jne    801059b0 <trap+0x110>
     exit(0);
 
   // Force process to give up CPU on clock tick.
   // If interrupts were on while locks held, would need to check nlock.
   if(myproc() && myproc()->state == RUNNING &&
-80105795:	e8 06 df ff ff       	call   801036a0 <myproc>
-8010579a:	85 c0                	test   %eax,%eax
-8010579c:	74 0d                	je     801057ab <trap+0xdb>
-8010579e:	66 90                	xchg   %ax,%ax
-801057a0:	e8 fb de ff ff       	call   801036a0 <myproc>
-801057a5:	83 78 0c 04          	cmpl   $0x4,0xc(%eax)
-801057a9:	74 55                	je     80105800 <trap+0x130>
+80105965:	e8 36 dd ff ff       	call   801036a0 <myproc>
+8010596a:	85 c0                	test   %eax,%eax
+8010596c:	74 0d                	je     8010597b <trap+0xdb>
+8010596e:	66 90                	xchg   %ax,%ax
+80105970:	e8 2b dd ff ff       	call   801036a0 <myproc>
+80105975:	83 78 0c 04          	cmpl   $0x4,0xc(%eax)
+80105979:	74 55                	je     801059d0 <trap+0x130>
      tf->trapno == T_IRQ0+IRQ_TIMER)
     yield();
 
   // Check if the process has been killed since we yielded
   if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
-801057ab:	e8 f0 de ff ff       	call   801036a0 <myproc>
-801057b0:	85 c0                	test   %eax,%eax
-801057b2:	74 1d                	je     801057d1 <trap+0x101>
-801057b4:	e8 e7 de ff ff       	call   801036a0 <myproc>
-801057b9:	8b 40 24             	mov    0x24(%eax),%eax
-801057bc:	85 c0                	test   %eax,%eax
-801057be:	74 11                	je     801057d1 <trap+0x101>
-801057c0:	0f b7 43 3c          	movzwl 0x3c(%ebx),%eax
-801057c4:	83 e0 03             	and    $0x3,%eax
-801057c7:	66 83 f8 03          	cmp    $0x3,%ax
-801057cb:	0f 84 e8 00 00 00    	je     801058b9 <trap+0x1e9>
+8010597b:	e8 20 dd ff ff       	call   801036a0 <myproc>
+80105980:	85 c0                	test   %eax,%eax
+80105982:	74 1d                	je     801059a1 <trap+0x101>
+80105984:	e8 17 dd ff ff       	call   801036a0 <myproc>
+80105989:	8b 40 24             	mov    0x24(%eax),%eax
+8010598c:	85 c0                	test   %eax,%eax
+8010598e:	74 11                	je     801059a1 <trap+0x101>
+80105990:	0f b7 43 3c          	movzwl 0x3c(%ebx),%eax
+80105994:	83 e0 03             	and    $0x3,%eax
+80105997:	66 83 f8 03          	cmp    $0x3,%ax
+8010599b:	0f 84 e8 00 00 00    	je     80105a89 <trap+0x1e9>
     exit(0);
 }
-801057d1:	83 c4 3c             	add    $0x3c,%esp
-801057d4:	5b                   	pop    %ebx
-801057d5:	5e                   	pop    %esi
-801057d6:	5f                   	pop    %edi
-801057d7:	5d                   	pop    %ebp
-801057d8:	c3                   	ret    
-801057d9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801059a1:	83 c4 3c             	add    $0x3c,%esp
+801059a4:	5b                   	pop    %ebx
+801059a5:	5e                   	pop    %esi
+801059a6:	5f                   	pop    %edi
+801059a7:	5d                   	pop    %ebp
+801059a8:	c3                   	ret    
+801059a9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
   if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
-801057e0:	0f b7 43 3c          	movzwl 0x3c(%ebx),%eax
-801057e4:	83 e0 03             	and    $0x3,%eax
-801057e7:	66 83 f8 03          	cmp    $0x3,%ax
-801057eb:	75 a8                	jne    80105795 <trap+0xc5>
+801059b0:	0f b7 43 3c          	movzwl 0x3c(%ebx),%eax
+801059b4:	83 e0 03             	and    $0x3,%eax
+801059b7:	66 83 f8 03          	cmp    $0x3,%ax
+801059bb:	75 a8                	jne    80105965 <trap+0xc5>
     exit(0);
-801057ed:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-801057f4:	e8 a7 e2 ff ff       	call   80103aa0 <exit>
-801057f9:	eb 9a                	jmp    80105795 <trap+0xc5>
-801057fb:	90                   	nop
-801057fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801059bd:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+801059c4:	e8 67 e1 ff ff       	call   80103b30 <exit>
+801059c9:	eb 9a                	jmp    80105965 <trap+0xc5>
+801059cb:	90                   	nop
+801059cc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   if(myproc() && myproc()->state == RUNNING &&
-80105800:	83 7b 30 20          	cmpl   $0x20,0x30(%ebx)
-80105804:	75 a5                	jne    801057ab <trap+0xdb>
+801059d0:	83 7b 30 20          	cmpl   $0x20,0x30(%ebx)
+801059d4:	75 a5                	jne    8010597b <trap+0xdb>
     yield();
-80105806:	e8 c5 e3 ff ff       	call   80103bd0 <yield>
-8010580b:	eb 9e                	jmp    801057ab <trap+0xdb>
-8010580d:	8d 76 00             	lea    0x0(%esi),%esi
+801059d6:	e8 25 e3 ff ff       	call   80103d00 <yield>
+801059db:	eb 9e                	jmp    8010597b <trap+0xdb>
+801059dd:	8d 76 00             	lea    0x0(%esi),%esi
     if(cpuid() == 0){
-80105810:	e8 6b de ff ff       	call   80103680 <cpuid>
-80105815:	85 c0                	test   %eax,%eax
-80105817:	0f 84 c3 00 00 00    	je     801058e0 <trap+0x210>
-8010581d:	8d 76 00             	lea    0x0(%esi),%esi
+801059e0:	e8 9b dc ff ff       	call   80103680 <cpuid>
+801059e5:	85 c0                	test   %eax,%eax
+801059e7:	0f 84 c3 00 00 00    	je     80105ab0 <trap+0x210>
+801059ed:	8d 76 00             	lea    0x0(%esi),%esi
     lapiceoi();
-80105820:	e8 5b cf ff ff       	call   80102780 <lapiceoi>
+801059f0:	e8 8b cd ff ff       	call   80102780 <lapiceoi>
     break;
-80105825:	e9 56 ff ff ff       	jmp    80105780 <trap+0xb0>
-8010582a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+801059f5:	e9 56 ff ff ff       	jmp    80105950 <trap+0xb0>
+801059fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     kbdintr();
-80105830:	e8 9b cd ff ff       	call   801025d0 <kbdintr>
+80105a00:	e8 cb cb ff ff       	call   801025d0 <kbdintr>
     lapiceoi();
-80105835:	e8 46 cf ff ff       	call   80102780 <lapiceoi>
+80105a05:	e8 76 cd ff ff       	call   80102780 <lapiceoi>
     break;
-8010583a:	e9 41 ff ff ff       	jmp    80105780 <trap+0xb0>
-8010583f:	90                   	nop
+80105a0a:	e9 41 ff ff ff       	jmp    80105950 <trap+0xb0>
+80105a0f:	90                   	nop
     uartintr();
-80105840:	e8 2b 02 00 00       	call   80105a70 <uartintr>
+80105a10:	e8 2b 02 00 00       	call   80105c40 <uartintr>
     lapiceoi();
-80105845:	e8 36 cf ff ff       	call   80102780 <lapiceoi>
+80105a15:	e8 66 cd ff ff       	call   80102780 <lapiceoi>
     break;
-8010584a:	e9 31 ff ff ff       	jmp    80105780 <trap+0xb0>
-8010584f:	90                   	nop
+80105a1a:	e9 31 ff ff ff       	jmp    80105950 <trap+0xb0>
+80105a1f:	90                   	nop
     cprintf("cpu%d: spurious interrupt at %x:%x\n",
-80105850:	8b 7b 38             	mov    0x38(%ebx),%edi
-80105853:	0f b7 73 3c          	movzwl 0x3c(%ebx),%esi
-80105857:	e8 24 de ff ff       	call   80103680 <cpuid>
-8010585c:	c7 04 24 c8 75 10 80 	movl   $0x801075c8,(%esp)
-80105863:	89 7c 24 0c          	mov    %edi,0xc(%esp)
-80105867:	89 74 24 08          	mov    %esi,0x8(%esp)
-8010586b:	89 44 24 04          	mov    %eax,0x4(%esp)
-8010586f:	e8 dc ad ff ff       	call   80100650 <cprintf>
+80105a20:	8b 7b 38             	mov    0x38(%ebx),%edi
+80105a23:	0f b7 73 3c          	movzwl 0x3c(%ebx),%esi
+80105a27:	e8 54 dc ff ff       	call   80103680 <cpuid>
+80105a2c:	c7 04 24 f0 77 10 80 	movl   $0x801077f0,(%esp)
+80105a33:	89 7c 24 0c          	mov    %edi,0xc(%esp)
+80105a37:	89 74 24 08          	mov    %esi,0x8(%esp)
+80105a3b:	89 44 24 04          	mov    %eax,0x4(%esp)
+80105a3f:	e8 0c ac ff ff       	call   80100650 <cprintf>
     lapiceoi();
-80105874:	e8 07 cf ff ff       	call   80102780 <lapiceoi>
+80105a44:	e8 37 cd ff ff       	call   80102780 <lapiceoi>
     break;
-80105879:	e9 02 ff ff ff       	jmp    80105780 <trap+0xb0>
-8010587e:	66 90                	xchg   %ax,%ax
+80105a49:	e9 02 ff ff ff       	jmp    80105950 <trap+0xb0>
+80105a4e:	66 90                	xchg   %ax,%ax
     ideintr();
-80105880:	e8 fb c7 ff ff       	call   80102080 <ideintr>
-80105885:	eb 96                	jmp    8010581d <trap+0x14d>
-80105887:	90                   	nop
-80105888:	90                   	nop
-80105889:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105a50:	e8 2b c6 ff ff       	call   80102080 <ideintr>
+80105a55:	eb 96                	jmp    801059ed <trap+0x14d>
+80105a57:	90                   	nop
+80105a58:	90                   	nop
+80105a59:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     if(myproc()->killed)
-80105890:	e8 0b de ff ff       	call   801036a0 <myproc>
-80105895:	8b 70 24             	mov    0x24(%eax),%esi
-80105898:	85 f6                	test   %esi,%esi
-8010589a:	75 34                	jne    801058d0 <trap+0x200>
+80105a60:	e8 3b dc ff ff       	call   801036a0 <myproc>
+80105a65:	8b 70 24             	mov    0x24(%eax),%esi
+80105a68:	85 f6                	test   %esi,%esi
+80105a6a:	75 34                	jne    80105aa0 <trap+0x200>
     myproc()->tf = tf;
-8010589c:	e8 ff dd ff ff       	call   801036a0 <myproc>
-801058a1:	89 58 18             	mov    %ebx,0x18(%eax)
+80105a6c:	e8 2f dc ff ff       	call   801036a0 <myproc>
+80105a71:	89 58 18             	mov    %ebx,0x18(%eax)
     syscall();
-801058a4:	e8 27 ef ff ff       	call   801047d0 <syscall>
+80105a74:	e8 c7 ee ff ff       	call   80104940 <syscall>
     if(myproc()->killed)
-801058a9:	e8 f2 dd ff ff       	call   801036a0 <myproc>
-801058ae:	8b 48 24             	mov    0x24(%eax),%ecx
-801058b1:	85 c9                	test   %ecx,%ecx
-801058b3:	0f 84 18 ff ff ff    	je     801057d1 <trap+0x101>
+80105a79:	e8 22 dc ff ff       	call   801036a0 <myproc>
+80105a7e:	8b 48 24             	mov    0x24(%eax),%ecx
+80105a81:	85 c9                	test   %ecx,%ecx
+80105a83:	0f 84 18 ff ff ff    	je     801059a1 <trap+0x101>
       exit(0);
-801058b9:	c7 45 08 00 00 00 00 	movl   $0x0,0x8(%ebp)
+80105a89:	c7 45 08 00 00 00 00 	movl   $0x0,0x8(%ebp)
 }
-801058c0:	83 c4 3c             	add    $0x3c,%esp
-801058c3:	5b                   	pop    %ebx
-801058c4:	5e                   	pop    %esi
-801058c5:	5f                   	pop    %edi
-801058c6:	5d                   	pop    %ebp
+80105a90:	83 c4 3c             	add    $0x3c,%esp
+80105a93:	5b                   	pop    %ebx
+80105a94:	5e                   	pop    %esi
+80105a95:	5f                   	pop    %edi
+80105a96:	5d                   	pop    %ebp
       exit(0);
-801058c7:	e9 d4 e1 ff ff       	jmp    80103aa0 <exit>
-801058cc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80105a97:	e9 94 e0 ff ff       	jmp    80103b30 <exit>
+80105a9c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
       exit(0);
-801058d0:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-801058d7:	e8 c4 e1 ff ff       	call   80103aa0 <exit>
-801058dc:	eb be                	jmp    8010589c <trap+0x1cc>
-801058de:	66 90                	xchg   %ax,%ax
+80105aa0:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+80105aa7:	e8 84 e0 ff ff       	call   80103b30 <exit>
+80105aac:	eb be                	jmp    80105a6c <trap+0x1cc>
+80105aae:	66 90                	xchg   %ax,%ax
       acquire(&tickslock);
-801058e0:	c7 04 24 60 4e 11 80 	movl   $0x80114e60,(%esp)
-801058e7:	e8 64 ea ff ff       	call   80104350 <acquire>
+80105ab0:	c7 04 24 60 53 11 80 	movl   $0x80115360,(%esp)
+80105ab7:	e8 04 ea ff ff       	call   801044c0 <acquire>
       wakeup(&ticks);
-801058ec:	c7 04 24 a0 56 11 80 	movl   $0x801156a0,(%esp)
+80105abc:	c7 04 24 a0 5b 11 80 	movl   $0x80115ba0,(%esp)
       ticks++;
-801058f3:	83 05 a0 56 11 80 01 	addl   $0x1,0x801156a0
+80105ac3:	83 05 a0 5b 11 80 01 	addl   $0x1,0x80115ba0
       wakeup(&ticks);
-801058fa:	e8 f1 e5 ff ff       	call   80103ef0 <wakeup>
+80105aca:	e8 91 e5 ff ff       	call   80104060 <wakeup>
       release(&tickslock);
-801058ff:	c7 04 24 60 4e 11 80 	movl   $0x80114e60,(%esp)
-80105906:	e8 b5 ea ff ff       	call   801043c0 <release>
-8010590b:	e9 0d ff ff ff       	jmp    8010581d <trap+0x14d>
-80105910:	0f 20 d7             	mov    %cr2,%edi
+80105acf:	c7 04 24 60 53 11 80 	movl   $0x80115360,(%esp)
+80105ad6:	e8 55 ea ff ff       	call   80104530 <release>
+80105adb:	e9 0d ff ff ff       	jmp    801059ed <trap+0x14d>
+80105ae0:	0f 20 d7             	mov    %cr2,%edi
       cprintf("unexpected trap %d from cpu %d eip %x (cr2=0x%x)\n",
-80105913:	8b 73 38             	mov    0x38(%ebx),%esi
-80105916:	e8 65 dd ff ff       	call   80103680 <cpuid>
-8010591b:	89 7c 24 10          	mov    %edi,0x10(%esp)
-8010591f:	89 74 24 0c          	mov    %esi,0xc(%esp)
-80105923:	89 44 24 08          	mov    %eax,0x8(%esp)
-80105927:	8b 43 30             	mov    0x30(%ebx),%eax
-8010592a:	c7 04 24 ec 75 10 80 	movl   $0x801075ec,(%esp)
-80105931:	89 44 24 04          	mov    %eax,0x4(%esp)
-80105935:	e8 16 ad ff ff       	call   80100650 <cprintf>
+80105ae3:	8b 73 38             	mov    0x38(%ebx),%esi
+80105ae6:	e8 95 db ff ff       	call   80103680 <cpuid>
+80105aeb:	89 7c 24 10          	mov    %edi,0x10(%esp)
+80105aef:	89 74 24 0c          	mov    %esi,0xc(%esp)
+80105af3:	89 44 24 08          	mov    %eax,0x8(%esp)
+80105af7:	8b 43 30             	mov    0x30(%ebx),%eax
+80105afa:	c7 04 24 14 78 10 80 	movl   $0x80107814,(%esp)
+80105b01:	89 44 24 04          	mov    %eax,0x4(%esp)
+80105b05:	e8 46 ab ff ff       	call   80100650 <cprintf>
       panic("trap");
-8010593a:	c7 04 24 c2 75 10 80 	movl   $0x801075c2,(%esp)
-80105941:	e8 1a aa ff ff       	call   80100360 <panic>
-80105946:	66 90                	xchg   %ax,%ax
-80105948:	66 90                	xchg   %ax,%ax
-8010594a:	66 90                	xchg   %ax,%ax
-8010594c:	66 90                	xchg   %ax,%ax
-8010594e:	66 90                	xchg   %ax,%ax
+80105b0a:	c7 04 24 ea 77 10 80 	movl   $0x801077ea,(%esp)
+80105b11:	e8 4a a8 ff ff       	call   80100360 <panic>
+80105b16:	66 90                	xchg   %ax,%ax
+80105b18:	66 90                	xchg   %ax,%ax
+80105b1a:	66 90                	xchg   %ax,%ax
+80105b1c:	66 90                	xchg   %ax,%ax
+80105b1e:	66 90                	xchg   %ax,%ax
 
-80105950 <uartgetc>:
+80105b20 <uartgetc>:
 }
 
 static int
 uartgetc(void)
 {
   if(!uart)
-80105950:	a1 bc a5 10 80       	mov    0x8010a5bc,%eax
+80105b20:	a1 bc a5 10 80       	mov    0x8010a5bc,%eax
 {
-80105955:	55                   	push   %ebp
-80105956:	89 e5                	mov    %esp,%ebp
+80105b25:	55                   	push   %ebp
+80105b26:	89 e5                	mov    %esp,%ebp
   if(!uart)
-80105958:	85 c0                	test   %eax,%eax
-8010595a:	74 14                	je     80105970 <uartgetc+0x20>
+80105b28:	85 c0                	test   %eax,%eax
+80105b2a:	74 14                	je     80105b40 <uartgetc+0x20>
   asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-8010595c:	ba fd 03 00 00       	mov    $0x3fd,%edx
-80105961:	ec                   	in     (%dx),%al
+80105b2c:	ba fd 03 00 00       	mov    $0x3fd,%edx
+80105b31:	ec                   	in     (%dx),%al
     return -1;
   if(!(inb(COM1+5) & 0x01))
-80105962:	a8 01                	test   $0x1,%al
-80105964:	74 0a                	je     80105970 <uartgetc+0x20>
-80105966:	b2 f8                	mov    $0xf8,%dl
-80105968:	ec                   	in     (%dx),%al
+80105b32:	a8 01                	test   $0x1,%al
+80105b34:	74 0a                	je     80105b40 <uartgetc+0x20>
+80105b36:	b2 f8                	mov    $0xf8,%dl
+80105b38:	ec                   	in     (%dx),%al
     return -1;
   return inb(COM1+0);
-80105969:	0f b6 c0             	movzbl %al,%eax
+80105b39:	0f b6 c0             	movzbl %al,%eax
 }
-8010596c:	5d                   	pop    %ebp
-8010596d:	c3                   	ret    
-8010596e:	66 90                	xchg   %ax,%ax
+80105b3c:	5d                   	pop    %ebp
+80105b3d:	c3                   	ret    
+80105b3e:	66 90                	xchg   %ax,%ax
     return -1;
-80105970:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105b40:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 }
-80105975:	5d                   	pop    %ebp
-80105976:	c3                   	ret    
-80105977:	89 f6                	mov    %esi,%esi
-80105979:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+80105b45:	5d                   	pop    %ebp
+80105b46:	c3                   	ret    
+80105b47:	89 f6                	mov    %esi,%esi
+80105b49:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
 
-80105980 <uartputc>:
+80105b50 <uartputc>:
   if(!uart)
-80105980:	a1 bc a5 10 80       	mov    0x8010a5bc,%eax
-80105985:	85 c0                	test   %eax,%eax
-80105987:	74 3f                	je     801059c8 <uartputc+0x48>
-{
-80105989:	55                   	push   %ebp
-8010598a:	89 e5                	mov    %esp,%ebp
-8010598c:	56                   	push   %esi
-8010598d:	be fd 03 00 00       	mov    $0x3fd,%esi
-80105992:	53                   	push   %ebx
+80105b50:	a1 bc a5 10 80       	mov    0x8010a5bc,%eax
+80105b55:	85 c0                	test   %eax,%eax
+80105b57:	74 3f                	je     80105b98 <uartputc+0x48>
+{
+80105b59:	55                   	push   %ebp
+80105b5a:	89 e5                	mov    %esp,%ebp
+80105b5c:	56                   	push   %esi
+80105b5d:	be fd 03 00 00       	mov    $0x3fd,%esi
+80105b62:	53                   	push   %ebx
   if(!uart)
-80105993:	bb 80 00 00 00       	mov    $0x80,%ebx
+80105b63:	bb 80 00 00 00       	mov    $0x80,%ebx
 {
-80105998:	83 ec 10             	sub    $0x10,%esp
-8010599b:	eb 14                	jmp    801059b1 <uartputc+0x31>
-8010599d:	8d 76 00             	lea    0x0(%esi),%esi
+80105b68:	83 ec 10             	sub    $0x10,%esp
+80105b6b:	eb 14                	jmp    80105b81 <uartputc+0x31>
+80105b6d:	8d 76 00             	lea    0x0(%esi),%esi
     microdelay(10);
-801059a0:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
-801059a7:	e8 f4 cd ff ff       	call   801027a0 <microdelay>
+80105b70:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+80105b77:	e8 24 cc ff ff       	call   801027a0 <microdelay>
   for(i = 0; i < 128 && !(inb(COM1+5) & 0x20); i++)
-801059ac:	83 eb 01             	sub    $0x1,%ebx
-801059af:	74 07                	je     801059b8 <uartputc+0x38>
-801059b1:	89 f2                	mov    %esi,%edx
-801059b3:	ec                   	in     (%dx),%al
-801059b4:	a8 20                	test   $0x20,%al
-801059b6:	74 e8                	je     801059a0 <uartputc+0x20>
+80105b7c:	83 eb 01             	sub    $0x1,%ebx
+80105b7f:	74 07                	je     80105b88 <uartputc+0x38>
+80105b81:	89 f2                	mov    %esi,%edx
+80105b83:	ec                   	in     (%dx),%al
+80105b84:	a8 20                	test   $0x20,%al
+80105b86:	74 e8                	je     80105b70 <uartputc+0x20>
   outb(COM1+0, c);
-801059b8:	0f b6 45 08          	movzbl 0x8(%ebp),%eax
+80105b88:	0f b6 45 08          	movzbl 0x8(%ebp),%eax
   asm volatile("out %0,%1" : : "a" (data), "d" (port));
-801059bc:	ba f8 03 00 00       	mov    $0x3f8,%edx
-801059c1:	ee                   	out    %al,(%dx)
-}
-801059c2:	83 c4 10             	add    $0x10,%esp
-801059c5:	5b                   	pop    %ebx
-801059c6:	5e                   	pop    %esi
-801059c7:	5d                   	pop    %ebp
-801059c8:	f3 c3                	repz ret 
-801059ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-801059d0 <uartinit>:
-{
-801059d0:	55                   	push   %ebp
-801059d1:	31 c9                	xor    %ecx,%ecx
-801059d3:	89 e5                	mov    %esp,%ebp
-801059d5:	89 c8                	mov    %ecx,%eax
-801059d7:	57                   	push   %edi
-801059d8:	bf fa 03 00 00       	mov    $0x3fa,%edi
-801059dd:	56                   	push   %esi
-801059de:	89 fa                	mov    %edi,%edx
-801059e0:	53                   	push   %ebx
-801059e1:	83 ec 1c             	sub    $0x1c,%esp
-801059e4:	ee                   	out    %al,(%dx)
-801059e5:	be fb 03 00 00       	mov    $0x3fb,%esi
-801059ea:	b8 80 ff ff ff       	mov    $0xffffff80,%eax
-801059ef:	89 f2                	mov    %esi,%edx
-801059f1:	ee                   	out    %al,(%dx)
-801059f2:	b8 0c 00 00 00       	mov    $0xc,%eax
-801059f7:	b2 f8                	mov    $0xf8,%dl
-801059f9:	ee                   	out    %al,(%dx)
-801059fa:	bb f9 03 00 00       	mov    $0x3f9,%ebx
-801059ff:	89 c8                	mov    %ecx,%eax
-80105a01:	89 da                	mov    %ebx,%edx
-80105a03:	ee                   	out    %al,(%dx)
-80105a04:	b8 03 00 00 00       	mov    $0x3,%eax
-80105a09:	89 f2                	mov    %esi,%edx
-80105a0b:	ee                   	out    %al,(%dx)
-80105a0c:	b2 fc                	mov    $0xfc,%dl
-80105a0e:	89 c8                	mov    %ecx,%eax
-80105a10:	ee                   	out    %al,(%dx)
-80105a11:	b8 01 00 00 00       	mov    $0x1,%eax
-80105a16:	89 da                	mov    %ebx,%edx
-80105a18:	ee                   	out    %al,(%dx)
+80105b8c:	ba f8 03 00 00       	mov    $0x3f8,%edx
+80105b91:	ee                   	out    %al,(%dx)
+}
+80105b92:	83 c4 10             	add    $0x10,%esp
+80105b95:	5b                   	pop    %ebx
+80105b96:	5e                   	pop    %esi
+80105b97:	5d                   	pop    %ebp
+80105b98:	f3 c3                	repz ret 
+80105b9a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80105ba0 <uartinit>:
+{
+80105ba0:	55                   	push   %ebp
+80105ba1:	31 c9                	xor    %ecx,%ecx
+80105ba3:	89 e5                	mov    %esp,%ebp
+80105ba5:	89 c8                	mov    %ecx,%eax
+80105ba7:	57                   	push   %edi
+80105ba8:	bf fa 03 00 00       	mov    $0x3fa,%edi
+80105bad:	56                   	push   %esi
+80105bae:	89 fa                	mov    %edi,%edx
+80105bb0:	53                   	push   %ebx
+80105bb1:	83 ec 1c             	sub    $0x1c,%esp
+80105bb4:	ee                   	out    %al,(%dx)
+80105bb5:	be fb 03 00 00       	mov    $0x3fb,%esi
+80105bba:	b8 80 ff ff ff       	mov    $0xffffff80,%eax
+80105bbf:	89 f2                	mov    %esi,%edx
+80105bc1:	ee                   	out    %al,(%dx)
+80105bc2:	b8 0c 00 00 00       	mov    $0xc,%eax
+80105bc7:	b2 f8                	mov    $0xf8,%dl
+80105bc9:	ee                   	out    %al,(%dx)
+80105bca:	bb f9 03 00 00       	mov    $0x3f9,%ebx
+80105bcf:	89 c8                	mov    %ecx,%eax
+80105bd1:	89 da                	mov    %ebx,%edx
+80105bd3:	ee                   	out    %al,(%dx)
+80105bd4:	b8 03 00 00 00       	mov    $0x3,%eax
+80105bd9:	89 f2                	mov    %esi,%edx
+80105bdb:	ee                   	out    %al,(%dx)
+80105bdc:	b2 fc                	mov    $0xfc,%dl
+80105bde:	89 c8                	mov    %ecx,%eax
+80105be0:	ee                   	out    %al,(%dx)
+80105be1:	b8 01 00 00 00       	mov    $0x1,%eax
+80105be6:	89 da                	mov    %ebx,%edx
+80105be8:	ee                   	out    %al,(%dx)
   asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-80105a19:	b2 fd                	mov    $0xfd,%dl
-80105a1b:	ec                   	in     (%dx),%al
+80105be9:	b2 fd                	mov    $0xfd,%dl
+80105beb:	ec                   	in     (%dx),%al
   if(inb(COM1+5) == 0xFF)
-80105a1c:	3c ff                	cmp    $0xff,%al
-80105a1e:	74 42                	je     80105a62 <uartinit+0x92>
+80105bec:	3c ff                	cmp    $0xff,%al
+80105bee:	74 42                	je     80105c32 <uartinit+0x92>
   uart = 1;
-80105a20:	c7 05 bc a5 10 80 01 	movl   $0x1,0x8010a5bc
-80105a27:	00 00 00 
-80105a2a:	89 fa                	mov    %edi,%edx
-80105a2c:	ec                   	in     (%dx),%al
-80105a2d:	b2 f8                	mov    $0xf8,%dl
-80105a2f:	ec                   	in     (%dx),%al
+80105bf0:	c7 05 bc a5 10 80 01 	movl   $0x1,0x8010a5bc
+80105bf7:	00 00 00 
+80105bfa:	89 fa                	mov    %edi,%edx
+80105bfc:	ec                   	in     (%dx),%al
+80105bfd:	b2 f8                	mov    $0xf8,%dl
+80105bff:	ec                   	in     (%dx),%al
   ioapicenable(IRQ_COM1, 0);
-80105a30:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
-80105a37:	00 
+80105c00:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+80105c07:	00 
   for(p="xv6...\n"; *p; p++)
-80105a38:	bb e4 76 10 80       	mov    $0x801076e4,%ebx
+80105c08:	bb 0c 79 10 80       	mov    $0x8010790c,%ebx
   ioapicenable(IRQ_COM1, 0);
-80105a3d:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
-80105a44:	e8 67 c8 ff ff       	call   801022b0 <ioapicenable>
+80105c0d:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
+80105c14:	e8 97 c6 ff ff       	call   801022b0 <ioapicenable>
   for(p="xv6...\n"; *p; p++)
-80105a49:	b8 78 00 00 00       	mov    $0x78,%eax
-80105a4e:	66 90                	xchg   %ax,%ax
+80105c19:	b8 78 00 00 00       	mov    $0x78,%eax
+80105c1e:	66 90                	xchg   %ax,%ax
     uartputc(*p);
-80105a50:	89 04 24             	mov    %eax,(%esp)
+80105c20:	89 04 24             	mov    %eax,(%esp)
   for(p="xv6...\n"; *p; p++)
-80105a53:	83 c3 01             	add    $0x1,%ebx
+80105c23:	83 c3 01             	add    $0x1,%ebx
     uartputc(*p);
-80105a56:	e8 25 ff ff ff       	call   80105980 <uartputc>
+80105c26:	e8 25 ff ff ff       	call   80105b50 <uartputc>
   for(p="xv6...\n"; *p; p++)
-80105a5b:	0f be 03             	movsbl (%ebx),%eax
-80105a5e:	84 c0                	test   %al,%al
-80105a60:	75 ee                	jne    80105a50 <uartinit+0x80>
+80105c2b:	0f be 03             	movsbl (%ebx),%eax
+80105c2e:	84 c0                	test   %al,%al
+80105c30:	75 ee                	jne    80105c20 <uartinit+0x80>
 }
-80105a62:	83 c4 1c             	add    $0x1c,%esp
-80105a65:	5b                   	pop    %ebx
-80105a66:	5e                   	pop    %esi
-80105a67:	5f                   	pop    %edi
-80105a68:	5d                   	pop    %ebp
-80105a69:	c3                   	ret    
-80105a6a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80105c32:	83 c4 1c             	add    $0x1c,%esp
+80105c35:	5b                   	pop    %ebx
+80105c36:	5e                   	pop    %esi
+80105c37:	5f                   	pop    %edi
+80105c38:	5d                   	pop    %ebp
+80105c39:	c3                   	ret    
+80105c3a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 
-80105a70 <uartintr>:
+80105c40 <uartintr>:
 
 void
 uartintr(void)
 {
-80105a70:	55                   	push   %ebp
-80105a71:	89 e5                	mov    %esp,%ebp
-80105a73:	83 ec 18             	sub    $0x18,%esp
+80105c40:	55                   	push   %ebp
+80105c41:	89 e5                	mov    %esp,%ebp
+80105c43:	83 ec 18             	sub    $0x18,%esp
   consoleintr(uartgetc);
-80105a76:	c7 04 24 50 59 10 80 	movl   $0x80105950,(%esp)
-80105a7d:	e8 2e ad ff ff       	call   801007b0 <consoleintr>
+80105c46:	c7 04 24 20 5b 10 80 	movl   $0x80105b20,(%esp)
+80105c4d:	e8 5e ab ff ff       	call   801007b0 <consoleintr>
 }
-80105a82:	c9                   	leave  
-80105a83:	c3                   	ret    
+80105c52:	c9                   	leave  
+80105c53:	c3                   	ret    
 
-80105a84 <vector0>:
+80105c54 <vector0>:
 # generated by vectors.pl - do not edit
 # handlers
 .globl alltraps
 .globl vector0
 vector0:
   pushl $0
-80105a84:	6a 00                	push   $0x0
+80105c54:	6a 00                	push   $0x0
   pushl $0
-80105a86:	6a 00                	push   $0x0
+80105c56:	6a 00                	push   $0x0
   jmp alltraps
-80105a88:	e9 42 fb ff ff       	jmp    801055cf <alltraps>
+80105c58:	e9 4c fb ff ff       	jmp    801057a9 <alltraps>
 
-80105a8d <vector1>:
+80105c5d <vector1>:
 .globl vector1
 vector1:
   pushl $0
-80105a8d:	6a 00                	push   $0x0
+80105c5d:	6a 00                	push   $0x0
   pushl $1
-80105a8f:	6a 01                	push   $0x1
+80105c5f:	6a 01                	push   $0x1
   jmp alltraps
-80105a91:	e9 39 fb ff ff       	jmp    801055cf <alltraps>
+80105c61:	e9 43 fb ff ff       	jmp    801057a9 <alltraps>
 
-80105a96 <vector2>:
+80105c66 <vector2>:
 .globl vector2
 vector2:
   pushl $0
-80105a96:	6a 00                	push   $0x0
+80105c66:	6a 00                	push   $0x0
   pushl $2
-80105a98:	6a 02                	push   $0x2
+80105c68:	6a 02                	push   $0x2
   jmp alltraps
-80105a9a:	e9 30 fb ff ff       	jmp    801055cf <alltraps>
+80105c6a:	e9 3a fb ff ff       	jmp    801057a9 <alltraps>
 
-80105a9f <vector3>:
+80105c6f <vector3>:
 .globl vector3
 vector3:
   pushl $0
-80105a9f:	6a 00                	push   $0x0
+80105c6f:	6a 00                	push   $0x0
   pushl $3
-80105aa1:	6a 03                	push   $0x3
+80105c71:	6a 03                	push   $0x3
   jmp alltraps
-80105aa3:	e9 27 fb ff ff       	jmp    801055cf <alltraps>
+80105c73:	e9 31 fb ff ff       	jmp    801057a9 <alltraps>
 
-80105aa8 <vector4>:
+80105c78 <vector4>:
 .globl vector4
 vector4:
   pushl $0
-80105aa8:	6a 00                	push   $0x0
+80105c78:	6a 00                	push   $0x0
   pushl $4
-80105aaa:	6a 04                	push   $0x4
+80105c7a:	6a 04                	push   $0x4
   jmp alltraps
-80105aac:	e9 1e fb ff ff       	jmp    801055cf <alltraps>
+80105c7c:	e9 28 fb ff ff       	jmp    801057a9 <alltraps>
 
-80105ab1 <vector5>:
+80105c81 <vector5>:
 .globl vector5
 vector5:
   pushl $0
-80105ab1:	6a 00                	push   $0x0
+80105c81:	6a 00                	push   $0x0
   pushl $5
-80105ab3:	6a 05                	push   $0x5
+80105c83:	6a 05                	push   $0x5
   jmp alltraps
-80105ab5:	e9 15 fb ff ff       	jmp    801055cf <alltraps>
+80105c85:	e9 1f fb ff ff       	jmp    801057a9 <alltraps>
 
-80105aba <vector6>:
+80105c8a <vector6>:
 .globl vector6
 vector6:
   pushl $0
-80105aba:	6a 00                	push   $0x0
+80105c8a:	6a 00                	push   $0x0
   pushl $6
-80105abc:	6a 06                	push   $0x6
+80105c8c:	6a 06                	push   $0x6
   jmp alltraps
-80105abe:	e9 0c fb ff ff       	jmp    801055cf <alltraps>
+80105c8e:	e9 16 fb ff ff       	jmp    801057a9 <alltraps>
 
-80105ac3 <vector7>:
+80105c93 <vector7>:
 .globl vector7
 vector7:
   pushl $0
-80105ac3:	6a 00                	push   $0x0
+80105c93:	6a 00                	push   $0x0
   pushl $7
-80105ac5:	6a 07                	push   $0x7
+80105c95:	6a 07                	push   $0x7
   jmp alltraps
-80105ac7:	e9 03 fb ff ff       	jmp    801055cf <alltraps>
+80105c97:	e9 0d fb ff ff       	jmp    801057a9 <alltraps>
 
-80105acc <vector8>:
+80105c9c <vector8>:
 .globl vector8
 vector8:
   pushl $8
-80105acc:	6a 08                	push   $0x8
+80105c9c:	6a 08                	push   $0x8
   jmp alltraps
-80105ace:	e9 fc fa ff ff       	jmp    801055cf <alltraps>
+80105c9e:	e9 06 fb ff ff       	jmp    801057a9 <alltraps>
 
-80105ad3 <vector9>:
+80105ca3 <vector9>:
 .globl vector9
 vector9:
   pushl $0
-80105ad3:	6a 00                	push   $0x0
+80105ca3:	6a 00                	push   $0x0
   pushl $9
-80105ad5:	6a 09                	push   $0x9
+80105ca5:	6a 09                	push   $0x9
   jmp alltraps
-80105ad7:	e9 f3 fa ff ff       	jmp    801055cf <alltraps>
+80105ca7:	e9 fd fa ff ff       	jmp    801057a9 <alltraps>
 
-80105adc <vector10>:
+80105cac <vector10>:
 .globl vector10
 vector10:
   pushl $10
-80105adc:	6a 0a                	push   $0xa
+80105cac:	6a 0a                	push   $0xa
   jmp alltraps
-80105ade:	e9 ec fa ff ff       	jmp    801055cf <alltraps>
+80105cae:	e9 f6 fa ff ff       	jmp    801057a9 <alltraps>
 
-80105ae3 <vector11>:
+80105cb3 <vector11>:
 .globl vector11
 vector11:
   pushl $11
-80105ae3:	6a 0b                	push   $0xb
+80105cb3:	6a 0b                	push   $0xb
   jmp alltraps
-80105ae5:	e9 e5 fa ff ff       	jmp    801055cf <alltraps>
+80105cb5:	e9 ef fa ff ff       	jmp    801057a9 <alltraps>
 
-80105aea <vector12>:
+80105cba <vector12>:
 .globl vector12
 vector12:
   pushl $12
-80105aea:	6a 0c                	push   $0xc
+80105cba:	6a 0c                	push   $0xc
   jmp alltraps
-80105aec:	e9 de fa ff ff       	jmp    801055cf <alltraps>
+80105cbc:	e9 e8 fa ff ff       	jmp    801057a9 <alltraps>
 
-80105af1 <vector13>:
+80105cc1 <vector13>:
 .globl vector13
 vector13:
   pushl $13
-80105af1:	6a 0d                	push   $0xd
+80105cc1:	6a 0d                	push   $0xd
   jmp alltraps
-80105af3:	e9 d7 fa ff ff       	jmp    801055cf <alltraps>
+80105cc3:	e9 e1 fa ff ff       	jmp    801057a9 <alltraps>
 
-80105af8 <vector14>:
+80105cc8 <vector14>:
 .globl vector14
 vector14:
   pushl $14
-80105af8:	6a 0e                	push   $0xe
+80105cc8:	6a 0e                	push   $0xe
   jmp alltraps
-80105afa:	e9 d0 fa ff ff       	jmp    801055cf <alltraps>
+80105cca:	e9 da fa ff ff       	jmp    801057a9 <alltraps>
 
-80105aff <vector15>:
+80105ccf <vector15>:
 .globl vector15
 vector15:
   pushl $0
-80105aff:	6a 00                	push   $0x0
+80105ccf:	6a 00                	push   $0x0
   pushl $15
-80105b01:	6a 0f                	push   $0xf
+80105cd1:	6a 0f                	push   $0xf
   jmp alltraps
-80105b03:	e9 c7 fa ff ff       	jmp    801055cf <alltraps>
+80105cd3:	e9 d1 fa ff ff       	jmp    801057a9 <alltraps>
 
-80105b08 <vector16>:
+80105cd8 <vector16>:
 .globl vector16
 vector16:
   pushl $0
-80105b08:	6a 00                	push   $0x0
+80105cd8:	6a 00                	push   $0x0
   pushl $16
-80105b0a:	6a 10                	push   $0x10
+80105cda:	6a 10                	push   $0x10
   jmp alltraps
-80105b0c:	e9 be fa ff ff       	jmp    801055cf <alltraps>
+80105cdc:	e9 c8 fa ff ff       	jmp    801057a9 <alltraps>
 
-80105b11 <vector17>:
+80105ce1 <vector17>:
 .globl vector17
 vector17:
   pushl $17
-80105b11:	6a 11                	push   $0x11
+80105ce1:	6a 11                	push   $0x11
   jmp alltraps
-80105b13:	e9 b7 fa ff ff       	jmp    801055cf <alltraps>
+80105ce3:	e9 c1 fa ff ff       	jmp    801057a9 <alltraps>
 
-80105b18 <vector18>:
+80105ce8 <vector18>:
 .globl vector18
 vector18:
   pushl $0
-80105b18:	6a 00                	push   $0x0
+80105ce8:	6a 00                	push   $0x0
   pushl $18
-80105b1a:	6a 12                	push   $0x12
+80105cea:	6a 12                	push   $0x12
   jmp alltraps
-80105b1c:	e9 ae fa ff ff       	jmp    801055cf <alltraps>
+80105cec:	e9 b8 fa ff ff       	jmp    801057a9 <alltraps>
 
-80105b21 <vector19>:
+80105cf1 <vector19>:
 .globl vector19
 vector19:
   pushl $0
-80105b21:	6a 00                	push   $0x0
+80105cf1:	6a 00                	push   $0x0
   pushl $19
-80105b23:	6a 13                	push   $0x13
+80105cf3:	6a 13                	push   $0x13
   jmp alltraps
-80105b25:	e9 a5 fa ff ff       	jmp    801055cf <alltraps>
+80105cf5:	e9 af fa ff ff       	jmp    801057a9 <alltraps>
 
-80105b2a <vector20>:
+80105cfa <vector20>:
 .globl vector20
 vector20:
   pushl $0
-80105b2a:	6a 00                	push   $0x0
+80105cfa:	6a 00                	push   $0x0
   pushl $20
-80105b2c:	6a 14                	push   $0x14
+80105cfc:	6a 14                	push   $0x14
   jmp alltraps
-80105b2e:	e9 9c fa ff ff       	jmp    801055cf <alltraps>
+80105cfe:	e9 a6 fa ff ff       	jmp    801057a9 <alltraps>
 
-80105b33 <vector21>:
+80105d03 <vector21>:
 .globl vector21
 vector21:
   pushl $0
-80105b33:	6a 00                	push   $0x0
+80105d03:	6a 00                	push   $0x0
   pushl $21
-80105b35:	6a 15                	push   $0x15
+80105d05:	6a 15                	push   $0x15
   jmp alltraps
-80105b37:	e9 93 fa ff ff       	jmp    801055cf <alltraps>
+80105d07:	e9 9d fa ff ff       	jmp    801057a9 <alltraps>
 
-80105b3c <vector22>:
+80105d0c <vector22>:
 .globl vector22
 vector22:
   pushl $0
-80105b3c:	6a 00                	push   $0x0
+80105d0c:	6a 00                	push   $0x0
   pushl $22
-80105b3e:	6a 16                	push   $0x16
+80105d0e:	6a 16                	push   $0x16
   jmp alltraps
-80105b40:	e9 8a fa ff ff       	jmp    801055cf <alltraps>
+80105d10:	e9 94 fa ff ff       	jmp    801057a9 <alltraps>
 
-80105b45 <vector23>:
+80105d15 <vector23>:
 .globl vector23
 vector23:
   pushl $0
-80105b45:	6a 00                	push   $0x0
+80105d15:	6a 00                	push   $0x0
   pushl $23
-80105b47:	6a 17                	push   $0x17
+80105d17:	6a 17                	push   $0x17
   jmp alltraps
-80105b49:	e9 81 fa ff ff       	jmp    801055cf <alltraps>
+80105d19:	e9 8b fa ff ff       	jmp    801057a9 <alltraps>
 
-80105b4e <vector24>:
+80105d1e <vector24>:
 .globl vector24
 vector24:
   pushl $0
-80105b4e:	6a 00                	push   $0x0
+80105d1e:	6a 00                	push   $0x0
   pushl $24
-80105b50:	6a 18                	push   $0x18
+80105d20:	6a 18                	push   $0x18
   jmp alltraps
-80105b52:	e9 78 fa ff ff       	jmp    801055cf <alltraps>
+80105d22:	e9 82 fa ff ff       	jmp    801057a9 <alltraps>
 
-80105b57 <vector25>:
+80105d27 <vector25>:
 .globl vector25
 vector25:
   pushl $0
-80105b57:	6a 00                	push   $0x0
+80105d27:	6a 00                	push   $0x0
   pushl $25
-80105b59:	6a 19                	push   $0x19
+80105d29:	6a 19                	push   $0x19
   jmp alltraps
-80105b5b:	e9 6f fa ff ff       	jmp    801055cf <alltraps>
+80105d2b:	e9 79 fa ff ff       	jmp    801057a9 <alltraps>
 
-80105b60 <vector26>:
+80105d30 <vector26>:
 .globl vector26
 vector26:
   pushl $0
-80105b60:	6a 00                	push   $0x0
+80105d30:	6a 00                	push   $0x0
   pushl $26
-80105b62:	6a 1a                	push   $0x1a
+80105d32:	6a 1a                	push   $0x1a
   jmp alltraps
-80105b64:	e9 66 fa ff ff       	jmp    801055cf <alltraps>
+80105d34:	e9 70 fa ff ff       	jmp    801057a9 <alltraps>
 
-80105b69 <vector27>:
+80105d39 <vector27>:
 .globl vector27
 vector27:
   pushl $0
-80105b69:	6a 00                	push   $0x0
+80105d39:	6a 00                	push   $0x0
   pushl $27
-80105b6b:	6a 1b                	push   $0x1b
+80105d3b:	6a 1b                	push   $0x1b
   jmp alltraps
-80105b6d:	e9 5d fa ff ff       	jmp    801055cf <alltraps>
+80105d3d:	e9 67 fa ff ff       	jmp    801057a9 <alltraps>
 
-80105b72 <vector28>:
+80105d42 <vector28>:
 .globl vector28
 vector28:
   pushl $0
-80105b72:	6a 00                	push   $0x0
+80105d42:	6a 00                	push   $0x0
   pushl $28
-80105b74:	6a 1c                	push   $0x1c
+80105d44:	6a 1c                	push   $0x1c
   jmp alltraps
-80105b76:	e9 54 fa ff ff       	jmp    801055cf <alltraps>
+80105d46:	e9 5e fa ff ff       	jmp    801057a9 <alltraps>
 
-80105b7b <vector29>:
+80105d4b <vector29>:
 .globl vector29
 vector29:
   pushl $0
-80105b7b:	6a 00                	push   $0x0
+80105d4b:	6a 00                	push   $0x0
   pushl $29
-80105b7d:	6a 1d                	push   $0x1d
+80105d4d:	6a 1d                	push   $0x1d
   jmp alltraps
-80105b7f:	e9 4b fa ff ff       	jmp    801055cf <alltraps>
+80105d4f:	e9 55 fa ff ff       	jmp    801057a9 <alltraps>
 
-80105b84 <vector30>:
+80105d54 <vector30>:
 .globl vector30
 vector30:
   pushl $0
-80105b84:	6a 00                	push   $0x0
+80105d54:	6a 00                	push   $0x0
   pushl $30
-80105b86:	6a 1e                	push   $0x1e
+80105d56:	6a 1e                	push   $0x1e
   jmp alltraps
-80105b88:	e9 42 fa ff ff       	jmp    801055cf <alltraps>
+80105d58:	e9 4c fa ff ff       	jmp    801057a9 <alltraps>
 
-80105b8d <vector31>:
+80105d5d <vector31>:
 .globl vector31
 vector31:
   pushl $0
-80105b8d:	6a 00                	push   $0x0
+80105d5d:	6a 00                	push   $0x0
   pushl $31
-80105b8f:	6a 1f                	push   $0x1f
+80105d5f:	6a 1f                	push   $0x1f
   jmp alltraps
-80105b91:	e9 39 fa ff ff       	jmp    801055cf <alltraps>
+80105d61:	e9 43 fa ff ff       	jmp    801057a9 <alltraps>
 
-80105b96 <vector32>:
+80105d66 <vector32>:
 .globl vector32
 vector32:
   pushl $0
-80105b96:	6a 00                	push   $0x0
+80105d66:	6a 00                	push   $0x0
   pushl $32
-80105b98:	6a 20                	push   $0x20
+80105d68:	6a 20                	push   $0x20
   jmp alltraps
-80105b9a:	e9 30 fa ff ff       	jmp    801055cf <alltraps>
+80105d6a:	e9 3a fa ff ff       	jmp    801057a9 <alltraps>
 
-80105b9f <vector33>:
+80105d6f <vector33>:
 .globl vector33
 vector33:
   pushl $0
-80105b9f:	6a 00                	push   $0x0
+80105d6f:	6a 00                	push   $0x0
   pushl $33
-80105ba1:	6a 21                	push   $0x21
+80105d71:	6a 21                	push   $0x21
   jmp alltraps
-80105ba3:	e9 27 fa ff ff       	jmp    801055cf <alltraps>
+80105d73:	e9 31 fa ff ff       	jmp    801057a9 <alltraps>
 
-80105ba8 <vector34>:
+80105d78 <vector34>:
 .globl vector34
 vector34:
   pushl $0
-80105ba8:	6a 00                	push   $0x0
+80105d78:	6a 00                	push   $0x0
   pushl $34
-80105baa:	6a 22                	push   $0x22
+80105d7a:	6a 22                	push   $0x22
   jmp alltraps
-80105bac:	e9 1e fa ff ff       	jmp    801055cf <alltraps>
+80105d7c:	e9 28 fa ff ff       	jmp    801057a9 <alltraps>
 
-80105bb1 <vector35>:
+80105d81 <vector35>:
 .globl vector35
 vector35:
   pushl $0
-80105bb1:	6a 00                	push   $0x0
+80105d81:	6a 00                	push   $0x0
   pushl $35
-80105bb3:	6a 23                	push   $0x23
+80105d83:	6a 23                	push   $0x23
   jmp alltraps
-80105bb5:	e9 15 fa ff ff       	jmp    801055cf <alltraps>
+80105d85:	e9 1f fa ff ff       	jmp    801057a9 <alltraps>
 
-80105bba <vector36>:
+80105d8a <vector36>:
 .globl vector36
 vector36:
   pushl $0
-80105bba:	6a 00                	push   $0x0
+80105d8a:	6a 00                	push   $0x0
   pushl $36
-80105bbc:	6a 24                	push   $0x24
+80105d8c:	6a 24                	push   $0x24
   jmp alltraps
-80105bbe:	e9 0c fa ff ff       	jmp    801055cf <alltraps>
+80105d8e:	e9 16 fa ff ff       	jmp    801057a9 <alltraps>
 
-80105bc3 <vector37>:
+80105d93 <vector37>:
 .globl vector37
 vector37:
   pushl $0
-80105bc3:	6a 00                	push   $0x0
+80105d93:	6a 00                	push   $0x0
   pushl $37
-80105bc5:	6a 25                	push   $0x25
+80105d95:	6a 25                	push   $0x25
   jmp alltraps
-80105bc7:	e9 03 fa ff ff       	jmp    801055cf <alltraps>
+80105d97:	e9 0d fa ff ff       	jmp    801057a9 <alltraps>
 
-80105bcc <vector38>:
+80105d9c <vector38>:
 .globl vector38
 vector38:
   pushl $0
-80105bcc:	6a 00                	push   $0x0
+80105d9c:	6a 00                	push   $0x0
   pushl $38
-80105bce:	6a 26                	push   $0x26
+80105d9e:	6a 26                	push   $0x26
   jmp alltraps
-80105bd0:	e9 fa f9 ff ff       	jmp    801055cf <alltraps>
+80105da0:	e9 04 fa ff ff       	jmp    801057a9 <alltraps>
 
-80105bd5 <vector39>:
+80105da5 <vector39>:
 .globl vector39
 vector39:
   pushl $0
-80105bd5:	6a 00                	push   $0x0
+80105da5:	6a 00                	push   $0x0
   pushl $39
-80105bd7:	6a 27                	push   $0x27
+80105da7:	6a 27                	push   $0x27
   jmp alltraps
-80105bd9:	e9 f1 f9 ff ff       	jmp    801055cf <alltraps>
+80105da9:	e9 fb f9 ff ff       	jmp    801057a9 <alltraps>
 
-80105bde <vector40>:
+80105dae <vector40>:
 .globl vector40
 vector40:
   pushl $0
-80105bde:	6a 00                	push   $0x0
+80105dae:	6a 00                	push   $0x0
   pushl $40
-80105be0:	6a 28                	push   $0x28
+80105db0:	6a 28                	push   $0x28
   jmp alltraps
-80105be2:	e9 e8 f9 ff ff       	jmp    801055cf <alltraps>
+80105db2:	e9 f2 f9 ff ff       	jmp    801057a9 <alltraps>
 
-80105be7 <vector41>:
+80105db7 <vector41>:
 .globl vector41
 vector41:
   pushl $0
-80105be7:	6a 00                	push   $0x0
+80105db7:	6a 00                	push   $0x0
   pushl $41
-80105be9:	6a 29                	push   $0x29
+80105db9:	6a 29                	push   $0x29
   jmp alltraps
-80105beb:	e9 df f9 ff ff       	jmp    801055cf <alltraps>
+80105dbb:	e9 e9 f9 ff ff       	jmp    801057a9 <alltraps>
 
-80105bf0 <vector42>:
+80105dc0 <vector42>:
 .globl vector42
 vector42:
   pushl $0
-80105bf0:	6a 00                	push   $0x0
+80105dc0:	6a 00                	push   $0x0
   pushl $42
-80105bf2:	6a 2a                	push   $0x2a
+80105dc2:	6a 2a                	push   $0x2a
   jmp alltraps
-80105bf4:	e9 d6 f9 ff ff       	jmp    801055cf <alltraps>
+80105dc4:	e9 e0 f9 ff ff       	jmp    801057a9 <alltraps>
 
-80105bf9 <vector43>:
+80105dc9 <vector43>:
 .globl vector43
 vector43:
   pushl $0
-80105bf9:	6a 00                	push   $0x0
+80105dc9:	6a 00                	push   $0x0
   pushl $43
-80105bfb:	6a 2b                	push   $0x2b
+80105dcb:	6a 2b                	push   $0x2b
   jmp alltraps
-80105bfd:	e9 cd f9 ff ff       	jmp    801055cf <alltraps>
+80105dcd:	e9 d7 f9 ff ff       	jmp    801057a9 <alltraps>
 
-80105c02 <vector44>:
+80105dd2 <vector44>:
 .globl vector44
 vector44:
   pushl $0
-80105c02:	6a 00                	push   $0x0
+80105dd2:	6a 00                	push   $0x0
   pushl $44
-80105c04:	6a 2c                	push   $0x2c
+80105dd4:	6a 2c                	push   $0x2c
   jmp alltraps
-80105c06:	e9 c4 f9 ff ff       	jmp    801055cf <alltraps>
+80105dd6:	e9 ce f9 ff ff       	jmp    801057a9 <alltraps>
 
-80105c0b <vector45>:
+80105ddb <vector45>:
 .globl vector45
 vector45:
   pushl $0
-80105c0b:	6a 00                	push   $0x0
+80105ddb:	6a 00                	push   $0x0
   pushl $45
-80105c0d:	6a 2d                	push   $0x2d
+80105ddd:	6a 2d                	push   $0x2d
   jmp alltraps
-80105c0f:	e9 bb f9 ff ff       	jmp    801055cf <alltraps>
+80105ddf:	e9 c5 f9 ff ff       	jmp    801057a9 <alltraps>
 
-80105c14 <vector46>:
+80105de4 <vector46>:
 .globl vector46
 vector46:
   pushl $0
-80105c14:	6a 00                	push   $0x0
+80105de4:	6a 00                	push   $0x0
   pushl $46
-80105c16:	6a 2e                	push   $0x2e
+80105de6:	6a 2e                	push   $0x2e
   jmp alltraps
-80105c18:	e9 b2 f9 ff ff       	jmp    801055cf <alltraps>
+80105de8:	e9 bc f9 ff ff       	jmp    801057a9 <alltraps>
 
-80105c1d <vector47>:
+80105ded <vector47>:
 .globl vector47
 vector47:
   pushl $0
-80105c1d:	6a 00                	push   $0x0
+80105ded:	6a 00                	push   $0x0
   pushl $47
-80105c1f:	6a 2f                	push   $0x2f
+80105def:	6a 2f                	push   $0x2f
   jmp alltraps
-80105c21:	e9 a9 f9 ff ff       	jmp    801055cf <alltraps>
+80105df1:	e9 b3 f9 ff ff       	jmp    801057a9 <alltraps>
 
-80105c26 <vector48>:
+80105df6 <vector48>:
 .globl vector48
 vector48:
   pushl $0
-80105c26:	6a 00                	push   $0x0
+80105df6:	6a 00                	push   $0x0
   pushl $48
-80105c28:	6a 30                	push   $0x30
+80105df8:	6a 30                	push   $0x30
   jmp alltraps
-80105c2a:	e9 a0 f9 ff ff       	jmp    801055cf <alltraps>
+80105dfa:	e9 aa f9 ff ff       	jmp    801057a9 <alltraps>
 
-80105c2f <vector49>:
+80105dff <vector49>:
 .globl vector49
 vector49:
   pushl $0
-80105c2f:	6a 00                	push   $0x0
+80105dff:	6a 00                	push   $0x0
   pushl $49
-80105c31:	6a 31                	push   $0x31
+80105e01:	6a 31                	push   $0x31
   jmp alltraps
-80105c33:	e9 97 f9 ff ff       	jmp    801055cf <alltraps>
+80105e03:	e9 a1 f9 ff ff       	jmp    801057a9 <alltraps>
 
-80105c38 <vector50>:
+80105e08 <vector50>:
 .globl vector50
 vector50:
   pushl $0
-80105c38:	6a 00                	push   $0x0
+80105e08:	6a 00                	push   $0x0
   pushl $50
-80105c3a:	6a 32                	push   $0x32
+80105e0a:	6a 32                	push   $0x32
   jmp alltraps
-80105c3c:	e9 8e f9 ff ff       	jmp    801055cf <alltraps>
+80105e0c:	e9 98 f9 ff ff       	jmp    801057a9 <alltraps>
 
-80105c41 <vector51>:
+80105e11 <vector51>:
 .globl vector51
 vector51:
   pushl $0
-80105c41:	6a 00                	push   $0x0
+80105e11:	6a 00                	push   $0x0
   pushl $51
-80105c43:	6a 33                	push   $0x33
+80105e13:	6a 33                	push   $0x33
   jmp alltraps
-80105c45:	e9 85 f9 ff ff       	jmp    801055cf <alltraps>
+80105e15:	e9 8f f9 ff ff       	jmp    801057a9 <alltraps>
 
-80105c4a <vector52>:
+80105e1a <vector52>:
 .globl vector52
 vector52:
   pushl $0
-80105c4a:	6a 00                	push   $0x0
+80105e1a:	6a 00                	push   $0x0
   pushl $52
-80105c4c:	6a 34                	push   $0x34
+80105e1c:	6a 34                	push   $0x34
   jmp alltraps
-80105c4e:	e9 7c f9 ff ff       	jmp    801055cf <alltraps>
+80105e1e:	e9 86 f9 ff ff       	jmp    801057a9 <alltraps>
 
-80105c53 <vector53>:
+80105e23 <vector53>:
 .globl vector53
 vector53:
   pushl $0
-80105c53:	6a 00                	push   $0x0
+80105e23:	6a 00                	push   $0x0
   pushl $53
-80105c55:	6a 35                	push   $0x35
+80105e25:	6a 35                	push   $0x35
   jmp alltraps
-80105c57:	e9 73 f9 ff ff       	jmp    801055cf <alltraps>
+80105e27:	e9 7d f9 ff ff       	jmp    801057a9 <alltraps>
 
-80105c5c <vector54>:
+80105e2c <vector54>:
 .globl vector54
 vector54:
   pushl $0
-80105c5c:	6a 00                	push   $0x0
+80105e2c:	6a 00                	push   $0x0
   pushl $54
-80105c5e:	6a 36                	push   $0x36
+80105e2e:	6a 36                	push   $0x36
   jmp alltraps
-80105c60:	e9 6a f9 ff ff       	jmp    801055cf <alltraps>
+80105e30:	e9 74 f9 ff ff       	jmp    801057a9 <alltraps>
 
-80105c65 <vector55>:
+80105e35 <vector55>:
 .globl vector55
 vector55:
   pushl $0
-80105c65:	6a 00                	push   $0x0
+80105e35:	6a 00                	push   $0x0
   pushl $55
-80105c67:	6a 37                	push   $0x37
+80105e37:	6a 37                	push   $0x37
   jmp alltraps
-80105c69:	e9 61 f9 ff ff       	jmp    801055cf <alltraps>
+80105e39:	e9 6b f9 ff ff       	jmp    801057a9 <alltraps>
 
-80105c6e <vector56>:
+80105e3e <vector56>:
 .globl vector56
 vector56:
   pushl $0
-80105c6e:	6a 00                	push   $0x0
+80105e3e:	6a 00                	push   $0x0
   pushl $56
-80105c70:	6a 38                	push   $0x38
+80105e40:	6a 38                	push   $0x38
   jmp alltraps
-80105c72:	e9 58 f9 ff ff       	jmp    801055cf <alltraps>
+80105e42:	e9 62 f9 ff ff       	jmp    801057a9 <alltraps>
 
-80105c77 <vector57>:
+80105e47 <vector57>:
 .globl vector57
 vector57:
   pushl $0
-80105c77:	6a 00                	push   $0x0
+80105e47:	6a 00                	push   $0x0
   pushl $57
-80105c79:	6a 39                	push   $0x39
+80105e49:	6a 39                	push   $0x39
   jmp alltraps
-80105c7b:	e9 4f f9 ff ff       	jmp    801055cf <alltraps>
+80105e4b:	e9 59 f9 ff ff       	jmp    801057a9 <alltraps>
 
-80105c80 <vector58>:
+80105e50 <vector58>:
 .globl vector58
 vector58:
   pushl $0
-80105c80:	6a 00                	push   $0x0
+80105e50:	6a 00                	push   $0x0
   pushl $58
-80105c82:	6a 3a                	push   $0x3a
+80105e52:	6a 3a                	push   $0x3a
   jmp alltraps
-80105c84:	e9 46 f9 ff ff       	jmp    801055cf <alltraps>
+80105e54:	e9 50 f9 ff ff       	jmp    801057a9 <alltraps>
 
-80105c89 <vector59>:
+80105e59 <vector59>:
 .globl vector59
 vector59:
   pushl $0
-80105c89:	6a 00                	push   $0x0
+80105e59:	6a 00                	push   $0x0
   pushl $59
-80105c8b:	6a 3b                	push   $0x3b
+80105e5b:	6a 3b                	push   $0x3b
   jmp alltraps
-80105c8d:	e9 3d f9 ff ff       	jmp    801055cf <alltraps>
+80105e5d:	e9 47 f9 ff ff       	jmp    801057a9 <alltraps>
 
-80105c92 <vector60>:
+80105e62 <vector60>:
 .globl vector60
 vector60:
   pushl $0
-80105c92:	6a 00                	push   $0x0
+80105e62:	6a 00                	push   $0x0
   pushl $60
-80105c94:	6a 3c                	push   $0x3c
+80105e64:	6a 3c                	push   $0x3c
   jmp alltraps
-80105c96:	e9 34 f9 ff ff       	jmp    801055cf <alltraps>
+80105e66:	e9 3e f9 ff ff       	jmp    801057a9 <alltraps>
 
-80105c9b <vector61>:
+80105e6b <vector61>:
 .globl vector61
 vector61:
   pushl $0
-80105c9b:	6a 00                	push   $0x0
+80105e6b:	6a 00                	push   $0x0
   pushl $61
-80105c9d:	6a 3d                	push   $0x3d
+80105e6d:	6a 3d                	push   $0x3d
   jmp alltraps
-80105c9f:	e9 2b f9 ff ff       	jmp    801055cf <alltraps>
+80105e6f:	e9 35 f9 ff ff       	jmp    801057a9 <alltraps>
 
-80105ca4 <vector62>:
+80105e74 <vector62>:
 .globl vector62
 vector62:
   pushl $0
-80105ca4:	6a 00                	push   $0x0
+80105e74:	6a 00                	push   $0x0
   pushl $62
-80105ca6:	6a 3e                	push   $0x3e
+80105e76:	6a 3e                	push   $0x3e
   jmp alltraps
-80105ca8:	e9 22 f9 ff ff       	jmp    801055cf <alltraps>
+80105e78:	e9 2c f9 ff ff       	jmp    801057a9 <alltraps>
 
-80105cad <vector63>:
+80105e7d <vector63>:
 .globl vector63
 vector63:
   pushl $0
-80105cad:	6a 00                	push   $0x0
+80105e7d:	6a 00                	push   $0x0
   pushl $63
-80105caf:	6a 3f                	push   $0x3f
+80105e7f:	6a 3f                	push   $0x3f
   jmp alltraps
-80105cb1:	e9 19 f9 ff ff       	jmp    801055cf <alltraps>
+80105e81:	e9 23 f9 ff ff       	jmp    801057a9 <alltraps>
 
-80105cb6 <vector64>:
+80105e86 <vector64>:
 .globl vector64
 vector64:
   pushl $0
-80105cb6:	6a 00                	push   $0x0
+80105e86:	6a 00                	push   $0x0
   pushl $64
-80105cb8:	6a 40                	push   $0x40
+80105e88:	6a 40                	push   $0x40
   jmp alltraps
-80105cba:	e9 10 f9 ff ff       	jmp    801055cf <alltraps>
+80105e8a:	e9 1a f9 ff ff       	jmp    801057a9 <alltraps>
 
-80105cbf <vector65>:
+80105e8f <vector65>:
 .globl vector65
 vector65:
   pushl $0
-80105cbf:	6a 00                	push   $0x0
+80105e8f:	6a 00                	push   $0x0
   pushl $65
-80105cc1:	6a 41                	push   $0x41
+80105e91:	6a 41                	push   $0x41
   jmp alltraps
-80105cc3:	e9 07 f9 ff ff       	jmp    801055cf <alltraps>
+80105e93:	e9 11 f9 ff ff       	jmp    801057a9 <alltraps>
 
-80105cc8 <vector66>:
+80105e98 <vector66>:
 .globl vector66
 vector66:
   pushl $0
-80105cc8:	6a 00                	push   $0x0
+80105e98:	6a 00                	push   $0x0
   pushl $66
-80105cca:	6a 42                	push   $0x42
+80105e9a:	6a 42                	push   $0x42
   jmp alltraps
-80105ccc:	e9 fe f8 ff ff       	jmp    801055cf <alltraps>
+80105e9c:	e9 08 f9 ff ff       	jmp    801057a9 <alltraps>
 
-80105cd1 <vector67>:
+80105ea1 <vector67>:
 .globl vector67
 vector67:
   pushl $0
-80105cd1:	6a 00                	push   $0x0
+80105ea1:	6a 00                	push   $0x0
   pushl $67
-80105cd3:	6a 43                	push   $0x43
+80105ea3:	6a 43                	push   $0x43
   jmp alltraps
-80105cd5:	e9 f5 f8 ff ff       	jmp    801055cf <alltraps>
+80105ea5:	e9 ff f8 ff ff       	jmp    801057a9 <alltraps>
 
-80105cda <vector68>:
+80105eaa <vector68>:
 .globl vector68
 vector68:
   pushl $0
-80105cda:	6a 00                	push   $0x0
+80105eaa:	6a 00                	push   $0x0
   pushl $68
-80105cdc:	6a 44                	push   $0x44
+80105eac:	6a 44                	push   $0x44
   jmp alltraps
-80105cde:	e9 ec f8 ff ff       	jmp    801055cf <alltraps>
+80105eae:	e9 f6 f8 ff ff       	jmp    801057a9 <alltraps>
 
-80105ce3 <vector69>:
+80105eb3 <vector69>:
 .globl vector69
 vector69:
   pushl $0
-80105ce3:	6a 00                	push   $0x0
+80105eb3:	6a 00                	push   $0x0
   pushl $69
-80105ce5:	6a 45                	push   $0x45
+80105eb5:	6a 45                	push   $0x45
   jmp alltraps
-80105ce7:	e9 e3 f8 ff ff       	jmp    801055cf <alltraps>
+80105eb7:	e9 ed f8 ff ff       	jmp    801057a9 <alltraps>
 
-80105cec <vector70>:
+80105ebc <vector70>:
 .globl vector70
 vector70:
   pushl $0
-80105cec:	6a 00                	push   $0x0
+80105ebc:	6a 00                	push   $0x0
   pushl $70
-80105cee:	6a 46                	push   $0x46
+80105ebe:	6a 46                	push   $0x46
   jmp alltraps
-80105cf0:	e9 da f8 ff ff       	jmp    801055cf <alltraps>
+80105ec0:	e9 e4 f8 ff ff       	jmp    801057a9 <alltraps>
 
-80105cf5 <vector71>:
+80105ec5 <vector71>:
 .globl vector71
 vector71:
   pushl $0
-80105cf5:	6a 00                	push   $0x0
+80105ec5:	6a 00                	push   $0x0
   pushl $71
-80105cf7:	6a 47                	push   $0x47
+80105ec7:	6a 47                	push   $0x47
   jmp alltraps
-80105cf9:	e9 d1 f8 ff ff       	jmp    801055cf <alltraps>
+80105ec9:	e9 db f8 ff ff       	jmp    801057a9 <alltraps>
 
-80105cfe <vector72>:
+80105ece <vector72>:
 .globl vector72
 vector72:
   pushl $0
-80105cfe:	6a 00                	push   $0x0
+80105ece:	6a 00                	push   $0x0
   pushl $72
-80105d00:	6a 48                	push   $0x48
+80105ed0:	6a 48                	push   $0x48
   jmp alltraps
-80105d02:	e9 c8 f8 ff ff       	jmp    801055cf <alltraps>
+80105ed2:	e9 d2 f8 ff ff       	jmp    801057a9 <alltraps>
 
-80105d07 <vector73>:
+80105ed7 <vector73>:
 .globl vector73
 vector73:
   pushl $0
-80105d07:	6a 00                	push   $0x0
+80105ed7:	6a 00                	push   $0x0
   pushl $73
-80105d09:	6a 49                	push   $0x49
+80105ed9:	6a 49                	push   $0x49
   jmp alltraps
-80105d0b:	e9 bf f8 ff ff       	jmp    801055cf <alltraps>
+80105edb:	e9 c9 f8 ff ff       	jmp    801057a9 <alltraps>
 
-80105d10 <vector74>:
+80105ee0 <vector74>:
 .globl vector74
 vector74:
   pushl $0
-80105d10:	6a 00                	push   $0x0
+80105ee0:	6a 00                	push   $0x0
   pushl $74
-80105d12:	6a 4a                	push   $0x4a
+80105ee2:	6a 4a                	push   $0x4a
   jmp alltraps
-80105d14:	e9 b6 f8 ff ff       	jmp    801055cf <alltraps>
+80105ee4:	e9 c0 f8 ff ff       	jmp    801057a9 <alltraps>
 
-80105d19 <vector75>:
+80105ee9 <vector75>:
 .globl vector75
 vector75:
   pushl $0
-80105d19:	6a 00                	push   $0x0
+80105ee9:	6a 00                	push   $0x0
   pushl $75
-80105d1b:	6a 4b                	push   $0x4b
+80105eeb:	6a 4b                	push   $0x4b
   jmp alltraps
-80105d1d:	e9 ad f8 ff ff       	jmp    801055cf <alltraps>
+80105eed:	e9 b7 f8 ff ff       	jmp    801057a9 <alltraps>
 
-80105d22 <vector76>:
+80105ef2 <vector76>:
 .globl vector76
 vector76:
   pushl $0
-80105d22:	6a 00                	push   $0x0
+80105ef2:	6a 00                	push   $0x0
   pushl $76
-80105d24:	6a 4c                	push   $0x4c
+80105ef4:	6a 4c                	push   $0x4c
   jmp alltraps
-80105d26:	e9 a4 f8 ff ff       	jmp    801055cf <alltraps>
+80105ef6:	e9 ae f8 ff ff       	jmp    801057a9 <alltraps>
 
-80105d2b <vector77>:
+80105efb <vector77>:
 .globl vector77
 vector77:
   pushl $0
-80105d2b:	6a 00                	push   $0x0
+80105efb:	6a 00                	push   $0x0
   pushl $77
-80105d2d:	6a 4d                	push   $0x4d
+80105efd:	6a 4d                	push   $0x4d
   jmp alltraps
-80105d2f:	e9 9b f8 ff ff       	jmp    801055cf <alltraps>
+80105eff:	e9 a5 f8 ff ff       	jmp    801057a9 <alltraps>
 
-80105d34 <vector78>:
+80105f04 <vector78>:
 .globl vector78
 vector78:
   pushl $0
-80105d34:	6a 00                	push   $0x0
+80105f04:	6a 00                	push   $0x0
   pushl $78
-80105d36:	6a 4e                	push   $0x4e
+80105f06:	6a 4e                	push   $0x4e
   jmp alltraps
-80105d38:	e9 92 f8 ff ff       	jmp    801055cf <alltraps>
+80105f08:	e9 9c f8 ff ff       	jmp    801057a9 <alltraps>
 
-80105d3d <vector79>:
+80105f0d <vector79>:
 .globl vector79
 vector79:
   pushl $0
-80105d3d:	6a 00                	push   $0x0
+80105f0d:	6a 00                	push   $0x0
   pushl $79
-80105d3f:	6a 4f                	push   $0x4f
+80105f0f:	6a 4f                	push   $0x4f
   jmp alltraps
-80105d41:	e9 89 f8 ff ff       	jmp    801055cf <alltraps>
+80105f11:	e9 93 f8 ff ff       	jmp    801057a9 <alltraps>
 
-80105d46 <vector80>:
+80105f16 <vector80>:
 .globl vector80
 vector80:
   pushl $0
-80105d46:	6a 00                	push   $0x0
+80105f16:	6a 00                	push   $0x0
   pushl $80
-80105d48:	6a 50                	push   $0x50
+80105f18:	6a 50                	push   $0x50
   jmp alltraps
-80105d4a:	e9 80 f8 ff ff       	jmp    801055cf <alltraps>
+80105f1a:	e9 8a f8 ff ff       	jmp    801057a9 <alltraps>
 
-80105d4f <vector81>:
+80105f1f <vector81>:
 .globl vector81
 vector81:
   pushl $0
-80105d4f:	6a 00                	push   $0x0
+80105f1f:	6a 00                	push   $0x0
   pushl $81
-80105d51:	6a 51                	push   $0x51
+80105f21:	6a 51                	push   $0x51
   jmp alltraps
-80105d53:	e9 77 f8 ff ff       	jmp    801055cf <alltraps>
+80105f23:	e9 81 f8 ff ff       	jmp    801057a9 <alltraps>
 
-80105d58 <vector82>:
+80105f28 <vector82>:
 .globl vector82
 vector82:
   pushl $0
-80105d58:	6a 00                	push   $0x0
+80105f28:	6a 00                	push   $0x0
   pushl $82
-80105d5a:	6a 52                	push   $0x52
+80105f2a:	6a 52                	push   $0x52
   jmp alltraps
-80105d5c:	e9 6e f8 ff ff       	jmp    801055cf <alltraps>
+80105f2c:	e9 78 f8 ff ff       	jmp    801057a9 <alltraps>
 
-80105d61 <vector83>:
+80105f31 <vector83>:
 .globl vector83
 vector83:
   pushl $0
-80105d61:	6a 00                	push   $0x0
+80105f31:	6a 00                	push   $0x0
   pushl $83
-80105d63:	6a 53                	push   $0x53
+80105f33:	6a 53                	push   $0x53
   jmp alltraps
-80105d65:	e9 65 f8 ff ff       	jmp    801055cf <alltraps>
+80105f35:	e9 6f f8 ff ff       	jmp    801057a9 <alltraps>
 
-80105d6a <vector84>:
+80105f3a <vector84>:
 .globl vector84
 vector84:
   pushl $0
-80105d6a:	6a 00                	push   $0x0
+80105f3a:	6a 00                	push   $0x0
   pushl $84
-80105d6c:	6a 54                	push   $0x54
+80105f3c:	6a 54                	push   $0x54
   jmp alltraps
-80105d6e:	e9 5c f8 ff ff       	jmp    801055cf <alltraps>
+80105f3e:	e9 66 f8 ff ff       	jmp    801057a9 <alltraps>
 
-80105d73 <vector85>:
+80105f43 <vector85>:
 .globl vector85
 vector85:
   pushl $0
-80105d73:	6a 00                	push   $0x0
+80105f43:	6a 00                	push   $0x0
   pushl $85
-80105d75:	6a 55                	push   $0x55
+80105f45:	6a 55                	push   $0x55
   jmp alltraps
-80105d77:	e9 53 f8 ff ff       	jmp    801055cf <alltraps>
+80105f47:	e9 5d f8 ff ff       	jmp    801057a9 <alltraps>
 
-80105d7c <vector86>:
+80105f4c <vector86>:
 .globl vector86
 vector86:
   pushl $0
-80105d7c:	6a 00                	push   $0x0
+80105f4c:	6a 00                	push   $0x0
   pushl $86
-80105d7e:	6a 56                	push   $0x56
+80105f4e:	6a 56                	push   $0x56
   jmp alltraps
-80105d80:	e9 4a f8 ff ff       	jmp    801055cf <alltraps>
+80105f50:	e9 54 f8 ff ff       	jmp    801057a9 <alltraps>
 
-80105d85 <vector87>:
+80105f55 <vector87>:
 .globl vector87
 vector87:
   pushl $0
-80105d85:	6a 00                	push   $0x0
+80105f55:	6a 00                	push   $0x0
   pushl $87
-80105d87:	6a 57                	push   $0x57
+80105f57:	6a 57                	push   $0x57
   jmp alltraps
-80105d89:	e9 41 f8 ff ff       	jmp    801055cf <alltraps>
+80105f59:	e9 4b f8 ff ff       	jmp    801057a9 <alltraps>
 
-80105d8e <vector88>:
+80105f5e <vector88>:
 .globl vector88
 vector88:
   pushl $0
-80105d8e:	6a 00                	push   $0x0
+80105f5e:	6a 00                	push   $0x0
   pushl $88
-80105d90:	6a 58                	push   $0x58
+80105f60:	6a 58                	push   $0x58
   jmp alltraps
-80105d92:	e9 38 f8 ff ff       	jmp    801055cf <alltraps>
+80105f62:	e9 42 f8 ff ff       	jmp    801057a9 <alltraps>
 
-80105d97 <vector89>:
+80105f67 <vector89>:
 .globl vector89
 vector89:
   pushl $0
-80105d97:	6a 00                	push   $0x0
+80105f67:	6a 00                	push   $0x0
   pushl $89
-80105d99:	6a 59                	push   $0x59
+80105f69:	6a 59                	push   $0x59
   jmp alltraps
-80105d9b:	e9 2f f8 ff ff       	jmp    801055cf <alltraps>
+80105f6b:	e9 39 f8 ff ff       	jmp    801057a9 <alltraps>
 
-80105da0 <vector90>:
+80105f70 <vector90>:
 .globl vector90
 vector90:
   pushl $0
-80105da0:	6a 00                	push   $0x0
+80105f70:	6a 00                	push   $0x0
   pushl $90
-80105da2:	6a 5a                	push   $0x5a
+80105f72:	6a 5a                	push   $0x5a
   jmp alltraps
-80105da4:	e9 26 f8 ff ff       	jmp    801055cf <alltraps>
+80105f74:	e9 30 f8 ff ff       	jmp    801057a9 <alltraps>
 
-80105da9 <vector91>:
+80105f79 <vector91>:
 .globl vector91
 vector91:
   pushl $0
-80105da9:	6a 00                	push   $0x0
+80105f79:	6a 00                	push   $0x0
   pushl $91
-80105dab:	6a 5b                	push   $0x5b
+80105f7b:	6a 5b                	push   $0x5b
   jmp alltraps
-80105dad:	e9 1d f8 ff ff       	jmp    801055cf <alltraps>
+80105f7d:	e9 27 f8 ff ff       	jmp    801057a9 <alltraps>
 
-80105db2 <vector92>:
+80105f82 <vector92>:
 .globl vector92
 vector92:
   pushl $0
-80105db2:	6a 00                	push   $0x0
+80105f82:	6a 00                	push   $0x0
   pushl $92
-80105db4:	6a 5c                	push   $0x5c
+80105f84:	6a 5c                	push   $0x5c
   jmp alltraps
-80105db6:	e9 14 f8 ff ff       	jmp    801055cf <alltraps>
+80105f86:	e9 1e f8 ff ff       	jmp    801057a9 <alltraps>
 
-80105dbb <vector93>:
+80105f8b <vector93>:
 .globl vector93
 vector93:
   pushl $0
-80105dbb:	6a 00                	push   $0x0
+80105f8b:	6a 00                	push   $0x0
   pushl $93
-80105dbd:	6a 5d                	push   $0x5d
+80105f8d:	6a 5d                	push   $0x5d
   jmp alltraps
-80105dbf:	e9 0b f8 ff ff       	jmp    801055cf <alltraps>
+80105f8f:	e9 15 f8 ff ff       	jmp    801057a9 <alltraps>
 
-80105dc4 <vector94>:
+80105f94 <vector94>:
 .globl vector94
 vector94:
   pushl $0
-80105dc4:	6a 00                	push   $0x0
+80105f94:	6a 00                	push   $0x0
   pushl $94
-80105dc6:	6a 5e                	push   $0x5e
+80105f96:	6a 5e                	push   $0x5e
   jmp alltraps
-80105dc8:	e9 02 f8 ff ff       	jmp    801055cf <alltraps>
+80105f98:	e9 0c f8 ff ff       	jmp    801057a9 <alltraps>
 
-80105dcd <vector95>:
+80105f9d <vector95>:
 .globl vector95
 vector95:
   pushl $0
-80105dcd:	6a 00                	push   $0x0
+80105f9d:	6a 00                	push   $0x0
   pushl $95
-80105dcf:	6a 5f                	push   $0x5f
+80105f9f:	6a 5f                	push   $0x5f
   jmp alltraps
-80105dd1:	e9 f9 f7 ff ff       	jmp    801055cf <alltraps>
+80105fa1:	e9 03 f8 ff ff       	jmp    801057a9 <alltraps>
 
-80105dd6 <vector96>:
+80105fa6 <vector96>:
 .globl vector96
 vector96:
   pushl $0
-80105dd6:	6a 00                	push   $0x0
+80105fa6:	6a 00                	push   $0x0
   pushl $96
-80105dd8:	6a 60                	push   $0x60
+80105fa8:	6a 60                	push   $0x60
   jmp alltraps
-80105dda:	e9 f0 f7 ff ff       	jmp    801055cf <alltraps>
+80105faa:	e9 fa f7 ff ff       	jmp    801057a9 <alltraps>
 
-80105ddf <vector97>:
+80105faf <vector97>:
 .globl vector97
 vector97:
   pushl $0
-80105ddf:	6a 00                	push   $0x0
+80105faf:	6a 00                	push   $0x0
   pushl $97
-80105de1:	6a 61                	push   $0x61
+80105fb1:	6a 61                	push   $0x61
   jmp alltraps
-80105de3:	e9 e7 f7 ff ff       	jmp    801055cf <alltraps>
+80105fb3:	e9 f1 f7 ff ff       	jmp    801057a9 <alltraps>
 
-80105de8 <vector98>:
+80105fb8 <vector98>:
 .globl vector98
 vector98:
   pushl $0
-80105de8:	6a 00                	push   $0x0
+80105fb8:	6a 00                	push   $0x0
   pushl $98
-80105dea:	6a 62                	push   $0x62
+80105fba:	6a 62                	push   $0x62
   jmp alltraps
-80105dec:	e9 de f7 ff ff       	jmp    801055cf <alltraps>
+80105fbc:	e9 e8 f7 ff ff       	jmp    801057a9 <alltraps>
 
-80105df1 <vector99>:
+80105fc1 <vector99>:
 .globl vector99
 vector99:
   pushl $0
-80105df1:	6a 00                	push   $0x0
+80105fc1:	6a 00                	push   $0x0
   pushl $99
-80105df3:	6a 63                	push   $0x63
+80105fc3:	6a 63                	push   $0x63
   jmp alltraps
-80105df5:	e9 d5 f7 ff ff       	jmp    801055cf <alltraps>
+80105fc5:	e9 df f7 ff ff       	jmp    801057a9 <alltraps>
 
-80105dfa <vector100>:
+80105fca <vector100>:
 .globl vector100
 vector100:
   pushl $0
-80105dfa:	6a 00                	push   $0x0
+80105fca:	6a 00                	push   $0x0
   pushl $100
-80105dfc:	6a 64                	push   $0x64
+80105fcc:	6a 64                	push   $0x64
   jmp alltraps
-80105dfe:	e9 cc f7 ff ff       	jmp    801055cf <alltraps>
+80105fce:	e9 d6 f7 ff ff       	jmp    801057a9 <alltraps>
 
-80105e03 <vector101>:
+80105fd3 <vector101>:
 .globl vector101
 vector101:
   pushl $0
-80105e03:	6a 00                	push   $0x0
+80105fd3:	6a 00                	push   $0x0
   pushl $101
-80105e05:	6a 65                	push   $0x65
+80105fd5:	6a 65                	push   $0x65
   jmp alltraps
-80105e07:	e9 c3 f7 ff ff       	jmp    801055cf <alltraps>
+80105fd7:	e9 cd f7 ff ff       	jmp    801057a9 <alltraps>
 
-80105e0c <vector102>:
+80105fdc <vector102>:
 .globl vector102
 vector102:
   pushl $0
-80105e0c:	6a 00                	push   $0x0
+80105fdc:	6a 00                	push   $0x0
   pushl $102
-80105e0e:	6a 66                	push   $0x66
+80105fde:	6a 66                	push   $0x66
   jmp alltraps
-80105e10:	e9 ba f7 ff ff       	jmp    801055cf <alltraps>
+80105fe0:	e9 c4 f7 ff ff       	jmp    801057a9 <alltraps>
 
-80105e15 <vector103>:
+80105fe5 <vector103>:
 .globl vector103
 vector103:
   pushl $0
-80105e15:	6a 00                	push   $0x0
+80105fe5:	6a 00                	push   $0x0
   pushl $103
-80105e17:	6a 67                	push   $0x67
+80105fe7:	6a 67                	push   $0x67
   jmp alltraps
-80105e19:	e9 b1 f7 ff ff       	jmp    801055cf <alltraps>
+80105fe9:	e9 bb f7 ff ff       	jmp    801057a9 <alltraps>
 
-80105e1e <vector104>:
+80105fee <vector104>:
 .globl vector104
 vector104:
   pushl $0
-80105e1e:	6a 00                	push   $0x0
+80105fee:	6a 00                	push   $0x0
   pushl $104
-80105e20:	6a 68                	push   $0x68
+80105ff0:	6a 68                	push   $0x68
   jmp alltraps
-80105e22:	e9 a8 f7 ff ff       	jmp    801055cf <alltraps>
+80105ff2:	e9 b2 f7 ff ff       	jmp    801057a9 <alltraps>
 
-80105e27 <vector105>:
+80105ff7 <vector105>:
 .globl vector105
 vector105:
   pushl $0
-80105e27:	6a 00                	push   $0x0
+80105ff7:	6a 00                	push   $0x0
   pushl $105
-80105e29:	6a 69                	push   $0x69
+80105ff9:	6a 69                	push   $0x69
   jmp alltraps
-80105e2b:	e9 9f f7 ff ff       	jmp    801055cf <alltraps>
+80105ffb:	e9 a9 f7 ff ff       	jmp    801057a9 <alltraps>
 
-80105e30 <vector106>:
+80106000 <vector106>:
 .globl vector106
 vector106:
   pushl $0
-80105e30:	6a 00                	push   $0x0
+80106000:	6a 00                	push   $0x0
   pushl $106
-80105e32:	6a 6a                	push   $0x6a
+80106002:	6a 6a                	push   $0x6a
   jmp alltraps
-80105e34:	e9 96 f7 ff ff       	jmp    801055cf <alltraps>
+80106004:	e9 a0 f7 ff ff       	jmp    801057a9 <alltraps>
 
-80105e39 <vector107>:
+80106009 <vector107>:
 .globl vector107
 vector107:
   pushl $0
-80105e39:	6a 00                	push   $0x0
+80106009:	6a 00                	push   $0x0
   pushl $107
-80105e3b:	6a 6b                	push   $0x6b
+8010600b:	6a 6b                	push   $0x6b
   jmp alltraps
-80105e3d:	e9 8d f7 ff ff       	jmp    801055cf <alltraps>
+8010600d:	e9 97 f7 ff ff       	jmp    801057a9 <alltraps>
 
-80105e42 <vector108>:
+80106012 <vector108>:
 .globl vector108
 vector108:
   pushl $0
-80105e42:	6a 00                	push   $0x0
+80106012:	6a 00                	push   $0x0
   pushl $108
-80105e44:	6a 6c                	push   $0x6c
+80106014:	6a 6c                	push   $0x6c
   jmp alltraps
-80105e46:	e9 84 f7 ff ff       	jmp    801055cf <alltraps>
+80106016:	e9 8e f7 ff ff       	jmp    801057a9 <alltraps>
 
-80105e4b <vector109>:
+8010601b <vector109>:
 .globl vector109
 vector109:
   pushl $0
-80105e4b:	6a 00                	push   $0x0
+8010601b:	6a 00                	push   $0x0
   pushl $109
-80105e4d:	6a 6d                	push   $0x6d
+8010601d:	6a 6d                	push   $0x6d
   jmp alltraps
-80105e4f:	e9 7b f7 ff ff       	jmp    801055cf <alltraps>
+8010601f:	e9 85 f7 ff ff       	jmp    801057a9 <alltraps>
 
-80105e54 <vector110>:
+80106024 <vector110>:
 .globl vector110
 vector110:
   pushl $0
-80105e54:	6a 00                	push   $0x0
+80106024:	6a 00                	push   $0x0
   pushl $110
-80105e56:	6a 6e                	push   $0x6e
+80106026:	6a 6e                	push   $0x6e
   jmp alltraps
-80105e58:	e9 72 f7 ff ff       	jmp    801055cf <alltraps>
+80106028:	e9 7c f7 ff ff       	jmp    801057a9 <alltraps>
 
-80105e5d <vector111>:
+8010602d <vector111>:
 .globl vector111
 vector111:
   pushl $0
-80105e5d:	6a 00                	push   $0x0
+8010602d:	6a 00                	push   $0x0
   pushl $111
-80105e5f:	6a 6f                	push   $0x6f
+8010602f:	6a 6f                	push   $0x6f
   jmp alltraps
-80105e61:	e9 69 f7 ff ff       	jmp    801055cf <alltraps>
+80106031:	e9 73 f7 ff ff       	jmp    801057a9 <alltraps>
 
-80105e66 <vector112>:
+80106036 <vector112>:
 .globl vector112
 vector112:
   pushl $0
-80105e66:	6a 00                	push   $0x0
+80106036:	6a 00                	push   $0x0
   pushl $112
-80105e68:	6a 70                	push   $0x70
+80106038:	6a 70                	push   $0x70
   jmp alltraps
-80105e6a:	e9 60 f7 ff ff       	jmp    801055cf <alltraps>
+8010603a:	e9 6a f7 ff ff       	jmp    801057a9 <alltraps>
 
-80105e6f <vector113>:
+8010603f <vector113>:
 .globl vector113
 vector113:
   pushl $0
-80105e6f:	6a 00                	push   $0x0
+8010603f:	6a 00                	push   $0x0
   pushl $113
-80105e71:	6a 71                	push   $0x71
+80106041:	6a 71                	push   $0x71
   jmp alltraps
-80105e73:	e9 57 f7 ff ff       	jmp    801055cf <alltraps>
+80106043:	e9 61 f7 ff ff       	jmp    801057a9 <alltraps>
 
-80105e78 <vector114>:
+80106048 <vector114>:
 .globl vector114
 vector114:
   pushl $0
-80105e78:	6a 00                	push   $0x0
+80106048:	6a 00                	push   $0x0
   pushl $114
-80105e7a:	6a 72                	push   $0x72
+8010604a:	6a 72                	push   $0x72
   jmp alltraps
-80105e7c:	e9 4e f7 ff ff       	jmp    801055cf <alltraps>
+8010604c:	e9 58 f7 ff ff       	jmp    801057a9 <alltraps>
 
-80105e81 <vector115>:
+80106051 <vector115>:
 .globl vector115
 vector115:
   pushl $0
-80105e81:	6a 00                	push   $0x0
+80106051:	6a 00                	push   $0x0
   pushl $115
-80105e83:	6a 73                	push   $0x73
+80106053:	6a 73                	push   $0x73
   jmp alltraps
-80105e85:	e9 45 f7 ff ff       	jmp    801055cf <alltraps>
+80106055:	e9 4f f7 ff ff       	jmp    801057a9 <alltraps>
 
-80105e8a <vector116>:
+8010605a <vector116>:
 .globl vector116
 vector116:
   pushl $0
-80105e8a:	6a 00                	push   $0x0
+8010605a:	6a 00                	push   $0x0
   pushl $116
-80105e8c:	6a 74                	push   $0x74
+8010605c:	6a 74                	push   $0x74
   jmp alltraps
-80105e8e:	e9 3c f7 ff ff       	jmp    801055cf <alltraps>
+8010605e:	e9 46 f7 ff ff       	jmp    801057a9 <alltraps>
 
-80105e93 <vector117>:
+80106063 <vector117>:
 .globl vector117
 vector117:
   pushl $0
-80105e93:	6a 00                	push   $0x0
+80106063:	6a 00                	push   $0x0
   pushl $117
-80105e95:	6a 75                	push   $0x75
+80106065:	6a 75                	push   $0x75
   jmp alltraps
-80105e97:	e9 33 f7 ff ff       	jmp    801055cf <alltraps>
+80106067:	e9 3d f7 ff ff       	jmp    801057a9 <alltraps>
 
-80105e9c <vector118>:
+8010606c <vector118>:
 .globl vector118
 vector118:
   pushl $0
-80105e9c:	6a 00                	push   $0x0
+8010606c:	6a 00                	push   $0x0
   pushl $118
-80105e9e:	6a 76                	push   $0x76
+8010606e:	6a 76                	push   $0x76
   jmp alltraps
-80105ea0:	e9 2a f7 ff ff       	jmp    801055cf <alltraps>
+80106070:	e9 34 f7 ff ff       	jmp    801057a9 <alltraps>
 
-80105ea5 <vector119>:
+80106075 <vector119>:
 .globl vector119
 vector119:
   pushl $0
-80105ea5:	6a 00                	push   $0x0
+80106075:	6a 00                	push   $0x0
   pushl $119
-80105ea7:	6a 77                	push   $0x77
+80106077:	6a 77                	push   $0x77
   jmp alltraps
-80105ea9:	e9 21 f7 ff ff       	jmp    801055cf <alltraps>
+80106079:	e9 2b f7 ff ff       	jmp    801057a9 <alltraps>
 
-80105eae <vector120>:
+8010607e <vector120>:
 .globl vector120
 vector120:
   pushl $0
-80105eae:	6a 00                	push   $0x0
+8010607e:	6a 00                	push   $0x0
   pushl $120
-80105eb0:	6a 78                	push   $0x78
+80106080:	6a 78                	push   $0x78
   jmp alltraps
-80105eb2:	e9 18 f7 ff ff       	jmp    801055cf <alltraps>
+80106082:	e9 22 f7 ff ff       	jmp    801057a9 <alltraps>
 
-80105eb7 <vector121>:
+80106087 <vector121>:
 .globl vector121
 vector121:
   pushl $0
-80105eb7:	6a 00                	push   $0x0
+80106087:	6a 00                	push   $0x0
   pushl $121
-80105eb9:	6a 79                	push   $0x79
+80106089:	6a 79                	push   $0x79
   jmp alltraps
-80105ebb:	e9 0f f7 ff ff       	jmp    801055cf <alltraps>
+8010608b:	e9 19 f7 ff ff       	jmp    801057a9 <alltraps>
 
-80105ec0 <vector122>:
+80106090 <vector122>:
 .globl vector122
 vector122:
   pushl $0
-80105ec0:	6a 00                	push   $0x0
+80106090:	6a 00                	push   $0x0
   pushl $122
-80105ec2:	6a 7a                	push   $0x7a
+80106092:	6a 7a                	push   $0x7a
   jmp alltraps
-80105ec4:	e9 06 f7 ff ff       	jmp    801055cf <alltraps>
+80106094:	e9 10 f7 ff ff       	jmp    801057a9 <alltraps>
 
-80105ec9 <vector123>:
+80106099 <vector123>:
 .globl vector123
 vector123:
   pushl $0
-80105ec9:	6a 00                	push   $0x0
+80106099:	6a 00                	push   $0x0
   pushl $123
-80105ecb:	6a 7b                	push   $0x7b
+8010609b:	6a 7b                	push   $0x7b
   jmp alltraps
-80105ecd:	e9 fd f6 ff ff       	jmp    801055cf <alltraps>
+8010609d:	e9 07 f7 ff ff       	jmp    801057a9 <alltraps>
 
-80105ed2 <vector124>:
+801060a2 <vector124>:
 .globl vector124
 vector124:
   pushl $0
-80105ed2:	6a 00                	push   $0x0
+801060a2:	6a 00                	push   $0x0
   pushl $124
-80105ed4:	6a 7c                	push   $0x7c
+801060a4:	6a 7c                	push   $0x7c
   jmp alltraps
-80105ed6:	e9 f4 f6 ff ff       	jmp    801055cf <alltraps>
+801060a6:	e9 fe f6 ff ff       	jmp    801057a9 <alltraps>
 
-80105edb <vector125>:
+801060ab <vector125>:
 .globl vector125
 vector125:
   pushl $0
-80105edb:	6a 00                	push   $0x0
+801060ab:	6a 00                	push   $0x0
   pushl $125
-80105edd:	6a 7d                	push   $0x7d
+801060ad:	6a 7d                	push   $0x7d
   jmp alltraps
-80105edf:	e9 eb f6 ff ff       	jmp    801055cf <alltraps>
+801060af:	e9 f5 f6 ff ff       	jmp    801057a9 <alltraps>
 
-80105ee4 <vector126>:
+801060b4 <vector126>:
 .globl vector126
 vector126:
   pushl $0
-80105ee4:	6a 00                	push   $0x0
+801060b4:	6a 00                	push   $0x0
   pushl $126
-80105ee6:	6a 7e                	push   $0x7e
+801060b6:	6a 7e                	push   $0x7e
   jmp alltraps
-80105ee8:	e9 e2 f6 ff ff       	jmp    801055cf <alltraps>
+801060b8:	e9 ec f6 ff ff       	jmp    801057a9 <alltraps>
 
-80105eed <vector127>:
+801060bd <vector127>:
 .globl vector127
 vector127:
   pushl $0
-80105eed:	6a 00                	push   $0x0
+801060bd:	6a 00                	push   $0x0
   pushl $127
-80105eef:	6a 7f                	push   $0x7f
+801060bf:	6a 7f                	push   $0x7f
   jmp alltraps
-80105ef1:	e9 d9 f6 ff ff       	jmp    801055cf <alltraps>
+801060c1:	e9 e3 f6 ff ff       	jmp    801057a9 <alltraps>
 
-80105ef6 <vector128>:
+801060c6 <vector128>:
 .globl vector128
 vector128:
   pushl $0
-80105ef6:	6a 00                	push   $0x0
+801060c6:	6a 00                	push   $0x0
   pushl $128
-80105ef8:	68 80 00 00 00       	push   $0x80
+801060c8:	68 80 00 00 00       	push   $0x80
   jmp alltraps
-80105efd:	e9 cd f6 ff ff       	jmp    801055cf <alltraps>
+801060cd:	e9 d7 f6 ff ff       	jmp    801057a9 <alltraps>
 
-80105f02 <vector129>:
+801060d2 <vector129>:
 .globl vector129
 vector129:
   pushl $0
-80105f02:	6a 00                	push   $0x0
+801060d2:	6a 00                	push   $0x0
   pushl $129
-80105f04:	68 81 00 00 00       	push   $0x81
+801060d4:	68 81 00 00 00       	push   $0x81
   jmp alltraps
-80105f09:	e9 c1 f6 ff ff       	jmp    801055cf <alltraps>
+801060d9:	e9 cb f6 ff ff       	jmp    801057a9 <alltraps>
 
-80105f0e <vector130>:
+801060de <vector130>:
 .globl vector130
 vector130:
   pushl $0
-80105f0e:	6a 00                	push   $0x0
+801060de:	6a 00                	push   $0x0
   pushl $130
-80105f10:	68 82 00 00 00       	push   $0x82
+801060e0:	68 82 00 00 00       	push   $0x82
   jmp alltraps
-80105f15:	e9 b5 f6 ff ff       	jmp    801055cf <alltraps>
+801060e5:	e9 bf f6 ff ff       	jmp    801057a9 <alltraps>
 
-80105f1a <vector131>:
+801060ea <vector131>:
 .globl vector131
 vector131:
   pushl $0
-80105f1a:	6a 00                	push   $0x0
+801060ea:	6a 00                	push   $0x0
   pushl $131
-80105f1c:	68 83 00 00 00       	push   $0x83
+801060ec:	68 83 00 00 00       	push   $0x83
   jmp alltraps
-80105f21:	e9 a9 f6 ff ff       	jmp    801055cf <alltraps>
+801060f1:	e9 b3 f6 ff ff       	jmp    801057a9 <alltraps>
 
-80105f26 <vector132>:
+801060f6 <vector132>:
 .globl vector132
 vector132:
   pushl $0
-80105f26:	6a 00                	push   $0x0
+801060f6:	6a 00                	push   $0x0
   pushl $132
-80105f28:	68 84 00 00 00       	push   $0x84
+801060f8:	68 84 00 00 00       	push   $0x84
   jmp alltraps
-80105f2d:	e9 9d f6 ff ff       	jmp    801055cf <alltraps>
+801060fd:	e9 a7 f6 ff ff       	jmp    801057a9 <alltraps>
 
-80105f32 <vector133>:
+80106102 <vector133>:
 .globl vector133
 vector133:
   pushl $0
-80105f32:	6a 00                	push   $0x0
+80106102:	6a 00                	push   $0x0
   pushl $133
-80105f34:	68 85 00 00 00       	push   $0x85
+80106104:	68 85 00 00 00       	push   $0x85
   jmp alltraps
-80105f39:	e9 91 f6 ff ff       	jmp    801055cf <alltraps>
+80106109:	e9 9b f6 ff ff       	jmp    801057a9 <alltraps>
 
-80105f3e <vector134>:
+8010610e <vector134>:
 .globl vector134
 vector134:
   pushl $0
-80105f3e:	6a 00                	push   $0x0
+8010610e:	6a 00                	push   $0x0
   pushl $134
-80105f40:	68 86 00 00 00       	push   $0x86
+80106110:	68 86 00 00 00       	push   $0x86
   jmp alltraps
-80105f45:	e9 85 f6 ff ff       	jmp    801055cf <alltraps>
+80106115:	e9 8f f6 ff ff       	jmp    801057a9 <alltraps>
 
-80105f4a <vector135>:
+8010611a <vector135>:
 .globl vector135
 vector135:
   pushl $0
-80105f4a:	6a 00                	push   $0x0
+8010611a:	6a 00                	push   $0x0
   pushl $135
-80105f4c:	68 87 00 00 00       	push   $0x87
+8010611c:	68 87 00 00 00       	push   $0x87
   jmp alltraps
-80105f51:	e9 79 f6 ff ff       	jmp    801055cf <alltraps>
+80106121:	e9 83 f6 ff ff       	jmp    801057a9 <alltraps>
 
-80105f56 <vector136>:
+80106126 <vector136>:
 .globl vector136
 vector136:
   pushl $0
-80105f56:	6a 00                	push   $0x0
+80106126:	6a 00                	push   $0x0
   pushl $136
-80105f58:	68 88 00 00 00       	push   $0x88
+80106128:	68 88 00 00 00       	push   $0x88
   jmp alltraps
-80105f5d:	e9 6d f6 ff ff       	jmp    801055cf <alltraps>
+8010612d:	e9 77 f6 ff ff       	jmp    801057a9 <alltraps>
 
-80105f62 <vector137>:
+80106132 <vector137>:
 .globl vector137
 vector137:
   pushl $0
-80105f62:	6a 00                	push   $0x0
+80106132:	6a 00                	push   $0x0
   pushl $137
-80105f64:	68 89 00 00 00       	push   $0x89
+80106134:	68 89 00 00 00       	push   $0x89
   jmp alltraps
-80105f69:	e9 61 f6 ff ff       	jmp    801055cf <alltraps>
+80106139:	e9 6b f6 ff ff       	jmp    801057a9 <alltraps>
 
-80105f6e <vector138>:
+8010613e <vector138>:
 .globl vector138
 vector138:
   pushl $0
-80105f6e:	6a 00                	push   $0x0
+8010613e:	6a 00                	push   $0x0
   pushl $138
-80105f70:	68 8a 00 00 00       	push   $0x8a
+80106140:	68 8a 00 00 00       	push   $0x8a
   jmp alltraps
-80105f75:	e9 55 f6 ff ff       	jmp    801055cf <alltraps>
+80106145:	e9 5f f6 ff ff       	jmp    801057a9 <alltraps>
 
-80105f7a <vector139>:
+8010614a <vector139>:
 .globl vector139
 vector139:
   pushl $0
-80105f7a:	6a 00                	push   $0x0
+8010614a:	6a 00                	push   $0x0
   pushl $139
-80105f7c:	68 8b 00 00 00       	push   $0x8b
+8010614c:	68 8b 00 00 00       	push   $0x8b
   jmp alltraps
-80105f81:	e9 49 f6 ff ff       	jmp    801055cf <alltraps>
+80106151:	e9 53 f6 ff ff       	jmp    801057a9 <alltraps>
 
-80105f86 <vector140>:
+80106156 <vector140>:
 .globl vector140
 vector140:
   pushl $0
-80105f86:	6a 00                	push   $0x0
+80106156:	6a 00                	push   $0x0
   pushl $140
-80105f88:	68 8c 00 00 00       	push   $0x8c
+80106158:	68 8c 00 00 00       	push   $0x8c
   jmp alltraps
-80105f8d:	e9 3d f6 ff ff       	jmp    801055cf <alltraps>
+8010615d:	e9 47 f6 ff ff       	jmp    801057a9 <alltraps>
 
-80105f92 <vector141>:
+80106162 <vector141>:
 .globl vector141
 vector141:
   pushl $0
-80105f92:	6a 00                	push   $0x0
+80106162:	6a 00                	push   $0x0
   pushl $141
-80105f94:	68 8d 00 00 00       	push   $0x8d
+80106164:	68 8d 00 00 00       	push   $0x8d
   jmp alltraps
-80105f99:	e9 31 f6 ff ff       	jmp    801055cf <alltraps>
+80106169:	e9 3b f6 ff ff       	jmp    801057a9 <alltraps>
 
-80105f9e <vector142>:
+8010616e <vector142>:
 .globl vector142
 vector142:
   pushl $0
-80105f9e:	6a 00                	push   $0x0
+8010616e:	6a 00                	push   $0x0
   pushl $142
-80105fa0:	68 8e 00 00 00       	push   $0x8e
+80106170:	68 8e 00 00 00       	push   $0x8e
   jmp alltraps
-80105fa5:	e9 25 f6 ff ff       	jmp    801055cf <alltraps>
+80106175:	e9 2f f6 ff ff       	jmp    801057a9 <alltraps>
 
-80105faa <vector143>:
+8010617a <vector143>:
 .globl vector143
 vector143:
   pushl $0
-80105faa:	6a 00                	push   $0x0
+8010617a:	6a 00                	push   $0x0
   pushl $143
-80105fac:	68 8f 00 00 00       	push   $0x8f
+8010617c:	68 8f 00 00 00       	push   $0x8f
   jmp alltraps
-80105fb1:	e9 19 f6 ff ff       	jmp    801055cf <alltraps>
+80106181:	e9 23 f6 ff ff       	jmp    801057a9 <alltraps>
 
-80105fb6 <vector144>:
+80106186 <vector144>:
 .globl vector144
 vector144:
   pushl $0
-80105fb6:	6a 00                	push   $0x0
+80106186:	6a 00                	push   $0x0
   pushl $144
-80105fb8:	68 90 00 00 00       	push   $0x90
+80106188:	68 90 00 00 00       	push   $0x90
   jmp alltraps
-80105fbd:	e9 0d f6 ff ff       	jmp    801055cf <alltraps>
+8010618d:	e9 17 f6 ff ff       	jmp    801057a9 <alltraps>
 
-80105fc2 <vector145>:
+80106192 <vector145>:
 .globl vector145
 vector145:
   pushl $0
-80105fc2:	6a 00                	push   $0x0
+80106192:	6a 00                	push   $0x0
   pushl $145
-80105fc4:	68 91 00 00 00       	push   $0x91
+80106194:	68 91 00 00 00       	push   $0x91
   jmp alltraps
-80105fc9:	e9 01 f6 ff ff       	jmp    801055cf <alltraps>
+80106199:	e9 0b f6 ff ff       	jmp    801057a9 <alltraps>
 
-80105fce <vector146>:
+8010619e <vector146>:
 .globl vector146
 vector146:
   pushl $0
-80105fce:	6a 00                	push   $0x0
+8010619e:	6a 00                	push   $0x0
   pushl $146
-80105fd0:	68 92 00 00 00       	push   $0x92
+801061a0:	68 92 00 00 00       	push   $0x92
   jmp alltraps
-80105fd5:	e9 f5 f5 ff ff       	jmp    801055cf <alltraps>
+801061a5:	e9 ff f5 ff ff       	jmp    801057a9 <alltraps>
 
-80105fda <vector147>:
+801061aa <vector147>:
 .globl vector147
 vector147:
   pushl $0
-80105fda:	6a 00                	push   $0x0
+801061aa:	6a 00                	push   $0x0
   pushl $147
-80105fdc:	68 93 00 00 00       	push   $0x93
+801061ac:	68 93 00 00 00       	push   $0x93
   jmp alltraps
-80105fe1:	e9 e9 f5 ff ff       	jmp    801055cf <alltraps>
+801061b1:	e9 f3 f5 ff ff       	jmp    801057a9 <alltraps>
 
-80105fe6 <vector148>:
+801061b6 <vector148>:
 .globl vector148
 vector148:
   pushl $0
-80105fe6:	6a 00                	push   $0x0
+801061b6:	6a 00                	push   $0x0
   pushl $148
-80105fe8:	68 94 00 00 00       	push   $0x94
+801061b8:	68 94 00 00 00       	push   $0x94
   jmp alltraps
-80105fed:	e9 dd f5 ff ff       	jmp    801055cf <alltraps>
+801061bd:	e9 e7 f5 ff ff       	jmp    801057a9 <alltraps>
 
-80105ff2 <vector149>:
+801061c2 <vector149>:
 .globl vector149
 vector149:
   pushl $0
-80105ff2:	6a 00                	push   $0x0
+801061c2:	6a 00                	push   $0x0
   pushl $149
-80105ff4:	68 95 00 00 00       	push   $0x95
+801061c4:	68 95 00 00 00       	push   $0x95
   jmp alltraps
-80105ff9:	e9 d1 f5 ff ff       	jmp    801055cf <alltraps>
+801061c9:	e9 db f5 ff ff       	jmp    801057a9 <alltraps>
 
-80105ffe <vector150>:
+801061ce <vector150>:
 .globl vector150
 vector150:
   pushl $0
-80105ffe:	6a 00                	push   $0x0
+801061ce:	6a 00                	push   $0x0
   pushl $150
-80106000:	68 96 00 00 00       	push   $0x96
+801061d0:	68 96 00 00 00       	push   $0x96
   jmp alltraps
-80106005:	e9 c5 f5 ff ff       	jmp    801055cf <alltraps>
+801061d5:	e9 cf f5 ff ff       	jmp    801057a9 <alltraps>
 
-8010600a <vector151>:
+801061da <vector151>:
 .globl vector151
 vector151:
   pushl $0
-8010600a:	6a 00                	push   $0x0
+801061da:	6a 00                	push   $0x0
   pushl $151
-8010600c:	68 97 00 00 00       	push   $0x97
+801061dc:	68 97 00 00 00       	push   $0x97
   jmp alltraps
-80106011:	e9 b9 f5 ff ff       	jmp    801055cf <alltraps>
+801061e1:	e9 c3 f5 ff ff       	jmp    801057a9 <alltraps>
 
-80106016 <vector152>:
+801061e6 <vector152>:
 .globl vector152
 vector152:
   pushl $0
-80106016:	6a 00                	push   $0x0
+801061e6:	6a 00                	push   $0x0
   pushl $152
-80106018:	68 98 00 00 00       	push   $0x98
+801061e8:	68 98 00 00 00       	push   $0x98
   jmp alltraps
-8010601d:	e9 ad f5 ff ff       	jmp    801055cf <alltraps>
+801061ed:	e9 b7 f5 ff ff       	jmp    801057a9 <alltraps>
 
-80106022 <vector153>:
+801061f2 <vector153>:
 .globl vector153
 vector153:
   pushl $0
-80106022:	6a 00                	push   $0x0
+801061f2:	6a 00                	push   $0x0
   pushl $153
-80106024:	68 99 00 00 00       	push   $0x99
+801061f4:	68 99 00 00 00       	push   $0x99
   jmp alltraps
-80106029:	e9 a1 f5 ff ff       	jmp    801055cf <alltraps>
+801061f9:	e9 ab f5 ff ff       	jmp    801057a9 <alltraps>
 
-8010602e <vector154>:
+801061fe <vector154>:
 .globl vector154
 vector154:
   pushl $0
-8010602e:	6a 00                	push   $0x0
+801061fe:	6a 00                	push   $0x0
   pushl $154
-80106030:	68 9a 00 00 00       	push   $0x9a
+80106200:	68 9a 00 00 00       	push   $0x9a
   jmp alltraps
-80106035:	e9 95 f5 ff ff       	jmp    801055cf <alltraps>
+80106205:	e9 9f f5 ff ff       	jmp    801057a9 <alltraps>
 
-8010603a <vector155>:
+8010620a <vector155>:
 .globl vector155
 vector155:
   pushl $0
-8010603a:	6a 00                	push   $0x0
+8010620a:	6a 00                	push   $0x0
   pushl $155
-8010603c:	68 9b 00 00 00       	push   $0x9b
+8010620c:	68 9b 00 00 00       	push   $0x9b
   jmp alltraps
-80106041:	e9 89 f5 ff ff       	jmp    801055cf <alltraps>
+80106211:	e9 93 f5 ff ff       	jmp    801057a9 <alltraps>
 
-80106046 <vector156>:
+80106216 <vector156>:
 .globl vector156
 vector156:
   pushl $0
-80106046:	6a 00                	push   $0x0
+80106216:	6a 00                	push   $0x0
   pushl $156
-80106048:	68 9c 00 00 00       	push   $0x9c
+80106218:	68 9c 00 00 00       	push   $0x9c
   jmp alltraps
-8010604d:	e9 7d f5 ff ff       	jmp    801055cf <alltraps>
+8010621d:	e9 87 f5 ff ff       	jmp    801057a9 <alltraps>
 
-80106052 <vector157>:
+80106222 <vector157>:
 .globl vector157
 vector157:
   pushl $0
-80106052:	6a 00                	push   $0x0
+80106222:	6a 00                	push   $0x0
   pushl $157
-80106054:	68 9d 00 00 00       	push   $0x9d
+80106224:	68 9d 00 00 00       	push   $0x9d
   jmp alltraps
-80106059:	e9 71 f5 ff ff       	jmp    801055cf <alltraps>
+80106229:	e9 7b f5 ff ff       	jmp    801057a9 <alltraps>
 
-8010605e <vector158>:
+8010622e <vector158>:
 .globl vector158
 vector158:
   pushl $0
-8010605e:	6a 00                	push   $0x0
+8010622e:	6a 00                	push   $0x0
   pushl $158
-80106060:	68 9e 00 00 00       	push   $0x9e
+80106230:	68 9e 00 00 00       	push   $0x9e
   jmp alltraps
-80106065:	e9 65 f5 ff ff       	jmp    801055cf <alltraps>
+80106235:	e9 6f f5 ff ff       	jmp    801057a9 <alltraps>
 
-8010606a <vector159>:
+8010623a <vector159>:
 .globl vector159
 vector159:
   pushl $0
-8010606a:	6a 00                	push   $0x0
+8010623a:	6a 00                	push   $0x0
   pushl $159
-8010606c:	68 9f 00 00 00       	push   $0x9f
+8010623c:	68 9f 00 00 00       	push   $0x9f
   jmp alltraps
-80106071:	e9 59 f5 ff ff       	jmp    801055cf <alltraps>
+80106241:	e9 63 f5 ff ff       	jmp    801057a9 <alltraps>
 
-80106076 <vector160>:
+80106246 <vector160>:
 .globl vector160
 vector160:
   pushl $0
-80106076:	6a 00                	push   $0x0
+80106246:	6a 00                	push   $0x0
   pushl $160
-80106078:	68 a0 00 00 00       	push   $0xa0
+80106248:	68 a0 00 00 00       	push   $0xa0
   jmp alltraps
-8010607d:	e9 4d f5 ff ff       	jmp    801055cf <alltraps>
+8010624d:	e9 57 f5 ff ff       	jmp    801057a9 <alltraps>
 
-80106082 <vector161>:
+80106252 <vector161>:
 .globl vector161
 vector161:
   pushl $0
-80106082:	6a 00                	push   $0x0
+80106252:	6a 00                	push   $0x0
   pushl $161
-80106084:	68 a1 00 00 00       	push   $0xa1
+80106254:	68 a1 00 00 00       	push   $0xa1
   jmp alltraps
-80106089:	e9 41 f5 ff ff       	jmp    801055cf <alltraps>
+80106259:	e9 4b f5 ff ff       	jmp    801057a9 <alltraps>
 
-8010608e <vector162>:
+8010625e <vector162>:
 .globl vector162
 vector162:
   pushl $0
-8010608e:	6a 00                	push   $0x0
+8010625e:	6a 00                	push   $0x0
   pushl $162
-80106090:	68 a2 00 00 00       	push   $0xa2
+80106260:	68 a2 00 00 00       	push   $0xa2
   jmp alltraps
-80106095:	e9 35 f5 ff ff       	jmp    801055cf <alltraps>
+80106265:	e9 3f f5 ff ff       	jmp    801057a9 <alltraps>
 
-8010609a <vector163>:
+8010626a <vector163>:
 .globl vector163
 vector163:
   pushl $0
-8010609a:	6a 00                	push   $0x0
+8010626a:	6a 00                	push   $0x0
   pushl $163
-8010609c:	68 a3 00 00 00       	push   $0xa3
+8010626c:	68 a3 00 00 00       	push   $0xa3
   jmp alltraps
-801060a1:	e9 29 f5 ff ff       	jmp    801055cf <alltraps>
+80106271:	e9 33 f5 ff ff       	jmp    801057a9 <alltraps>
 
-801060a6 <vector164>:
+80106276 <vector164>:
 .globl vector164
 vector164:
   pushl $0
-801060a6:	6a 00                	push   $0x0
+80106276:	6a 00                	push   $0x0
   pushl $164
-801060a8:	68 a4 00 00 00       	push   $0xa4
+80106278:	68 a4 00 00 00       	push   $0xa4
   jmp alltraps
-801060ad:	e9 1d f5 ff ff       	jmp    801055cf <alltraps>
+8010627d:	e9 27 f5 ff ff       	jmp    801057a9 <alltraps>
 
-801060b2 <vector165>:
+80106282 <vector165>:
 .globl vector165
 vector165:
   pushl $0
-801060b2:	6a 00                	push   $0x0
+80106282:	6a 00                	push   $0x0
   pushl $165
-801060b4:	68 a5 00 00 00       	push   $0xa5
+80106284:	68 a5 00 00 00       	push   $0xa5
   jmp alltraps
-801060b9:	e9 11 f5 ff ff       	jmp    801055cf <alltraps>
+80106289:	e9 1b f5 ff ff       	jmp    801057a9 <alltraps>
 
-801060be <vector166>:
+8010628e <vector166>:
 .globl vector166
 vector166:
   pushl $0
-801060be:	6a 00                	push   $0x0
+8010628e:	6a 00                	push   $0x0
   pushl $166
-801060c0:	68 a6 00 00 00       	push   $0xa6
+80106290:	68 a6 00 00 00       	push   $0xa6
   jmp alltraps
-801060c5:	e9 05 f5 ff ff       	jmp    801055cf <alltraps>
+80106295:	e9 0f f5 ff ff       	jmp    801057a9 <alltraps>
 
-801060ca <vector167>:
+8010629a <vector167>:
 .globl vector167
 vector167:
   pushl $0
-801060ca:	6a 00                	push   $0x0
+8010629a:	6a 00                	push   $0x0
   pushl $167
-801060cc:	68 a7 00 00 00       	push   $0xa7
+8010629c:	68 a7 00 00 00       	push   $0xa7
   jmp alltraps
-801060d1:	e9 f9 f4 ff ff       	jmp    801055cf <alltraps>
+801062a1:	e9 03 f5 ff ff       	jmp    801057a9 <alltraps>
 
-801060d6 <vector168>:
+801062a6 <vector168>:
 .globl vector168
 vector168:
   pushl $0
-801060d6:	6a 00                	push   $0x0
+801062a6:	6a 00                	push   $0x0
   pushl $168
-801060d8:	68 a8 00 00 00       	push   $0xa8
+801062a8:	68 a8 00 00 00       	push   $0xa8
   jmp alltraps
-801060dd:	e9 ed f4 ff ff       	jmp    801055cf <alltraps>
+801062ad:	e9 f7 f4 ff ff       	jmp    801057a9 <alltraps>
 
-801060e2 <vector169>:
+801062b2 <vector169>:
 .globl vector169
 vector169:
   pushl $0
-801060e2:	6a 00                	push   $0x0
+801062b2:	6a 00                	push   $0x0
   pushl $169
-801060e4:	68 a9 00 00 00       	push   $0xa9
+801062b4:	68 a9 00 00 00       	push   $0xa9
   jmp alltraps
-801060e9:	e9 e1 f4 ff ff       	jmp    801055cf <alltraps>
+801062b9:	e9 eb f4 ff ff       	jmp    801057a9 <alltraps>
 
-801060ee <vector170>:
+801062be <vector170>:
 .globl vector170
 vector170:
   pushl $0
-801060ee:	6a 00                	push   $0x0
+801062be:	6a 00                	push   $0x0
   pushl $170
-801060f0:	68 aa 00 00 00       	push   $0xaa
+801062c0:	68 aa 00 00 00       	push   $0xaa
   jmp alltraps
-801060f5:	e9 d5 f4 ff ff       	jmp    801055cf <alltraps>
+801062c5:	e9 df f4 ff ff       	jmp    801057a9 <alltraps>
 
-801060fa <vector171>:
+801062ca <vector171>:
 .globl vector171
 vector171:
   pushl $0
-801060fa:	6a 00                	push   $0x0
+801062ca:	6a 00                	push   $0x0
   pushl $171
-801060fc:	68 ab 00 00 00       	push   $0xab
+801062cc:	68 ab 00 00 00       	push   $0xab
   jmp alltraps
-80106101:	e9 c9 f4 ff ff       	jmp    801055cf <alltraps>
+801062d1:	e9 d3 f4 ff ff       	jmp    801057a9 <alltraps>
 
-80106106 <vector172>:
+801062d6 <vector172>:
 .globl vector172
 vector172:
   pushl $0
-80106106:	6a 00                	push   $0x0
+801062d6:	6a 00                	push   $0x0
   pushl $172
-80106108:	68 ac 00 00 00       	push   $0xac
+801062d8:	68 ac 00 00 00       	push   $0xac
   jmp alltraps
-8010610d:	e9 bd f4 ff ff       	jmp    801055cf <alltraps>
+801062dd:	e9 c7 f4 ff ff       	jmp    801057a9 <alltraps>
 
-80106112 <vector173>:
+801062e2 <vector173>:
 .globl vector173
 vector173:
   pushl $0
-80106112:	6a 00                	push   $0x0
+801062e2:	6a 00                	push   $0x0
   pushl $173
-80106114:	68 ad 00 00 00       	push   $0xad
+801062e4:	68 ad 00 00 00       	push   $0xad
   jmp alltraps
-80106119:	e9 b1 f4 ff ff       	jmp    801055cf <alltraps>
+801062e9:	e9 bb f4 ff ff       	jmp    801057a9 <alltraps>
 
-8010611e <vector174>:
+801062ee <vector174>:
 .globl vector174
 vector174:
   pushl $0
-8010611e:	6a 00                	push   $0x0
+801062ee:	6a 00                	push   $0x0
   pushl $174
-80106120:	68 ae 00 00 00       	push   $0xae
+801062f0:	68 ae 00 00 00       	push   $0xae
   jmp alltraps
-80106125:	e9 a5 f4 ff ff       	jmp    801055cf <alltraps>
+801062f5:	e9 af f4 ff ff       	jmp    801057a9 <alltraps>
 
-8010612a <vector175>:
+801062fa <vector175>:
 .globl vector175
 vector175:
   pushl $0
-8010612a:	6a 00                	push   $0x0
+801062fa:	6a 00                	push   $0x0
   pushl $175
-8010612c:	68 af 00 00 00       	push   $0xaf
+801062fc:	68 af 00 00 00       	push   $0xaf
   jmp alltraps
-80106131:	e9 99 f4 ff ff       	jmp    801055cf <alltraps>
+80106301:	e9 a3 f4 ff ff       	jmp    801057a9 <alltraps>
 
-80106136 <vector176>:
+80106306 <vector176>:
 .globl vector176
 vector176:
   pushl $0
-80106136:	6a 00                	push   $0x0
+80106306:	6a 00                	push   $0x0
   pushl $176
-80106138:	68 b0 00 00 00       	push   $0xb0
+80106308:	68 b0 00 00 00       	push   $0xb0
   jmp alltraps
-8010613d:	e9 8d f4 ff ff       	jmp    801055cf <alltraps>
+8010630d:	e9 97 f4 ff ff       	jmp    801057a9 <alltraps>
 
-80106142 <vector177>:
+80106312 <vector177>:
 .globl vector177
 vector177:
   pushl $0
-80106142:	6a 00                	push   $0x0
+80106312:	6a 00                	push   $0x0
   pushl $177
-80106144:	68 b1 00 00 00       	push   $0xb1
+80106314:	68 b1 00 00 00       	push   $0xb1
   jmp alltraps
-80106149:	e9 81 f4 ff ff       	jmp    801055cf <alltraps>
+80106319:	e9 8b f4 ff ff       	jmp    801057a9 <alltraps>
 
-8010614e <vector178>:
+8010631e <vector178>:
 .globl vector178
 vector178:
   pushl $0
-8010614e:	6a 00                	push   $0x0
+8010631e:	6a 00                	push   $0x0
   pushl $178
-80106150:	68 b2 00 00 00       	push   $0xb2
+80106320:	68 b2 00 00 00       	push   $0xb2
   jmp alltraps
-80106155:	e9 75 f4 ff ff       	jmp    801055cf <alltraps>
+80106325:	e9 7f f4 ff ff       	jmp    801057a9 <alltraps>
 
-8010615a <vector179>:
+8010632a <vector179>:
 .globl vector179
 vector179:
   pushl $0
-8010615a:	6a 00                	push   $0x0
+8010632a:	6a 00                	push   $0x0
   pushl $179
-8010615c:	68 b3 00 00 00       	push   $0xb3
+8010632c:	68 b3 00 00 00       	push   $0xb3
   jmp alltraps
-80106161:	e9 69 f4 ff ff       	jmp    801055cf <alltraps>
+80106331:	e9 73 f4 ff ff       	jmp    801057a9 <alltraps>
 
-80106166 <vector180>:
+80106336 <vector180>:
 .globl vector180
 vector180:
   pushl $0
-80106166:	6a 00                	push   $0x0
+80106336:	6a 00                	push   $0x0
   pushl $180
-80106168:	68 b4 00 00 00       	push   $0xb4
+80106338:	68 b4 00 00 00       	push   $0xb4
   jmp alltraps
-8010616d:	e9 5d f4 ff ff       	jmp    801055cf <alltraps>
+8010633d:	e9 67 f4 ff ff       	jmp    801057a9 <alltraps>
 
-80106172 <vector181>:
+80106342 <vector181>:
 .globl vector181
 vector181:
   pushl $0
-80106172:	6a 00                	push   $0x0
+80106342:	6a 00                	push   $0x0
   pushl $181
-80106174:	68 b5 00 00 00       	push   $0xb5
+80106344:	68 b5 00 00 00       	push   $0xb5
   jmp alltraps
-80106179:	e9 51 f4 ff ff       	jmp    801055cf <alltraps>
+80106349:	e9 5b f4 ff ff       	jmp    801057a9 <alltraps>
 
-8010617e <vector182>:
+8010634e <vector182>:
 .globl vector182
 vector182:
   pushl $0
-8010617e:	6a 00                	push   $0x0
+8010634e:	6a 00                	push   $0x0
   pushl $182
-80106180:	68 b6 00 00 00       	push   $0xb6
+80106350:	68 b6 00 00 00       	push   $0xb6
   jmp alltraps
-80106185:	e9 45 f4 ff ff       	jmp    801055cf <alltraps>
+80106355:	e9 4f f4 ff ff       	jmp    801057a9 <alltraps>
 
-8010618a <vector183>:
+8010635a <vector183>:
 .globl vector183
 vector183:
   pushl $0
-8010618a:	6a 00                	push   $0x0
+8010635a:	6a 00                	push   $0x0
   pushl $183
-8010618c:	68 b7 00 00 00       	push   $0xb7
+8010635c:	68 b7 00 00 00       	push   $0xb7
   jmp alltraps
-80106191:	e9 39 f4 ff ff       	jmp    801055cf <alltraps>
+80106361:	e9 43 f4 ff ff       	jmp    801057a9 <alltraps>
 
-80106196 <vector184>:
+80106366 <vector184>:
 .globl vector184
 vector184:
   pushl $0
-80106196:	6a 00                	push   $0x0
+80106366:	6a 00                	push   $0x0
   pushl $184
-80106198:	68 b8 00 00 00       	push   $0xb8
+80106368:	68 b8 00 00 00       	push   $0xb8
   jmp alltraps
-8010619d:	e9 2d f4 ff ff       	jmp    801055cf <alltraps>
+8010636d:	e9 37 f4 ff ff       	jmp    801057a9 <alltraps>
 
-801061a2 <vector185>:
+80106372 <vector185>:
 .globl vector185
 vector185:
   pushl $0
-801061a2:	6a 00                	push   $0x0
+80106372:	6a 00                	push   $0x0
   pushl $185
-801061a4:	68 b9 00 00 00       	push   $0xb9
+80106374:	68 b9 00 00 00       	push   $0xb9
   jmp alltraps
-801061a9:	e9 21 f4 ff ff       	jmp    801055cf <alltraps>
+80106379:	e9 2b f4 ff ff       	jmp    801057a9 <alltraps>
 
-801061ae <vector186>:
+8010637e <vector186>:
 .globl vector186
 vector186:
   pushl $0
-801061ae:	6a 00                	push   $0x0
+8010637e:	6a 00                	push   $0x0
   pushl $186
-801061b0:	68 ba 00 00 00       	push   $0xba
+80106380:	68 ba 00 00 00       	push   $0xba
   jmp alltraps
-801061b5:	e9 15 f4 ff ff       	jmp    801055cf <alltraps>
+80106385:	e9 1f f4 ff ff       	jmp    801057a9 <alltraps>
 
-801061ba <vector187>:
+8010638a <vector187>:
 .globl vector187
 vector187:
   pushl $0
-801061ba:	6a 00                	push   $0x0
+8010638a:	6a 00                	push   $0x0
   pushl $187
-801061bc:	68 bb 00 00 00       	push   $0xbb
+8010638c:	68 bb 00 00 00       	push   $0xbb
   jmp alltraps
-801061c1:	e9 09 f4 ff ff       	jmp    801055cf <alltraps>
+80106391:	e9 13 f4 ff ff       	jmp    801057a9 <alltraps>
 
-801061c6 <vector188>:
+80106396 <vector188>:
 .globl vector188
 vector188:
   pushl $0
-801061c6:	6a 00                	push   $0x0
+80106396:	6a 00                	push   $0x0
   pushl $188
-801061c8:	68 bc 00 00 00       	push   $0xbc
+80106398:	68 bc 00 00 00       	push   $0xbc
   jmp alltraps
-801061cd:	e9 fd f3 ff ff       	jmp    801055cf <alltraps>
+8010639d:	e9 07 f4 ff ff       	jmp    801057a9 <alltraps>
 
-801061d2 <vector189>:
+801063a2 <vector189>:
 .globl vector189
 vector189:
   pushl $0
-801061d2:	6a 00                	push   $0x0
+801063a2:	6a 00                	push   $0x0
   pushl $189
-801061d4:	68 bd 00 00 00       	push   $0xbd
+801063a4:	68 bd 00 00 00       	push   $0xbd
   jmp alltraps
-801061d9:	e9 f1 f3 ff ff       	jmp    801055cf <alltraps>
+801063a9:	e9 fb f3 ff ff       	jmp    801057a9 <alltraps>
 
-801061de <vector190>:
+801063ae <vector190>:
 .globl vector190
 vector190:
   pushl $0
-801061de:	6a 00                	push   $0x0
+801063ae:	6a 00                	push   $0x0
   pushl $190
-801061e0:	68 be 00 00 00       	push   $0xbe
+801063b0:	68 be 00 00 00       	push   $0xbe
   jmp alltraps
-801061e5:	e9 e5 f3 ff ff       	jmp    801055cf <alltraps>
+801063b5:	e9 ef f3 ff ff       	jmp    801057a9 <alltraps>
 
-801061ea <vector191>:
+801063ba <vector191>:
 .globl vector191
 vector191:
   pushl $0
-801061ea:	6a 00                	push   $0x0
+801063ba:	6a 00                	push   $0x0
   pushl $191
-801061ec:	68 bf 00 00 00       	push   $0xbf
+801063bc:	68 bf 00 00 00       	push   $0xbf
   jmp alltraps
-801061f1:	e9 d9 f3 ff ff       	jmp    801055cf <alltraps>
+801063c1:	e9 e3 f3 ff ff       	jmp    801057a9 <alltraps>
 
-801061f6 <vector192>:
+801063c6 <vector192>:
 .globl vector192
 vector192:
   pushl $0
-801061f6:	6a 00                	push   $0x0
+801063c6:	6a 00                	push   $0x0
   pushl $192
-801061f8:	68 c0 00 00 00       	push   $0xc0
+801063c8:	68 c0 00 00 00       	push   $0xc0
   jmp alltraps
-801061fd:	e9 cd f3 ff ff       	jmp    801055cf <alltraps>
+801063cd:	e9 d7 f3 ff ff       	jmp    801057a9 <alltraps>
 
-80106202 <vector193>:
+801063d2 <vector193>:
 .globl vector193
 vector193:
   pushl $0
-80106202:	6a 00                	push   $0x0
+801063d2:	6a 00                	push   $0x0
   pushl $193
-80106204:	68 c1 00 00 00       	push   $0xc1
+801063d4:	68 c1 00 00 00       	push   $0xc1
   jmp alltraps
-80106209:	e9 c1 f3 ff ff       	jmp    801055cf <alltraps>
+801063d9:	e9 cb f3 ff ff       	jmp    801057a9 <alltraps>
 
-8010620e <vector194>:
+801063de <vector194>:
 .globl vector194
 vector194:
   pushl $0
-8010620e:	6a 00                	push   $0x0
+801063de:	6a 00                	push   $0x0
   pushl $194
-80106210:	68 c2 00 00 00       	push   $0xc2
+801063e0:	68 c2 00 00 00       	push   $0xc2
   jmp alltraps
-80106215:	e9 b5 f3 ff ff       	jmp    801055cf <alltraps>
+801063e5:	e9 bf f3 ff ff       	jmp    801057a9 <alltraps>
 
-8010621a <vector195>:
+801063ea <vector195>:
 .globl vector195
 vector195:
   pushl $0
-8010621a:	6a 00                	push   $0x0
+801063ea:	6a 00                	push   $0x0
   pushl $195
-8010621c:	68 c3 00 00 00       	push   $0xc3
+801063ec:	68 c3 00 00 00       	push   $0xc3
   jmp alltraps
-80106221:	e9 a9 f3 ff ff       	jmp    801055cf <alltraps>
+801063f1:	e9 b3 f3 ff ff       	jmp    801057a9 <alltraps>
 
-80106226 <vector196>:
+801063f6 <vector196>:
 .globl vector196
 vector196:
   pushl $0
-80106226:	6a 00                	push   $0x0
+801063f6:	6a 00                	push   $0x0
   pushl $196
-80106228:	68 c4 00 00 00       	push   $0xc4
+801063f8:	68 c4 00 00 00       	push   $0xc4
   jmp alltraps
-8010622d:	e9 9d f3 ff ff       	jmp    801055cf <alltraps>
+801063fd:	e9 a7 f3 ff ff       	jmp    801057a9 <alltraps>
 
-80106232 <vector197>:
+80106402 <vector197>:
 .globl vector197
 vector197:
   pushl $0
-80106232:	6a 00                	push   $0x0
+80106402:	6a 00                	push   $0x0
   pushl $197
-80106234:	68 c5 00 00 00       	push   $0xc5
+80106404:	68 c5 00 00 00       	push   $0xc5
   jmp alltraps
-80106239:	e9 91 f3 ff ff       	jmp    801055cf <alltraps>
+80106409:	e9 9b f3 ff ff       	jmp    801057a9 <alltraps>
 
-8010623e <vector198>:
+8010640e <vector198>:
 .globl vector198
 vector198:
   pushl $0
-8010623e:	6a 00                	push   $0x0
+8010640e:	6a 00                	push   $0x0
   pushl $198
-80106240:	68 c6 00 00 00       	push   $0xc6
+80106410:	68 c6 00 00 00       	push   $0xc6
   jmp alltraps
-80106245:	e9 85 f3 ff ff       	jmp    801055cf <alltraps>
+80106415:	e9 8f f3 ff ff       	jmp    801057a9 <alltraps>
 
-8010624a <vector199>:
+8010641a <vector199>:
 .globl vector199
 vector199:
   pushl $0
-8010624a:	6a 00                	push   $0x0
+8010641a:	6a 00                	push   $0x0
   pushl $199
-8010624c:	68 c7 00 00 00       	push   $0xc7
+8010641c:	68 c7 00 00 00       	push   $0xc7
   jmp alltraps
-80106251:	e9 79 f3 ff ff       	jmp    801055cf <alltraps>
+80106421:	e9 83 f3 ff ff       	jmp    801057a9 <alltraps>
 
-80106256 <vector200>:
+80106426 <vector200>:
 .globl vector200
 vector200:
   pushl $0
-80106256:	6a 00                	push   $0x0
+80106426:	6a 00                	push   $0x0
   pushl $200
-80106258:	68 c8 00 00 00       	push   $0xc8
+80106428:	68 c8 00 00 00       	push   $0xc8
   jmp alltraps
-8010625d:	e9 6d f3 ff ff       	jmp    801055cf <alltraps>
+8010642d:	e9 77 f3 ff ff       	jmp    801057a9 <alltraps>
 
-80106262 <vector201>:
+80106432 <vector201>:
 .globl vector201
 vector201:
   pushl $0
-80106262:	6a 00                	push   $0x0
+80106432:	6a 00                	push   $0x0
   pushl $201
-80106264:	68 c9 00 00 00       	push   $0xc9
+80106434:	68 c9 00 00 00       	push   $0xc9
   jmp alltraps
-80106269:	e9 61 f3 ff ff       	jmp    801055cf <alltraps>
+80106439:	e9 6b f3 ff ff       	jmp    801057a9 <alltraps>
 
-8010626e <vector202>:
+8010643e <vector202>:
 .globl vector202
 vector202:
   pushl $0
-8010626e:	6a 00                	push   $0x0
+8010643e:	6a 00                	push   $0x0
   pushl $202
-80106270:	68 ca 00 00 00       	push   $0xca
+80106440:	68 ca 00 00 00       	push   $0xca
   jmp alltraps
-80106275:	e9 55 f3 ff ff       	jmp    801055cf <alltraps>
+80106445:	e9 5f f3 ff ff       	jmp    801057a9 <alltraps>
 
-8010627a <vector203>:
+8010644a <vector203>:
 .globl vector203
 vector203:
   pushl $0
-8010627a:	6a 00                	push   $0x0
+8010644a:	6a 00                	push   $0x0
   pushl $203
-8010627c:	68 cb 00 00 00       	push   $0xcb
+8010644c:	68 cb 00 00 00       	push   $0xcb
   jmp alltraps
-80106281:	e9 49 f3 ff ff       	jmp    801055cf <alltraps>
+80106451:	e9 53 f3 ff ff       	jmp    801057a9 <alltraps>
 
-80106286 <vector204>:
+80106456 <vector204>:
 .globl vector204
 vector204:
   pushl $0
-80106286:	6a 00                	push   $0x0
+80106456:	6a 00                	push   $0x0
   pushl $204
-80106288:	68 cc 00 00 00       	push   $0xcc
+80106458:	68 cc 00 00 00       	push   $0xcc
   jmp alltraps
-8010628d:	e9 3d f3 ff ff       	jmp    801055cf <alltraps>
+8010645d:	e9 47 f3 ff ff       	jmp    801057a9 <alltraps>
 
-80106292 <vector205>:
+80106462 <vector205>:
 .globl vector205
 vector205:
   pushl $0
-80106292:	6a 00                	push   $0x0
+80106462:	6a 00                	push   $0x0
   pushl $205
-80106294:	68 cd 00 00 00       	push   $0xcd
+80106464:	68 cd 00 00 00       	push   $0xcd
   jmp alltraps
-80106299:	e9 31 f3 ff ff       	jmp    801055cf <alltraps>
+80106469:	e9 3b f3 ff ff       	jmp    801057a9 <alltraps>
 
-8010629e <vector206>:
+8010646e <vector206>:
 .globl vector206
 vector206:
   pushl $0
-8010629e:	6a 00                	push   $0x0
+8010646e:	6a 00                	push   $0x0
   pushl $206
-801062a0:	68 ce 00 00 00       	push   $0xce
+80106470:	68 ce 00 00 00       	push   $0xce
   jmp alltraps
-801062a5:	e9 25 f3 ff ff       	jmp    801055cf <alltraps>
+80106475:	e9 2f f3 ff ff       	jmp    801057a9 <alltraps>
 
-801062aa <vector207>:
+8010647a <vector207>:
 .globl vector207
 vector207:
   pushl $0
-801062aa:	6a 00                	push   $0x0
+8010647a:	6a 00                	push   $0x0
   pushl $207
-801062ac:	68 cf 00 00 00       	push   $0xcf
+8010647c:	68 cf 00 00 00       	push   $0xcf
   jmp alltraps
-801062b1:	e9 19 f3 ff ff       	jmp    801055cf <alltraps>
+80106481:	e9 23 f3 ff ff       	jmp    801057a9 <alltraps>
 
-801062b6 <vector208>:
+80106486 <vector208>:
 .globl vector208
 vector208:
   pushl $0
-801062b6:	6a 00                	push   $0x0
+80106486:	6a 00                	push   $0x0
   pushl $208
-801062b8:	68 d0 00 00 00       	push   $0xd0
+80106488:	68 d0 00 00 00       	push   $0xd0
   jmp alltraps
-801062bd:	e9 0d f3 ff ff       	jmp    801055cf <alltraps>
+8010648d:	e9 17 f3 ff ff       	jmp    801057a9 <alltraps>
 
-801062c2 <vector209>:
+80106492 <vector209>:
 .globl vector209
 vector209:
   pushl $0
-801062c2:	6a 00                	push   $0x0
+80106492:	6a 00                	push   $0x0
   pushl $209
-801062c4:	68 d1 00 00 00       	push   $0xd1
+80106494:	68 d1 00 00 00       	push   $0xd1
   jmp alltraps
-801062c9:	e9 01 f3 ff ff       	jmp    801055cf <alltraps>
+80106499:	e9 0b f3 ff ff       	jmp    801057a9 <alltraps>
 
-801062ce <vector210>:
+8010649e <vector210>:
 .globl vector210
 vector210:
   pushl $0
-801062ce:	6a 00                	push   $0x0
+8010649e:	6a 00                	push   $0x0
   pushl $210
-801062d0:	68 d2 00 00 00       	push   $0xd2
+801064a0:	68 d2 00 00 00       	push   $0xd2
   jmp alltraps
-801062d5:	e9 f5 f2 ff ff       	jmp    801055cf <alltraps>
+801064a5:	e9 ff f2 ff ff       	jmp    801057a9 <alltraps>
 
-801062da <vector211>:
+801064aa <vector211>:
 .globl vector211
 vector211:
   pushl $0
-801062da:	6a 00                	push   $0x0
+801064aa:	6a 00                	push   $0x0
   pushl $211
-801062dc:	68 d3 00 00 00       	push   $0xd3
+801064ac:	68 d3 00 00 00       	push   $0xd3
   jmp alltraps
-801062e1:	e9 e9 f2 ff ff       	jmp    801055cf <alltraps>
+801064b1:	e9 f3 f2 ff ff       	jmp    801057a9 <alltraps>
 
-801062e6 <vector212>:
+801064b6 <vector212>:
 .globl vector212
 vector212:
   pushl $0
-801062e6:	6a 00                	push   $0x0
+801064b6:	6a 00                	push   $0x0
   pushl $212
-801062e8:	68 d4 00 00 00       	push   $0xd4
+801064b8:	68 d4 00 00 00       	push   $0xd4
   jmp alltraps
-801062ed:	e9 dd f2 ff ff       	jmp    801055cf <alltraps>
+801064bd:	e9 e7 f2 ff ff       	jmp    801057a9 <alltraps>
 
-801062f2 <vector213>:
+801064c2 <vector213>:
 .globl vector213
 vector213:
   pushl $0
-801062f2:	6a 00                	push   $0x0
+801064c2:	6a 00                	push   $0x0
   pushl $213
-801062f4:	68 d5 00 00 00       	push   $0xd5
+801064c4:	68 d5 00 00 00       	push   $0xd5
   jmp alltraps
-801062f9:	e9 d1 f2 ff ff       	jmp    801055cf <alltraps>
+801064c9:	e9 db f2 ff ff       	jmp    801057a9 <alltraps>
 
-801062fe <vector214>:
+801064ce <vector214>:
 .globl vector214
 vector214:
   pushl $0
-801062fe:	6a 00                	push   $0x0
+801064ce:	6a 00                	push   $0x0
   pushl $214
-80106300:	68 d6 00 00 00       	push   $0xd6
+801064d0:	68 d6 00 00 00       	push   $0xd6
   jmp alltraps
-80106305:	e9 c5 f2 ff ff       	jmp    801055cf <alltraps>
+801064d5:	e9 cf f2 ff ff       	jmp    801057a9 <alltraps>
 
-8010630a <vector215>:
+801064da <vector215>:
 .globl vector215
 vector215:
   pushl $0
-8010630a:	6a 00                	push   $0x0
+801064da:	6a 00                	push   $0x0
   pushl $215
-8010630c:	68 d7 00 00 00       	push   $0xd7
+801064dc:	68 d7 00 00 00       	push   $0xd7
   jmp alltraps
-80106311:	e9 b9 f2 ff ff       	jmp    801055cf <alltraps>
+801064e1:	e9 c3 f2 ff ff       	jmp    801057a9 <alltraps>
 
-80106316 <vector216>:
+801064e6 <vector216>:
 .globl vector216
 vector216:
   pushl $0
-80106316:	6a 00                	push   $0x0
+801064e6:	6a 00                	push   $0x0
   pushl $216
-80106318:	68 d8 00 00 00       	push   $0xd8
+801064e8:	68 d8 00 00 00       	push   $0xd8
   jmp alltraps
-8010631d:	e9 ad f2 ff ff       	jmp    801055cf <alltraps>
+801064ed:	e9 b7 f2 ff ff       	jmp    801057a9 <alltraps>
 
-80106322 <vector217>:
+801064f2 <vector217>:
 .globl vector217
 vector217:
   pushl $0
-80106322:	6a 00                	push   $0x0
+801064f2:	6a 00                	push   $0x0
   pushl $217
-80106324:	68 d9 00 00 00       	push   $0xd9
+801064f4:	68 d9 00 00 00       	push   $0xd9
   jmp alltraps
-80106329:	e9 a1 f2 ff ff       	jmp    801055cf <alltraps>
+801064f9:	e9 ab f2 ff ff       	jmp    801057a9 <alltraps>
 
-8010632e <vector218>:
+801064fe <vector218>:
 .globl vector218
 vector218:
   pushl $0
-8010632e:	6a 00                	push   $0x0
+801064fe:	6a 00                	push   $0x0
   pushl $218
-80106330:	68 da 00 00 00       	push   $0xda
+80106500:	68 da 00 00 00       	push   $0xda
   jmp alltraps
-80106335:	e9 95 f2 ff ff       	jmp    801055cf <alltraps>
+80106505:	e9 9f f2 ff ff       	jmp    801057a9 <alltraps>
 
-8010633a <vector219>:
+8010650a <vector219>:
 .globl vector219
 vector219:
   pushl $0
-8010633a:	6a 00                	push   $0x0
+8010650a:	6a 00                	push   $0x0
   pushl $219
-8010633c:	68 db 00 00 00       	push   $0xdb
+8010650c:	68 db 00 00 00       	push   $0xdb
   jmp alltraps
-80106341:	e9 89 f2 ff ff       	jmp    801055cf <alltraps>
+80106511:	e9 93 f2 ff ff       	jmp    801057a9 <alltraps>
 
-80106346 <vector220>:
+80106516 <vector220>:
 .globl vector220
 vector220:
   pushl $0
-80106346:	6a 00                	push   $0x0
+80106516:	6a 00                	push   $0x0
   pushl $220
-80106348:	68 dc 00 00 00       	push   $0xdc
+80106518:	68 dc 00 00 00       	push   $0xdc
   jmp alltraps
-8010634d:	e9 7d f2 ff ff       	jmp    801055cf <alltraps>
+8010651d:	e9 87 f2 ff ff       	jmp    801057a9 <alltraps>
 
-80106352 <vector221>:
+80106522 <vector221>:
 .globl vector221
 vector221:
   pushl $0
-80106352:	6a 00                	push   $0x0
+80106522:	6a 00                	push   $0x0
   pushl $221
-80106354:	68 dd 00 00 00       	push   $0xdd
+80106524:	68 dd 00 00 00       	push   $0xdd
   jmp alltraps
-80106359:	e9 71 f2 ff ff       	jmp    801055cf <alltraps>
+80106529:	e9 7b f2 ff ff       	jmp    801057a9 <alltraps>
 
-8010635e <vector222>:
+8010652e <vector222>:
 .globl vector222
 vector222:
   pushl $0
-8010635e:	6a 00                	push   $0x0
+8010652e:	6a 00                	push   $0x0
   pushl $222
-80106360:	68 de 00 00 00       	push   $0xde
+80106530:	68 de 00 00 00       	push   $0xde
   jmp alltraps
-80106365:	e9 65 f2 ff ff       	jmp    801055cf <alltraps>
+80106535:	e9 6f f2 ff ff       	jmp    801057a9 <alltraps>
 
-8010636a <vector223>:
+8010653a <vector223>:
 .globl vector223
 vector223:
   pushl $0
-8010636a:	6a 00                	push   $0x0
+8010653a:	6a 00                	push   $0x0
   pushl $223
-8010636c:	68 df 00 00 00       	push   $0xdf
+8010653c:	68 df 00 00 00       	push   $0xdf
   jmp alltraps
-80106371:	e9 59 f2 ff ff       	jmp    801055cf <alltraps>
+80106541:	e9 63 f2 ff ff       	jmp    801057a9 <alltraps>
 
-80106376 <vector224>:
+80106546 <vector224>:
 .globl vector224
 vector224:
   pushl $0
-80106376:	6a 00                	push   $0x0
+80106546:	6a 00                	push   $0x0
   pushl $224
-80106378:	68 e0 00 00 00       	push   $0xe0
+80106548:	68 e0 00 00 00       	push   $0xe0
   jmp alltraps
-8010637d:	e9 4d f2 ff ff       	jmp    801055cf <alltraps>
+8010654d:	e9 57 f2 ff ff       	jmp    801057a9 <alltraps>
 
-80106382 <vector225>:
+80106552 <vector225>:
 .globl vector225
 vector225:
   pushl $0
-80106382:	6a 00                	push   $0x0
+80106552:	6a 00                	push   $0x0
   pushl $225
-80106384:	68 e1 00 00 00       	push   $0xe1
+80106554:	68 e1 00 00 00       	push   $0xe1
   jmp alltraps
-80106389:	e9 41 f2 ff ff       	jmp    801055cf <alltraps>
+80106559:	e9 4b f2 ff ff       	jmp    801057a9 <alltraps>
 
-8010638e <vector226>:
+8010655e <vector226>:
 .globl vector226
 vector226:
   pushl $0
-8010638e:	6a 00                	push   $0x0
+8010655e:	6a 00                	push   $0x0
   pushl $226
-80106390:	68 e2 00 00 00       	push   $0xe2
+80106560:	68 e2 00 00 00       	push   $0xe2
   jmp alltraps
-80106395:	e9 35 f2 ff ff       	jmp    801055cf <alltraps>
+80106565:	e9 3f f2 ff ff       	jmp    801057a9 <alltraps>
 
-8010639a <vector227>:
+8010656a <vector227>:
 .globl vector227
 vector227:
   pushl $0
-8010639a:	6a 00                	push   $0x0
+8010656a:	6a 00                	push   $0x0
   pushl $227
-8010639c:	68 e3 00 00 00       	push   $0xe3
+8010656c:	68 e3 00 00 00       	push   $0xe3
   jmp alltraps
-801063a1:	e9 29 f2 ff ff       	jmp    801055cf <alltraps>
+80106571:	e9 33 f2 ff ff       	jmp    801057a9 <alltraps>
 
-801063a6 <vector228>:
+80106576 <vector228>:
 .globl vector228
 vector228:
   pushl $0
-801063a6:	6a 00                	push   $0x0
+80106576:	6a 00                	push   $0x0
   pushl $228
-801063a8:	68 e4 00 00 00       	push   $0xe4
+80106578:	68 e4 00 00 00       	push   $0xe4
   jmp alltraps
-801063ad:	e9 1d f2 ff ff       	jmp    801055cf <alltraps>
+8010657d:	e9 27 f2 ff ff       	jmp    801057a9 <alltraps>
 
-801063b2 <vector229>:
+80106582 <vector229>:
 .globl vector229
 vector229:
   pushl $0
-801063b2:	6a 00                	push   $0x0
+80106582:	6a 00                	push   $0x0
   pushl $229
-801063b4:	68 e5 00 00 00       	push   $0xe5
+80106584:	68 e5 00 00 00       	push   $0xe5
   jmp alltraps
-801063b9:	e9 11 f2 ff ff       	jmp    801055cf <alltraps>
+80106589:	e9 1b f2 ff ff       	jmp    801057a9 <alltraps>
 
-801063be <vector230>:
+8010658e <vector230>:
 .globl vector230
 vector230:
   pushl $0
-801063be:	6a 00                	push   $0x0
+8010658e:	6a 00                	push   $0x0
   pushl $230
-801063c0:	68 e6 00 00 00       	push   $0xe6
+80106590:	68 e6 00 00 00       	push   $0xe6
   jmp alltraps
-801063c5:	e9 05 f2 ff ff       	jmp    801055cf <alltraps>
+80106595:	e9 0f f2 ff ff       	jmp    801057a9 <alltraps>
 
-801063ca <vector231>:
+8010659a <vector231>:
 .globl vector231
 vector231:
   pushl $0
-801063ca:	6a 00                	push   $0x0
+8010659a:	6a 00                	push   $0x0
   pushl $231
-801063cc:	68 e7 00 00 00       	push   $0xe7
+8010659c:	68 e7 00 00 00       	push   $0xe7
   jmp alltraps
-801063d1:	e9 f9 f1 ff ff       	jmp    801055cf <alltraps>
+801065a1:	e9 03 f2 ff ff       	jmp    801057a9 <alltraps>
 
-801063d6 <vector232>:
+801065a6 <vector232>:
 .globl vector232
 vector232:
   pushl $0
-801063d6:	6a 00                	push   $0x0
+801065a6:	6a 00                	push   $0x0
   pushl $232
-801063d8:	68 e8 00 00 00       	push   $0xe8
+801065a8:	68 e8 00 00 00       	push   $0xe8
   jmp alltraps
-801063dd:	e9 ed f1 ff ff       	jmp    801055cf <alltraps>
+801065ad:	e9 f7 f1 ff ff       	jmp    801057a9 <alltraps>
 
-801063e2 <vector233>:
+801065b2 <vector233>:
 .globl vector233
 vector233:
   pushl $0
-801063e2:	6a 00                	push   $0x0
+801065b2:	6a 00                	push   $0x0
   pushl $233
-801063e4:	68 e9 00 00 00       	push   $0xe9
+801065b4:	68 e9 00 00 00       	push   $0xe9
   jmp alltraps
-801063e9:	e9 e1 f1 ff ff       	jmp    801055cf <alltraps>
+801065b9:	e9 eb f1 ff ff       	jmp    801057a9 <alltraps>
 
-801063ee <vector234>:
+801065be <vector234>:
 .globl vector234
 vector234:
   pushl $0
-801063ee:	6a 00                	push   $0x0
+801065be:	6a 00                	push   $0x0
   pushl $234
-801063f0:	68 ea 00 00 00       	push   $0xea
+801065c0:	68 ea 00 00 00       	push   $0xea
   jmp alltraps
-801063f5:	e9 d5 f1 ff ff       	jmp    801055cf <alltraps>
+801065c5:	e9 df f1 ff ff       	jmp    801057a9 <alltraps>
 
-801063fa <vector235>:
+801065ca <vector235>:
 .globl vector235
 vector235:
   pushl $0
-801063fa:	6a 00                	push   $0x0
+801065ca:	6a 00                	push   $0x0
   pushl $235
-801063fc:	68 eb 00 00 00       	push   $0xeb
+801065cc:	68 eb 00 00 00       	push   $0xeb
   jmp alltraps
-80106401:	e9 c9 f1 ff ff       	jmp    801055cf <alltraps>
+801065d1:	e9 d3 f1 ff ff       	jmp    801057a9 <alltraps>
 
-80106406 <vector236>:
+801065d6 <vector236>:
 .globl vector236
 vector236:
   pushl $0
-80106406:	6a 00                	push   $0x0
+801065d6:	6a 00                	push   $0x0
   pushl $236
-80106408:	68 ec 00 00 00       	push   $0xec
+801065d8:	68 ec 00 00 00       	push   $0xec
   jmp alltraps
-8010640d:	e9 bd f1 ff ff       	jmp    801055cf <alltraps>
+801065dd:	e9 c7 f1 ff ff       	jmp    801057a9 <alltraps>
 
-80106412 <vector237>:
+801065e2 <vector237>:
 .globl vector237
 vector237:
   pushl $0
-80106412:	6a 00                	push   $0x0
+801065e2:	6a 00                	push   $0x0
   pushl $237
-80106414:	68 ed 00 00 00       	push   $0xed
+801065e4:	68 ed 00 00 00       	push   $0xed
   jmp alltraps
-80106419:	e9 b1 f1 ff ff       	jmp    801055cf <alltraps>
+801065e9:	e9 bb f1 ff ff       	jmp    801057a9 <alltraps>
 
-8010641e <vector238>:
+801065ee <vector238>:
 .globl vector238
 vector238:
   pushl $0
-8010641e:	6a 00                	push   $0x0
+801065ee:	6a 00                	push   $0x0
   pushl $238
-80106420:	68 ee 00 00 00       	push   $0xee
+801065f0:	68 ee 00 00 00       	push   $0xee
   jmp alltraps
-80106425:	e9 a5 f1 ff ff       	jmp    801055cf <alltraps>
+801065f5:	e9 af f1 ff ff       	jmp    801057a9 <alltraps>
 
-8010642a <vector239>:
+801065fa <vector239>:
 .globl vector239
 vector239:
   pushl $0
-8010642a:	6a 00                	push   $0x0
+801065fa:	6a 00                	push   $0x0
   pushl $239
-8010642c:	68 ef 00 00 00       	push   $0xef
+801065fc:	68 ef 00 00 00       	push   $0xef
   jmp alltraps
-80106431:	e9 99 f1 ff ff       	jmp    801055cf <alltraps>
+80106601:	e9 a3 f1 ff ff       	jmp    801057a9 <alltraps>
 
-80106436 <vector240>:
+80106606 <vector240>:
 .globl vector240
 vector240:
   pushl $0
-80106436:	6a 00                	push   $0x0
+80106606:	6a 00                	push   $0x0
   pushl $240
-80106438:	68 f0 00 00 00       	push   $0xf0
+80106608:	68 f0 00 00 00       	push   $0xf0
   jmp alltraps
-8010643d:	e9 8d f1 ff ff       	jmp    801055cf <alltraps>
+8010660d:	e9 97 f1 ff ff       	jmp    801057a9 <alltraps>
 
-80106442 <vector241>:
+80106612 <vector241>:
 .globl vector241
 vector241:
   pushl $0
-80106442:	6a 00                	push   $0x0
+80106612:	6a 00                	push   $0x0
   pushl $241
-80106444:	68 f1 00 00 00       	push   $0xf1
+80106614:	68 f1 00 00 00       	push   $0xf1
   jmp alltraps
-80106449:	e9 81 f1 ff ff       	jmp    801055cf <alltraps>
+80106619:	e9 8b f1 ff ff       	jmp    801057a9 <alltraps>
 
-8010644e <vector242>:
+8010661e <vector242>:
 .globl vector242
 vector242:
   pushl $0
-8010644e:	6a 00                	push   $0x0
+8010661e:	6a 00                	push   $0x0
   pushl $242
-80106450:	68 f2 00 00 00       	push   $0xf2
+80106620:	68 f2 00 00 00       	push   $0xf2
   jmp alltraps
-80106455:	e9 75 f1 ff ff       	jmp    801055cf <alltraps>
+80106625:	e9 7f f1 ff ff       	jmp    801057a9 <alltraps>
 
-8010645a <vector243>:
+8010662a <vector243>:
 .globl vector243
 vector243:
   pushl $0
-8010645a:	6a 00                	push   $0x0
+8010662a:	6a 00                	push   $0x0
   pushl $243
-8010645c:	68 f3 00 00 00       	push   $0xf3
+8010662c:	68 f3 00 00 00       	push   $0xf3
   jmp alltraps
-80106461:	e9 69 f1 ff ff       	jmp    801055cf <alltraps>
+80106631:	e9 73 f1 ff ff       	jmp    801057a9 <alltraps>
 
-80106466 <vector244>:
+80106636 <vector244>:
 .globl vector244
 vector244:
   pushl $0
-80106466:	6a 00                	push   $0x0
+80106636:	6a 00                	push   $0x0
   pushl $244
-80106468:	68 f4 00 00 00       	push   $0xf4
+80106638:	68 f4 00 00 00       	push   $0xf4
   jmp alltraps
-8010646d:	e9 5d f1 ff ff       	jmp    801055cf <alltraps>
+8010663d:	e9 67 f1 ff ff       	jmp    801057a9 <alltraps>
 
-80106472 <vector245>:
+80106642 <vector245>:
 .globl vector245
 vector245:
   pushl $0
-80106472:	6a 00                	push   $0x0
+80106642:	6a 00                	push   $0x0
   pushl $245
-80106474:	68 f5 00 00 00       	push   $0xf5
+80106644:	68 f5 00 00 00       	push   $0xf5
   jmp alltraps
-80106479:	e9 51 f1 ff ff       	jmp    801055cf <alltraps>
+80106649:	e9 5b f1 ff ff       	jmp    801057a9 <alltraps>
 
-8010647e <vector246>:
+8010664e <vector246>:
 .globl vector246
 vector246:
   pushl $0
-8010647e:	6a 00                	push   $0x0
+8010664e:	6a 00                	push   $0x0
   pushl $246
-80106480:	68 f6 00 00 00       	push   $0xf6
+80106650:	68 f6 00 00 00       	push   $0xf6
   jmp alltraps
-80106485:	e9 45 f1 ff ff       	jmp    801055cf <alltraps>
+80106655:	e9 4f f1 ff ff       	jmp    801057a9 <alltraps>
 
-8010648a <vector247>:
+8010665a <vector247>:
 .globl vector247
 vector247:
   pushl $0
-8010648a:	6a 00                	push   $0x0
+8010665a:	6a 00                	push   $0x0
   pushl $247
-8010648c:	68 f7 00 00 00       	push   $0xf7
+8010665c:	68 f7 00 00 00       	push   $0xf7
   jmp alltraps
-80106491:	e9 39 f1 ff ff       	jmp    801055cf <alltraps>
+80106661:	e9 43 f1 ff ff       	jmp    801057a9 <alltraps>
 
-80106496 <vector248>:
+80106666 <vector248>:
 .globl vector248
 vector248:
   pushl $0
-80106496:	6a 00                	push   $0x0
+80106666:	6a 00                	push   $0x0
   pushl $248
-80106498:	68 f8 00 00 00       	push   $0xf8
+80106668:	68 f8 00 00 00       	push   $0xf8
   jmp alltraps
-8010649d:	e9 2d f1 ff ff       	jmp    801055cf <alltraps>
+8010666d:	e9 37 f1 ff ff       	jmp    801057a9 <alltraps>
 
-801064a2 <vector249>:
+80106672 <vector249>:
 .globl vector249
 vector249:
   pushl $0
-801064a2:	6a 00                	push   $0x0
+80106672:	6a 00                	push   $0x0
   pushl $249
-801064a4:	68 f9 00 00 00       	push   $0xf9
+80106674:	68 f9 00 00 00       	push   $0xf9
   jmp alltraps
-801064a9:	e9 21 f1 ff ff       	jmp    801055cf <alltraps>
+80106679:	e9 2b f1 ff ff       	jmp    801057a9 <alltraps>
 
-801064ae <vector250>:
+8010667e <vector250>:
 .globl vector250
 vector250:
   pushl $0
-801064ae:	6a 00                	push   $0x0
+8010667e:	6a 00                	push   $0x0
   pushl $250
-801064b0:	68 fa 00 00 00       	push   $0xfa
+80106680:	68 fa 00 00 00       	push   $0xfa
   jmp alltraps
-801064b5:	e9 15 f1 ff ff       	jmp    801055cf <alltraps>
+80106685:	e9 1f f1 ff ff       	jmp    801057a9 <alltraps>
 
-801064ba <vector251>:
+8010668a <vector251>:
 .globl vector251
 vector251:
   pushl $0
-801064ba:	6a 00                	push   $0x0
+8010668a:	6a 00                	push   $0x0
   pushl $251
-801064bc:	68 fb 00 00 00       	push   $0xfb
+8010668c:	68 fb 00 00 00       	push   $0xfb
   jmp alltraps
-801064c1:	e9 09 f1 ff ff       	jmp    801055cf <alltraps>
+80106691:	e9 13 f1 ff ff       	jmp    801057a9 <alltraps>
 
-801064c6 <vector252>:
+80106696 <vector252>:
 .globl vector252
 vector252:
   pushl $0
-801064c6:	6a 00                	push   $0x0
+80106696:	6a 00                	push   $0x0
   pushl $252
-801064c8:	68 fc 00 00 00       	push   $0xfc
+80106698:	68 fc 00 00 00       	push   $0xfc
   jmp alltraps
-801064cd:	e9 fd f0 ff ff       	jmp    801055cf <alltraps>
+8010669d:	e9 07 f1 ff ff       	jmp    801057a9 <alltraps>
 
-801064d2 <vector253>:
+801066a2 <vector253>:
 .globl vector253
 vector253:
   pushl $0
-801064d2:	6a 00                	push   $0x0
+801066a2:	6a 00                	push   $0x0
   pushl $253
-801064d4:	68 fd 00 00 00       	push   $0xfd
+801066a4:	68 fd 00 00 00       	push   $0xfd
   jmp alltraps
-801064d9:	e9 f1 f0 ff ff       	jmp    801055cf <alltraps>
+801066a9:	e9 fb f0 ff ff       	jmp    801057a9 <alltraps>
 
-801064de <vector254>:
+801066ae <vector254>:
 .globl vector254
 vector254:
   pushl $0
-801064de:	6a 00                	push   $0x0
+801066ae:	6a 00                	push   $0x0
   pushl $254
-801064e0:	68 fe 00 00 00       	push   $0xfe
+801066b0:	68 fe 00 00 00       	push   $0xfe
   jmp alltraps
-801064e5:	e9 e5 f0 ff ff       	jmp    801055cf <alltraps>
+801066b5:	e9 ef f0 ff ff       	jmp    801057a9 <alltraps>
 
-801064ea <vector255>:
+801066ba <vector255>:
 .globl vector255
 vector255:
   pushl $0
-801064ea:	6a 00                	push   $0x0
+801066ba:	6a 00                	push   $0x0
   pushl $255
-801064ec:	68 ff 00 00 00       	push   $0xff
+801066bc:	68 ff 00 00 00       	push   $0xff
   jmp alltraps
-801064f1:	e9 d9 f0 ff ff       	jmp    801055cf <alltraps>
-801064f6:	66 90                	xchg   %ax,%ax
-801064f8:	66 90                	xchg   %ax,%ax
-801064fa:	66 90                	xchg   %ax,%ax
-801064fc:	66 90                	xchg   %ax,%ax
-801064fe:	66 90                	xchg   %ax,%ax
+801066c1:	e9 e3 f0 ff ff       	jmp    801057a9 <alltraps>
+801066c6:	66 90                	xchg   %ax,%ax
+801066c8:	66 90                	xchg   %ax,%ax
+801066ca:	66 90                	xchg   %ax,%ax
+801066cc:	66 90                	xchg   %ax,%ax
+801066ce:	66 90                	xchg   %ax,%ax
 
-80106500 <walkpgdir>:
+801066d0 <walkpgdir>:
 // Return the address of the PTE in page table pgdir
 // that corresponds to virtual address va.  If alloc!=0,
 // create any required page table pages.
 static pte_t *
 walkpgdir(pde_t *pgdir, const void *va, int alloc)
 {
-80106500:	55                   	push   %ebp
-80106501:	89 e5                	mov    %esp,%ebp
-80106503:	57                   	push   %edi
-80106504:	56                   	push   %esi
-80106505:	89 d6                	mov    %edx,%esi
+801066d0:	55                   	push   %ebp
+801066d1:	89 e5                	mov    %esp,%ebp
+801066d3:	57                   	push   %edi
+801066d4:	56                   	push   %esi
+801066d5:	89 d6                	mov    %edx,%esi
   pde_t *pde;
   pte_t *pgtab;
 
   pde = &pgdir[PDX(va)];
-80106507:	c1 ea 16             	shr    $0x16,%edx
+801066d7:	c1 ea 16             	shr    $0x16,%edx
 {
-8010650a:	53                   	push   %ebx
+801066da:	53                   	push   %ebx
   pde = &pgdir[PDX(va)];
-8010650b:	8d 3c 90             	lea    (%eax,%edx,4),%edi
+801066db:	8d 3c 90             	lea    (%eax,%edx,4),%edi
 {
-8010650e:	83 ec 1c             	sub    $0x1c,%esp
+801066de:	83 ec 1c             	sub    $0x1c,%esp
   if(*pde & PTE_P){
-80106511:	8b 1f                	mov    (%edi),%ebx
-80106513:	f6 c3 01             	test   $0x1,%bl
-80106516:	74 28                	je     80106540 <walkpgdir+0x40>
+801066e1:	8b 1f                	mov    (%edi),%ebx
+801066e3:	f6 c3 01             	test   $0x1,%bl
+801066e6:	74 28                	je     80106710 <walkpgdir+0x40>
     pgtab = (pte_t*)P2V(PTE_ADDR(*pde));
-80106518:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
-8010651e:	81 c3 00 00 00 80    	add    $0x80000000,%ebx
+801066e8:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
+801066ee:	81 c3 00 00 00 80    	add    $0x80000000,%ebx
     // The permissions here are overly generous, but they can
     // be further restricted by the permissions in the page table
     // entries, if necessary.
     *pde = V2P(pgtab) | PTE_P | PTE_W | PTE_U;
   }
   return &pgtab[PTX(va)];
-80106524:	c1 ee 0a             	shr    $0xa,%esi
+801066f4:	c1 ee 0a             	shr    $0xa,%esi
 }
-80106527:	83 c4 1c             	add    $0x1c,%esp
+801066f7:	83 c4 1c             	add    $0x1c,%esp
   return &pgtab[PTX(va)];
-8010652a:	89 f2                	mov    %esi,%edx
-8010652c:	81 e2 fc 0f 00 00    	and    $0xffc,%edx
-80106532:	8d 04 13             	lea    (%ebx,%edx,1),%eax
-}
-80106535:	5b                   	pop    %ebx
-80106536:	5e                   	pop    %esi
-80106537:	5f                   	pop    %edi
-80106538:	5d                   	pop    %ebp
-80106539:	c3                   	ret    
-8010653a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+801066fa:	89 f2                	mov    %esi,%edx
+801066fc:	81 e2 fc 0f 00 00    	and    $0xffc,%edx
+80106702:	8d 04 13             	lea    (%ebx,%edx,1),%eax
+}
+80106705:	5b                   	pop    %ebx
+80106706:	5e                   	pop    %esi
+80106707:	5f                   	pop    %edi
+80106708:	5d                   	pop    %ebp
+80106709:	c3                   	ret    
+8010670a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     if(!alloc || (pgtab = (pte_t*)kalloc()) == 0)
-80106540:	85 c9                	test   %ecx,%ecx
-80106542:	74 34                	je     80106578 <walkpgdir+0x78>
-80106544:	e8 57 bf ff ff       	call   801024a0 <kalloc>
-80106549:	85 c0                	test   %eax,%eax
-8010654b:	89 c3                	mov    %eax,%ebx
-8010654d:	74 29                	je     80106578 <walkpgdir+0x78>
+80106710:	85 c9                	test   %ecx,%ecx
+80106712:	74 34                	je     80106748 <walkpgdir+0x78>
+80106714:	e8 87 bd ff ff       	call   801024a0 <kalloc>
+80106719:	85 c0                	test   %eax,%eax
+8010671b:	89 c3                	mov    %eax,%ebx
+8010671d:	74 29                	je     80106748 <walkpgdir+0x78>
     memset(pgtab, 0, PGSIZE);
-8010654f:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
-80106556:	00 
-80106557:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
-8010655e:	00 
-8010655f:	89 04 24             	mov    %eax,(%esp)
-80106562:	e8 a9 de ff ff       	call   80104410 <memset>
+8010671f:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
+80106726:	00 
+80106727:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+8010672e:	00 
+8010672f:	89 04 24             	mov    %eax,(%esp)
+80106732:	e8 49 de ff ff       	call   80104580 <memset>
     *pde = V2P(pgtab) | PTE_P | PTE_W | PTE_U;
-80106567:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
-8010656d:	83 c8 07             	or     $0x7,%eax
-80106570:	89 07                	mov    %eax,(%edi)
-80106572:	eb b0                	jmp    80106524 <walkpgdir+0x24>
-80106574:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80106737:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
+8010673d:	83 c8 07             	or     $0x7,%eax
+80106740:	89 07                	mov    %eax,(%edi)
+80106742:	eb b0                	jmp    801066f4 <walkpgdir+0x24>
+80106744:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 }
-80106578:	83 c4 1c             	add    $0x1c,%esp
+80106748:	83 c4 1c             	add    $0x1c,%esp
       return 0;
-8010657b:	31 c0                	xor    %eax,%eax
+8010674b:	31 c0                	xor    %eax,%eax
 }
-8010657d:	5b                   	pop    %ebx
-8010657e:	5e                   	pop    %esi
-8010657f:	5f                   	pop    %edi
-80106580:	5d                   	pop    %ebp
-80106581:	c3                   	ret    
-80106582:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80106589:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+8010674d:	5b                   	pop    %ebx
+8010674e:	5e                   	pop    %esi
+8010674f:	5f                   	pop    %edi
+80106750:	5d                   	pop    %ebp
+80106751:	c3                   	ret    
+80106752:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106759:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
 
-80106590 <mappages>:
+80106760 <mappages>:
 // Create PTEs for virtual addresses starting at va that refer to
 // physical addresses starting at pa. va and size might not
 // be page-aligned.
 static int
 mappages(pde_t *pgdir, void *va, uint size, uint pa, int perm)
 {
-80106590:	55                   	push   %ebp
-80106591:	89 e5                	mov    %esp,%ebp
-80106593:	57                   	push   %edi
-80106594:	56                   	push   %esi
-80106595:	53                   	push   %ebx
+80106760:	55                   	push   %ebp
+80106761:	89 e5                	mov    %esp,%ebp
+80106763:	57                   	push   %edi
+80106764:	56                   	push   %esi
+80106765:	53                   	push   %ebx
   char *a, *last;
   pte_t *pte;
 
   a = (char*)PGROUNDDOWN((uint)va);
-80106596:	89 d3                	mov    %edx,%ebx
+80106766:	89 d3                	mov    %edx,%ebx
 {
-80106598:	83 ec 1c             	sub    $0x1c,%esp
-8010659b:	8b 7d 08             	mov    0x8(%ebp),%edi
+80106768:	83 ec 1c             	sub    $0x1c,%esp
+8010676b:	8b 7d 08             	mov    0x8(%ebp),%edi
   a = (char*)PGROUNDDOWN((uint)va);
-8010659e:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
+8010676e:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
 {
-801065a4:	89 45 e0             	mov    %eax,-0x20(%ebp)
+80106774:	89 45 e0             	mov    %eax,-0x20(%ebp)
   last = (char*)PGROUNDDOWN(((uint)va) + size - 1);
-801065a7:	8d 44 0a ff          	lea    -0x1(%edx,%ecx,1),%eax
-801065ab:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+80106777:	8d 44 0a ff          	lea    -0x1(%edx,%ecx,1),%eax
+8010677b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
   for(;;){
     if((pte = walkpgdir(pgdir, a, 1)) == 0)
       return -1;
     if(*pte & PTE_P)
       panic("remap");
     *pte = pa | perm | PTE_P;
-801065ae:	83 4d 0c 01          	orl    $0x1,0xc(%ebp)
+8010677e:	83 4d 0c 01          	orl    $0x1,0xc(%ebp)
   last = (char*)PGROUNDDOWN(((uint)va) + size - 1);
-801065b2:	81 65 e4 00 f0 ff ff 	andl   $0xfffff000,-0x1c(%ebp)
-801065b9:	29 df                	sub    %ebx,%edi
-801065bb:	eb 18                	jmp    801065d5 <mappages+0x45>
-801065bd:	8d 76 00             	lea    0x0(%esi),%esi
+80106782:	81 65 e4 00 f0 ff ff 	andl   $0xfffff000,-0x1c(%ebp)
+80106789:	29 df                	sub    %ebx,%edi
+8010678b:	eb 18                	jmp    801067a5 <mappages+0x45>
+8010678d:	8d 76 00             	lea    0x0(%esi),%esi
     if(*pte & PTE_P)
-801065c0:	f6 00 01             	testb  $0x1,(%eax)
-801065c3:	75 3d                	jne    80106602 <mappages+0x72>
+80106790:	f6 00 01             	testb  $0x1,(%eax)
+80106793:	75 3d                	jne    801067d2 <mappages+0x72>
     *pte = pa | perm | PTE_P;
-801065c5:	0b 75 0c             	or     0xc(%ebp),%esi
+80106795:	0b 75 0c             	or     0xc(%ebp),%esi
     if(a == last)
-801065c8:	3b 5d e4             	cmp    -0x1c(%ebp),%ebx
+80106798:	3b 5d e4             	cmp    -0x1c(%ebp),%ebx
     *pte = pa | perm | PTE_P;
-801065cb:	89 30                	mov    %esi,(%eax)
+8010679b:	89 30                	mov    %esi,(%eax)
     if(a == last)
-801065cd:	74 29                	je     801065f8 <mappages+0x68>
+8010679d:	74 29                	je     801067c8 <mappages+0x68>
       break;
     a += PGSIZE;
-801065cf:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+8010679f:	81 c3 00 10 00 00    	add    $0x1000,%ebx
     if((pte = walkpgdir(pgdir, a, 1)) == 0)
-801065d5:	8b 45 e0             	mov    -0x20(%ebp),%eax
-801065d8:	b9 01 00 00 00       	mov    $0x1,%ecx
-801065dd:	89 da                	mov    %ebx,%edx
-801065df:	8d 34 3b             	lea    (%ebx,%edi,1),%esi
-801065e2:	e8 19 ff ff ff       	call   80106500 <walkpgdir>
-801065e7:	85 c0                	test   %eax,%eax
-801065e9:	75 d5                	jne    801065c0 <mappages+0x30>
+801067a5:	8b 45 e0             	mov    -0x20(%ebp),%eax
+801067a8:	b9 01 00 00 00       	mov    $0x1,%ecx
+801067ad:	89 da                	mov    %ebx,%edx
+801067af:	8d 34 3b             	lea    (%ebx,%edi,1),%esi
+801067b2:	e8 19 ff ff ff       	call   801066d0 <walkpgdir>
+801067b7:	85 c0                	test   %eax,%eax
+801067b9:	75 d5                	jne    80106790 <mappages+0x30>
     pa += PGSIZE;
   }
   return 0;
 }
-801065eb:	83 c4 1c             	add    $0x1c,%esp
+801067bb:	83 c4 1c             	add    $0x1c,%esp
       return -1;
-801065ee:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-}
-801065f3:	5b                   	pop    %ebx
-801065f4:	5e                   	pop    %esi
-801065f5:	5f                   	pop    %edi
-801065f6:	5d                   	pop    %ebp
-801065f7:	c3                   	ret    
-801065f8:	83 c4 1c             	add    $0x1c,%esp
+801067be:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+801067c3:	5b                   	pop    %ebx
+801067c4:	5e                   	pop    %esi
+801067c5:	5f                   	pop    %edi
+801067c6:	5d                   	pop    %ebp
+801067c7:	c3                   	ret    
+801067c8:	83 c4 1c             	add    $0x1c,%esp
   return 0;
-801065fb:	31 c0                	xor    %eax,%eax
+801067cb:	31 c0                	xor    %eax,%eax
 }
-801065fd:	5b                   	pop    %ebx
-801065fe:	5e                   	pop    %esi
-801065ff:	5f                   	pop    %edi
-80106600:	5d                   	pop    %ebp
-80106601:	c3                   	ret    
+801067cd:	5b                   	pop    %ebx
+801067ce:	5e                   	pop    %esi
+801067cf:	5f                   	pop    %edi
+801067d0:	5d                   	pop    %ebp
+801067d1:	c3                   	ret    
       panic("remap");
-80106602:	c7 04 24 ec 76 10 80 	movl   $0x801076ec,(%esp)
-80106609:	e8 52 9d ff ff       	call   80100360 <panic>
-8010660e:	66 90                	xchg   %ax,%ax
+801067d2:	c7 04 24 14 79 10 80 	movl   $0x80107914,(%esp)
+801067d9:	e8 82 9b ff ff       	call   80100360 <panic>
+801067de:	66 90                	xchg   %ax,%ax
 
-80106610 <deallocuvm.part.0>:
+801067e0 <deallocuvm.part.0>:
 // Deallocate user pages to bring the process size from oldsz to
 // newsz.  oldsz and newsz need not be page-aligned, nor does newsz
 // need to be less than oldsz.  oldsz can be larger than the actual
 // process size.  Returns the new process size.
 int
 deallocuvm(pde_t *pgdir, uint oldsz, uint newsz)
-80106610:	55                   	push   %ebp
-80106611:	89 e5                	mov    %esp,%ebp
-80106613:	57                   	push   %edi
-80106614:	89 c7                	mov    %eax,%edi
-80106616:	56                   	push   %esi
-80106617:	89 d6                	mov    %edx,%esi
-80106619:	53                   	push   %ebx
+801067e0:	55                   	push   %ebp
+801067e1:	89 e5                	mov    %esp,%ebp
+801067e3:	57                   	push   %edi
+801067e4:	89 c7                	mov    %eax,%edi
+801067e6:	56                   	push   %esi
+801067e7:	89 d6                	mov    %edx,%esi
+801067e9:	53                   	push   %ebx
   uint a, pa;
 
   if(newsz >= oldsz)
     return oldsz;
 
   a = PGROUNDUP(newsz);
-8010661a:	8d 99 ff 0f 00 00    	lea    0xfff(%ecx),%ebx
+801067ea:	8d 99 ff 0f 00 00    	lea    0xfff(%ecx),%ebx
 deallocuvm(pde_t *pgdir, uint oldsz, uint newsz)
-80106620:	83 ec 1c             	sub    $0x1c,%esp
+801067f0:	83 ec 1c             	sub    $0x1c,%esp
   a = PGROUNDUP(newsz);
-80106623:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
+801067f3:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
   for(; a  < oldsz; a += PGSIZE){
-80106629:	39 d3                	cmp    %edx,%ebx
+801067f9:	39 d3                	cmp    %edx,%ebx
 deallocuvm(pde_t *pgdir, uint oldsz, uint newsz)
-8010662b:	89 4d e0             	mov    %ecx,-0x20(%ebp)
+801067fb:	89 4d e0             	mov    %ecx,-0x20(%ebp)
   for(; a  < oldsz; a += PGSIZE){
-8010662e:	72 3b                	jb     8010666b <deallocuvm.part.0+0x5b>
-80106630:	eb 5e                	jmp    80106690 <deallocuvm.part.0+0x80>
-80106632:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+801067fe:	72 3b                	jb     8010683b <deallocuvm.part.0+0x5b>
+80106800:	eb 5e                	jmp    80106860 <deallocuvm.part.0+0x80>
+80106802:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     pte = walkpgdir(pgdir, (char*)a, 0);
     if(!pte)
       a = PGADDR(PDX(a) + 1, 0, 0) - PGSIZE;
     else if((*pte & PTE_P) != 0){
-80106638:	8b 10                	mov    (%eax),%edx
-8010663a:	f6 c2 01             	test   $0x1,%dl
-8010663d:	74 22                	je     80106661 <deallocuvm.part.0+0x51>
+80106808:	8b 10                	mov    (%eax),%edx
+8010680a:	f6 c2 01             	test   $0x1,%dl
+8010680d:	74 22                	je     80106831 <deallocuvm.part.0+0x51>
       pa = PTE_ADDR(*pte);
       if(pa == 0)
-8010663f:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
-80106645:	74 54                	je     8010669b <deallocuvm.part.0+0x8b>
+8010680f:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
+80106815:	74 54                	je     8010686b <deallocuvm.part.0+0x8b>
         panic("kfree");
       char *v = P2V(pa);
-80106647:	81 c2 00 00 00 80    	add    $0x80000000,%edx
+80106817:	81 c2 00 00 00 80    	add    $0x80000000,%edx
       kfree(v);
-8010664d:	89 14 24             	mov    %edx,(%esp)
-80106650:	89 45 e4             	mov    %eax,-0x1c(%ebp)
-80106653:	e8 98 bc ff ff       	call   801022f0 <kfree>
+8010681d:	89 14 24             	mov    %edx,(%esp)
+80106820:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+80106823:	e8 c8 ba ff ff       	call   801022f0 <kfree>
       *pte = 0;
-80106658:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-8010665b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
+80106828:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+8010682b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   for(; a  < oldsz; a += PGSIZE){
-80106661:	81 c3 00 10 00 00    	add    $0x1000,%ebx
-80106667:	39 f3                	cmp    %esi,%ebx
-80106669:	73 25                	jae    80106690 <deallocuvm.part.0+0x80>
+80106831:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+80106837:	39 f3                	cmp    %esi,%ebx
+80106839:	73 25                	jae    80106860 <deallocuvm.part.0+0x80>
     pte = walkpgdir(pgdir, (char*)a, 0);
-8010666b:	31 c9                	xor    %ecx,%ecx
-8010666d:	89 da                	mov    %ebx,%edx
-8010666f:	89 f8                	mov    %edi,%eax
-80106671:	e8 8a fe ff ff       	call   80106500 <walkpgdir>
+8010683b:	31 c9                	xor    %ecx,%ecx
+8010683d:	89 da                	mov    %ebx,%edx
+8010683f:	89 f8                	mov    %edi,%eax
+80106841:	e8 8a fe ff ff       	call   801066d0 <walkpgdir>
     if(!pte)
-80106676:	85 c0                	test   %eax,%eax
-80106678:	75 be                	jne    80106638 <deallocuvm.part.0+0x28>
+80106846:	85 c0                	test   %eax,%eax
+80106848:	75 be                	jne    80106808 <deallocuvm.part.0+0x28>
       a = PGADDR(PDX(a) + 1, 0, 0) - PGSIZE;
-8010667a:	81 e3 00 00 c0 ff    	and    $0xffc00000,%ebx
-80106680:	81 c3 00 f0 3f 00    	add    $0x3ff000,%ebx
+8010684a:	81 e3 00 00 c0 ff    	and    $0xffc00000,%ebx
+80106850:	81 c3 00 f0 3f 00    	add    $0x3ff000,%ebx
   for(; a  < oldsz; a += PGSIZE){
-80106686:	81 c3 00 10 00 00    	add    $0x1000,%ebx
-8010668c:	39 f3                	cmp    %esi,%ebx
-8010668e:	72 db                	jb     8010666b <deallocuvm.part.0+0x5b>
+80106856:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+8010685c:	39 f3                	cmp    %esi,%ebx
+8010685e:	72 db                	jb     8010683b <deallocuvm.part.0+0x5b>
     }
   }
   return newsz;
 }
-80106690:	8b 45 e0             	mov    -0x20(%ebp),%eax
-80106693:	83 c4 1c             	add    $0x1c,%esp
-80106696:	5b                   	pop    %ebx
-80106697:	5e                   	pop    %esi
-80106698:	5f                   	pop    %edi
-80106699:	5d                   	pop    %ebp
-8010669a:	c3                   	ret    
+80106860:	8b 45 e0             	mov    -0x20(%ebp),%eax
+80106863:	83 c4 1c             	add    $0x1c,%esp
+80106866:	5b                   	pop    %ebx
+80106867:	5e                   	pop    %esi
+80106868:	5f                   	pop    %edi
+80106869:	5d                   	pop    %ebp
+8010686a:	c3                   	ret    
         panic("kfree");
-8010669b:	c7 04 24 86 70 10 80 	movl   $0x80107086,(%esp)
-801066a2:	e8 b9 9c ff ff       	call   80100360 <panic>
-801066a7:	89 f6                	mov    %esi,%esi
-801066a9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+8010686b:	c7 04 24 46 72 10 80 	movl   $0x80107246,(%esp)
+80106872:	e8 e9 9a ff ff       	call   80100360 <panic>
+80106877:	89 f6                	mov    %esi,%esi
+80106879:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
 
-801066b0 <seginit>:
+80106880 <seginit>:
 {
-801066b0:	55                   	push   %ebp
-801066b1:	89 e5                	mov    %esp,%ebp
-801066b3:	83 ec 18             	sub    $0x18,%esp
+80106880:	55                   	push   %ebp
+80106881:	89 e5                	mov    %esp,%ebp
+80106883:	83 ec 18             	sub    $0x18,%esp
   c = &cpus[cpuid()];
-801066b6:	e8 c5 cf ff ff       	call   80103680 <cpuid>
+80106886:	e8 f5 cd ff ff       	call   80103680 <cpuid>
   c->gdt[SEG_KCODE] = SEG(STA_X|STA_R, 0, 0xffffffff, 0);
-801066bb:	31 c9                	xor    %ecx,%ecx
-801066bd:	ba ff ff ff ff       	mov    $0xffffffff,%edx
+8010688b:	31 c9                	xor    %ecx,%ecx
+8010688d:	ba ff ff ff ff       	mov    $0xffffffff,%edx
   c = &cpus[cpuid()];
-801066c2:	69 c0 b0 00 00 00    	imul   $0xb0,%eax,%eax
-801066c8:	05 80 27 11 80       	add    $0x80112780,%eax
+80106892:	69 c0 b0 00 00 00    	imul   $0xb0,%eax,%eax
+80106898:	05 80 27 11 80       	add    $0x80112780,%eax
   c->gdt[SEG_KCODE] = SEG(STA_X|STA_R, 0, 0xffffffff, 0);
-801066cd:	66 89 50 78          	mov    %dx,0x78(%eax)
+8010689d:	66 89 50 78          	mov    %dx,0x78(%eax)
   c->gdt[SEG_KDATA] = SEG(STA_W, 0, 0xffffffff, 0);
-801066d1:	ba ff ff ff ff       	mov    $0xffffffff,%edx
+801068a1:	ba ff ff ff ff       	mov    $0xffffffff,%edx
   lgdt(c->gdt, sizeof(c->gdt));
-801066d6:	83 c0 70             	add    $0x70,%eax
+801068a6:	83 c0 70             	add    $0x70,%eax
   c->gdt[SEG_KCODE] = SEG(STA_X|STA_R, 0, 0xffffffff, 0);
-801066d9:	66 89 48 0a          	mov    %cx,0xa(%eax)
+801068a9:	66 89 48 0a          	mov    %cx,0xa(%eax)
   c->gdt[SEG_KDATA] = SEG(STA_W, 0, 0xffffffff, 0);
-801066dd:	31 c9                	xor    %ecx,%ecx
-801066df:	66 89 50 10          	mov    %dx,0x10(%eax)
+801068ad:	31 c9                	xor    %ecx,%ecx
+801068af:	66 89 50 10          	mov    %dx,0x10(%eax)
   c->gdt[SEG_UCODE] = SEG(STA_X|STA_R, 0, 0xffffffff, DPL_USER);
-801066e3:	ba ff ff ff ff       	mov    $0xffffffff,%edx
+801068b3:	ba ff ff ff ff       	mov    $0xffffffff,%edx
   c->gdt[SEG_KDATA] = SEG(STA_W, 0, 0xffffffff, 0);
-801066e8:	66 89 48 12          	mov    %cx,0x12(%eax)
+801068b8:	66 89 48 12          	mov    %cx,0x12(%eax)
   c->gdt[SEG_UCODE] = SEG(STA_X|STA_R, 0, 0xffffffff, DPL_USER);
-801066ec:	31 c9                	xor    %ecx,%ecx
-801066ee:	66 89 50 18          	mov    %dx,0x18(%eax)
+801068bc:	31 c9                	xor    %ecx,%ecx
+801068be:	66 89 50 18          	mov    %dx,0x18(%eax)
   c->gdt[SEG_UDATA] = SEG(STA_W, 0, 0xffffffff, DPL_USER);
-801066f2:	ba ff ff ff ff       	mov    $0xffffffff,%edx
+801068c2:	ba ff ff ff ff       	mov    $0xffffffff,%edx
   c->gdt[SEG_UCODE] = SEG(STA_X|STA_R, 0, 0xffffffff, DPL_USER);
-801066f7:	66 89 48 1a          	mov    %cx,0x1a(%eax)
+801068c7:	66 89 48 1a          	mov    %cx,0x1a(%eax)
   c->gdt[SEG_UDATA] = SEG(STA_W, 0, 0xffffffff, DPL_USER);
-801066fb:	31 c9                	xor    %ecx,%ecx
+801068cb:	31 c9                	xor    %ecx,%ecx
   c->gdt[SEG_KCODE] = SEG(STA_X|STA_R, 0, 0xffffffff, 0);
-801066fd:	c6 40 0d 9a          	movb   $0x9a,0xd(%eax)
-80106701:	c6 40 0e cf          	movb   $0xcf,0xe(%eax)
+801068cd:	c6 40 0d 9a          	movb   $0x9a,0xd(%eax)
+801068d1:	c6 40 0e cf          	movb   $0xcf,0xe(%eax)
   c->gdt[SEG_KDATA] = SEG(STA_W, 0, 0xffffffff, 0);
-80106705:	c6 40 15 92          	movb   $0x92,0x15(%eax)
-80106709:	c6 40 16 cf          	movb   $0xcf,0x16(%eax)
+801068d5:	c6 40 15 92          	movb   $0x92,0x15(%eax)
+801068d9:	c6 40 16 cf          	movb   $0xcf,0x16(%eax)
   c->gdt[SEG_UCODE] = SEG(STA_X|STA_R, 0, 0xffffffff, DPL_USER);
-8010670d:	c6 40 1d fa          	movb   $0xfa,0x1d(%eax)
-80106711:	c6 40 1e cf          	movb   $0xcf,0x1e(%eax)
+801068dd:	c6 40 1d fa          	movb   $0xfa,0x1d(%eax)
+801068e1:	c6 40 1e cf          	movb   $0xcf,0x1e(%eax)
   c->gdt[SEG_UDATA] = SEG(STA_W, 0, 0xffffffff, DPL_USER);
-80106715:	c6 40 25 f2          	movb   $0xf2,0x25(%eax)
-80106719:	c6 40 26 cf          	movb   $0xcf,0x26(%eax)
-8010671d:	66 89 50 20          	mov    %dx,0x20(%eax)
+801068e5:	c6 40 25 f2          	movb   $0xf2,0x25(%eax)
+801068e9:	c6 40 26 cf          	movb   $0xcf,0x26(%eax)
+801068ed:	66 89 50 20          	mov    %dx,0x20(%eax)
   pd[0] = size-1;
-80106721:	ba 2f 00 00 00       	mov    $0x2f,%edx
+801068f1:	ba 2f 00 00 00       	mov    $0x2f,%edx
   c->gdt[SEG_KCODE] = SEG(STA_X|STA_R, 0, 0xffffffff, 0);
-80106726:	c6 40 0c 00          	movb   $0x0,0xc(%eax)
-8010672a:	c6 40 0f 00          	movb   $0x0,0xf(%eax)
+801068f6:	c6 40 0c 00          	movb   $0x0,0xc(%eax)
+801068fa:	c6 40 0f 00          	movb   $0x0,0xf(%eax)
   c->gdt[SEG_KDATA] = SEG(STA_W, 0, 0xffffffff, 0);
-8010672e:	c6 40 14 00          	movb   $0x0,0x14(%eax)
-80106732:	c6 40 17 00          	movb   $0x0,0x17(%eax)
+801068fe:	c6 40 14 00          	movb   $0x0,0x14(%eax)
+80106902:	c6 40 17 00          	movb   $0x0,0x17(%eax)
   c->gdt[SEG_UCODE] = SEG(STA_X|STA_R, 0, 0xffffffff, DPL_USER);
-80106736:	c6 40 1c 00          	movb   $0x0,0x1c(%eax)
-8010673a:	c6 40 1f 00          	movb   $0x0,0x1f(%eax)
+80106906:	c6 40 1c 00          	movb   $0x0,0x1c(%eax)
+8010690a:	c6 40 1f 00          	movb   $0x0,0x1f(%eax)
   c->gdt[SEG_UDATA] = SEG(STA_W, 0, 0xffffffff, DPL_USER);
-8010673e:	66 89 48 22          	mov    %cx,0x22(%eax)
-80106742:	c6 40 24 00          	movb   $0x0,0x24(%eax)
-80106746:	c6 40 27 00          	movb   $0x0,0x27(%eax)
-8010674a:	66 89 55 f2          	mov    %dx,-0xe(%ebp)
+8010690e:	66 89 48 22          	mov    %cx,0x22(%eax)
+80106912:	c6 40 24 00          	movb   $0x0,0x24(%eax)
+80106916:	c6 40 27 00          	movb   $0x0,0x27(%eax)
+8010691a:	66 89 55 f2          	mov    %dx,-0xe(%ebp)
   pd[1] = (uint)p;
-8010674e:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
+8010691e:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
   pd[2] = (uint)p >> 16;
-80106752:	c1 e8 10             	shr    $0x10,%eax
-80106755:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
+80106922:	c1 e8 10             	shr    $0x10,%eax
+80106925:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
   asm volatile("lgdt (%0)" : : "r" (pd));
-80106759:	8d 45 f2             	lea    -0xe(%ebp),%eax
-8010675c:	0f 01 10             	lgdtl  (%eax)
-}
-8010675f:	c9                   	leave  
-80106760:	c3                   	ret    
-80106761:	eb 0d                	jmp    80106770 <switchkvm>
-80106763:	90                   	nop
-80106764:	90                   	nop
-80106765:	90                   	nop
-80106766:	90                   	nop
-80106767:	90                   	nop
-80106768:	90                   	nop
-80106769:	90                   	nop
-8010676a:	90                   	nop
-8010676b:	90                   	nop
-8010676c:	90                   	nop
-8010676d:	90                   	nop
-8010676e:	90                   	nop
-8010676f:	90                   	nop
-
-80106770 <switchkvm>:
+80106929:	8d 45 f2             	lea    -0xe(%ebp),%eax
+8010692c:	0f 01 10             	lgdtl  (%eax)
+}
+8010692f:	c9                   	leave  
+80106930:	c3                   	ret    
+80106931:	eb 0d                	jmp    80106940 <switchkvm>
+80106933:	90                   	nop
+80106934:	90                   	nop
+80106935:	90                   	nop
+80106936:	90                   	nop
+80106937:	90                   	nop
+80106938:	90                   	nop
+80106939:	90                   	nop
+8010693a:	90                   	nop
+8010693b:	90                   	nop
+8010693c:	90                   	nop
+8010693d:	90                   	nop
+8010693e:	90                   	nop
+8010693f:	90                   	nop
+
+80106940 <switchkvm>:
   lcr3(V2P(kpgdir));   // switch to the kernel page table
-80106770:	a1 a4 56 11 80       	mov    0x801156a4,%eax
+80106940:	a1 a4 5b 11 80       	mov    0x80115ba4,%eax
 {
-80106775:	55                   	push   %ebp
-80106776:	89 e5                	mov    %esp,%ebp
+80106945:	55                   	push   %ebp
+80106946:	89 e5                	mov    %esp,%ebp
   lcr3(V2P(kpgdir));   // switch to the kernel page table
-80106778:	05 00 00 00 80       	add    $0x80000000,%eax
+80106948:	05 00 00 00 80       	add    $0x80000000,%eax
 }
 
 static inline void
 lcr3(uint val)
 {
   asm volatile("movl %0,%%cr3" : : "r" (val));
-8010677d:	0f 22 d8             	mov    %eax,%cr3
-}
-80106780:	5d                   	pop    %ebp
-80106781:	c3                   	ret    
-80106782:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80106789:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
-
-80106790 <switchuvm>:
-{
-80106790:	55                   	push   %ebp
-80106791:	89 e5                	mov    %esp,%ebp
-80106793:	57                   	push   %edi
-80106794:	56                   	push   %esi
-80106795:	53                   	push   %ebx
-80106796:	83 ec 1c             	sub    $0x1c,%esp
-80106799:	8b 75 08             	mov    0x8(%ebp),%esi
+8010694d:	0f 22 d8             	mov    %eax,%cr3
+}
+80106950:	5d                   	pop    %ebp
+80106951:	c3                   	ret    
+80106952:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106959:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80106960 <switchuvm>:
+{
+80106960:	55                   	push   %ebp
+80106961:	89 e5                	mov    %esp,%ebp
+80106963:	57                   	push   %edi
+80106964:	56                   	push   %esi
+80106965:	53                   	push   %ebx
+80106966:	83 ec 1c             	sub    $0x1c,%esp
+80106969:	8b 75 08             	mov    0x8(%ebp),%esi
   if(p == 0)
-8010679c:	85 f6                	test   %esi,%esi
-8010679e:	0f 84 cd 00 00 00    	je     80106871 <switchuvm+0xe1>
+8010696c:	85 f6                	test   %esi,%esi
+8010696e:	0f 84 cd 00 00 00    	je     80106a41 <switchuvm+0xe1>
   if(p->kstack == 0)
-801067a4:	8b 46 08             	mov    0x8(%esi),%eax
-801067a7:	85 c0                	test   %eax,%eax
-801067a9:	0f 84 da 00 00 00    	je     80106889 <switchuvm+0xf9>
+80106974:	8b 46 08             	mov    0x8(%esi),%eax
+80106977:	85 c0                	test   %eax,%eax
+80106979:	0f 84 da 00 00 00    	je     80106a59 <switchuvm+0xf9>
   if(p->pgdir == 0)
-801067af:	8b 7e 04             	mov    0x4(%esi),%edi
-801067b2:	85 ff                	test   %edi,%edi
-801067b4:	0f 84 c3 00 00 00    	je     8010687d <switchuvm+0xed>
+8010697f:	8b 7e 04             	mov    0x4(%esi),%edi
+80106982:	85 ff                	test   %edi,%edi
+80106984:	0f 84 c3 00 00 00    	je     80106a4d <switchuvm+0xed>
   pushcli();
-801067ba:	e8 a1 da ff ff       	call   80104260 <pushcli>
+8010698a:	e8 41 da ff ff       	call   801043d0 <pushcli>
   mycpu()->gdt[SEG_TSS] = SEG16(STS_T32A, &mycpu()->ts,
-801067bf:	e8 3c ce ff ff       	call   80103600 <mycpu>
-801067c4:	89 c3                	mov    %eax,%ebx
-801067c6:	e8 35 ce ff ff       	call   80103600 <mycpu>
-801067cb:	89 c7                	mov    %eax,%edi
-801067cd:	e8 2e ce ff ff       	call   80103600 <mycpu>
-801067d2:	83 c7 08             	add    $0x8,%edi
-801067d5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
-801067d8:	e8 23 ce ff ff       	call   80103600 <mycpu>
-801067dd:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
-801067e0:	ba 67 00 00 00       	mov    $0x67,%edx
-801067e5:	66 89 93 98 00 00 00 	mov    %dx,0x98(%ebx)
-801067ec:	66 89 bb 9a 00 00 00 	mov    %di,0x9a(%ebx)
-801067f3:	c6 83 9d 00 00 00 99 	movb   $0x99,0x9d(%ebx)
-801067fa:	83 c1 08             	add    $0x8,%ecx
-801067fd:	c1 e9 10             	shr    $0x10,%ecx
-80106800:	83 c0 08             	add    $0x8,%eax
-80106803:	c1 e8 18             	shr    $0x18,%eax
-80106806:	88 8b 9c 00 00 00    	mov    %cl,0x9c(%ebx)
-8010680c:	c6 83 9e 00 00 00 40 	movb   $0x40,0x9e(%ebx)
-80106813:	88 83 9f 00 00 00    	mov    %al,0x9f(%ebx)
+8010698f:	e8 6c cc ff ff       	call   80103600 <mycpu>
+80106994:	89 c3                	mov    %eax,%ebx
+80106996:	e8 65 cc ff ff       	call   80103600 <mycpu>
+8010699b:	89 c7                	mov    %eax,%edi
+8010699d:	e8 5e cc ff ff       	call   80103600 <mycpu>
+801069a2:	83 c7 08             	add    $0x8,%edi
+801069a5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+801069a8:	e8 53 cc ff ff       	call   80103600 <mycpu>
+801069ad:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
+801069b0:	ba 67 00 00 00       	mov    $0x67,%edx
+801069b5:	66 89 93 98 00 00 00 	mov    %dx,0x98(%ebx)
+801069bc:	66 89 bb 9a 00 00 00 	mov    %di,0x9a(%ebx)
+801069c3:	c6 83 9d 00 00 00 99 	movb   $0x99,0x9d(%ebx)
+801069ca:	83 c1 08             	add    $0x8,%ecx
+801069cd:	c1 e9 10             	shr    $0x10,%ecx
+801069d0:	83 c0 08             	add    $0x8,%eax
+801069d3:	c1 e8 18             	shr    $0x18,%eax
+801069d6:	88 8b 9c 00 00 00    	mov    %cl,0x9c(%ebx)
+801069dc:	c6 83 9e 00 00 00 40 	movb   $0x40,0x9e(%ebx)
+801069e3:	88 83 9f 00 00 00    	mov    %al,0x9f(%ebx)
   mycpu()->ts.iomb = (ushort) 0xFFFF;
-80106819:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
+801069e9:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
   mycpu()->gdt[SEG_TSS].s = 0;
-8010681e:	e8 dd cd ff ff       	call   80103600 <mycpu>
-80106823:	80 a0 9d 00 00 00 ef 	andb   $0xef,0x9d(%eax)
+801069ee:	e8 0d cc ff ff       	call   80103600 <mycpu>
+801069f3:	80 a0 9d 00 00 00 ef 	andb   $0xef,0x9d(%eax)
   mycpu()->ts.ss0 = SEG_KDATA << 3;
-8010682a:	e8 d1 cd ff ff       	call   80103600 <mycpu>
-8010682f:	b9 10 00 00 00       	mov    $0x10,%ecx
-80106834:	66 89 48 10          	mov    %cx,0x10(%eax)
+801069fa:	e8 01 cc ff ff       	call   80103600 <mycpu>
+801069ff:	b9 10 00 00 00       	mov    $0x10,%ecx
+80106a04:	66 89 48 10          	mov    %cx,0x10(%eax)
   mycpu()->ts.esp0 = (uint)p->kstack + KSTACKSIZE;
-80106838:	e8 c3 cd ff ff       	call   80103600 <mycpu>
-8010683d:	8b 56 08             	mov    0x8(%esi),%edx
-80106840:	8d 8a 00 10 00 00    	lea    0x1000(%edx),%ecx
-80106846:	89 48 0c             	mov    %ecx,0xc(%eax)
+80106a08:	e8 f3 cb ff ff       	call   80103600 <mycpu>
+80106a0d:	8b 56 08             	mov    0x8(%esi),%edx
+80106a10:	8d 8a 00 10 00 00    	lea    0x1000(%edx),%ecx
+80106a16:	89 48 0c             	mov    %ecx,0xc(%eax)
   mycpu()->ts.iomb = (ushort) 0xFFFF;
-80106849:	e8 b2 cd ff ff       	call   80103600 <mycpu>
-8010684e:	66 89 58 6e          	mov    %bx,0x6e(%eax)
+80106a19:	e8 e2 cb ff ff       	call   80103600 <mycpu>
+80106a1e:	66 89 58 6e          	mov    %bx,0x6e(%eax)
   asm volatile("ltr %0" : : "r" (sel));
-80106852:	b8 28 00 00 00       	mov    $0x28,%eax
-80106857:	0f 00 d8             	ltr    %ax
+80106a22:	b8 28 00 00 00       	mov    $0x28,%eax
+80106a27:	0f 00 d8             	ltr    %ax
   lcr3(V2P(p->pgdir));  // switch to process's address space
-8010685a:	8b 46 04             	mov    0x4(%esi),%eax
-8010685d:	05 00 00 00 80       	add    $0x80000000,%eax
+80106a2a:	8b 46 04             	mov    0x4(%esi),%eax
+80106a2d:	05 00 00 00 80       	add    $0x80000000,%eax
   asm volatile("movl %0,%%cr3" : : "r" (val));
-80106862:	0f 22 d8             	mov    %eax,%cr3
+80106a32:	0f 22 d8             	mov    %eax,%cr3
 }
-80106865:	83 c4 1c             	add    $0x1c,%esp
-80106868:	5b                   	pop    %ebx
-80106869:	5e                   	pop    %esi
-8010686a:	5f                   	pop    %edi
-8010686b:	5d                   	pop    %ebp
+80106a35:	83 c4 1c             	add    $0x1c,%esp
+80106a38:	5b                   	pop    %ebx
+80106a39:	5e                   	pop    %esi
+80106a3a:	5f                   	pop    %edi
+80106a3b:	5d                   	pop    %ebp
   popcli();
-8010686c:	e9 2f da ff ff       	jmp    801042a0 <popcli>
+80106a3c:	e9 cf d9 ff ff       	jmp    80104410 <popcli>
     panic("switchuvm: no process");
-80106871:	c7 04 24 f2 76 10 80 	movl   $0x801076f2,(%esp)
-80106878:	e8 e3 9a ff ff       	call   80100360 <panic>
+80106a41:	c7 04 24 1a 79 10 80 	movl   $0x8010791a,(%esp)
+80106a48:	e8 13 99 ff ff       	call   80100360 <panic>
     panic("switchuvm: no pgdir");
-8010687d:	c7 04 24 1d 77 10 80 	movl   $0x8010771d,(%esp)
-80106884:	e8 d7 9a ff ff       	call   80100360 <panic>
+80106a4d:	c7 04 24 45 79 10 80 	movl   $0x80107945,(%esp)
+80106a54:	e8 07 99 ff ff       	call   80100360 <panic>
     panic("switchuvm: no kstack");
-80106889:	c7 04 24 08 77 10 80 	movl   $0x80107708,(%esp)
-80106890:	e8 cb 9a ff ff       	call   80100360 <panic>
-80106895:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80106899:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
-
-801068a0 <inituvm>:
-{
-801068a0:	55                   	push   %ebp
-801068a1:	89 e5                	mov    %esp,%ebp
-801068a3:	57                   	push   %edi
-801068a4:	56                   	push   %esi
-801068a5:	53                   	push   %ebx
-801068a6:	83 ec 1c             	sub    $0x1c,%esp
-801068a9:	8b 75 10             	mov    0x10(%ebp),%esi
-801068ac:	8b 45 08             	mov    0x8(%ebp),%eax
-801068af:	8b 7d 0c             	mov    0xc(%ebp),%edi
+80106a59:	c7 04 24 30 79 10 80 	movl   $0x80107930,(%esp)
+80106a60:	e8 fb 98 ff ff       	call   80100360 <panic>
+80106a65:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80106a69:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80106a70 <inituvm>:
+{
+80106a70:	55                   	push   %ebp
+80106a71:	89 e5                	mov    %esp,%ebp
+80106a73:	57                   	push   %edi
+80106a74:	56                   	push   %esi
+80106a75:	53                   	push   %ebx
+80106a76:	83 ec 1c             	sub    $0x1c,%esp
+80106a79:	8b 75 10             	mov    0x10(%ebp),%esi
+80106a7c:	8b 45 08             	mov    0x8(%ebp),%eax
+80106a7f:	8b 7d 0c             	mov    0xc(%ebp),%edi
   if(sz >= PGSIZE)
-801068b2:	81 fe ff 0f 00 00    	cmp    $0xfff,%esi
+80106a82:	81 fe ff 0f 00 00    	cmp    $0xfff,%esi
 {
-801068b8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+80106a88:	89 45 e4             	mov    %eax,-0x1c(%ebp)
   if(sz >= PGSIZE)
-801068bb:	77 54                	ja     80106911 <inituvm+0x71>
+80106a8b:	77 54                	ja     80106ae1 <inituvm+0x71>
   mem = kalloc();
-801068bd:	e8 de bb ff ff       	call   801024a0 <kalloc>
+80106a8d:	e8 0e ba ff ff       	call   801024a0 <kalloc>
   memset(mem, 0, PGSIZE);
-801068c2:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
-801068c9:	00 
-801068ca:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
-801068d1:	00 
+80106a92:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
+80106a99:	00 
+80106a9a:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+80106aa1:	00 
   mem = kalloc();
-801068d2:	89 c3                	mov    %eax,%ebx
+80106aa2:	89 c3                	mov    %eax,%ebx
   memset(mem, 0, PGSIZE);
-801068d4:	89 04 24             	mov    %eax,(%esp)
-801068d7:	e8 34 db ff ff       	call   80104410 <memset>
+80106aa4:	89 04 24             	mov    %eax,(%esp)
+80106aa7:	e8 d4 da ff ff       	call   80104580 <memset>
   mappages(pgdir, 0, PGSIZE, V2P(mem), PTE_W|PTE_U);
-801068dc:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
-801068e2:	b9 00 10 00 00       	mov    $0x1000,%ecx
-801068e7:	89 04 24             	mov    %eax,(%esp)
-801068ea:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-801068ed:	31 d2                	xor    %edx,%edx
-801068ef:	c7 44 24 04 06 00 00 	movl   $0x6,0x4(%esp)
-801068f6:	00 
-801068f7:	e8 94 fc ff ff       	call   80106590 <mappages>
+80106aac:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
+80106ab2:	b9 00 10 00 00       	mov    $0x1000,%ecx
+80106ab7:	89 04 24             	mov    %eax,(%esp)
+80106aba:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+80106abd:	31 d2                	xor    %edx,%edx
+80106abf:	c7 44 24 04 06 00 00 	movl   $0x6,0x4(%esp)
+80106ac6:	00 
+80106ac7:	e8 94 fc ff ff       	call   80106760 <mappages>
   memmove(mem, init, sz);
-801068fc:	89 75 10             	mov    %esi,0x10(%ebp)
-801068ff:	89 7d 0c             	mov    %edi,0xc(%ebp)
-80106902:	89 5d 08             	mov    %ebx,0x8(%ebp)
-}
-80106905:	83 c4 1c             	add    $0x1c,%esp
-80106908:	5b                   	pop    %ebx
-80106909:	5e                   	pop    %esi
-8010690a:	5f                   	pop    %edi
-8010690b:	5d                   	pop    %ebp
+80106acc:	89 75 10             	mov    %esi,0x10(%ebp)
+80106acf:	89 7d 0c             	mov    %edi,0xc(%ebp)
+80106ad2:	89 5d 08             	mov    %ebx,0x8(%ebp)
+}
+80106ad5:	83 c4 1c             	add    $0x1c,%esp
+80106ad8:	5b                   	pop    %ebx
+80106ad9:	5e                   	pop    %esi
+80106ada:	5f                   	pop    %edi
+80106adb:	5d                   	pop    %ebp
   memmove(mem, init, sz);
-8010690c:	e9 9f db ff ff       	jmp    801044b0 <memmove>
+80106adc:	e9 3f db ff ff       	jmp    80104620 <memmove>
     panic("inituvm: more than a page");
-80106911:	c7 04 24 31 77 10 80 	movl   $0x80107731,(%esp)
-80106918:	e8 43 9a ff ff       	call   80100360 <panic>
-8010691d:	8d 76 00             	lea    0x0(%esi),%esi
-
-80106920 <loaduvm>:
-{
-80106920:	55                   	push   %ebp
-80106921:	89 e5                	mov    %esp,%ebp
-80106923:	57                   	push   %edi
-80106924:	56                   	push   %esi
-80106925:	53                   	push   %ebx
-80106926:	83 ec 1c             	sub    $0x1c,%esp
+80106ae1:	c7 04 24 59 79 10 80 	movl   $0x80107959,(%esp)
+80106ae8:	e8 73 98 ff ff       	call   80100360 <panic>
+80106aed:	8d 76 00             	lea    0x0(%esi),%esi
+
+80106af0 <loaduvm>:
+{
+80106af0:	55                   	push   %ebp
+80106af1:	89 e5                	mov    %esp,%ebp
+80106af3:	57                   	push   %edi
+80106af4:	56                   	push   %esi
+80106af5:	53                   	push   %ebx
+80106af6:	83 ec 1c             	sub    $0x1c,%esp
   if((uint) addr % PGSIZE != 0)
-80106929:	f7 45 0c ff 0f 00 00 	testl  $0xfff,0xc(%ebp)
-80106930:	0f 85 98 00 00 00    	jne    801069ce <loaduvm+0xae>
+80106af9:	f7 45 0c ff 0f 00 00 	testl  $0xfff,0xc(%ebp)
+80106b00:	0f 85 98 00 00 00    	jne    80106b9e <loaduvm+0xae>
   for(i = 0; i < sz; i += PGSIZE){
-80106936:	8b 75 18             	mov    0x18(%ebp),%esi
-80106939:	31 db                	xor    %ebx,%ebx
-8010693b:	85 f6                	test   %esi,%esi
-8010693d:	75 1a                	jne    80106959 <loaduvm+0x39>
-8010693f:	eb 77                	jmp    801069b8 <loaduvm+0x98>
-80106941:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80106948:	81 c3 00 10 00 00    	add    $0x1000,%ebx
-8010694e:	81 ee 00 10 00 00    	sub    $0x1000,%esi
-80106954:	39 5d 18             	cmp    %ebx,0x18(%ebp)
-80106957:	76 5f                	jbe    801069b8 <loaduvm+0x98>
-80106959:	8b 55 0c             	mov    0xc(%ebp),%edx
+80106b06:	8b 75 18             	mov    0x18(%ebp),%esi
+80106b09:	31 db                	xor    %ebx,%ebx
+80106b0b:	85 f6                	test   %esi,%esi
+80106b0d:	75 1a                	jne    80106b29 <loaduvm+0x39>
+80106b0f:	eb 77                	jmp    80106b88 <loaduvm+0x98>
+80106b11:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106b18:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+80106b1e:	81 ee 00 10 00 00    	sub    $0x1000,%esi
+80106b24:	39 5d 18             	cmp    %ebx,0x18(%ebp)
+80106b27:	76 5f                	jbe    80106b88 <loaduvm+0x98>
+80106b29:	8b 55 0c             	mov    0xc(%ebp),%edx
     if((pte = walkpgdir(pgdir, addr+i, 0)) == 0)
-8010695c:	31 c9                	xor    %ecx,%ecx
-8010695e:	8b 45 08             	mov    0x8(%ebp),%eax
-80106961:	01 da                	add    %ebx,%edx
-80106963:	e8 98 fb ff ff       	call   80106500 <walkpgdir>
-80106968:	85 c0                	test   %eax,%eax
-8010696a:	74 56                	je     801069c2 <loaduvm+0xa2>
+80106b2c:	31 c9                	xor    %ecx,%ecx
+80106b2e:	8b 45 08             	mov    0x8(%ebp),%eax
+80106b31:	01 da                	add    %ebx,%edx
+80106b33:	e8 98 fb ff ff       	call   801066d0 <walkpgdir>
+80106b38:	85 c0                	test   %eax,%eax
+80106b3a:	74 56                	je     80106b92 <loaduvm+0xa2>
     pa = PTE_ADDR(*pte);
-8010696c:	8b 00                	mov    (%eax),%eax
+80106b3c:	8b 00                	mov    (%eax),%eax
       n = PGSIZE;
-8010696e:	bf 00 10 00 00       	mov    $0x1000,%edi
-80106973:	8b 4d 14             	mov    0x14(%ebp),%ecx
+80106b3e:	bf 00 10 00 00       	mov    $0x1000,%edi
+80106b43:	8b 4d 14             	mov    0x14(%ebp),%ecx
     pa = PTE_ADDR(*pte);
-80106976:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+80106b46:	25 00 f0 ff ff       	and    $0xfffff000,%eax
       n = PGSIZE;
-8010697b:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
-80106981:	0f 42 fe             	cmovb  %esi,%edi
+80106b4b:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+80106b51:	0f 42 fe             	cmovb  %esi,%edi
     if(readi(ip, P2V(pa), offset+i, n) != n)
-80106984:	05 00 00 00 80       	add    $0x80000000,%eax
-80106989:	89 44 24 04          	mov    %eax,0x4(%esp)
-8010698d:	8b 45 10             	mov    0x10(%ebp),%eax
-80106990:	01 d9                	add    %ebx,%ecx
-80106992:	89 7c 24 0c          	mov    %edi,0xc(%esp)
-80106996:	89 4c 24 08          	mov    %ecx,0x8(%esp)
-8010699a:	89 04 24             	mov    %eax,(%esp)
-8010699d:	e8 be af ff ff       	call   80101960 <readi>
-801069a2:	39 f8                	cmp    %edi,%eax
-801069a4:	74 a2                	je     80106948 <loaduvm+0x28>
-}
-801069a6:	83 c4 1c             	add    $0x1c,%esp
+80106b54:	05 00 00 00 80       	add    $0x80000000,%eax
+80106b59:	89 44 24 04          	mov    %eax,0x4(%esp)
+80106b5d:	8b 45 10             	mov    0x10(%ebp),%eax
+80106b60:	01 d9                	add    %ebx,%ecx
+80106b62:	89 7c 24 0c          	mov    %edi,0xc(%esp)
+80106b66:	89 4c 24 08          	mov    %ecx,0x8(%esp)
+80106b6a:	89 04 24             	mov    %eax,(%esp)
+80106b6d:	e8 ee ad ff ff       	call   80101960 <readi>
+80106b72:	39 f8                	cmp    %edi,%eax
+80106b74:	74 a2                	je     80106b18 <loaduvm+0x28>
+}
+80106b76:	83 c4 1c             	add    $0x1c,%esp
       return -1;
-801069a9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-}
-801069ae:	5b                   	pop    %ebx
-801069af:	5e                   	pop    %esi
-801069b0:	5f                   	pop    %edi
-801069b1:	5d                   	pop    %ebp
-801069b2:	c3                   	ret    
-801069b3:	90                   	nop
-801069b4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-801069b8:	83 c4 1c             	add    $0x1c,%esp
+80106b79:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80106b7e:	5b                   	pop    %ebx
+80106b7f:	5e                   	pop    %esi
+80106b80:	5f                   	pop    %edi
+80106b81:	5d                   	pop    %ebp
+80106b82:	c3                   	ret    
+80106b83:	90                   	nop
+80106b84:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80106b88:	83 c4 1c             	add    $0x1c,%esp
   return 0;
-801069bb:	31 c0                	xor    %eax,%eax
+80106b8b:	31 c0                	xor    %eax,%eax
 }
-801069bd:	5b                   	pop    %ebx
-801069be:	5e                   	pop    %esi
-801069bf:	5f                   	pop    %edi
-801069c0:	5d                   	pop    %ebp
-801069c1:	c3                   	ret    
+80106b8d:	5b                   	pop    %ebx
+80106b8e:	5e                   	pop    %esi
+80106b8f:	5f                   	pop    %edi
+80106b90:	5d                   	pop    %ebp
+80106b91:	c3                   	ret    
       panic("loaduvm: address should exist");
-801069c2:	c7 04 24 4b 77 10 80 	movl   $0x8010774b,(%esp)
-801069c9:	e8 92 99 ff ff       	call   80100360 <panic>
+80106b92:	c7 04 24 73 79 10 80 	movl   $0x80107973,(%esp)
+80106b99:	e8 c2 97 ff ff       	call   80100360 <panic>
     panic("loaduvm: addr must be page aligned");
-801069ce:	c7 04 24 ec 77 10 80 	movl   $0x801077ec,(%esp)
-801069d5:	e8 86 99 ff ff       	call   80100360 <panic>
-801069da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-801069e0 <allocuvm>:
-{
-801069e0:	55                   	push   %ebp
-801069e1:	89 e5                	mov    %esp,%ebp
-801069e3:	57                   	push   %edi
-801069e4:	56                   	push   %esi
-801069e5:	53                   	push   %ebx
-801069e6:	83 ec 1c             	sub    $0x1c,%esp
-801069e9:	8b 7d 10             	mov    0x10(%ebp),%edi
+80106b9e:	c7 04 24 14 7a 10 80 	movl   $0x80107a14,(%esp)
+80106ba5:	e8 b6 97 ff ff       	call   80100360 <panic>
+80106baa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80106bb0 <allocuvm>:
+{
+80106bb0:	55                   	push   %ebp
+80106bb1:	89 e5                	mov    %esp,%ebp
+80106bb3:	57                   	push   %edi
+80106bb4:	56                   	push   %esi
+80106bb5:	53                   	push   %ebx
+80106bb6:	83 ec 1c             	sub    $0x1c,%esp
+80106bb9:	8b 7d 10             	mov    0x10(%ebp),%edi
   if(newsz >= KERNBASE)
-801069ec:	85 ff                	test   %edi,%edi
-801069ee:	0f 88 7e 00 00 00    	js     80106a72 <allocuvm+0x92>
+80106bbc:	85 ff                	test   %edi,%edi
+80106bbe:	0f 88 7e 00 00 00    	js     80106c42 <allocuvm+0x92>
   if(newsz < oldsz)
-801069f4:	3b 7d 0c             	cmp    0xc(%ebp),%edi
+80106bc4:	3b 7d 0c             	cmp    0xc(%ebp),%edi
     return oldsz;
-801069f7:	8b 45 0c             	mov    0xc(%ebp),%eax
+80106bc7:	8b 45 0c             	mov    0xc(%ebp),%eax
   if(newsz < oldsz)
-801069fa:	72 78                	jb     80106a74 <allocuvm+0x94>
+80106bca:	72 78                	jb     80106c44 <allocuvm+0x94>
   a = PGROUNDUP(oldsz);
-801069fc:	8d 98 ff 0f 00 00    	lea    0xfff(%eax),%ebx
-80106a02:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
+80106bcc:	8d 98 ff 0f 00 00    	lea    0xfff(%eax),%ebx
+80106bd2:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
   for(; a < newsz; a += PGSIZE){
-80106a08:	39 df                	cmp    %ebx,%edi
-80106a0a:	77 4a                	ja     80106a56 <allocuvm+0x76>
-80106a0c:	eb 72                	jmp    80106a80 <allocuvm+0xa0>
-80106a0e:	66 90                	xchg   %ax,%ax
+80106bd8:	39 df                	cmp    %ebx,%edi
+80106bda:	77 4a                	ja     80106c26 <allocuvm+0x76>
+80106bdc:	eb 72                	jmp    80106c50 <allocuvm+0xa0>
+80106bde:	66 90                	xchg   %ax,%ax
     memset(mem, 0, PGSIZE);
-80106a10:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
-80106a17:	00 
-80106a18:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
-80106a1f:	00 
-80106a20:	89 04 24             	mov    %eax,(%esp)
-80106a23:	e8 e8 d9 ff ff       	call   80104410 <memset>
+80106be0:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
+80106be7:	00 
+80106be8:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+80106bef:	00 
+80106bf0:	89 04 24             	mov    %eax,(%esp)
+80106bf3:	e8 88 d9 ff ff       	call   80104580 <memset>
     if(mappages(pgdir, (char*)a, PGSIZE, V2P(mem), PTE_W|PTE_U) < 0){
-80106a28:	8d 86 00 00 00 80    	lea    -0x80000000(%esi),%eax
-80106a2e:	b9 00 10 00 00       	mov    $0x1000,%ecx
-80106a33:	89 04 24             	mov    %eax,(%esp)
-80106a36:	8b 45 08             	mov    0x8(%ebp),%eax
-80106a39:	89 da                	mov    %ebx,%edx
-80106a3b:	c7 44 24 04 06 00 00 	movl   $0x6,0x4(%esp)
-80106a42:	00 
-80106a43:	e8 48 fb ff ff       	call   80106590 <mappages>
-80106a48:	85 c0                	test   %eax,%eax
-80106a4a:	78 44                	js     80106a90 <allocuvm+0xb0>
+80106bf8:	8d 86 00 00 00 80    	lea    -0x80000000(%esi),%eax
+80106bfe:	b9 00 10 00 00       	mov    $0x1000,%ecx
+80106c03:	89 04 24             	mov    %eax,(%esp)
+80106c06:	8b 45 08             	mov    0x8(%ebp),%eax
+80106c09:	89 da                	mov    %ebx,%edx
+80106c0b:	c7 44 24 04 06 00 00 	movl   $0x6,0x4(%esp)
+80106c12:	00 
+80106c13:	e8 48 fb ff ff       	call   80106760 <mappages>
+80106c18:	85 c0                	test   %eax,%eax
+80106c1a:	78 44                	js     80106c60 <allocuvm+0xb0>
   for(; a < newsz; a += PGSIZE){
-80106a4c:	81 c3 00 10 00 00    	add    $0x1000,%ebx
-80106a52:	39 df                	cmp    %ebx,%edi
-80106a54:	76 2a                	jbe    80106a80 <allocuvm+0xa0>
+80106c1c:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+80106c22:	39 df                	cmp    %ebx,%edi
+80106c24:	76 2a                	jbe    80106c50 <allocuvm+0xa0>
     mem = kalloc();
-80106a56:	e8 45 ba ff ff       	call   801024a0 <kalloc>
+80106c26:	e8 75 b8 ff ff       	call   801024a0 <kalloc>
     if(mem == 0){
-80106a5b:	85 c0                	test   %eax,%eax
+80106c2b:	85 c0                	test   %eax,%eax
     mem = kalloc();
-80106a5d:	89 c6                	mov    %eax,%esi
+80106c2d:	89 c6                	mov    %eax,%esi
     if(mem == 0){
-80106a5f:	75 af                	jne    80106a10 <allocuvm+0x30>
+80106c2f:	75 af                	jne    80106be0 <allocuvm+0x30>
       cprintf("allocuvm out of memory\n");
-80106a61:	c7 04 24 69 77 10 80 	movl   $0x80107769,(%esp)
-80106a68:	e8 e3 9b ff ff       	call   80100650 <cprintf>
+80106c31:	c7 04 24 91 79 10 80 	movl   $0x80107991,(%esp)
+80106c38:	e8 13 9a ff ff       	call   80100650 <cprintf>
   if(newsz >= oldsz)
-80106a6d:	3b 7d 0c             	cmp    0xc(%ebp),%edi
-80106a70:	77 48                	ja     80106aba <allocuvm+0xda>
+80106c3d:	3b 7d 0c             	cmp    0xc(%ebp),%edi
+80106c40:	77 48                	ja     80106c8a <allocuvm+0xda>
       return 0;
-80106a72:	31 c0                	xor    %eax,%eax
-}
-80106a74:	83 c4 1c             	add    $0x1c,%esp
-80106a77:	5b                   	pop    %ebx
-80106a78:	5e                   	pop    %esi
-80106a79:	5f                   	pop    %edi
-80106a7a:	5d                   	pop    %ebp
-80106a7b:	c3                   	ret    
-80106a7c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80106a80:	83 c4 1c             	add    $0x1c,%esp
-80106a83:	89 f8                	mov    %edi,%eax
-80106a85:	5b                   	pop    %ebx
-80106a86:	5e                   	pop    %esi
-80106a87:	5f                   	pop    %edi
-80106a88:	5d                   	pop    %ebp
-80106a89:	c3                   	ret    
-80106a8a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80106c42:	31 c0                	xor    %eax,%eax
+}
+80106c44:	83 c4 1c             	add    $0x1c,%esp
+80106c47:	5b                   	pop    %ebx
+80106c48:	5e                   	pop    %esi
+80106c49:	5f                   	pop    %edi
+80106c4a:	5d                   	pop    %ebp
+80106c4b:	c3                   	ret    
+80106c4c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80106c50:	83 c4 1c             	add    $0x1c,%esp
+80106c53:	89 f8                	mov    %edi,%eax
+80106c55:	5b                   	pop    %ebx
+80106c56:	5e                   	pop    %esi
+80106c57:	5f                   	pop    %edi
+80106c58:	5d                   	pop    %ebp
+80106c59:	c3                   	ret    
+80106c5a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
       cprintf("allocuvm out of memory (2)\n");
-80106a90:	c7 04 24 81 77 10 80 	movl   $0x80107781,(%esp)
-80106a97:	e8 b4 9b ff ff       	call   80100650 <cprintf>
+80106c60:	c7 04 24 a9 79 10 80 	movl   $0x801079a9,(%esp)
+80106c67:	e8 e4 99 ff ff       	call   80100650 <cprintf>
   if(newsz >= oldsz)
-80106a9c:	3b 7d 0c             	cmp    0xc(%ebp),%edi
-80106a9f:	76 0d                	jbe    80106aae <allocuvm+0xce>
-80106aa1:	8b 4d 0c             	mov    0xc(%ebp),%ecx
-80106aa4:	89 fa                	mov    %edi,%edx
-80106aa6:	8b 45 08             	mov    0x8(%ebp),%eax
-80106aa9:	e8 62 fb ff ff       	call   80106610 <deallocuvm.part.0>
+80106c6c:	3b 7d 0c             	cmp    0xc(%ebp),%edi
+80106c6f:	76 0d                	jbe    80106c7e <allocuvm+0xce>
+80106c71:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+80106c74:	89 fa                	mov    %edi,%edx
+80106c76:	8b 45 08             	mov    0x8(%ebp),%eax
+80106c79:	e8 62 fb ff ff       	call   801067e0 <deallocuvm.part.0>
       kfree(mem);
-80106aae:	89 34 24             	mov    %esi,(%esp)
-80106ab1:	e8 3a b8 ff ff       	call   801022f0 <kfree>
+80106c7e:	89 34 24             	mov    %esi,(%esp)
+80106c81:	e8 6a b6 ff ff       	call   801022f0 <kfree>
       return 0;
-80106ab6:	31 c0                	xor    %eax,%eax
-80106ab8:	eb ba                	jmp    80106a74 <allocuvm+0x94>
-80106aba:	8b 4d 0c             	mov    0xc(%ebp),%ecx
-80106abd:	89 fa                	mov    %edi,%edx
-80106abf:	8b 45 08             	mov    0x8(%ebp),%eax
-80106ac2:	e8 49 fb ff ff       	call   80106610 <deallocuvm.part.0>
+80106c86:	31 c0                	xor    %eax,%eax
+80106c88:	eb ba                	jmp    80106c44 <allocuvm+0x94>
+80106c8a:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+80106c8d:	89 fa                	mov    %edi,%edx
+80106c8f:	8b 45 08             	mov    0x8(%ebp),%eax
+80106c92:	e8 49 fb ff ff       	call   801067e0 <deallocuvm.part.0>
       return 0;
-80106ac7:	31 c0                	xor    %eax,%eax
-80106ac9:	eb a9                	jmp    80106a74 <allocuvm+0x94>
-80106acb:	90                   	nop
-80106acc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-80106ad0 <deallocuvm>:
-{
-80106ad0:	55                   	push   %ebp
-80106ad1:	89 e5                	mov    %esp,%ebp
-80106ad3:	8b 55 0c             	mov    0xc(%ebp),%edx
-80106ad6:	8b 4d 10             	mov    0x10(%ebp),%ecx
-80106ad9:	8b 45 08             	mov    0x8(%ebp),%eax
+80106c97:	31 c0                	xor    %eax,%eax
+80106c99:	eb a9                	jmp    80106c44 <allocuvm+0x94>
+80106c9b:	90                   	nop
+80106c9c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80106ca0 <deallocuvm>:
+{
+80106ca0:	55                   	push   %ebp
+80106ca1:	89 e5                	mov    %esp,%ebp
+80106ca3:	8b 55 0c             	mov    0xc(%ebp),%edx
+80106ca6:	8b 4d 10             	mov    0x10(%ebp),%ecx
+80106ca9:	8b 45 08             	mov    0x8(%ebp),%eax
   if(newsz >= oldsz)
-80106adc:	39 d1                	cmp    %edx,%ecx
-80106ade:	73 08                	jae    80106ae8 <deallocuvm+0x18>
+80106cac:	39 d1                	cmp    %edx,%ecx
+80106cae:	73 08                	jae    80106cb8 <deallocuvm+0x18>
 }
-80106ae0:	5d                   	pop    %ebp
-80106ae1:	e9 2a fb ff ff       	jmp    80106610 <deallocuvm.part.0>
-80106ae6:	66 90                	xchg   %ax,%ax
-80106ae8:	89 d0                	mov    %edx,%eax
-80106aea:	5d                   	pop    %ebp
-80106aeb:	c3                   	ret    
-80106aec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80106cb0:	5d                   	pop    %ebp
+80106cb1:	e9 2a fb ff ff       	jmp    801067e0 <deallocuvm.part.0>
+80106cb6:	66 90                	xchg   %ax,%ax
+80106cb8:	89 d0                	mov    %edx,%eax
+80106cba:	5d                   	pop    %ebp
+80106cbb:	c3                   	ret    
+80106cbc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
-80106af0 <freevm>:
+80106cc0 <freevm>:
 
 // Free a page table and all the physical memory pages
 // in the user part.
 void
 freevm(pde_t *pgdir)
 {
-80106af0:	55                   	push   %ebp
-80106af1:	89 e5                	mov    %esp,%ebp
-80106af3:	56                   	push   %esi
-80106af4:	53                   	push   %ebx
-80106af5:	83 ec 10             	sub    $0x10,%esp
-80106af8:	8b 75 08             	mov    0x8(%ebp),%esi
+80106cc0:	55                   	push   %ebp
+80106cc1:	89 e5                	mov    %esp,%ebp
+80106cc3:	56                   	push   %esi
+80106cc4:	53                   	push   %ebx
+80106cc5:	83 ec 10             	sub    $0x10,%esp
+80106cc8:	8b 75 08             	mov    0x8(%ebp),%esi
   uint i;
 
   if(pgdir == 0)
-80106afb:	85 f6                	test   %esi,%esi
-80106afd:	74 59                	je     80106b58 <freevm+0x68>
-80106aff:	31 c9                	xor    %ecx,%ecx
-80106b01:	ba 00 00 00 80       	mov    $0x80000000,%edx
-80106b06:	89 f0                	mov    %esi,%eax
+80106ccb:	85 f6                	test   %esi,%esi
+80106ccd:	74 59                	je     80106d28 <freevm+0x68>
+80106ccf:	31 c9                	xor    %ecx,%ecx
+80106cd1:	ba 00 00 00 80       	mov    $0x80000000,%edx
+80106cd6:	89 f0                	mov    %esi,%eax
     panic("freevm: no pgdir");
   deallocuvm(pgdir, KERNBASE, 0);
   for(i = 0; i < NPDENTRIES; i++){
-80106b08:	31 db                	xor    %ebx,%ebx
-80106b0a:	e8 01 fb ff ff       	call   80106610 <deallocuvm.part.0>
-80106b0f:	eb 12                	jmp    80106b23 <freevm+0x33>
-80106b11:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80106b18:	83 c3 01             	add    $0x1,%ebx
-80106b1b:	81 fb 00 04 00 00    	cmp    $0x400,%ebx
-80106b21:	74 27                	je     80106b4a <freevm+0x5a>
+80106cd8:	31 db                	xor    %ebx,%ebx
+80106cda:	e8 01 fb ff ff       	call   801067e0 <deallocuvm.part.0>
+80106cdf:	eb 12                	jmp    80106cf3 <freevm+0x33>
+80106ce1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106ce8:	83 c3 01             	add    $0x1,%ebx
+80106ceb:	81 fb 00 04 00 00    	cmp    $0x400,%ebx
+80106cf1:	74 27                	je     80106d1a <freevm+0x5a>
     if(pgdir[i] & PTE_P){
-80106b23:	8b 14 9e             	mov    (%esi,%ebx,4),%edx
-80106b26:	f6 c2 01             	test   $0x1,%dl
-80106b29:	74 ed                	je     80106b18 <freevm+0x28>
+80106cf3:	8b 14 9e             	mov    (%esi,%ebx,4),%edx
+80106cf6:	f6 c2 01             	test   $0x1,%dl
+80106cf9:	74 ed                	je     80106ce8 <freevm+0x28>
       char * v = P2V(PTE_ADDR(pgdir[i]));
-80106b2b:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
+80106cfb:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
   for(i = 0; i < NPDENTRIES; i++){
-80106b31:	83 c3 01             	add    $0x1,%ebx
+80106d01:	83 c3 01             	add    $0x1,%ebx
       char * v = P2V(PTE_ADDR(pgdir[i]));
-80106b34:	81 c2 00 00 00 80    	add    $0x80000000,%edx
+80106d04:	81 c2 00 00 00 80    	add    $0x80000000,%edx
       kfree(v);
-80106b3a:	89 14 24             	mov    %edx,(%esp)
-80106b3d:	e8 ae b7 ff ff       	call   801022f0 <kfree>
+80106d0a:	89 14 24             	mov    %edx,(%esp)
+80106d0d:	e8 de b5 ff ff       	call   801022f0 <kfree>
   for(i = 0; i < NPDENTRIES; i++){
-80106b42:	81 fb 00 04 00 00    	cmp    $0x400,%ebx
-80106b48:	75 d9                	jne    80106b23 <freevm+0x33>
+80106d12:	81 fb 00 04 00 00    	cmp    $0x400,%ebx
+80106d18:	75 d9                	jne    80106cf3 <freevm+0x33>
     }
   }
   kfree((char*)pgdir);
-80106b4a:	89 75 08             	mov    %esi,0x8(%ebp)
+80106d1a:	89 75 08             	mov    %esi,0x8(%ebp)
 }
-80106b4d:	83 c4 10             	add    $0x10,%esp
-80106b50:	5b                   	pop    %ebx
-80106b51:	5e                   	pop    %esi
-80106b52:	5d                   	pop    %ebp
+80106d1d:	83 c4 10             	add    $0x10,%esp
+80106d20:	5b                   	pop    %ebx
+80106d21:	5e                   	pop    %esi
+80106d22:	5d                   	pop    %ebp
   kfree((char*)pgdir);
-80106b53:	e9 98 b7 ff ff       	jmp    801022f0 <kfree>
+80106d23:	e9 c8 b5 ff ff       	jmp    801022f0 <kfree>
     panic("freevm: no pgdir");
-80106b58:	c7 04 24 9d 77 10 80 	movl   $0x8010779d,(%esp)
-80106b5f:	e8 fc 97 ff ff       	call   80100360 <panic>
-80106b64:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-80106b6a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
-
-80106b70 <setupkvm>:
-{
-80106b70:	55                   	push   %ebp
-80106b71:	89 e5                	mov    %esp,%ebp
-80106b73:	56                   	push   %esi
-80106b74:	53                   	push   %ebx
-80106b75:	83 ec 10             	sub    $0x10,%esp
+80106d28:	c7 04 24 c5 79 10 80 	movl   $0x801079c5,(%esp)
+80106d2f:	e8 2c 96 ff ff       	call   80100360 <panic>
+80106d34:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80106d3a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+80106d40 <setupkvm>:
+{
+80106d40:	55                   	push   %ebp
+80106d41:	89 e5                	mov    %esp,%ebp
+80106d43:	56                   	push   %esi
+80106d44:	53                   	push   %ebx
+80106d45:	83 ec 10             	sub    $0x10,%esp
   if((pgdir = (pde_t*)kalloc()) == 0)
-80106b78:	e8 23 b9 ff ff       	call   801024a0 <kalloc>
-80106b7d:	85 c0                	test   %eax,%eax
-80106b7f:	89 c6                	mov    %eax,%esi
-80106b81:	74 6d                	je     80106bf0 <setupkvm+0x80>
+80106d48:	e8 53 b7 ff ff       	call   801024a0 <kalloc>
+80106d4d:	85 c0                	test   %eax,%eax
+80106d4f:	89 c6                	mov    %eax,%esi
+80106d51:	74 6d                	je     80106dc0 <setupkvm+0x80>
   memset(pgdir, 0, PGSIZE);
-80106b83:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
-80106b8a:	00 
+80106d53:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
+80106d5a:	00 
   for(k = kmap; k < &kmap[NELEM(kmap)]; k++)
-80106b8b:	bb 20 a4 10 80       	mov    $0x8010a420,%ebx
+80106d5b:	bb 20 a4 10 80       	mov    $0x8010a420,%ebx
   memset(pgdir, 0, PGSIZE);
-80106b90:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
-80106b97:	00 
-80106b98:	89 04 24             	mov    %eax,(%esp)
-80106b9b:	e8 70 d8 ff ff       	call   80104410 <memset>
+80106d60:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+80106d67:	00 
+80106d68:	89 04 24             	mov    %eax,(%esp)
+80106d6b:	e8 10 d8 ff ff       	call   80104580 <memset>
     if(mappages(pgdir, k->virt, k->phys_end - k->phys_start,
-80106ba0:	8b 53 0c             	mov    0xc(%ebx),%edx
-80106ba3:	8b 43 04             	mov    0x4(%ebx),%eax
-80106ba6:	8b 4b 08             	mov    0x8(%ebx),%ecx
-80106ba9:	89 54 24 04          	mov    %edx,0x4(%esp)
-80106bad:	8b 13                	mov    (%ebx),%edx
-80106baf:	89 04 24             	mov    %eax,(%esp)
-80106bb2:	29 c1                	sub    %eax,%ecx
-80106bb4:	89 f0                	mov    %esi,%eax
-80106bb6:	e8 d5 f9 ff ff       	call   80106590 <mappages>
-80106bbb:	85 c0                	test   %eax,%eax
-80106bbd:	78 19                	js     80106bd8 <setupkvm+0x68>
+80106d70:	8b 53 0c             	mov    0xc(%ebx),%edx
+80106d73:	8b 43 04             	mov    0x4(%ebx),%eax
+80106d76:	8b 4b 08             	mov    0x8(%ebx),%ecx
+80106d79:	89 54 24 04          	mov    %edx,0x4(%esp)
+80106d7d:	8b 13                	mov    (%ebx),%edx
+80106d7f:	89 04 24             	mov    %eax,(%esp)
+80106d82:	29 c1                	sub    %eax,%ecx
+80106d84:	89 f0                	mov    %esi,%eax
+80106d86:	e8 d5 f9 ff ff       	call   80106760 <mappages>
+80106d8b:	85 c0                	test   %eax,%eax
+80106d8d:	78 19                	js     80106da8 <setupkvm+0x68>
   for(k = kmap; k < &kmap[NELEM(kmap)]; k++)
-80106bbf:	83 c3 10             	add    $0x10,%ebx
-80106bc2:	81 fb 60 a4 10 80    	cmp    $0x8010a460,%ebx
-80106bc8:	72 d6                	jb     80106ba0 <setupkvm+0x30>
-80106bca:	89 f0                	mov    %esi,%eax
-}
-80106bcc:	83 c4 10             	add    $0x10,%esp
-80106bcf:	5b                   	pop    %ebx
-80106bd0:	5e                   	pop    %esi
-80106bd1:	5d                   	pop    %ebp
-80106bd2:	c3                   	ret    
-80106bd3:	90                   	nop
-80106bd4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80106d8f:	83 c3 10             	add    $0x10,%ebx
+80106d92:	81 fb 60 a4 10 80    	cmp    $0x8010a460,%ebx
+80106d98:	72 d6                	jb     80106d70 <setupkvm+0x30>
+80106d9a:	89 f0                	mov    %esi,%eax
+}
+80106d9c:	83 c4 10             	add    $0x10,%esp
+80106d9f:	5b                   	pop    %ebx
+80106da0:	5e                   	pop    %esi
+80106da1:	5d                   	pop    %ebp
+80106da2:	c3                   	ret    
+80106da3:	90                   	nop
+80106da4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
       freevm(pgdir);
-80106bd8:	89 34 24             	mov    %esi,(%esp)
-80106bdb:	e8 10 ff ff ff       	call   80106af0 <freevm>
+80106da8:	89 34 24             	mov    %esi,(%esp)
+80106dab:	e8 10 ff ff ff       	call   80106cc0 <freevm>
 }
-80106be0:	83 c4 10             	add    $0x10,%esp
+80106db0:	83 c4 10             	add    $0x10,%esp
       return 0;
-80106be3:	31 c0                	xor    %eax,%eax
+80106db3:	31 c0                	xor    %eax,%eax
 }
-80106be5:	5b                   	pop    %ebx
-80106be6:	5e                   	pop    %esi
-80106be7:	5d                   	pop    %ebp
-80106be8:	c3                   	ret    
-80106be9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106db5:	5b                   	pop    %ebx
+80106db6:	5e                   	pop    %esi
+80106db7:	5d                   	pop    %ebp
+80106db8:	c3                   	ret    
+80106db9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     return 0;
-80106bf0:	31 c0                	xor    %eax,%eax
-80106bf2:	eb d8                	jmp    80106bcc <setupkvm+0x5c>
-80106bf4:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-80106bfa:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+80106dc0:	31 c0                	xor    %eax,%eax
+80106dc2:	eb d8                	jmp    80106d9c <setupkvm+0x5c>
+80106dc4:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80106dca:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
 
-80106c00 <kvmalloc>:
+80106dd0 <kvmalloc>:
 {
-80106c00:	55                   	push   %ebp
-80106c01:	89 e5                	mov    %esp,%ebp
-80106c03:	83 ec 08             	sub    $0x8,%esp
+80106dd0:	55                   	push   %ebp
+80106dd1:	89 e5                	mov    %esp,%ebp
+80106dd3:	83 ec 08             	sub    $0x8,%esp
   kpgdir = setupkvm();
-80106c06:	e8 65 ff ff ff       	call   80106b70 <setupkvm>
-80106c0b:	a3 a4 56 11 80       	mov    %eax,0x801156a4
+80106dd6:	e8 65 ff ff ff       	call   80106d40 <setupkvm>
+80106ddb:	a3 a4 5b 11 80       	mov    %eax,0x80115ba4
   lcr3(V2P(kpgdir));   // switch to the kernel page table
-80106c10:	05 00 00 00 80       	add    $0x80000000,%eax
-80106c15:	0f 22 d8             	mov    %eax,%cr3
+80106de0:	05 00 00 00 80       	add    $0x80000000,%eax
+80106de5:	0f 22 d8             	mov    %eax,%cr3
 }
-80106c18:	c9                   	leave  
-80106c19:	c3                   	ret    
-80106c1a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80106de8:	c9                   	leave  
+80106de9:	c3                   	ret    
+80106dea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 
-80106c20 <clearpteu>:
+80106df0 <clearpteu>:
 
 // Clear PTE_U on a page. Used to create an inaccessible
 // page beneath the user stack.
 void
 clearpteu(pde_t *pgdir, char *uva)
 {
-80106c20:	55                   	push   %ebp
+80106df0:	55                   	push   %ebp
   pte_t *pte;
 
   pte = walkpgdir(pgdir, uva, 0);
-80106c21:	31 c9                	xor    %ecx,%ecx
+80106df1:	31 c9                	xor    %ecx,%ecx
 {
-80106c23:	89 e5                	mov    %esp,%ebp
-80106c25:	83 ec 18             	sub    $0x18,%esp
+80106df3:	89 e5                	mov    %esp,%ebp
+80106df5:	83 ec 18             	sub    $0x18,%esp
   pte = walkpgdir(pgdir, uva, 0);
-80106c28:	8b 55 0c             	mov    0xc(%ebp),%edx
-80106c2b:	8b 45 08             	mov    0x8(%ebp),%eax
-80106c2e:	e8 cd f8 ff ff       	call   80106500 <walkpgdir>
+80106df8:	8b 55 0c             	mov    0xc(%ebp),%edx
+80106dfb:	8b 45 08             	mov    0x8(%ebp),%eax
+80106dfe:	e8 cd f8 ff ff       	call   801066d0 <walkpgdir>
   if(pte == 0)
-80106c33:	85 c0                	test   %eax,%eax
-80106c35:	74 05                	je     80106c3c <clearpteu+0x1c>
+80106e03:	85 c0                	test   %eax,%eax
+80106e05:	74 05                	je     80106e0c <clearpteu+0x1c>
     panic("clearpteu");
   *pte &= ~PTE_U;
-80106c37:	83 20 fb             	andl   $0xfffffffb,(%eax)
+80106e07:	83 20 fb             	andl   $0xfffffffb,(%eax)
 }
-80106c3a:	c9                   	leave  
-80106c3b:	c3                   	ret    
+80106e0a:	c9                   	leave  
+80106e0b:	c3                   	ret    
     panic("clearpteu");
-80106c3c:	c7 04 24 ae 77 10 80 	movl   $0x801077ae,(%esp)
-80106c43:	e8 18 97 ff ff       	call   80100360 <panic>
-80106c48:	90                   	nop
-80106c49:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106e0c:	c7 04 24 d6 79 10 80 	movl   $0x801079d6,(%esp)
+80106e13:	e8 48 95 ff ff       	call   80100360 <panic>
+80106e18:	90                   	nop
+80106e19:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 
-80106c50 <copyuvm>:
+80106e20 <copyuvm>:
 
 // Given a parent process's page table, create a copy
 // of it for a child.
 pde_t*
 copyuvm(pde_t *pgdir, uint sz)
 {
-80106c50:	55                   	push   %ebp
-80106c51:	89 e5                	mov    %esp,%ebp
-80106c53:	57                   	push   %edi
-80106c54:	56                   	push   %esi
-80106c55:	53                   	push   %ebx
-80106c56:	83 ec 2c             	sub    $0x2c,%esp
+80106e20:	55                   	push   %ebp
+80106e21:	89 e5                	mov    %esp,%ebp
+80106e23:	57                   	push   %edi
+80106e24:	56                   	push   %esi
+80106e25:	53                   	push   %ebx
+80106e26:	83 ec 2c             	sub    $0x2c,%esp
   pde_t *d;
   pte_t *pte;
   uint pa, i, flags;
   char *mem;
 
   if((d = setupkvm()) == 0)
-80106c59:	e8 12 ff ff ff       	call   80106b70 <setupkvm>
-80106c5e:	85 c0                	test   %eax,%eax
-80106c60:	89 45 e0             	mov    %eax,-0x20(%ebp)
-80106c63:	0f 84 b9 00 00 00    	je     80106d22 <copyuvm+0xd2>
+80106e29:	e8 12 ff ff ff       	call   80106d40 <setupkvm>
+80106e2e:	85 c0                	test   %eax,%eax
+80106e30:	89 45 e0             	mov    %eax,-0x20(%ebp)
+80106e33:	0f 84 b9 00 00 00    	je     80106ef2 <copyuvm+0xd2>
     return 0;
   for(i = 0; i < sz; i += PGSIZE){
-80106c69:	8b 45 0c             	mov    0xc(%ebp),%eax
-80106c6c:	85 c0                	test   %eax,%eax
-80106c6e:	0f 84 94 00 00 00    	je     80106d08 <copyuvm+0xb8>
-80106c74:	31 ff                	xor    %edi,%edi
-80106c76:	eb 48                	jmp    80106cc0 <copyuvm+0x70>
+80106e39:	8b 45 0c             	mov    0xc(%ebp),%eax
+80106e3c:	85 c0                	test   %eax,%eax
+80106e3e:	0f 84 94 00 00 00    	je     80106ed8 <copyuvm+0xb8>
+80106e44:	31 ff                	xor    %edi,%edi
+80106e46:	eb 48                	jmp    80106e90 <copyuvm+0x70>
       panic("copyuvm: page not present");
     pa = PTE_ADDR(*pte);
     flags = PTE_FLAGS(*pte);
     if((mem = kalloc()) == 0)
       goto bad;
     memmove(mem, (char*)P2V(pa), PGSIZE);
-80106c78:	81 c6 00 00 00 80    	add    $0x80000000,%esi
-80106c7e:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
-80106c85:	00 
-80106c86:	89 74 24 04          	mov    %esi,0x4(%esp)
-80106c8a:	89 04 24             	mov    %eax,(%esp)
-80106c8d:	e8 1e d8 ff ff       	call   801044b0 <memmove>
+80106e48:	81 c6 00 00 00 80    	add    $0x80000000,%esi
+80106e4e:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
+80106e55:	00 
+80106e56:	89 74 24 04          	mov    %esi,0x4(%esp)
+80106e5a:	89 04 24             	mov    %eax,(%esp)
+80106e5d:	e8 be d7 ff ff       	call   80104620 <memmove>
     if(mappages(d, (void*)i, PGSIZE, V2P(mem), flags) < 0) {
-80106c92:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-80106c95:	b9 00 10 00 00       	mov    $0x1000,%ecx
-80106c9a:	89 fa                	mov    %edi,%edx
-80106c9c:	89 44 24 04          	mov    %eax,0x4(%esp)
-80106ca0:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
-80106ca6:	89 04 24             	mov    %eax,(%esp)
-80106ca9:	8b 45 e0             	mov    -0x20(%ebp),%eax
-80106cac:	e8 df f8 ff ff       	call   80106590 <mappages>
-80106cb1:	85 c0                	test   %eax,%eax
-80106cb3:	78 63                	js     80106d18 <copyuvm+0xc8>
+80106e62:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+80106e65:	b9 00 10 00 00       	mov    $0x1000,%ecx
+80106e6a:	89 fa                	mov    %edi,%edx
+80106e6c:	89 44 24 04          	mov    %eax,0x4(%esp)
+80106e70:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
+80106e76:	89 04 24             	mov    %eax,(%esp)
+80106e79:	8b 45 e0             	mov    -0x20(%ebp),%eax
+80106e7c:	e8 df f8 ff ff       	call   80106760 <mappages>
+80106e81:	85 c0                	test   %eax,%eax
+80106e83:	78 63                	js     80106ee8 <copyuvm+0xc8>
   for(i = 0; i < sz; i += PGSIZE){
-80106cb5:	81 c7 00 10 00 00    	add    $0x1000,%edi
-80106cbb:	39 7d 0c             	cmp    %edi,0xc(%ebp)
-80106cbe:	76 48                	jbe    80106d08 <copyuvm+0xb8>
+80106e85:	81 c7 00 10 00 00    	add    $0x1000,%edi
+80106e8b:	39 7d 0c             	cmp    %edi,0xc(%ebp)
+80106e8e:	76 48                	jbe    80106ed8 <copyuvm+0xb8>
     if((pte = walkpgdir(pgdir, (void *) i, 0)) == 0)
-80106cc0:	8b 45 08             	mov    0x8(%ebp),%eax
-80106cc3:	31 c9                	xor    %ecx,%ecx
-80106cc5:	89 fa                	mov    %edi,%edx
-80106cc7:	e8 34 f8 ff ff       	call   80106500 <walkpgdir>
-80106ccc:	85 c0                	test   %eax,%eax
-80106cce:	74 62                	je     80106d32 <copyuvm+0xe2>
+80106e90:	8b 45 08             	mov    0x8(%ebp),%eax
+80106e93:	31 c9                	xor    %ecx,%ecx
+80106e95:	89 fa                	mov    %edi,%edx
+80106e97:	e8 34 f8 ff ff       	call   801066d0 <walkpgdir>
+80106e9c:	85 c0                	test   %eax,%eax
+80106e9e:	74 62                	je     80106f02 <copyuvm+0xe2>
     if(!(*pte & PTE_P))
-80106cd0:	8b 00                	mov    (%eax),%eax
-80106cd2:	a8 01                	test   $0x1,%al
-80106cd4:	74 50                	je     80106d26 <copyuvm+0xd6>
+80106ea0:	8b 00                	mov    (%eax),%eax
+80106ea2:	a8 01                	test   $0x1,%al
+80106ea4:	74 50                	je     80106ef6 <copyuvm+0xd6>
     pa = PTE_ADDR(*pte);
-80106cd6:	89 c6                	mov    %eax,%esi
+80106ea6:	89 c6                	mov    %eax,%esi
     flags = PTE_FLAGS(*pte);
-80106cd8:	25 ff 0f 00 00       	and    $0xfff,%eax
-80106cdd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+80106ea8:	25 ff 0f 00 00       	and    $0xfff,%eax
+80106ead:	89 45 e4             	mov    %eax,-0x1c(%ebp)
     pa = PTE_ADDR(*pte);
-80106ce0:	81 e6 00 f0 ff ff    	and    $0xfffff000,%esi
+80106eb0:	81 e6 00 f0 ff ff    	and    $0xfffff000,%esi
     if((mem = kalloc()) == 0)
-80106ce6:	e8 b5 b7 ff ff       	call   801024a0 <kalloc>
-80106ceb:	85 c0                	test   %eax,%eax
-80106ced:	89 c3                	mov    %eax,%ebx
-80106cef:	75 87                	jne    80106c78 <copyuvm+0x28>
+80106eb6:	e8 e5 b5 ff ff       	call   801024a0 <kalloc>
+80106ebb:	85 c0                	test   %eax,%eax
+80106ebd:	89 c3                	mov    %eax,%ebx
+80106ebf:	75 87                	jne    80106e48 <copyuvm+0x28>
     }
   }
   return d;
 
 bad:
   freevm(d);
-80106cf1:	8b 45 e0             	mov    -0x20(%ebp),%eax
-80106cf4:	89 04 24             	mov    %eax,(%esp)
-80106cf7:	e8 f4 fd ff ff       	call   80106af0 <freevm>
+80106ec1:	8b 45 e0             	mov    -0x20(%ebp),%eax
+80106ec4:	89 04 24             	mov    %eax,(%esp)
+80106ec7:	e8 f4 fd ff ff       	call   80106cc0 <freevm>
   return 0;
-80106cfc:	31 c0                	xor    %eax,%eax
-}
-80106cfe:	83 c4 2c             	add    $0x2c,%esp
-80106d01:	5b                   	pop    %ebx
-80106d02:	5e                   	pop    %esi
-80106d03:	5f                   	pop    %edi
-80106d04:	5d                   	pop    %ebp
-80106d05:	c3                   	ret    
-80106d06:	66 90                	xchg   %ax,%ax
-80106d08:	8b 45 e0             	mov    -0x20(%ebp),%eax
-80106d0b:	83 c4 2c             	add    $0x2c,%esp
-80106d0e:	5b                   	pop    %ebx
-80106d0f:	5e                   	pop    %esi
-80106d10:	5f                   	pop    %edi
-80106d11:	5d                   	pop    %ebp
-80106d12:	c3                   	ret    
-80106d13:	90                   	nop
-80106d14:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80106ecc:	31 c0                	xor    %eax,%eax
+}
+80106ece:	83 c4 2c             	add    $0x2c,%esp
+80106ed1:	5b                   	pop    %ebx
+80106ed2:	5e                   	pop    %esi
+80106ed3:	5f                   	pop    %edi
+80106ed4:	5d                   	pop    %ebp
+80106ed5:	c3                   	ret    
+80106ed6:	66 90                	xchg   %ax,%ax
+80106ed8:	8b 45 e0             	mov    -0x20(%ebp),%eax
+80106edb:	83 c4 2c             	add    $0x2c,%esp
+80106ede:	5b                   	pop    %ebx
+80106edf:	5e                   	pop    %esi
+80106ee0:	5f                   	pop    %edi
+80106ee1:	5d                   	pop    %ebp
+80106ee2:	c3                   	ret    
+80106ee3:	90                   	nop
+80106ee4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
       kfree(mem);
-80106d18:	89 1c 24             	mov    %ebx,(%esp)
-80106d1b:	e8 d0 b5 ff ff       	call   801022f0 <kfree>
+80106ee8:	89 1c 24             	mov    %ebx,(%esp)
+80106eeb:	e8 00 b4 ff ff       	call   801022f0 <kfree>
       goto bad;
-80106d20:	eb cf                	jmp    80106cf1 <copyuvm+0xa1>
+80106ef0:	eb cf                	jmp    80106ec1 <copyuvm+0xa1>
     return 0;
-80106d22:	31 c0                	xor    %eax,%eax
-80106d24:	eb d8                	jmp    80106cfe <copyuvm+0xae>
+80106ef2:	31 c0                	xor    %eax,%eax
+80106ef4:	eb d8                	jmp    80106ece <copyuvm+0xae>
       panic("copyuvm: page not present");
-80106d26:	c7 04 24 d2 77 10 80 	movl   $0x801077d2,(%esp)
-80106d2d:	e8 2e 96 ff ff       	call   80100360 <panic>
+80106ef6:	c7 04 24 fa 79 10 80 	movl   $0x801079fa,(%esp)
+80106efd:	e8 5e 94 ff ff       	call   80100360 <panic>
       panic("copyuvm: pte should exist");
-80106d32:	c7 04 24 b8 77 10 80 	movl   $0x801077b8,(%esp)
-80106d39:	e8 22 96 ff ff       	call   80100360 <panic>
-80106d3e:	66 90                	xchg   %ax,%ax
+80106f02:	c7 04 24 e0 79 10 80 	movl   $0x801079e0,(%esp)
+80106f09:	e8 52 94 ff ff       	call   80100360 <panic>
+80106f0e:	66 90                	xchg   %ax,%ax
 
-80106d40 <uva2ka>:
+80106f10 <uva2ka>:
 
 //PAGEBREAK!
 // Map user virtual address to kernel address.
 char*
 uva2ka(pde_t *pgdir, char *uva)
 {
-80106d40:	55                   	push   %ebp
+80106f10:	55                   	push   %ebp
   pte_t *pte;
 
   pte = walkpgdir(pgdir, uva, 0);
-80106d41:	31 c9                	xor    %ecx,%ecx
+80106f11:	31 c9                	xor    %ecx,%ecx
 {
-80106d43:	89 e5                	mov    %esp,%ebp
-80106d45:	83 ec 08             	sub    $0x8,%esp
+80106f13:	89 e5                	mov    %esp,%ebp
+80106f15:	83 ec 08             	sub    $0x8,%esp
   pte = walkpgdir(pgdir, uva, 0);
-80106d48:	8b 55 0c             	mov    0xc(%ebp),%edx
-80106d4b:	8b 45 08             	mov    0x8(%ebp),%eax
-80106d4e:	e8 ad f7 ff ff       	call   80106500 <walkpgdir>
+80106f18:	8b 55 0c             	mov    0xc(%ebp),%edx
+80106f1b:	8b 45 08             	mov    0x8(%ebp),%eax
+80106f1e:	e8 ad f7 ff ff       	call   801066d0 <walkpgdir>
   if((*pte & PTE_P) == 0)
-80106d53:	8b 00                	mov    (%eax),%eax
-80106d55:	89 c2                	mov    %eax,%edx
-80106d57:	83 e2 05             	and    $0x5,%edx
+80106f23:	8b 00                	mov    (%eax),%eax
+80106f25:	89 c2                	mov    %eax,%edx
+80106f27:	83 e2 05             	and    $0x5,%edx
     return 0;
   if((*pte & PTE_U) == 0)
-80106d5a:	83 fa 05             	cmp    $0x5,%edx
-80106d5d:	75 11                	jne    80106d70 <uva2ka+0x30>
+80106f2a:	83 fa 05             	cmp    $0x5,%edx
+80106f2d:	75 11                	jne    80106f40 <uva2ka+0x30>
     return 0;
   return (char*)P2V(PTE_ADDR(*pte));
-80106d5f:	25 00 f0 ff ff       	and    $0xfffff000,%eax
-80106d64:	05 00 00 00 80       	add    $0x80000000,%eax
+80106f2f:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+80106f34:	05 00 00 00 80       	add    $0x80000000,%eax
 }
-80106d69:	c9                   	leave  
-80106d6a:	c3                   	ret    
-80106d6b:	90                   	nop
-80106d6c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80106f39:	c9                   	leave  
+80106f3a:	c3                   	ret    
+80106f3b:	90                   	nop
+80106f3c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     return 0;
-80106d70:	31 c0                	xor    %eax,%eax
+80106f40:	31 c0                	xor    %eax,%eax
 }
-80106d72:	c9                   	leave  
-80106d73:	c3                   	ret    
-80106d74:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-80106d7a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+80106f42:	c9                   	leave  
+80106f43:	c3                   	ret    
+80106f44:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80106f4a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
 
-80106d80 <copyout>:
+80106f50 <copyout>:
 // Copy len bytes from p to user address va in page table pgdir.
 // Most useful when pgdir is not the current page table.
 // uva2ka ensures this only works for PTE_U pages.
 int
 copyout(pde_t *pgdir, uint va, void *p, uint len)
 {
-80106d80:	55                   	push   %ebp
-80106d81:	89 e5                	mov    %esp,%ebp
-80106d83:	57                   	push   %edi
-80106d84:	56                   	push   %esi
-80106d85:	53                   	push   %ebx
-80106d86:	83 ec 1c             	sub    $0x1c,%esp
-80106d89:	8b 5d 14             	mov    0x14(%ebp),%ebx
-80106d8c:	8b 4d 0c             	mov    0xc(%ebp),%ecx
-80106d8f:	8b 7d 10             	mov    0x10(%ebp),%edi
+80106f50:	55                   	push   %ebp
+80106f51:	89 e5                	mov    %esp,%ebp
+80106f53:	57                   	push   %edi
+80106f54:	56                   	push   %esi
+80106f55:	53                   	push   %ebx
+80106f56:	83 ec 1c             	sub    $0x1c,%esp
+80106f59:	8b 5d 14             	mov    0x14(%ebp),%ebx
+80106f5c:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+80106f5f:	8b 7d 10             	mov    0x10(%ebp),%edi
   char *buf, *pa0;
   uint n, va0;
 
   buf = (char*)p;
   while(len > 0){
-80106d92:	85 db                	test   %ebx,%ebx
-80106d94:	75 3a                	jne    80106dd0 <copyout+0x50>
-80106d96:	eb 68                	jmp    80106e00 <copyout+0x80>
+80106f62:	85 db                	test   %ebx,%ebx
+80106f64:	75 3a                	jne    80106fa0 <copyout+0x50>
+80106f66:	eb 68                	jmp    80106fd0 <copyout+0x80>
     va0 = (uint)PGROUNDDOWN(va);
     pa0 = uva2ka(pgdir, (char*)va0);
     if(pa0 == 0)
       return -1;
     n = PGSIZE - (va - va0);
-80106d98:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
-80106d9b:	89 f2                	mov    %esi,%edx
+80106f68:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
+80106f6b:	89 f2                	mov    %esi,%edx
     if(n > len)
       n = len;
     memmove(pa0 + (va - va0), buf, n);
-80106d9d:	89 7c 24 04          	mov    %edi,0x4(%esp)
+80106f6d:	89 7c 24 04          	mov    %edi,0x4(%esp)
     n = PGSIZE - (va - va0);
-80106da1:	29 ca                	sub    %ecx,%edx
-80106da3:	81 c2 00 10 00 00    	add    $0x1000,%edx
-80106da9:	39 da                	cmp    %ebx,%edx
-80106dab:	0f 47 d3             	cmova  %ebx,%edx
+80106f71:	29 ca                	sub    %ecx,%edx
+80106f73:	81 c2 00 10 00 00    	add    $0x1000,%edx
+80106f79:	39 da                	cmp    %ebx,%edx
+80106f7b:	0f 47 d3             	cmova  %ebx,%edx
     memmove(pa0 + (va - va0), buf, n);
-80106dae:	29 f1                	sub    %esi,%ecx
-80106db0:	01 c8                	add    %ecx,%eax
-80106db2:	89 54 24 08          	mov    %edx,0x8(%esp)
-80106db6:	89 04 24             	mov    %eax,(%esp)
-80106db9:	89 55 e4             	mov    %edx,-0x1c(%ebp)
-80106dbc:	e8 ef d6 ff ff       	call   801044b0 <memmove>
+80106f7e:	29 f1                	sub    %esi,%ecx
+80106f80:	01 c8                	add    %ecx,%eax
+80106f82:	89 54 24 08          	mov    %edx,0x8(%esp)
+80106f86:	89 04 24             	mov    %eax,(%esp)
+80106f89:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+80106f8c:	e8 8f d6 ff ff       	call   80104620 <memmove>
     len -= n;
     buf += n;
-80106dc1:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+80106f91:	8b 55 e4             	mov    -0x1c(%ebp),%edx
     va = va0 + PGSIZE;
-80106dc4:	8d 8e 00 10 00 00    	lea    0x1000(%esi),%ecx
+80106f94:	8d 8e 00 10 00 00    	lea    0x1000(%esi),%ecx
     buf += n;
-80106dca:	01 d7                	add    %edx,%edi
+80106f9a:	01 d7                	add    %edx,%edi
   while(len > 0){
-80106dcc:	29 d3                	sub    %edx,%ebx
-80106dce:	74 30                	je     80106e00 <copyout+0x80>
+80106f9c:	29 d3                	sub    %edx,%ebx
+80106f9e:	74 30                	je     80106fd0 <copyout+0x80>
     pa0 = uva2ka(pgdir, (char*)va0);
-80106dd0:	8b 45 08             	mov    0x8(%ebp),%eax
+80106fa0:	8b 45 08             	mov    0x8(%ebp),%eax
     va0 = (uint)PGROUNDDOWN(va);
-80106dd3:	89 ce                	mov    %ecx,%esi
-80106dd5:	81 e6 00 f0 ff ff    	and    $0xfffff000,%esi
+80106fa3:	89 ce                	mov    %ecx,%esi
+80106fa5:	81 e6 00 f0 ff ff    	and    $0xfffff000,%esi
     pa0 = uva2ka(pgdir, (char*)va0);
-80106ddb:	89 74 24 04          	mov    %esi,0x4(%esp)
+80106fab:	89 74 24 04          	mov    %esi,0x4(%esp)
     va0 = (uint)PGROUNDDOWN(va);
-80106ddf:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+80106faf:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
     pa0 = uva2ka(pgdir, (char*)va0);
-80106de2:	89 04 24             	mov    %eax,(%esp)
-80106de5:	e8 56 ff ff ff       	call   80106d40 <uva2ka>
+80106fb2:	89 04 24             	mov    %eax,(%esp)
+80106fb5:	e8 56 ff ff ff       	call   80106f10 <uva2ka>
     if(pa0 == 0)
-80106dea:	85 c0                	test   %eax,%eax
-80106dec:	75 aa                	jne    80106d98 <copyout+0x18>
+80106fba:	85 c0                	test   %eax,%eax
+80106fbc:	75 aa                	jne    80106f68 <copyout+0x18>
   }
   return 0;
 }
-80106dee:	83 c4 1c             	add    $0x1c,%esp
+80106fbe:	83 c4 1c             	add    $0x1c,%esp
       return -1;
-80106df1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-}
-80106df6:	5b                   	pop    %ebx
-80106df7:	5e                   	pop    %esi
-80106df8:	5f                   	pop    %edi
-80106df9:	5d                   	pop    %ebp
-80106dfa:	c3                   	ret    
-80106dfb:	90                   	nop
-80106dfc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80106e00:	83 c4 1c             	add    $0x1c,%esp
+80106fc1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80106fc6:	5b                   	pop    %ebx
+80106fc7:	5e                   	pop    %esi
+80106fc8:	5f                   	pop    %edi
+80106fc9:	5d                   	pop    %ebp
+80106fca:	c3                   	ret    
+80106fcb:	90                   	nop
+80106fcc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80106fd0:	83 c4 1c             	add    $0x1c,%esp
   return 0;
-80106e03:	31 c0                	xor    %eax,%eax
+80106fd3:	31 c0                	xor    %eax,%eax
 }
-80106e05:	5b                   	pop    %ebx
-80106e06:	5e                   	pop    %esi
-80106e07:	5f                   	pop    %edi
-80106e08:	5d                   	pop    %ebp
-80106e09:	c3                   	ret    
+80106fd5:	5b                   	pop    %ebx
+80106fd6:	5e                   	pop    %esi
+80106fd7:	5f                   	pop    %edi
+80106fd8:	5d                   	pop    %ebp
+80106fd9:	c3                   	ret    
diff --git a/kernel.sym b/kernel.sym
index 93e15e7..9439c43 100644
--- a/kernel.sym
+++ b/kernel.sym
@@ -1,5 +1,5 @@
 80100000 .text
-80106e20 .rodata
+80106fe0 .rodata
 80108000 .data
 8010a520 .bss
 00000000 .debug_line
@@ -16,7 +16,7 @@
 8010a558 panicked
 801003e0 consputc
 80100570 printint
-80106e90 digits.1852
+80107050 digits.1862
 00000000 exec.c
 00000000 file.c
 00000000 fs.c
@@ -33,10 +33,10 @@
 00000000 ioapic.c
 00000000 kalloc.c
 00000000 kbd.c
-8010a5b4 shift.1691
-801071c0 shiftcode
-801070c0 togglecode
-801070a0 charcode.1692
+8010a5b4 shift.1695
+80107380 shiftcode
+80107280 togglecode
+80107260 charcode.1696
 80108200 normalmap
 80108100 shiftmap
 80108000 ctlmap
@@ -54,466 +54,471 @@
 00000000 pipe.c
 00000000 proc.c
 801034c0 allocproc
-8010a000 first.1907
+8010a000 first.1929
 8010a5b8 initproc
-80107480 states.1933
+801076ac states.1955
 00000000 sleeplock.c
 00000000 spinlock.c
 00000000 string.c
 00000000 syscall.c
-80107500 syscalls
+80107720 syscalls
 00000000 sysfile.c
-80104840 fdalloc
-80104880 create
-80104a00 argfd.constprop.0
+801049b0 fdalloc
+801049f0 create
+80104b70 argfd.constprop.0
 00000000 sysproc.c
 00000000 trap.c
 00000000 uart.c
-80105950 uartgetc
+80105b20 uartgetc
 8010a5bc uart
 00000000 vm.c
-80106500 walkpgdir
-80106590 mappages
-80106610 deallocuvm.part.0
+801066d0 walkpgdir
+80106760 mappages
+801067e0 deallocuvm.part.0
 8010a420 kmap
 80100270 consoleread
-8010644e vector242
-80105ea5 vector119
+8010661e vector242
+80106075 vector119
 8010000c entry
-80105d85 vector87
-80105d7c vector86
-801045f0 safestrcpy
-80104b90 sys_close
-801064ba vector251
-80105da9 vector91
-80105b9f vector33
-8010608e vector162
-80103bd0 yield
+80105f55 vector87
+80105f4c vector86
+80104760 safestrcpy
+80104d00 sys_close
+8010668a vector251
+80105f79 vector91
+80105d6f vector33
+8010625e vector162
+80103d00 yield
 80112680 log
 80112640 kmem
-801062f2 vector213
-80105e42 vector108
-801059d0 uartinit
-80105bf9 vector43
+801064c2 vector213
+80106012 vector108
+80105ba0 uartinit
+80105dc9 vector43
 80102780 lapiceoi
-80103dc0 waitpid
-801060b2 vector165
-801061a2 vector185
+80103f30 waitpid
+80106282 vector165
+80106372 vector185
 80102200 ioapicinit
-80105e81 vector115
+80106051 vector115
 80100f40 fileread
-80105ec0 vector122
-80105440 sys_sbrk
+80106090 vector122
+801055b0 sys_sbrk
 80112760 ioapicid
-80106046 vector156
-80106472 vector245
+80106216 vector156
+80106642 vector245
 80112634 ioapic
-801061d2 vector189
-80105ac3 vector7
-80105c9b vector61
-80105b4e vector24
-80105e5d vector111
-80106256 vector200
-80105cd1 vector67
-80105f6e vector138
-80105d10 vector74
-80103a00 sched
-801044b0 memmove
-80105c77 vector57
-801047d0 syscall
-801062fe vector214
-80105df1 vector99
+801063a2 vector189
+80105c93 vector7
+80105e6b vector61
+80105d1e vector24
+8010602d vector111
+80106426 vector200
+80105ea1 vector67
+8010613e vector138
+80105ee0 vector74
+80103a90 sched
+80104620 memmove
+80105e47 vector57
+80104940 syscall
+801064ce vector214
+80105fc1 vector99
 80103680 cpuid
 80101a60 writei
-80105f92 vector141
-80105380 sys_fork
+80106162 vector141
+801054f0 sys_fork
 8010b5c0 bcache
-80106106 vector172
-80106442 vector241
-80104200 getcallerpcs
-80105070 sys_mkdir
-801064d2 vector253
-80105a9f vector3
-80105a96 vector2
+801062d6 vector172
+80106612 vector241
+80104370 getcallerpcs
+801051e0 sys_mkdir
+801066a2 vector253
+80105c6f vector3
+80105c66 vector2
 80101b90 namecmp
-8010639a vector227
-801062ce vector210
-80104790 argstr
-80106376 vector224
-80105be7 vector41
+8010656a vector227
+8010649e vector210
+80104900 argstr
+80106546 vector224
+80105db7 vector41
 80100650 cprintf
 80100de0 filedup
 80101f00 namei
-80105b33 vector21
+80105d03 vector21
 80100040 binit
-80106142 vector177
-80105e9c vector118
-80105cec vector70
-80105ce3 vector69
-80106412 vector237
-80105cb6 vector64
-80105b69 vector27
-80105f26 vector132
-801061ae vector186
-80104ab0 sys_read
-80106322 vector217
-80104660 fetchint
-80106b70 setupkvm
-80104520 memcpy
-80106af0 freevm
-80105a8d vector1
-8010614e vector178
-80105bcc vector38
+80106312 vector177
+8010606c vector118
+80105ebc vector70
+80105eb3 vector69
+801065e2 vector237
+80105e86 vector64
+80105d39 vector27
+801060f6 vector132
+8010637e vector186
+80104c20 sys_read
+801064f2 vector217
+801047d0 fetchint
+80106d40 setupkvm
+80104690 memcpy
+80106cc0 freevm
+80105c5d vector1
+8010631e vector178
+80105d9c vector38
 801022f0 kfree
-8010641e vector238
+801065ee vector238
 80103600 mycpu
 801017d0 iput
-80105f32 vector133
-80105d07 vector73
-80105fb6 vector144
-801064de vector254
+80106102 vector133
+80105ed7 vector73
+80106186 vector144
+801066ae vector254
 80101420 readsb
 8010a004 nextpid
-80105e03 vector101
-801062da vector211
+80105fd3 vector101
+801064aa vector211
 80102f90 mpinit
-8010611e vector174
-8010645a vector243
+801062ee vector174
+8010662a vector243
 80100d50 fileinit
-801041e0 initlock
-80105ef6 vector128
-80106d80 copyout
-80105d4f vector81
-80103c10 sleep
+80104350 initlock
+801060c6 vector128
+80106f50 copyout
+80105f1f vector81
+80103d80 sleep
 801027a0 microdelay
-80105af1 vector13
-80105c41 vector51
-80105b08 vector16
+80105cc1 vector13
+80105e11 vector51
+80105cd8 vector16
 8010ff20 input
-80106436 vector240
-80105c5c vector54
-80105b21 vector19
-80105db2 vector92
-80106466 vector244
+80106606 vector240
+80105e2c vector54
+80105cf1 vector19
+80105f82 vector92
+80106636 vector244
 80101930 stati
-80105f86 vector140
-801053f0 sys_kill
-80105c0b vector45
-80105d3d vector79
+80106156 vector140
+80105560 sys_kill
+80105ddb vector45
+80105f0d vector79
 80103260 pipeclose
-801063b2 vector229
-8010605e vector158
-80104bd0 sys_fstat
+80106582 vector229
+8010622e vector158
+80104d40 sys_fstat
 801005f0 consolewrite
-80105bd5 vector39
-801060d6 vector168
+80105da5 vector39
+801062a6 vector168
 80102b80 end_op
-80105bb1 vector35
-80105e6f vector113
+80105d81 vector35
+8010603f vector113
 80102390 freerange
-80105edb vector125
-801069e0 allocuvm
-801055e7 trapret
-80106316 vector216
-80105cad vector63
-80105b60 vector26
-80106202 vector193
+801060ab vector125
+80106bb0 allocuvm
+801057c1 trapret
+801064e6 vector216
+80105e7d vector63
+80105d30 vector26
+801063d2 vector193
 80102670 lapicinit
-80106226 vector196
-801062c2 vector209
-80105aa8 vector4
-801060ee vector170
+801063f6 vector196
+80106492 vector209
+80105c78 vector4
+801062be vector170
 8010a5c0 stack
-80105f56 vector136
-80105adc vector10
-8010629e vector206
+80106126 vector136
+80105cac vector10
+8010646e vector206
 80101790 iunlock
-80105490 sys_sleep
-801064ea vector255
-80106172 vector181
-80105c89 vector59
-80105d73 vector85
-80105d6a vector84
-8010618a vector183
-8010606a vector159
-801062e6 vector212
-80104c20 sys_link
-80105c1d vector47
-801063a6 vector228
-80105bf0 vector42
-80105e78 vector114
-80106d40 uva2ka
-8010612a vector175
-80105faa vector143
+80105600 sys_sleep
+801066ba vector255
+80106342 vector181
+80105e59 vector59
+80105f43 vector85
+80105f3a vector84
+8010635a vector183
+8010623a vector159
+801064b6 vector212
+80104d90 sys_link
+80105ded vector47
+80106576 vector228
+80105dc0 vector42
+80106048 vector114
+80106f10 uva2ka
+801062fa vector175
+8010617a vector143
 80100d70 filealloc
-80103ef0 wakeup
-80105f0e vector130
-8010647e vector246
-80105ad3 vector9
-80105f9e vector142
-80105dfa vector100
-80106262 vector201
-80106c20 clearpteu
+80104060 wakeup
+80103d40 setPrior
+801060de vector130
+8010664e vector246
+80105ca3 vector9
+8010616e vector142
+80105fca vector100
+80106432 vector201
+80106df0 clearpteu
 801036a0 myproc
-80105600 tvinit
-80105c92 vector60
-80105b45 vector23
+801057d0 tvinit
+80105e62 vector60
+80105d15 vector23
 80101680 idup
-80106406 vector236
+801065d6 vector236
 801025d0 kbdintr
-80104f30 sys_open
-801063ca vector231
-80105cc8 vector66
-80105b7b vector29
+801050a0 sys_open
+8010659a vector231
+80105e98 vector66
+80105d4b vector29
 80101960 readi
-80105f4a vector135
+8010611a vector135
 801007b0 consoleintr
-80103f60 kill
-80105d2b vector77
+801040d0 kill
+80105efb vector77
 80101520 ialloc
-80106166 vector180
-801156a4 kpgdir
-801062b6 vector208
+80106336 vector180
+80115ba4 kpgdir
+80106486 vector208
 80102840 cmostime
-80105a70 uartintr
-80105de8 vector98
-80105ddf vector97
-80106136 vector176
-8010620e vector194
-80105b96 vector32
-801156a8 end
-8010624a vector199
-80105f1a vector131
-801064c6 vector252
+80105c40 uartintr
+80105fb8 vector98
+80105faf vector97
+80106306 vector176
+801063de vector194
+80105d66 vector32
+80115ba8 end
+80103d60 getPrior
+8010641a vector199
+801060ea vector131
+80106696 vector252
 80100fe0 filewrite
-80105a84 vector0
-80104700 argint
+80105c54 vector0
+80104870 argint
 801009a0 exec
-80105fc2 vector145
-80104b20 sys_write
-801043c0 release
-801046a0 fetchstr
-80105e39 vector107
-80105bde vector40
-80103cc0 wait
-80105e0c vector102
+80106192 vector145
+80104c90 sys_write
+80104530 release
+80104810 fetchstr
+80106009 vector107
+80105dae vector40
+80103e30 wait
+80105fdc vector102
 80109000 entrypgdir
 0010000c _start
-80105c6e vector56
-80105cda vector68
-80105aba vector6
+80105e3e vector56
+80105eaa vector68
+80105c8a vector6
 8010a48c _binary_initcode_end
 80100000 multiboot_header
-80105f02 vector129
-80103960 scheduler
+801060d2 vector129
+80103990 scheduler
 80101bc0 dirlookup
-80106232 vector197
+80106402 vector197
 80100e30 fileclose
 80102b10 begin_op
-80106016 vector152
-80106c00 kvmalloc
-801063be vector230
-80104530 strncmp
-80105bc3 vector37
-80106292 vector205
-80106082 vector161
-80114e60 tickslock
+801061e6 vector152
+80106dd0 kvmalloc
+8010658e vector230
+801046a0 strncmp
+80105d93 vector37
+80106462 vector205
+80106252 vector161
+80115360 tickslock
 801032f0 pipewrite
-801045a0 strncpy
-80105cf5 vector71
-80106c50 copyuvm
+80104710 strncpy
+80105ec5 vector71
+80106e20 copyuvm
 8010ffc0 ftable
-80106076 vector160
-80104730 argptr
-8010630a vector215
-80106052 vector157
-80104a70 sys_dup
-80105e66 vector112
+80106246 vector160
+801048a0 argptr
+801064da vector215
+80106222 vector157
+80104be0 sys_dup
+80106036 vector112
 80100360 panic
 80103590 forkret
-8010617e vector182
-80105aea vector12
-80104460 memcmp
+8010634e vector182
+80105cba vector12
+801045d0 memcmp
 80102500 kbdgetc
-80105e4b vector109
-80105b2a vector20
+8010601b vector109
+80105cfa vector20
 80103850 fork
-80105c53 vector53
-80105b18 vector18
+80105e23 vector53
+80105ce8 vector18
 0000008a _binary_entryother_size
 80112780 cpus
-80104150 releasesleep
-80105dcd vector95
-80104310 holding
+801042c0 releasesleep
+80105f9d vector95
+80104480 holding
 801109c0 sb
-80104350 acquire
-8010638e vector226
+801044c0 acquire
+8010655e vector226
 80101f20 nameiparent
-80105c2f vector49
-80105c02 vector44
+80105dff vector49
+80105dd2 vector44
 8011267c lapic
-80105d34 vector78
-801055cf alltraps
-80106112 vector173
-80105e93 vector117
-80105d58 vector82
-80105570 sys_waitpid
-8010635e vector222
-80105acc vector8
-80105ff2 vector149
+80105f04 vector78
+801057a9 alltraps
+801062e2 vector173
+80106063 vector117
+80105f28 vector82
+801056e0 sys_waitpid
+8010652e vector222
+80105c9c vector8
+801061c2 vector149
 801015f0 iupdate
 80108000 data
-80104410 memset
-801063d6 vector232
+80104580 memset
+801065a6 vector232
 80102df0 main
-80106770 switchkvm
-80105e30 vector106
-80106346 vector220
-80105da0 vector90
-8010609a vector163
-801063ee vector234
+80106940 switchkvm
+80106000 vector106
+80106516 vector220
+80105f70 vector90
+8010626a vector163
+801065be vector234
 80102cb0 log_write
-801040f0 acquiresleep
-80104d40 sys_unlink
-80105ca4 vector62
-80105b57 vector25
-8010623e vector198
-80105eae vector120
+80104260 acquiresleep
+80104eb0 sys_unlink
+80105e74 vector62
+80105d27 vector25
+8010640e vector198
+8010607e vector120
 8010a48c _binary_entryother_start
 801023e0 kinit1
-80105c38 vector50
-80105aff vector15
-8010600a vector151
-80105d61 vector83
-80105d97 vector89
-80105d8e vector88
-801056d0 trap
-80105540 sys_uptime
-8010615a vector179
-80105ba8 vector34
-80105c14 vector46
-80105f3e vector134
-8010636a vector223
-80114ea0 idt
-8010632e vector218
+8010ffac time
+80105e08 vector50
+80105ccf vector15
+801061da vector151
+80105f31 vector83
+80105f67 vector89
+80105f5e vector88
+801058a0 trap
+801056b0 sys_uptime
+8010632a vector179
+80105d78 vector34
+80105de4 vector46
+8010610e vector134
+8010653a vector223
+801153a0 idt
+801064fe vector218
 801035e0 pinit
-80106ad0 deallocuvm
-80106382 vector225
+80106ca0 deallocuvm
+80106552 vector225
 80102760 lapicid
-801061ba vector187
+8010638a vector187
 801037e0 growproc
-80104190 holdingsleep
+80104300 holdingsleep
 80112d00 ncpu
-80105b84 vector30
+80105d54 vector30
 801036d0 userinit
 801000d0 bread
-80105eed vector127
+801060bd vector127
 801033e0 piperead
-801156a0 ticks
-801061f6 vector192
-801060be vector166
+80115ba0 ticks
+801063c6 vector192
+8010628e vector166
 80100950 consoleinit
-80105d22 vector76
-80105d19 vector75
+80105ef2 vector76
+80105ee9 vector75
 80102080 ideintr
-8010621a vector195
-80105ffe vector150
-80105c80 vector58
-80106496 vector248
-80105ec9 vector123
-80105dd6 vector96
-80105b8d vector31
-8010627a vector203
-80105f7a vector139
-80106022 vector153
-801060a6 vector164
-80103fe0 procdump
-80105eb7 vector121
-80105980 uartputc
-80105ab1 vector5
-801060ca vector167
-8010603a vector155
-801064a2 vector249
+801063ea vector195
+801061ce vector150
+80105e50 vector58
+80106666 vector248
+80106099 vector123
+80105fa6 vector96
+801057a0 sys_getPrior
+80105d5d vector31
+8010644a vector203
+8010614a vector139
+801061f2 vector153
+80106276 vector164
+80104150 procdump
+80106087 vector121
+80105b50 uartputc
+80105c81 vector5
+8010629a vector167
+8010620a vector155
+80106672 vector249
 801001e0 brelse
-801064ae vector250
-80105ed2 vector124
-80105e54 vector110
-80106286 vector204
+8010667e vector250
+801060a2 vector124
+80106024 vector110
+80106456 vector204
 801016b0 ilock
-801051f0 sys_exec
-80105f62 vector137
+80105360 sys_exec
+80106132 vector137
 8010a460 _binary_initcode_start
-8010464b swtch
-8010648a vector247
-80105b3c vector22
-8010626e vector202
-801066b0 seginit
+801047bb swtch
+8010665a vector247
+80105d0c vector22
+8010643e vector202
+80106880 seginit
 80101910 iunlockput
-80105cfe vector72
-80105c65 vector55
-80105ee4 vector126
-80105cbf vector65
-80105b72 vector28
+80105ece vector72
+80105e35 vector55
+801060b4 vector126
+80105e8f vector65
+80105d42 vector28
 8010a516 _binary_entryother_end
-801060e2 vector169
+801062b2 vector169
+80105740 sys_setPrior
 801001a0 bwrite
-801063e2 vector233
-801056a0 idtinit
-80103aa0 exit
-801053c0 sys_wait
-80105390 sys_exit
+801065b2 vector233
+80105870 idtinit
+80103b30 exit
+80105530 sys_wait
+80105500 sys_exit
 80101e20 dirlink
 0000002c _binary_initcode_size
-80105fda vector147
-801040b0 initsleeplock
+801061aa vector147
+80104220 initsleeplock
 80102000 ideinit
-80106920 loaduvm
-80105e1e vector104
-80105e8a vector116
+80106af0 loaduvm
+80105fee vector104
+8010605a vector116
 80112d20 ptable
 801022b0 ioapicenable
-801042a0 popcli
+80104410 popcli
 8010a008 vectors
-80105c4a vector52
-80105b11 vector17
-80106196 vector184
-80104630 strlen
-801052e0 sys_pipe
+80105e1a vector52
+80105ce1 vector17
+80106366 vector184
+801047a0 strlen
+80105450 sys_pipe
 80101470 iinit
 80103150 picinit
-801062aa vector207
-801068a0 inituvm
-801061de vector190
-8010642a vector239
-80105dc4 vector94
-80105dbb vector93
+8010647a vector207
+80106a70 inituvm
+801063ae vector190
+801065fa vector239
+80105f94 vector94
+80105f8b vector93
 80102a70 initlog
-801061c6 vector188
-80105c26 vector48
+80106396 vector188
+80105df6 vector48
 80102120 iderw
-8010633a vector219
-80105fe6 vector148
-80106352 vector221
+8010650a vector219
+801061b6 vector148
+80106522 vector221
 801024a0 kalloc
 80110960 devsw
-80105430 sys_getpid
-80105d46 vector80
-801060fa vector171
-8010602e vector154
-80105bba vector36
+801055a0 sys_getpid
+80105f16 vector80
+801062ca vector171
+801061fe vector154
+80105d8a vector36
 80103170 pipealloc
-801063fa vector235
-80105e27 vector105
-80105160 sys_chdir
+801065ca vector235
+80105ff7 vector105
+801052d0 sys_chdir
 801109e0 icache
-80105fce vector146
-801061ea vector191
-80105e15 vector103
-801050d0 sys_mknod
+8010619e vector146
+801063ba vector191
+80105fe5 vector103
+80105240 sys_mknod
 801027b0 lapicstartap
-80106790 switchuvm
-80104260 pushcli
+80106960 switchuvm
+801043d0 pushcli
 80102450 kinit2
-80105ae3 vector11
-80105af8 vector14
+80105cb3 vector11
+80105cc8 vector14
 80100ef0 filestat
diff --git a/kill.asm b/kill.asm
index 62cbe86..3ec450e 100644
--- a/kill.asm
+++ b/kill.asm
@@ -49,10 +49,10 @@ main(int argc, char **argv)
   3a:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
   41:	e8 4c 02 00 00       	call   292 <exit>
     printf(2, "usage: kill pid...\n");
-  46:	c7 44 24 04 46 07 00 	movl   $0x746,0x4(%esp)
+  46:	c7 44 24 04 56 07 00 	movl   $0x756,0x4(%esp)
   4d:	00 
   4e:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-  55:	e8 86 03 00 00       	call   3e0 <printf>
+  55:	e8 96 03 00 00       	call   3f0 <printf>
     exit(0);
   5a:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
   61:	e8 2c 02 00 00       	call   292 <exit>
@@ -576,580 +576,592 @@ SYSCALL(uptime)
  331:	c3                   	ret    
 
 00000332 <waitpid>:
+SYSCALL(waitpid)
  332:	b8 16 00 00 00       	mov    $0x16,%eax
  337:	cd 40                	int    $0x40
  339:	c3                   	ret    
- 33a:	66 90                	xchg   %ax,%ax
- 33c:	66 90                	xchg   %ax,%ax
- 33e:	66 90                	xchg   %ax,%ax
 
-00000340 <printint>:
+0000033a <setPrior>:
+SYSCALL(setPrior)
+ 33a:	b8 17 00 00 00       	mov    $0x17,%eax
+ 33f:	cd 40                	int    $0x40
+ 341:	c3                   	ret    
+
+00000342 <getPrior>:
+ 342:	b8 18 00 00 00       	mov    $0x18,%eax
+ 347:	cd 40                	int    $0x40
+ 349:	c3                   	ret    
+ 34a:	66 90                	xchg   %ax,%ax
+ 34c:	66 90                	xchg   %ax,%ax
+ 34e:	66 90                	xchg   %ax,%ax
+
+00000350 <printint>:
   write(fd, &c, 1);
 }
 
 static void
 printint(int fd, int xx, int base, int sgn)
 {
- 340:	55                   	push   %ebp
- 341:	89 e5                	mov    %esp,%ebp
- 343:	57                   	push   %edi
- 344:	56                   	push   %esi
- 345:	89 c6                	mov    %eax,%esi
- 347:	53                   	push   %ebx
- 348:	83 ec 4c             	sub    $0x4c,%esp
+ 350:	55                   	push   %ebp
+ 351:	89 e5                	mov    %esp,%ebp
+ 353:	57                   	push   %edi
+ 354:	56                   	push   %esi
+ 355:	89 c6                	mov    %eax,%esi
+ 357:	53                   	push   %ebx
+ 358:	83 ec 4c             	sub    $0x4c,%esp
   char buf[16];
   int i, neg;
   uint x;
 
   neg = 0;
   if(sgn && xx < 0){
- 34b:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 34e:	85 db                	test   %ebx,%ebx
- 350:	74 09                	je     35b <printint+0x1b>
- 352:	89 d0                	mov    %edx,%eax
- 354:	c1 e8 1f             	shr    $0x1f,%eax
- 357:	84 c0                	test   %al,%al
- 359:	75 75                	jne    3d0 <printint+0x90>
+ 35b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 35e:	85 db                	test   %ebx,%ebx
+ 360:	74 09                	je     36b <printint+0x1b>
+ 362:	89 d0                	mov    %edx,%eax
+ 364:	c1 e8 1f             	shr    $0x1f,%eax
+ 367:	84 c0                	test   %al,%al
+ 369:	75 75                	jne    3e0 <printint+0x90>
     neg = 1;
     x = -xx;
   } else {
     x = xx;
- 35b:	89 d0                	mov    %edx,%eax
+ 36b:	89 d0                	mov    %edx,%eax
   neg = 0;
- 35d:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
- 364:	89 75 c0             	mov    %esi,-0x40(%ebp)
+ 36d:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
+ 374:	89 75 c0             	mov    %esi,-0x40(%ebp)
   }
 
   i = 0;
- 367:	31 ff                	xor    %edi,%edi
- 369:	89 ce                	mov    %ecx,%esi
- 36b:	8d 5d d7             	lea    -0x29(%ebp),%ebx
- 36e:	eb 02                	jmp    372 <printint+0x32>
+ 377:	31 ff                	xor    %edi,%edi
+ 379:	89 ce                	mov    %ecx,%esi
+ 37b:	8d 5d d7             	lea    -0x29(%ebp),%ebx
+ 37e:	eb 02                	jmp    382 <printint+0x32>
   do{
     buf[i++] = digits[x % base];
- 370:	89 cf                	mov    %ecx,%edi
- 372:	31 d2                	xor    %edx,%edx
- 374:	f7 f6                	div    %esi
- 376:	8d 4f 01             	lea    0x1(%edi),%ecx
- 379:	0f b6 92 61 07 00 00 	movzbl 0x761(%edx),%edx
+ 380:	89 cf                	mov    %ecx,%edi
+ 382:	31 d2                	xor    %edx,%edx
+ 384:	f7 f6                	div    %esi
+ 386:	8d 4f 01             	lea    0x1(%edi),%ecx
+ 389:	0f b6 92 71 07 00 00 	movzbl 0x771(%edx),%edx
   }while((x /= base) != 0);
- 380:	85 c0                	test   %eax,%eax
+ 390:	85 c0                	test   %eax,%eax
     buf[i++] = digits[x % base];
- 382:	88 14 0b             	mov    %dl,(%ebx,%ecx,1)
+ 392:	88 14 0b             	mov    %dl,(%ebx,%ecx,1)
   }while((x /= base) != 0);
- 385:	75 e9                	jne    370 <printint+0x30>
+ 395:	75 e9                	jne    380 <printint+0x30>
   if(neg)
- 387:	8b 55 c4             	mov    -0x3c(%ebp),%edx
+ 397:	8b 55 c4             	mov    -0x3c(%ebp),%edx
     buf[i++] = digits[x % base];
- 38a:	89 c8                	mov    %ecx,%eax
- 38c:	8b 75 c0             	mov    -0x40(%ebp),%esi
+ 39a:	89 c8                	mov    %ecx,%eax
+ 39c:	8b 75 c0             	mov    -0x40(%ebp),%esi
   if(neg)
- 38f:	85 d2                	test   %edx,%edx
- 391:	74 08                	je     39b <printint+0x5b>
+ 39f:	85 d2                	test   %edx,%edx
+ 3a1:	74 08                	je     3ab <printint+0x5b>
     buf[i++] = '-';
- 393:	8d 4f 02             	lea    0x2(%edi),%ecx
- 396:	c6 44 05 d8 2d       	movb   $0x2d,-0x28(%ebp,%eax,1)
+ 3a3:	8d 4f 02             	lea    0x2(%edi),%ecx
+ 3a6:	c6 44 05 d8 2d       	movb   $0x2d,-0x28(%ebp,%eax,1)
 
   while(--i >= 0)
- 39b:	8d 79 ff             	lea    -0x1(%ecx),%edi
- 39e:	66 90                	xchg   %ax,%ax
- 3a0:	0f b6 44 3d d8       	movzbl -0x28(%ebp,%edi,1),%eax
- 3a5:	83 ef 01             	sub    $0x1,%edi
+ 3ab:	8d 79 ff             	lea    -0x1(%ecx),%edi
+ 3ae:	66 90                	xchg   %ax,%ax
+ 3b0:	0f b6 44 3d d8       	movzbl -0x28(%ebp,%edi,1),%eax
+ 3b5:	83 ef 01             	sub    $0x1,%edi
   write(fd, &c, 1);
- 3a8:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
- 3af:	00 
- 3b0:	89 5c 24 04          	mov    %ebx,0x4(%esp)
- 3b4:	89 34 24             	mov    %esi,(%esp)
- 3b7:	88 45 d7             	mov    %al,-0x29(%ebp)
- 3ba:	e8 f3 fe ff ff       	call   2b2 <write>
+ 3b8:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+ 3bf:	00 
+ 3c0:	89 5c 24 04          	mov    %ebx,0x4(%esp)
+ 3c4:	89 34 24             	mov    %esi,(%esp)
+ 3c7:	88 45 d7             	mov    %al,-0x29(%ebp)
+ 3ca:	e8 e3 fe ff ff       	call   2b2 <write>
   while(--i >= 0)
- 3bf:	83 ff ff             	cmp    $0xffffffff,%edi
- 3c2:	75 dc                	jne    3a0 <printint+0x60>
+ 3cf:	83 ff ff             	cmp    $0xffffffff,%edi
+ 3d2:	75 dc                	jne    3b0 <printint+0x60>
     putc(fd, buf[i]);
 }
- 3c4:	83 c4 4c             	add    $0x4c,%esp
- 3c7:	5b                   	pop    %ebx
- 3c8:	5e                   	pop    %esi
- 3c9:	5f                   	pop    %edi
- 3ca:	5d                   	pop    %ebp
- 3cb:	c3                   	ret    
- 3cc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 3d4:	83 c4 4c             	add    $0x4c,%esp
+ 3d7:	5b                   	pop    %ebx
+ 3d8:	5e                   	pop    %esi
+ 3d9:	5f                   	pop    %edi
+ 3da:	5d                   	pop    %ebp
+ 3db:	c3                   	ret    
+ 3dc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     x = -xx;
- 3d0:	89 d0                	mov    %edx,%eax
- 3d2:	f7 d8                	neg    %eax
+ 3e0:	89 d0                	mov    %edx,%eax
+ 3e2:	f7 d8                	neg    %eax
     neg = 1;
- 3d4:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
- 3db:	eb 87                	jmp    364 <printint+0x24>
- 3dd:	8d 76 00             	lea    0x0(%esi),%esi
+ 3e4:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
+ 3eb:	eb 87                	jmp    374 <printint+0x24>
+ 3ed:	8d 76 00             	lea    0x0(%esi),%esi
 
-000003e0 <printf>:
+000003f0 <printf>:
 
 // Print to the given fd. Only understands %d, %x, %p, %s.
 void
 printf(int fd, const char *fmt, ...)
 {
- 3e0:	55                   	push   %ebp
- 3e1:	89 e5                	mov    %esp,%ebp
- 3e3:	57                   	push   %edi
+ 3f0:	55                   	push   %ebp
+ 3f1:	89 e5                	mov    %esp,%ebp
+ 3f3:	57                   	push   %edi
   char *s;
   int c, i, state;
   uint *ap;
 
   state = 0;
- 3e4:	31 ff                	xor    %edi,%edi
+ 3f4:	31 ff                	xor    %edi,%edi
 {
- 3e6:	56                   	push   %esi
- 3e7:	53                   	push   %ebx
- 3e8:	83 ec 3c             	sub    $0x3c,%esp
+ 3f6:	56                   	push   %esi
+ 3f7:	53                   	push   %ebx
+ 3f8:	83 ec 3c             	sub    $0x3c,%esp
   ap = (uint*)(void*)&fmt + 1;
   for(i = 0; fmt[i]; i++){
- 3eb:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+ 3fb:	8b 5d 0c             	mov    0xc(%ebp),%ebx
   ap = (uint*)(void*)&fmt + 1;
- 3ee:	8d 45 10             	lea    0x10(%ebp),%eax
+ 3fe:	8d 45 10             	lea    0x10(%ebp),%eax
 {
- 3f1:	8b 75 08             	mov    0x8(%ebp),%esi
+ 401:	8b 75 08             	mov    0x8(%ebp),%esi
   ap = (uint*)(void*)&fmt + 1;
- 3f4:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ 404:	89 45 d4             	mov    %eax,-0x2c(%ebp)
   for(i = 0; fmt[i]; i++){
- 3f7:	0f b6 13             	movzbl (%ebx),%edx
- 3fa:	83 c3 01             	add    $0x1,%ebx
- 3fd:	84 d2                	test   %dl,%dl
- 3ff:	75 39                	jne    43a <printf+0x5a>
- 401:	e9 c2 00 00 00       	jmp    4c8 <printf+0xe8>
- 406:	66 90                	xchg   %ax,%ax
+ 407:	0f b6 13             	movzbl (%ebx),%edx
+ 40a:	83 c3 01             	add    $0x1,%ebx
+ 40d:	84 d2                	test   %dl,%dl
+ 40f:	75 39                	jne    44a <printf+0x5a>
+ 411:	e9 c2 00 00 00       	jmp    4d8 <printf+0xe8>
+ 416:	66 90                	xchg   %ax,%ax
     c = fmt[i] & 0xff;
     if(state == 0){
       if(c == '%'){
- 408:	83 fa 25             	cmp    $0x25,%edx
- 40b:	0f 84 bf 00 00 00    	je     4d0 <printf+0xf0>
+ 418:	83 fa 25             	cmp    $0x25,%edx
+ 41b:	0f 84 bf 00 00 00    	je     4e0 <printf+0xf0>
   write(fd, &c, 1);
- 411:	8d 45 e2             	lea    -0x1e(%ebp),%eax
- 414:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
- 41b:	00 
- 41c:	89 44 24 04          	mov    %eax,0x4(%esp)
- 420:	89 34 24             	mov    %esi,(%esp)
+ 421:	8d 45 e2             	lea    -0x1e(%ebp),%eax
+ 424:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+ 42b:	00 
+ 42c:	89 44 24 04          	mov    %eax,0x4(%esp)
+ 430:	89 34 24             	mov    %esi,(%esp)
         state = '%';
       } else {
         putc(fd, c);
- 423:	88 55 e2             	mov    %dl,-0x1e(%ebp)
+ 433:	88 55 e2             	mov    %dl,-0x1e(%ebp)
   write(fd, &c, 1);
- 426:	e8 87 fe ff ff       	call   2b2 <write>
- 42b:	83 c3 01             	add    $0x1,%ebx
+ 436:	e8 77 fe ff ff       	call   2b2 <write>
+ 43b:	83 c3 01             	add    $0x1,%ebx
   for(i = 0; fmt[i]; i++){
- 42e:	0f b6 53 ff          	movzbl -0x1(%ebx),%edx
- 432:	84 d2                	test   %dl,%dl
- 434:	0f 84 8e 00 00 00    	je     4c8 <printf+0xe8>
+ 43e:	0f b6 53 ff          	movzbl -0x1(%ebx),%edx
+ 442:	84 d2                	test   %dl,%dl
+ 444:	0f 84 8e 00 00 00    	je     4d8 <printf+0xe8>
     if(state == 0){
- 43a:	85 ff                	test   %edi,%edi
+ 44a:	85 ff                	test   %edi,%edi
     c = fmt[i] & 0xff;
- 43c:	0f be c2             	movsbl %dl,%eax
+ 44c:	0f be c2             	movsbl %dl,%eax
     if(state == 0){
- 43f:	74 c7                	je     408 <printf+0x28>
+ 44f:	74 c7                	je     418 <printf+0x28>
       }
     } else if(state == '%'){
- 441:	83 ff 25             	cmp    $0x25,%edi
- 444:	75 e5                	jne    42b <printf+0x4b>
+ 451:	83 ff 25             	cmp    $0x25,%edi
+ 454:	75 e5                	jne    43b <printf+0x4b>
       if(c == 'd'){
- 446:	83 fa 64             	cmp    $0x64,%edx
- 449:	0f 84 31 01 00 00    	je     580 <printf+0x1a0>
+ 456:	83 fa 64             	cmp    $0x64,%edx
+ 459:	0f 84 31 01 00 00    	je     590 <printf+0x1a0>
         printint(fd, *ap, 10, 1);
         ap++;
       } else if(c == 'x' || c == 'p'){
- 44f:	25 f7 00 00 00       	and    $0xf7,%eax
- 454:	83 f8 70             	cmp    $0x70,%eax
- 457:	0f 84 83 00 00 00    	je     4e0 <printf+0x100>
+ 45f:	25 f7 00 00 00       	and    $0xf7,%eax
+ 464:	83 f8 70             	cmp    $0x70,%eax
+ 467:	0f 84 83 00 00 00    	je     4f0 <printf+0x100>
         printint(fd, *ap, 16, 0);
         ap++;
       } else if(c == 's'){
- 45d:	83 fa 73             	cmp    $0x73,%edx
- 460:	0f 84 a2 00 00 00    	je     508 <printf+0x128>
+ 46d:	83 fa 73             	cmp    $0x73,%edx
+ 470:	0f 84 a2 00 00 00    	je     518 <printf+0x128>
           s = "(null)";
         while(*s != 0){
           putc(fd, *s);
           s++;
         }
       } else if(c == 'c'){
- 466:	83 fa 63             	cmp    $0x63,%edx
- 469:	0f 84 35 01 00 00    	je     5a4 <printf+0x1c4>
+ 476:	83 fa 63             	cmp    $0x63,%edx
+ 479:	0f 84 35 01 00 00    	je     5b4 <printf+0x1c4>
         putc(fd, *ap);
         ap++;
       } else if(c == '%'){
- 46f:	83 fa 25             	cmp    $0x25,%edx
- 472:	0f 84 e0 00 00 00    	je     558 <printf+0x178>
+ 47f:	83 fa 25             	cmp    $0x25,%edx
+ 482:	0f 84 e0 00 00 00    	je     568 <printf+0x178>
   write(fd, &c, 1);
- 478:	8d 45 e6             	lea    -0x1a(%ebp),%eax
- 47b:	83 c3 01             	add    $0x1,%ebx
- 47e:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
- 485:	00 
+ 488:	8d 45 e6             	lea    -0x1a(%ebp),%eax
+ 48b:	83 c3 01             	add    $0x1,%ebx
+ 48e:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+ 495:	00 
       } else {
         // Unknown % sequence.  Print it to draw attention.
         putc(fd, '%');
         putc(fd, c);
       }
       state = 0;
- 486:	31 ff                	xor    %edi,%edi
+ 496:	31 ff                	xor    %edi,%edi
   write(fd, &c, 1);
- 488:	89 44 24 04          	mov    %eax,0x4(%esp)
- 48c:	89 34 24             	mov    %esi,(%esp)
- 48f:	89 55 d0             	mov    %edx,-0x30(%ebp)
- 492:	c6 45 e6 25          	movb   $0x25,-0x1a(%ebp)
- 496:	e8 17 fe ff ff       	call   2b2 <write>
+ 498:	89 44 24 04          	mov    %eax,0x4(%esp)
+ 49c:	89 34 24             	mov    %esi,(%esp)
+ 49f:	89 55 d0             	mov    %edx,-0x30(%ebp)
+ 4a2:	c6 45 e6 25          	movb   $0x25,-0x1a(%ebp)
+ 4a6:	e8 07 fe ff ff       	call   2b2 <write>
         putc(fd, c);
- 49b:	8b 55 d0             	mov    -0x30(%ebp),%edx
+ 4ab:	8b 55 d0             	mov    -0x30(%ebp),%edx
   write(fd, &c, 1);
- 49e:	8d 45 e7             	lea    -0x19(%ebp),%eax
- 4a1:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
- 4a8:	00 
- 4a9:	89 44 24 04          	mov    %eax,0x4(%esp)
- 4ad:	89 34 24             	mov    %esi,(%esp)
+ 4ae:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 4b1:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+ 4b8:	00 
+ 4b9:	89 44 24 04          	mov    %eax,0x4(%esp)
+ 4bd:	89 34 24             	mov    %esi,(%esp)
         putc(fd, c);
- 4b0:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 4c0:	88 55 e7             	mov    %dl,-0x19(%ebp)
   write(fd, &c, 1);
- 4b3:	e8 fa fd ff ff       	call   2b2 <write>
+ 4c3:	e8 ea fd ff ff       	call   2b2 <write>
   for(i = 0; fmt[i]; i++){
- 4b8:	0f b6 53 ff          	movzbl -0x1(%ebx),%edx
- 4bc:	84 d2                	test   %dl,%dl
- 4be:	0f 85 76 ff ff ff    	jne    43a <printf+0x5a>
- 4c4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 4c8:	0f b6 53 ff          	movzbl -0x1(%ebx),%edx
+ 4cc:	84 d2                	test   %dl,%dl
+ 4ce:	0f 85 76 ff ff ff    	jne    44a <printf+0x5a>
+ 4d4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     }
   }
 }
- 4c8:	83 c4 3c             	add    $0x3c,%esp
- 4cb:	5b                   	pop    %ebx
- 4cc:	5e                   	pop    %esi
- 4cd:	5f                   	pop    %edi
- 4ce:	5d                   	pop    %ebp
- 4cf:	c3                   	ret    
+ 4d8:	83 c4 3c             	add    $0x3c,%esp
+ 4db:	5b                   	pop    %ebx
+ 4dc:	5e                   	pop    %esi
+ 4dd:	5f                   	pop    %edi
+ 4de:	5d                   	pop    %ebp
+ 4df:	c3                   	ret    
         state = '%';
- 4d0:	bf 25 00 00 00       	mov    $0x25,%edi
- 4d5:	e9 51 ff ff ff       	jmp    42b <printf+0x4b>
- 4da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 4e0:	bf 25 00 00 00       	mov    $0x25,%edi
+ 4e5:	e9 51 ff ff ff       	jmp    43b <printf+0x4b>
+ 4ea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         printint(fd, *ap, 16, 0);
- 4e0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
- 4e3:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 4f0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+ 4f3:	b9 10 00 00 00       	mov    $0x10,%ecx
       state = 0;
- 4e8:	31 ff                	xor    %edi,%edi
+ 4f8:	31 ff                	xor    %edi,%edi
         printint(fd, *ap, 16, 0);
- 4ea:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
- 4f1:	8b 10                	mov    (%eax),%edx
- 4f3:	89 f0                	mov    %esi,%eax
- 4f5:	e8 46 fe ff ff       	call   340 <printint>
+ 4fa:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+ 501:	8b 10                	mov    (%eax),%edx
+ 503:	89 f0                	mov    %esi,%eax
+ 505:	e8 46 fe ff ff       	call   350 <printint>
         ap++;
- 4fa:	83 45 d4 04          	addl   $0x4,-0x2c(%ebp)
- 4fe:	e9 28 ff ff ff       	jmp    42b <printf+0x4b>
- 503:	90                   	nop
- 504:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 50a:	83 45 d4 04          	addl   $0x4,-0x2c(%ebp)
+ 50e:	e9 28 ff ff ff       	jmp    43b <printf+0x4b>
+ 513:	90                   	nop
+ 514:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
         s = (char*)*ap;
- 508:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+ 518:	8b 45 d4             	mov    -0x2c(%ebp),%eax
         ap++;
- 50b:	83 45 d4 04          	addl   $0x4,-0x2c(%ebp)
+ 51b:	83 45 d4 04          	addl   $0x4,-0x2c(%ebp)
         s = (char*)*ap;
- 50f:	8b 38                	mov    (%eax),%edi
+ 51f:	8b 38                	mov    (%eax),%edi
           s = "(null)";
- 511:	b8 5a 07 00 00       	mov    $0x75a,%eax
- 516:	85 ff                	test   %edi,%edi
- 518:	0f 44 f8             	cmove  %eax,%edi
+ 521:	b8 6a 07 00 00       	mov    $0x76a,%eax
+ 526:	85 ff                	test   %edi,%edi
+ 528:	0f 44 f8             	cmove  %eax,%edi
         while(*s != 0){
- 51b:	0f b6 07             	movzbl (%edi),%eax
- 51e:	84 c0                	test   %al,%al
- 520:	74 2a                	je     54c <printf+0x16c>
- 522:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
- 528:	88 45 e3             	mov    %al,-0x1d(%ebp)
+ 52b:	0f b6 07             	movzbl (%edi),%eax
+ 52e:	84 c0                	test   %al,%al
+ 530:	74 2a                	je     55c <printf+0x16c>
+ 532:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 538:	88 45 e3             	mov    %al,-0x1d(%ebp)
   write(fd, &c, 1);
- 52b:	8d 45 e3             	lea    -0x1d(%ebp),%eax
+ 53b:	8d 45 e3             	lea    -0x1d(%ebp),%eax
           s++;
- 52e:	83 c7 01             	add    $0x1,%edi
+ 53e:	83 c7 01             	add    $0x1,%edi
   write(fd, &c, 1);
- 531:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
- 538:	00 
- 539:	89 44 24 04          	mov    %eax,0x4(%esp)
- 53d:	89 34 24             	mov    %esi,(%esp)
- 540:	e8 6d fd ff ff       	call   2b2 <write>
+ 541:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+ 548:	00 
+ 549:	89 44 24 04          	mov    %eax,0x4(%esp)
+ 54d:	89 34 24             	mov    %esi,(%esp)
+ 550:	e8 5d fd ff ff       	call   2b2 <write>
         while(*s != 0){
- 545:	0f b6 07             	movzbl (%edi),%eax
- 548:	84 c0                	test   %al,%al
- 54a:	75 dc                	jne    528 <printf+0x148>
+ 555:	0f b6 07             	movzbl (%edi),%eax
+ 558:	84 c0                	test   %al,%al
+ 55a:	75 dc                	jne    538 <printf+0x148>
       state = 0;
- 54c:	31 ff                	xor    %edi,%edi
- 54e:	e9 d8 fe ff ff       	jmp    42b <printf+0x4b>
- 553:	90                   	nop
- 554:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 55c:	31 ff                	xor    %edi,%edi
+ 55e:	e9 d8 fe ff ff       	jmp    43b <printf+0x4b>
+ 563:	90                   	nop
+ 564:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   write(fd, &c, 1);
- 558:	8d 45 e5             	lea    -0x1b(%ebp),%eax
+ 568:	8d 45 e5             	lea    -0x1b(%ebp),%eax
       state = 0;
- 55b:	31 ff                	xor    %edi,%edi
+ 56b:	31 ff                	xor    %edi,%edi
   write(fd, &c, 1);
- 55d:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
- 564:	00 
- 565:	89 44 24 04          	mov    %eax,0x4(%esp)
- 569:	89 34 24             	mov    %esi,(%esp)
- 56c:	c6 45 e5 25          	movb   $0x25,-0x1b(%ebp)
- 570:	e8 3d fd ff ff       	call   2b2 <write>
- 575:	e9 b1 fe ff ff       	jmp    42b <printf+0x4b>
- 57a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 56d:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+ 574:	00 
+ 575:	89 44 24 04          	mov    %eax,0x4(%esp)
+ 579:	89 34 24             	mov    %esi,(%esp)
+ 57c:	c6 45 e5 25          	movb   $0x25,-0x1b(%ebp)
+ 580:	e8 2d fd ff ff       	call   2b2 <write>
+ 585:	e9 b1 fe ff ff       	jmp    43b <printf+0x4b>
+ 58a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         printint(fd, *ap, 10, 1);
- 580:	8b 45 d4             	mov    -0x2c(%ebp),%eax
- 583:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 590:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+ 593:	b9 0a 00 00 00       	mov    $0xa,%ecx
       state = 0;
- 588:	66 31 ff             	xor    %di,%di
+ 598:	66 31 ff             	xor    %di,%di
         printint(fd, *ap, 10, 1);
- 58b:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
- 592:	8b 10                	mov    (%eax),%edx
- 594:	89 f0                	mov    %esi,%eax
- 596:	e8 a5 fd ff ff       	call   340 <printint>
+ 59b:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+ 5a2:	8b 10                	mov    (%eax),%edx
+ 5a4:	89 f0                	mov    %esi,%eax
+ 5a6:	e8 a5 fd ff ff       	call   350 <printint>
         ap++;
- 59b:	83 45 d4 04          	addl   $0x4,-0x2c(%ebp)
- 59f:	e9 87 fe ff ff       	jmp    42b <printf+0x4b>
+ 5ab:	83 45 d4 04          	addl   $0x4,-0x2c(%ebp)
+ 5af:	e9 87 fe ff ff       	jmp    43b <printf+0x4b>
         putc(fd, *ap);
- 5a4:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+ 5b4:	8b 45 d4             	mov    -0x2c(%ebp),%eax
       state = 0;
- 5a7:	31 ff                	xor    %edi,%edi
+ 5b7:	31 ff                	xor    %edi,%edi
         putc(fd, *ap);
- 5a9:	8b 00                	mov    (%eax),%eax
+ 5b9:	8b 00                	mov    (%eax),%eax
   write(fd, &c, 1);
- 5ab:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
- 5b2:	00 
- 5b3:	89 34 24             	mov    %esi,(%esp)
+ 5bb:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+ 5c2:	00 
+ 5c3:	89 34 24             	mov    %esi,(%esp)
         putc(fd, *ap);
- 5b6:	88 45 e4             	mov    %al,-0x1c(%ebp)
+ 5c6:	88 45 e4             	mov    %al,-0x1c(%ebp)
   write(fd, &c, 1);
- 5b9:	8d 45 e4             	lea    -0x1c(%ebp),%eax
- 5bc:	89 44 24 04          	mov    %eax,0x4(%esp)
- 5c0:	e8 ed fc ff ff       	call   2b2 <write>
+ 5c9:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+ 5cc:	89 44 24 04          	mov    %eax,0x4(%esp)
+ 5d0:	e8 dd fc ff ff       	call   2b2 <write>
         ap++;
- 5c5:	83 45 d4 04          	addl   $0x4,-0x2c(%ebp)
- 5c9:	e9 5d fe ff ff       	jmp    42b <printf+0x4b>
- 5ce:	66 90                	xchg   %ax,%ax
+ 5d5:	83 45 d4 04          	addl   $0x4,-0x2c(%ebp)
+ 5d9:	e9 5d fe ff ff       	jmp    43b <printf+0x4b>
+ 5de:	66 90                	xchg   %ax,%ax
 
-000005d0 <free>:
+000005e0 <free>:
 static Header base;
 static Header *freep;
 
 void
 free(void *ap)
 {
- 5d0:	55                   	push   %ebp
+ 5e0:	55                   	push   %ebp
   Header *bp, *p;
 
   bp = (Header*)ap - 1;
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 5d1:	a1 dc 09 00 00       	mov    0x9dc,%eax
+ 5e1:	a1 ec 09 00 00       	mov    0x9ec,%eax
 {
- 5d6:	89 e5                	mov    %esp,%ebp
- 5d8:	57                   	push   %edi
- 5d9:	56                   	push   %esi
- 5da:	53                   	push   %ebx
- 5db:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 5e6:	89 e5                	mov    %esp,%ebp
+ 5e8:	57                   	push   %edi
+ 5e9:	56                   	push   %esi
+ 5ea:	53                   	push   %ebx
+ 5eb:	8b 5d 08             	mov    0x8(%ebp),%ebx
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 5de:	8b 08                	mov    (%eax),%ecx
+ 5ee:	8b 08                	mov    (%eax),%ecx
   bp = (Header*)ap - 1;
- 5e0:	8d 53 f8             	lea    -0x8(%ebx),%edx
+ 5f0:	8d 53 f8             	lea    -0x8(%ebx),%edx
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 5e3:	39 d0                	cmp    %edx,%eax
- 5e5:	72 11                	jb     5f8 <free+0x28>
- 5e7:	90                   	nop
+ 5f3:	39 d0                	cmp    %edx,%eax
+ 5f5:	72 11                	jb     608 <free+0x28>
+ 5f7:	90                   	nop
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 5e8:	39 c8                	cmp    %ecx,%eax
- 5ea:	72 04                	jb     5f0 <free+0x20>
- 5ec:	39 ca                	cmp    %ecx,%edx
- 5ee:	72 10                	jb     600 <free+0x30>
- 5f0:	89 c8                	mov    %ecx,%eax
+ 5f8:	39 c8                	cmp    %ecx,%eax
+ 5fa:	72 04                	jb     600 <free+0x20>
+ 5fc:	39 ca                	cmp    %ecx,%edx
+ 5fe:	72 10                	jb     610 <free+0x30>
+ 600:	89 c8                	mov    %ecx,%eax
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 5f2:	39 d0                	cmp    %edx,%eax
+ 602:	39 d0                	cmp    %edx,%eax
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 5f4:	8b 08                	mov    (%eax),%ecx
+ 604:	8b 08                	mov    (%eax),%ecx
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 5f6:	73 f0                	jae    5e8 <free+0x18>
- 5f8:	39 ca                	cmp    %ecx,%edx
- 5fa:	72 04                	jb     600 <free+0x30>
+ 606:	73 f0                	jae    5f8 <free+0x18>
+ 608:	39 ca                	cmp    %ecx,%edx
+ 60a:	72 04                	jb     610 <free+0x30>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 5fc:	39 c8                	cmp    %ecx,%eax
- 5fe:	72 f0                	jb     5f0 <free+0x20>
+ 60c:	39 c8                	cmp    %ecx,%eax
+ 60e:	72 f0                	jb     600 <free+0x20>
       break;
   if(bp + bp->s.size == p->s.ptr){
- 600:	8b 73 fc             	mov    -0x4(%ebx),%esi
- 603:	8d 3c f2             	lea    (%edx,%esi,8),%edi
- 606:	39 cf                	cmp    %ecx,%edi
- 608:	74 1e                	je     628 <free+0x58>
+ 610:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 613:	8d 3c f2             	lea    (%edx,%esi,8),%edi
+ 616:	39 cf                	cmp    %ecx,%edi
+ 618:	74 1e                	je     638 <free+0x58>
     bp->s.size += p->s.ptr->s.size;
     bp->s.ptr = p->s.ptr->s.ptr;
   } else
     bp->s.ptr = p->s.ptr;
- 60a:	89 4b f8             	mov    %ecx,-0x8(%ebx)
+ 61a:	89 4b f8             	mov    %ecx,-0x8(%ebx)
   if(p + p->s.size == bp){
- 60d:	8b 48 04             	mov    0x4(%eax),%ecx
- 610:	8d 34 c8             	lea    (%eax,%ecx,8),%esi
- 613:	39 f2                	cmp    %esi,%edx
- 615:	74 28                	je     63f <free+0x6f>
+ 61d:	8b 48 04             	mov    0x4(%eax),%ecx
+ 620:	8d 34 c8             	lea    (%eax,%ecx,8),%esi
+ 623:	39 f2                	cmp    %esi,%edx
+ 625:	74 28                	je     64f <free+0x6f>
     p->s.size += bp->s.size;
     p->s.ptr = bp->s.ptr;
   } else
     p->s.ptr = bp;
- 617:	89 10                	mov    %edx,(%eax)
+ 627:	89 10                	mov    %edx,(%eax)
   freep = p;
- 619:	a3 dc 09 00 00       	mov    %eax,0x9dc
+ 629:	a3 ec 09 00 00       	mov    %eax,0x9ec
 }
- 61e:	5b                   	pop    %ebx
- 61f:	5e                   	pop    %esi
- 620:	5f                   	pop    %edi
- 621:	5d                   	pop    %ebp
- 622:	c3                   	ret    
- 623:	90                   	nop
- 624:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 62e:	5b                   	pop    %ebx
+ 62f:	5e                   	pop    %esi
+ 630:	5f                   	pop    %edi
+ 631:	5d                   	pop    %ebp
+ 632:	c3                   	ret    
+ 633:	90                   	nop
+ 634:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     bp->s.size += p->s.ptr->s.size;
- 628:	03 71 04             	add    0x4(%ecx),%esi
- 62b:	89 73 fc             	mov    %esi,-0x4(%ebx)
+ 638:	03 71 04             	add    0x4(%ecx),%esi
+ 63b:	89 73 fc             	mov    %esi,-0x4(%ebx)
     bp->s.ptr = p->s.ptr->s.ptr;
- 62e:	8b 08                	mov    (%eax),%ecx
- 630:	8b 09                	mov    (%ecx),%ecx
- 632:	89 4b f8             	mov    %ecx,-0x8(%ebx)
+ 63e:	8b 08                	mov    (%eax),%ecx
+ 640:	8b 09                	mov    (%ecx),%ecx
+ 642:	89 4b f8             	mov    %ecx,-0x8(%ebx)
   if(p + p->s.size == bp){
- 635:	8b 48 04             	mov    0x4(%eax),%ecx
- 638:	8d 34 c8             	lea    (%eax,%ecx,8),%esi
- 63b:	39 f2                	cmp    %esi,%edx
- 63d:	75 d8                	jne    617 <free+0x47>
+ 645:	8b 48 04             	mov    0x4(%eax),%ecx
+ 648:	8d 34 c8             	lea    (%eax,%ecx,8),%esi
+ 64b:	39 f2                	cmp    %esi,%edx
+ 64d:	75 d8                	jne    627 <free+0x47>
     p->s.size += bp->s.size;
- 63f:	03 4b fc             	add    -0x4(%ebx),%ecx
+ 64f:	03 4b fc             	add    -0x4(%ebx),%ecx
   freep = p;
- 642:	a3 dc 09 00 00       	mov    %eax,0x9dc
+ 652:	a3 ec 09 00 00       	mov    %eax,0x9ec
     p->s.size += bp->s.size;
- 647:	89 48 04             	mov    %ecx,0x4(%eax)
+ 657:	89 48 04             	mov    %ecx,0x4(%eax)
     p->s.ptr = bp->s.ptr;
- 64a:	8b 53 f8             	mov    -0x8(%ebx),%edx
- 64d:	89 10                	mov    %edx,(%eax)
+ 65a:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 65d:	89 10                	mov    %edx,(%eax)
 }
- 64f:	5b                   	pop    %ebx
- 650:	5e                   	pop    %esi
- 651:	5f                   	pop    %edi
- 652:	5d                   	pop    %ebp
- 653:	c3                   	ret    
- 654:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
- 65a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
-
-00000660 <malloc>:
+ 65f:	5b                   	pop    %ebx
+ 660:	5e                   	pop    %esi
+ 661:	5f                   	pop    %edi
+ 662:	5d                   	pop    %ebp
+ 663:	c3                   	ret    
+ 664:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 66a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+00000670 <malloc>:
   return freep;
 }
 
 void*
 malloc(uint nbytes)
 {
- 660:	55                   	push   %ebp
- 661:	89 e5                	mov    %esp,%ebp
- 663:	57                   	push   %edi
- 664:	56                   	push   %esi
- 665:	53                   	push   %ebx
- 666:	83 ec 1c             	sub    $0x1c,%esp
+ 670:	55                   	push   %ebp
+ 671:	89 e5                	mov    %esp,%ebp
+ 673:	57                   	push   %edi
+ 674:	56                   	push   %esi
+ 675:	53                   	push   %ebx
+ 676:	83 ec 1c             	sub    $0x1c,%esp
   Header *p, *prevp;
   uint nunits;
 
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 669:	8b 45 08             	mov    0x8(%ebp),%eax
+ 679:	8b 45 08             	mov    0x8(%ebp),%eax
   if((prevp = freep) == 0){
- 66c:	8b 1d dc 09 00 00    	mov    0x9dc,%ebx
+ 67c:	8b 1d ec 09 00 00    	mov    0x9ec,%ebx
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 672:	8d 48 07             	lea    0x7(%eax),%ecx
- 675:	c1 e9 03             	shr    $0x3,%ecx
+ 682:	8d 48 07             	lea    0x7(%eax),%ecx
+ 685:	c1 e9 03             	shr    $0x3,%ecx
   if((prevp = freep) == 0){
- 678:	85 db                	test   %ebx,%ebx
+ 688:	85 db                	test   %ebx,%ebx
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 67a:	8d 71 01             	lea    0x1(%ecx),%esi
+ 68a:	8d 71 01             	lea    0x1(%ecx),%esi
   if((prevp = freep) == 0){
- 67d:	0f 84 9b 00 00 00    	je     71e <malloc+0xbe>
- 683:	8b 13                	mov    (%ebx),%edx
- 685:	8b 7a 04             	mov    0x4(%edx),%edi
+ 68d:	0f 84 9b 00 00 00    	je     72e <malloc+0xbe>
+ 693:	8b 13                	mov    (%ebx),%edx
+ 695:	8b 7a 04             	mov    0x4(%edx),%edi
     base.s.ptr = freep = prevp = &base;
     base.s.size = 0;
   }
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
     if(p->s.size >= nunits){
- 688:	39 fe                	cmp    %edi,%esi
- 68a:	76 64                	jbe    6f0 <malloc+0x90>
- 68c:	8d 04 f5 00 00 00 00 	lea    0x0(,%esi,8),%eax
+ 698:	39 fe                	cmp    %edi,%esi
+ 69a:	76 64                	jbe    700 <malloc+0x90>
+ 69c:	8d 04 f5 00 00 00 00 	lea    0x0(,%esi,8),%eax
   if(nu < 4096)
- 693:	bb 00 80 00 00       	mov    $0x8000,%ebx
- 698:	89 45 e4             	mov    %eax,-0x1c(%ebp)
- 69b:	eb 0e                	jmp    6ab <malloc+0x4b>
- 69d:	8d 76 00             	lea    0x0(%esi),%esi
+ 6a3:	bb 00 80 00 00       	mov    $0x8000,%ebx
+ 6a8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+ 6ab:	eb 0e                	jmp    6bb <malloc+0x4b>
+ 6ad:	8d 76 00             	lea    0x0(%esi),%esi
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 6a0:	8b 02                	mov    (%edx),%eax
+ 6b0:	8b 02                	mov    (%edx),%eax
     if(p->s.size >= nunits){
- 6a2:	8b 78 04             	mov    0x4(%eax),%edi
- 6a5:	39 fe                	cmp    %edi,%esi
- 6a7:	76 4f                	jbe    6f8 <malloc+0x98>
- 6a9:	89 c2                	mov    %eax,%edx
+ 6b2:	8b 78 04             	mov    0x4(%eax),%edi
+ 6b5:	39 fe                	cmp    %edi,%esi
+ 6b7:	76 4f                	jbe    708 <malloc+0x98>
+ 6b9:	89 c2                	mov    %eax,%edx
         p->s.size = nunits;
       }
       freep = prevp;
       return (void*)(p + 1);
     }
     if(p == freep)
- 6ab:	3b 15 dc 09 00 00    	cmp    0x9dc,%edx
- 6b1:	75 ed                	jne    6a0 <malloc+0x40>
+ 6bb:	3b 15 ec 09 00 00    	cmp    0x9ec,%edx
+ 6c1:	75 ed                	jne    6b0 <malloc+0x40>
   if(nu < 4096)
- 6b3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
- 6b6:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
- 6bc:	bf 00 10 00 00       	mov    $0x1000,%edi
- 6c1:	0f 43 fe             	cmovae %esi,%edi
- 6c4:	0f 42 c3             	cmovb  %ebx,%eax
+ 6c3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+ 6c6:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+ 6cc:	bf 00 10 00 00       	mov    $0x1000,%edi
+ 6d1:	0f 43 fe             	cmovae %esi,%edi
+ 6d4:	0f 42 c3             	cmovb  %ebx,%eax
   p = sbrk(nu * sizeof(Header));
- 6c7:	89 04 24             	mov    %eax,(%esp)
- 6ca:	e8 4b fc ff ff       	call   31a <sbrk>
+ 6d7:	89 04 24             	mov    %eax,(%esp)
+ 6da:	e8 3b fc ff ff       	call   31a <sbrk>
   if(p == (char*)-1)
- 6cf:	83 f8 ff             	cmp    $0xffffffff,%eax
- 6d2:	74 18                	je     6ec <malloc+0x8c>
+ 6df:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 6e2:	74 18                	je     6fc <malloc+0x8c>
   hp->s.size = nu;
- 6d4:	89 78 04             	mov    %edi,0x4(%eax)
+ 6e4:	89 78 04             	mov    %edi,0x4(%eax)
   free((void*)(hp + 1));
- 6d7:	83 c0 08             	add    $0x8,%eax
- 6da:	89 04 24             	mov    %eax,(%esp)
- 6dd:	e8 ee fe ff ff       	call   5d0 <free>
+ 6e7:	83 c0 08             	add    $0x8,%eax
+ 6ea:	89 04 24             	mov    %eax,(%esp)
+ 6ed:	e8 ee fe ff ff       	call   5e0 <free>
   return freep;
- 6e2:	8b 15 dc 09 00 00    	mov    0x9dc,%edx
+ 6f2:	8b 15 ec 09 00 00    	mov    0x9ec,%edx
       if((p = morecore(nunits)) == 0)
- 6e8:	85 d2                	test   %edx,%edx
- 6ea:	75 b4                	jne    6a0 <malloc+0x40>
+ 6f8:	85 d2                	test   %edx,%edx
+ 6fa:	75 b4                	jne    6b0 <malloc+0x40>
         return 0;
- 6ec:	31 c0                	xor    %eax,%eax
- 6ee:	eb 20                	jmp    710 <malloc+0xb0>
+ 6fc:	31 c0                	xor    %eax,%eax
+ 6fe:	eb 20                	jmp    720 <malloc+0xb0>
     if(p->s.size >= nunits){
- 6f0:	89 d0                	mov    %edx,%eax
- 6f2:	89 da                	mov    %ebx,%edx
- 6f4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 700:	89 d0                	mov    %edx,%eax
+ 702:	89 da                	mov    %ebx,%edx
+ 704:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
       if(p->s.size == nunits)
- 6f8:	39 fe                	cmp    %edi,%esi
- 6fa:	74 1c                	je     718 <malloc+0xb8>
+ 708:	39 fe                	cmp    %edi,%esi
+ 70a:	74 1c                	je     728 <malloc+0xb8>
         p->s.size -= nunits;
- 6fc:	29 f7                	sub    %esi,%edi
- 6fe:	89 78 04             	mov    %edi,0x4(%eax)
+ 70c:	29 f7                	sub    %esi,%edi
+ 70e:	89 78 04             	mov    %edi,0x4(%eax)
         p += p->s.size;
- 701:	8d 04 f8             	lea    (%eax,%edi,8),%eax
+ 711:	8d 04 f8             	lea    (%eax,%edi,8),%eax
         p->s.size = nunits;
- 704:	89 70 04             	mov    %esi,0x4(%eax)
+ 714:	89 70 04             	mov    %esi,0x4(%eax)
       freep = prevp;
- 707:	89 15 dc 09 00 00    	mov    %edx,0x9dc
+ 717:	89 15 ec 09 00 00    	mov    %edx,0x9ec
       return (void*)(p + 1);
- 70d:	83 c0 08             	add    $0x8,%eax
+ 71d:	83 c0 08             	add    $0x8,%eax
   }
 }
- 710:	83 c4 1c             	add    $0x1c,%esp
- 713:	5b                   	pop    %ebx
- 714:	5e                   	pop    %esi
- 715:	5f                   	pop    %edi
- 716:	5d                   	pop    %ebp
- 717:	c3                   	ret    
+ 720:	83 c4 1c             	add    $0x1c,%esp
+ 723:	5b                   	pop    %ebx
+ 724:	5e                   	pop    %esi
+ 725:	5f                   	pop    %edi
+ 726:	5d                   	pop    %ebp
+ 727:	c3                   	ret    
         prevp->s.ptr = p->s.ptr;
- 718:	8b 08                	mov    (%eax),%ecx
- 71a:	89 0a                	mov    %ecx,(%edx)
- 71c:	eb e9                	jmp    707 <malloc+0xa7>
+ 728:	8b 08                	mov    (%eax),%ecx
+ 72a:	89 0a                	mov    %ecx,(%edx)
+ 72c:	eb e9                	jmp    717 <malloc+0xa7>
     base.s.ptr = freep = prevp = &base;
- 71e:	c7 05 dc 09 00 00 e0 	movl   $0x9e0,0x9dc
- 725:	09 00 00 
+ 72e:	c7 05 ec 09 00 00 f0 	movl   $0x9f0,0x9ec
+ 735:	09 00 00 
     base.s.size = 0;
- 728:	ba e0 09 00 00       	mov    $0x9e0,%edx
+ 738:	ba f0 09 00 00       	mov    $0x9f0,%edx
     base.s.ptr = freep = prevp = &base;
- 72d:	c7 05 e0 09 00 00 e0 	movl   $0x9e0,0x9e0
- 734:	09 00 00 
+ 73d:	c7 05 f0 09 00 00 f0 	movl   $0x9f0,0x9f0
+ 744:	09 00 00 
     base.s.size = 0;
- 737:	c7 05 e4 09 00 00 00 	movl   $0x0,0x9e4
- 73e:	00 00 00 
- 741:	e9 46 ff ff ff       	jmp    68c <malloc+0x2c>
+ 747:	c7 05 f4 09 00 00 00 	movl   $0x0,0x9f4
+ 74e:	00 00 00 
+ 751:	e9 46 ff ff ff       	jmp    69c <malloc+0x2c>
diff --git a/kill.o b/kill.o
index be58abe..a1f0f48 100644
Binary files a/kill.o and b/kill.o differ
diff --git a/kill.sym b/kill.sym
index 6751827..cbacf10 100644
--- a/kill.sym
+++ b/kill.sym
@@ -1,7 +1,7 @@
 00000000 .text
-00000746 .rodata
-00000774 .eh_frame
-000009dc .bss
+00000756 .rodata
+00000784 .eh_frame
+000009ec .bss
 00000000 .comment
 00000000 .debug_aranges
 00000000 .debug_info
@@ -13,25 +13,27 @@
 00000000 kill.c
 00000000 ulib.c
 00000000 printf.c
-00000340 printint
-00000761 digits.1358
+00000350 printint
+00000771 digits.1362
 00000000 umalloc.c
-000009dc freep
-000009e0 base
+000009ec freep
+000009f0 base
 00000070 strcpy
 00000332 waitpid
-000003e0 printf
+000003f0 printf
 00000260 memmove
 000002da mknod
 00000180 gets
 00000312 getpid
-00000660 malloc
+00000670 malloc
 00000322 sleep
 000002a2 pipe
+0000033a setPrior
 000002b2 write
 000002ea fstat
 000002c2 kill
 00000302 chdir
+00000342 getPrior
 000002ca exec
 0000029a wait
 000002aa read
@@ -39,14 +41,14 @@
 0000028a fork
 0000031a sbrk
 0000032a uptime
-000009dc __bss_start
+000009ec __bss_start
 00000120 memset
 00000000 main
 000000a0 strcmp
 0000030a dup
 000001e0 stat
-000009dc _edata
-000009e8 _end
+000009ec _edata
+000009f8 _end
 000002f2 link
 00000292 exit
 00000230 atoi
@@ -55,4 +57,4 @@
 00000140 strchr
 000002fa mkdir
 000002ba close
-000005d0 free
+000005e0 free
diff --git a/lapic.o b/lapic.o
index 2c33110..9226cac 100644
Binary files a/lapic.o and b/lapic.o differ
diff --git a/ln.asm b/ln.asm
index bce26f4..1a67eb5 100644
--- a/ln.asm
+++ b/ln.asm
@@ -21,10 +21,10 @@ main(int argc, char *argv[])
    d:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
   11:	74 20                	je     33 <main+0x33>
     printf(2, "Usage: ln old new\n");
-  13:	c7 44 24 04 56 07 00 	movl   $0x756,0x4(%esp)
+  13:	c7 44 24 04 66 07 00 	movl   $0x766,0x4(%esp)
   1a:	00 
   1b:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-  22:	e8 c9 03 00 00       	call   3f0 <printf>
+  22:	e8 d9 03 00 00       	call   400 <printf>
     exit(0);
   27:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
   2e:	e8 6f 02 00 00       	call   2a2 <exit>
@@ -45,11 +45,11 @@ main(int argc, char *argv[])
   55:	8b 43 08             	mov    0x8(%ebx),%eax
   58:	89 44 24 0c          	mov    %eax,0xc(%esp)
   5c:	8b 43 04             	mov    0x4(%ebx),%eax
-  5f:	c7 44 24 04 69 07 00 	movl   $0x769,0x4(%esp)
+  5f:	c7 44 24 04 79 07 00 	movl   $0x779,0x4(%esp)
   66:	00 
   67:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
   6e:	89 44 24 08          	mov    %eax,0x8(%esp)
-  72:	e8 79 03 00 00       	call   3f0 <printf>
+  72:	e8 89 03 00 00       	call   400 <printf>
   77:	eb d0                	jmp    49 <main+0x49>
   79:	66 90                	xchg   %ax,%ax
   7b:	66 90                	xchg   %ax,%ax
@@ -570,580 +570,592 @@ SYSCALL(uptime)
  341:	c3                   	ret    
 
 00000342 <waitpid>:
+SYSCALL(waitpid)
  342:	b8 16 00 00 00       	mov    $0x16,%eax
  347:	cd 40                	int    $0x40
  349:	c3                   	ret    
- 34a:	66 90                	xchg   %ax,%ax
- 34c:	66 90                	xchg   %ax,%ax
- 34e:	66 90                	xchg   %ax,%ax
 
-00000350 <printint>:
+0000034a <setPrior>:
+SYSCALL(setPrior)
+ 34a:	b8 17 00 00 00       	mov    $0x17,%eax
+ 34f:	cd 40                	int    $0x40
+ 351:	c3                   	ret    
+
+00000352 <getPrior>:
+ 352:	b8 18 00 00 00       	mov    $0x18,%eax
+ 357:	cd 40                	int    $0x40
+ 359:	c3                   	ret    
+ 35a:	66 90                	xchg   %ax,%ax
+ 35c:	66 90                	xchg   %ax,%ax
+ 35e:	66 90                	xchg   %ax,%ax
+
+00000360 <printint>:
   write(fd, &c, 1);
 }
 
 static void
 printint(int fd, int xx, int base, int sgn)
 {
- 350:	55                   	push   %ebp
- 351:	89 e5                	mov    %esp,%ebp
- 353:	57                   	push   %edi
- 354:	56                   	push   %esi
- 355:	89 c6                	mov    %eax,%esi
- 357:	53                   	push   %ebx
- 358:	83 ec 4c             	sub    $0x4c,%esp
+ 360:	55                   	push   %ebp
+ 361:	89 e5                	mov    %esp,%ebp
+ 363:	57                   	push   %edi
+ 364:	56                   	push   %esi
+ 365:	89 c6                	mov    %eax,%esi
+ 367:	53                   	push   %ebx
+ 368:	83 ec 4c             	sub    $0x4c,%esp
   char buf[16];
   int i, neg;
   uint x;
 
   neg = 0;
   if(sgn && xx < 0){
- 35b:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 35e:	85 db                	test   %ebx,%ebx
- 360:	74 09                	je     36b <printint+0x1b>
- 362:	89 d0                	mov    %edx,%eax
- 364:	c1 e8 1f             	shr    $0x1f,%eax
- 367:	84 c0                	test   %al,%al
- 369:	75 75                	jne    3e0 <printint+0x90>
+ 36b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 36e:	85 db                	test   %ebx,%ebx
+ 370:	74 09                	je     37b <printint+0x1b>
+ 372:	89 d0                	mov    %edx,%eax
+ 374:	c1 e8 1f             	shr    $0x1f,%eax
+ 377:	84 c0                	test   %al,%al
+ 379:	75 75                	jne    3f0 <printint+0x90>
     neg = 1;
     x = -xx;
   } else {
     x = xx;
- 36b:	89 d0                	mov    %edx,%eax
+ 37b:	89 d0                	mov    %edx,%eax
   neg = 0;
- 36d:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
- 374:	89 75 c0             	mov    %esi,-0x40(%ebp)
+ 37d:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
+ 384:	89 75 c0             	mov    %esi,-0x40(%ebp)
   }
 
   i = 0;
- 377:	31 ff                	xor    %edi,%edi
- 379:	89 ce                	mov    %ecx,%esi
- 37b:	8d 5d d7             	lea    -0x29(%ebp),%ebx
- 37e:	eb 02                	jmp    382 <printint+0x32>
+ 387:	31 ff                	xor    %edi,%edi
+ 389:	89 ce                	mov    %ecx,%esi
+ 38b:	8d 5d d7             	lea    -0x29(%ebp),%ebx
+ 38e:	eb 02                	jmp    392 <printint+0x32>
   do{
     buf[i++] = digits[x % base];
- 380:	89 cf                	mov    %ecx,%edi
- 382:	31 d2                	xor    %edx,%edx
- 384:	f7 f6                	div    %esi
- 386:	8d 4f 01             	lea    0x1(%edi),%ecx
- 389:	0f b6 92 84 07 00 00 	movzbl 0x784(%edx),%edx
+ 390:	89 cf                	mov    %ecx,%edi
+ 392:	31 d2                	xor    %edx,%edx
+ 394:	f7 f6                	div    %esi
+ 396:	8d 4f 01             	lea    0x1(%edi),%ecx
+ 399:	0f b6 92 94 07 00 00 	movzbl 0x794(%edx),%edx
   }while((x /= base) != 0);
- 390:	85 c0                	test   %eax,%eax
+ 3a0:	85 c0                	test   %eax,%eax
     buf[i++] = digits[x % base];
- 392:	88 14 0b             	mov    %dl,(%ebx,%ecx,1)
+ 3a2:	88 14 0b             	mov    %dl,(%ebx,%ecx,1)
   }while((x /= base) != 0);
- 395:	75 e9                	jne    380 <printint+0x30>
+ 3a5:	75 e9                	jne    390 <printint+0x30>
   if(neg)
- 397:	8b 55 c4             	mov    -0x3c(%ebp),%edx
+ 3a7:	8b 55 c4             	mov    -0x3c(%ebp),%edx
     buf[i++] = digits[x % base];
- 39a:	89 c8                	mov    %ecx,%eax
- 39c:	8b 75 c0             	mov    -0x40(%ebp),%esi
+ 3aa:	89 c8                	mov    %ecx,%eax
+ 3ac:	8b 75 c0             	mov    -0x40(%ebp),%esi
   if(neg)
- 39f:	85 d2                	test   %edx,%edx
- 3a1:	74 08                	je     3ab <printint+0x5b>
+ 3af:	85 d2                	test   %edx,%edx
+ 3b1:	74 08                	je     3bb <printint+0x5b>
     buf[i++] = '-';
- 3a3:	8d 4f 02             	lea    0x2(%edi),%ecx
- 3a6:	c6 44 05 d8 2d       	movb   $0x2d,-0x28(%ebp,%eax,1)
+ 3b3:	8d 4f 02             	lea    0x2(%edi),%ecx
+ 3b6:	c6 44 05 d8 2d       	movb   $0x2d,-0x28(%ebp,%eax,1)
 
   while(--i >= 0)
- 3ab:	8d 79 ff             	lea    -0x1(%ecx),%edi
- 3ae:	66 90                	xchg   %ax,%ax
- 3b0:	0f b6 44 3d d8       	movzbl -0x28(%ebp,%edi,1),%eax
- 3b5:	83 ef 01             	sub    $0x1,%edi
+ 3bb:	8d 79 ff             	lea    -0x1(%ecx),%edi
+ 3be:	66 90                	xchg   %ax,%ax
+ 3c0:	0f b6 44 3d d8       	movzbl -0x28(%ebp,%edi,1),%eax
+ 3c5:	83 ef 01             	sub    $0x1,%edi
   write(fd, &c, 1);
- 3b8:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
- 3bf:	00 
- 3c0:	89 5c 24 04          	mov    %ebx,0x4(%esp)
- 3c4:	89 34 24             	mov    %esi,(%esp)
- 3c7:	88 45 d7             	mov    %al,-0x29(%ebp)
- 3ca:	e8 f3 fe ff ff       	call   2c2 <write>
+ 3c8:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+ 3cf:	00 
+ 3d0:	89 5c 24 04          	mov    %ebx,0x4(%esp)
+ 3d4:	89 34 24             	mov    %esi,(%esp)
+ 3d7:	88 45 d7             	mov    %al,-0x29(%ebp)
+ 3da:	e8 e3 fe ff ff       	call   2c2 <write>
   while(--i >= 0)
- 3cf:	83 ff ff             	cmp    $0xffffffff,%edi
- 3d2:	75 dc                	jne    3b0 <printint+0x60>
+ 3df:	83 ff ff             	cmp    $0xffffffff,%edi
+ 3e2:	75 dc                	jne    3c0 <printint+0x60>
     putc(fd, buf[i]);
 }
- 3d4:	83 c4 4c             	add    $0x4c,%esp
- 3d7:	5b                   	pop    %ebx
- 3d8:	5e                   	pop    %esi
- 3d9:	5f                   	pop    %edi
- 3da:	5d                   	pop    %ebp
- 3db:	c3                   	ret    
- 3dc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 3e4:	83 c4 4c             	add    $0x4c,%esp
+ 3e7:	5b                   	pop    %ebx
+ 3e8:	5e                   	pop    %esi
+ 3e9:	5f                   	pop    %edi
+ 3ea:	5d                   	pop    %ebp
+ 3eb:	c3                   	ret    
+ 3ec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     x = -xx;
- 3e0:	89 d0                	mov    %edx,%eax
- 3e2:	f7 d8                	neg    %eax
+ 3f0:	89 d0                	mov    %edx,%eax
+ 3f2:	f7 d8                	neg    %eax
     neg = 1;
- 3e4:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
- 3eb:	eb 87                	jmp    374 <printint+0x24>
- 3ed:	8d 76 00             	lea    0x0(%esi),%esi
+ 3f4:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
+ 3fb:	eb 87                	jmp    384 <printint+0x24>
+ 3fd:	8d 76 00             	lea    0x0(%esi),%esi
 
-000003f0 <printf>:
+00000400 <printf>:
 
 // Print to the given fd. Only understands %d, %x, %p, %s.
 void
 printf(int fd, const char *fmt, ...)
 {
- 3f0:	55                   	push   %ebp
- 3f1:	89 e5                	mov    %esp,%ebp
- 3f3:	57                   	push   %edi
+ 400:	55                   	push   %ebp
+ 401:	89 e5                	mov    %esp,%ebp
+ 403:	57                   	push   %edi
   char *s;
   int c, i, state;
   uint *ap;
 
   state = 0;
- 3f4:	31 ff                	xor    %edi,%edi
+ 404:	31 ff                	xor    %edi,%edi
 {
- 3f6:	56                   	push   %esi
- 3f7:	53                   	push   %ebx
- 3f8:	83 ec 3c             	sub    $0x3c,%esp
+ 406:	56                   	push   %esi
+ 407:	53                   	push   %ebx
+ 408:	83 ec 3c             	sub    $0x3c,%esp
   ap = (uint*)(void*)&fmt + 1;
   for(i = 0; fmt[i]; i++){
- 3fb:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+ 40b:	8b 5d 0c             	mov    0xc(%ebp),%ebx
   ap = (uint*)(void*)&fmt + 1;
- 3fe:	8d 45 10             	lea    0x10(%ebp),%eax
+ 40e:	8d 45 10             	lea    0x10(%ebp),%eax
 {
- 401:	8b 75 08             	mov    0x8(%ebp),%esi
+ 411:	8b 75 08             	mov    0x8(%ebp),%esi
   ap = (uint*)(void*)&fmt + 1;
- 404:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ 414:	89 45 d4             	mov    %eax,-0x2c(%ebp)
   for(i = 0; fmt[i]; i++){
- 407:	0f b6 13             	movzbl (%ebx),%edx
- 40a:	83 c3 01             	add    $0x1,%ebx
- 40d:	84 d2                	test   %dl,%dl
- 40f:	75 39                	jne    44a <printf+0x5a>
- 411:	e9 c2 00 00 00       	jmp    4d8 <printf+0xe8>
- 416:	66 90                	xchg   %ax,%ax
+ 417:	0f b6 13             	movzbl (%ebx),%edx
+ 41a:	83 c3 01             	add    $0x1,%ebx
+ 41d:	84 d2                	test   %dl,%dl
+ 41f:	75 39                	jne    45a <printf+0x5a>
+ 421:	e9 c2 00 00 00       	jmp    4e8 <printf+0xe8>
+ 426:	66 90                	xchg   %ax,%ax
     c = fmt[i] & 0xff;
     if(state == 0){
       if(c == '%'){
- 418:	83 fa 25             	cmp    $0x25,%edx
- 41b:	0f 84 bf 00 00 00    	je     4e0 <printf+0xf0>
+ 428:	83 fa 25             	cmp    $0x25,%edx
+ 42b:	0f 84 bf 00 00 00    	je     4f0 <printf+0xf0>
   write(fd, &c, 1);
- 421:	8d 45 e2             	lea    -0x1e(%ebp),%eax
- 424:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
- 42b:	00 
- 42c:	89 44 24 04          	mov    %eax,0x4(%esp)
- 430:	89 34 24             	mov    %esi,(%esp)
+ 431:	8d 45 e2             	lea    -0x1e(%ebp),%eax
+ 434:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+ 43b:	00 
+ 43c:	89 44 24 04          	mov    %eax,0x4(%esp)
+ 440:	89 34 24             	mov    %esi,(%esp)
         state = '%';
       } else {
         putc(fd, c);
- 433:	88 55 e2             	mov    %dl,-0x1e(%ebp)
+ 443:	88 55 e2             	mov    %dl,-0x1e(%ebp)
   write(fd, &c, 1);
- 436:	e8 87 fe ff ff       	call   2c2 <write>
- 43b:	83 c3 01             	add    $0x1,%ebx
+ 446:	e8 77 fe ff ff       	call   2c2 <write>
+ 44b:	83 c3 01             	add    $0x1,%ebx
   for(i = 0; fmt[i]; i++){
- 43e:	0f b6 53 ff          	movzbl -0x1(%ebx),%edx
- 442:	84 d2                	test   %dl,%dl
- 444:	0f 84 8e 00 00 00    	je     4d8 <printf+0xe8>
+ 44e:	0f b6 53 ff          	movzbl -0x1(%ebx),%edx
+ 452:	84 d2                	test   %dl,%dl
+ 454:	0f 84 8e 00 00 00    	je     4e8 <printf+0xe8>
     if(state == 0){
- 44a:	85 ff                	test   %edi,%edi
+ 45a:	85 ff                	test   %edi,%edi
     c = fmt[i] & 0xff;
- 44c:	0f be c2             	movsbl %dl,%eax
+ 45c:	0f be c2             	movsbl %dl,%eax
     if(state == 0){
- 44f:	74 c7                	je     418 <printf+0x28>
+ 45f:	74 c7                	je     428 <printf+0x28>
       }
     } else if(state == '%'){
- 451:	83 ff 25             	cmp    $0x25,%edi
- 454:	75 e5                	jne    43b <printf+0x4b>
+ 461:	83 ff 25             	cmp    $0x25,%edi
+ 464:	75 e5                	jne    44b <printf+0x4b>
       if(c == 'd'){
- 456:	83 fa 64             	cmp    $0x64,%edx
- 459:	0f 84 31 01 00 00    	je     590 <printf+0x1a0>
+ 466:	83 fa 64             	cmp    $0x64,%edx
+ 469:	0f 84 31 01 00 00    	je     5a0 <printf+0x1a0>
         printint(fd, *ap, 10, 1);
         ap++;
       } else if(c == 'x' || c == 'p'){
- 45f:	25 f7 00 00 00       	and    $0xf7,%eax
- 464:	83 f8 70             	cmp    $0x70,%eax
- 467:	0f 84 83 00 00 00    	je     4f0 <printf+0x100>
+ 46f:	25 f7 00 00 00       	and    $0xf7,%eax
+ 474:	83 f8 70             	cmp    $0x70,%eax
+ 477:	0f 84 83 00 00 00    	je     500 <printf+0x100>
         printint(fd, *ap, 16, 0);
         ap++;
       } else if(c == 's'){
- 46d:	83 fa 73             	cmp    $0x73,%edx
- 470:	0f 84 a2 00 00 00    	je     518 <printf+0x128>
+ 47d:	83 fa 73             	cmp    $0x73,%edx
+ 480:	0f 84 a2 00 00 00    	je     528 <printf+0x128>
           s = "(null)";
         while(*s != 0){
           putc(fd, *s);
           s++;
         }
       } else if(c == 'c'){
- 476:	83 fa 63             	cmp    $0x63,%edx
- 479:	0f 84 35 01 00 00    	je     5b4 <printf+0x1c4>
+ 486:	83 fa 63             	cmp    $0x63,%edx
+ 489:	0f 84 35 01 00 00    	je     5c4 <printf+0x1c4>
         putc(fd, *ap);
         ap++;
       } else if(c == '%'){
- 47f:	83 fa 25             	cmp    $0x25,%edx
- 482:	0f 84 e0 00 00 00    	je     568 <printf+0x178>
+ 48f:	83 fa 25             	cmp    $0x25,%edx
+ 492:	0f 84 e0 00 00 00    	je     578 <printf+0x178>
   write(fd, &c, 1);
- 488:	8d 45 e6             	lea    -0x1a(%ebp),%eax
- 48b:	83 c3 01             	add    $0x1,%ebx
- 48e:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
- 495:	00 
+ 498:	8d 45 e6             	lea    -0x1a(%ebp),%eax
+ 49b:	83 c3 01             	add    $0x1,%ebx
+ 49e:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+ 4a5:	00 
       } else {
         // Unknown % sequence.  Print it to draw attention.
         putc(fd, '%');
         putc(fd, c);
       }
       state = 0;
- 496:	31 ff                	xor    %edi,%edi
+ 4a6:	31 ff                	xor    %edi,%edi
   write(fd, &c, 1);
- 498:	89 44 24 04          	mov    %eax,0x4(%esp)
- 49c:	89 34 24             	mov    %esi,(%esp)
- 49f:	89 55 d0             	mov    %edx,-0x30(%ebp)
- 4a2:	c6 45 e6 25          	movb   $0x25,-0x1a(%ebp)
- 4a6:	e8 17 fe ff ff       	call   2c2 <write>
+ 4a8:	89 44 24 04          	mov    %eax,0x4(%esp)
+ 4ac:	89 34 24             	mov    %esi,(%esp)
+ 4af:	89 55 d0             	mov    %edx,-0x30(%ebp)
+ 4b2:	c6 45 e6 25          	movb   $0x25,-0x1a(%ebp)
+ 4b6:	e8 07 fe ff ff       	call   2c2 <write>
         putc(fd, c);
- 4ab:	8b 55 d0             	mov    -0x30(%ebp),%edx
+ 4bb:	8b 55 d0             	mov    -0x30(%ebp),%edx
   write(fd, &c, 1);
- 4ae:	8d 45 e7             	lea    -0x19(%ebp),%eax
- 4b1:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
- 4b8:	00 
- 4b9:	89 44 24 04          	mov    %eax,0x4(%esp)
- 4bd:	89 34 24             	mov    %esi,(%esp)
+ 4be:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 4c1:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+ 4c8:	00 
+ 4c9:	89 44 24 04          	mov    %eax,0x4(%esp)
+ 4cd:	89 34 24             	mov    %esi,(%esp)
         putc(fd, c);
- 4c0:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 4d0:	88 55 e7             	mov    %dl,-0x19(%ebp)
   write(fd, &c, 1);
- 4c3:	e8 fa fd ff ff       	call   2c2 <write>
+ 4d3:	e8 ea fd ff ff       	call   2c2 <write>
   for(i = 0; fmt[i]; i++){
- 4c8:	0f b6 53 ff          	movzbl -0x1(%ebx),%edx
- 4cc:	84 d2                	test   %dl,%dl
- 4ce:	0f 85 76 ff ff ff    	jne    44a <printf+0x5a>
- 4d4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 4d8:	0f b6 53 ff          	movzbl -0x1(%ebx),%edx
+ 4dc:	84 d2                	test   %dl,%dl
+ 4de:	0f 85 76 ff ff ff    	jne    45a <printf+0x5a>
+ 4e4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     }
   }
 }
- 4d8:	83 c4 3c             	add    $0x3c,%esp
- 4db:	5b                   	pop    %ebx
- 4dc:	5e                   	pop    %esi
- 4dd:	5f                   	pop    %edi
- 4de:	5d                   	pop    %ebp
- 4df:	c3                   	ret    
+ 4e8:	83 c4 3c             	add    $0x3c,%esp
+ 4eb:	5b                   	pop    %ebx
+ 4ec:	5e                   	pop    %esi
+ 4ed:	5f                   	pop    %edi
+ 4ee:	5d                   	pop    %ebp
+ 4ef:	c3                   	ret    
         state = '%';
- 4e0:	bf 25 00 00 00       	mov    $0x25,%edi
- 4e5:	e9 51 ff ff ff       	jmp    43b <printf+0x4b>
- 4ea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 4f0:	bf 25 00 00 00       	mov    $0x25,%edi
+ 4f5:	e9 51 ff ff ff       	jmp    44b <printf+0x4b>
+ 4fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         printint(fd, *ap, 16, 0);
- 4f0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
- 4f3:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 500:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+ 503:	b9 10 00 00 00       	mov    $0x10,%ecx
       state = 0;
- 4f8:	31 ff                	xor    %edi,%edi
+ 508:	31 ff                	xor    %edi,%edi
         printint(fd, *ap, 16, 0);
- 4fa:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
- 501:	8b 10                	mov    (%eax),%edx
- 503:	89 f0                	mov    %esi,%eax
- 505:	e8 46 fe ff ff       	call   350 <printint>
+ 50a:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+ 511:	8b 10                	mov    (%eax),%edx
+ 513:	89 f0                	mov    %esi,%eax
+ 515:	e8 46 fe ff ff       	call   360 <printint>
         ap++;
- 50a:	83 45 d4 04          	addl   $0x4,-0x2c(%ebp)
- 50e:	e9 28 ff ff ff       	jmp    43b <printf+0x4b>
- 513:	90                   	nop
- 514:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 51a:	83 45 d4 04          	addl   $0x4,-0x2c(%ebp)
+ 51e:	e9 28 ff ff ff       	jmp    44b <printf+0x4b>
+ 523:	90                   	nop
+ 524:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
         s = (char*)*ap;
- 518:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+ 528:	8b 45 d4             	mov    -0x2c(%ebp),%eax
         ap++;
- 51b:	83 45 d4 04          	addl   $0x4,-0x2c(%ebp)
+ 52b:	83 45 d4 04          	addl   $0x4,-0x2c(%ebp)
         s = (char*)*ap;
- 51f:	8b 38                	mov    (%eax),%edi
+ 52f:	8b 38                	mov    (%eax),%edi
           s = "(null)";
- 521:	b8 7d 07 00 00       	mov    $0x77d,%eax
- 526:	85 ff                	test   %edi,%edi
- 528:	0f 44 f8             	cmove  %eax,%edi
+ 531:	b8 8d 07 00 00       	mov    $0x78d,%eax
+ 536:	85 ff                	test   %edi,%edi
+ 538:	0f 44 f8             	cmove  %eax,%edi
         while(*s != 0){
- 52b:	0f b6 07             	movzbl (%edi),%eax
- 52e:	84 c0                	test   %al,%al
- 530:	74 2a                	je     55c <printf+0x16c>
- 532:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
- 538:	88 45 e3             	mov    %al,-0x1d(%ebp)
+ 53b:	0f b6 07             	movzbl (%edi),%eax
+ 53e:	84 c0                	test   %al,%al
+ 540:	74 2a                	je     56c <printf+0x16c>
+ 542:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 548:	88 45 e3             	mov    %al,-0x1d(%ebp)
   write(fd, &c, 1);
- 53b:	8d 45 e3             	lea    -0x1d(%ebp),%eax
+ 54b:	8d 45 e3             	lea    -0x1d(%ebp),%eax
           s++;
- 53e:	83 c7 01             	add    $0x1,%edi
+ 54e:	83 c7 01             	add    $0x1,%edi
   write(fd, &c, 1);
- 541:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
- 548:	00 
- 549:	89 44 24 04          	mov    %eax,0x4(%esp)
- 54d:	89 34 24             	mov    %esi,(%esp)
- 550:	e8 6d fd ff ff       	call   2c2 <write>
+ 551:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+ 558:	00 
+ 559:	89 44 24 04          	mov    %eax,0x4(%esp)
+ 55d:	89 34 24             	mov    %esi,(%esp)
+ 560:	e8 5d fd ff ff       	call   2c2 <write>
         while(*s != 0){
- 555:	0f b6 07             	movzbl (%edi),%eax
- 558:	84 c0                	test   %al,%al
- 55a:	75 dc                	jne    538 <printf+0x148>
+ 565:	0f b6 07             	movzbl (%edi),%eax
+ 568:	84 c0                	test   %al,%al
+ 56a:	75 dc                	jne    548 <printf+0x148>
       state = 0;
- 55c:	31 ff                	xor    %edi,%edi
- 55e:	e9 d8 fe ff ff       	jmp    43b <printf+0x4b>
- 563:	90                   	nop
- 564:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 56c:	31 ff                	xor    %edi,%edi
+ 56e:	e9 d8 fe ff ff       	jmp    44b <printf+0x4b>
+ 573:	90                   	nop
+ 574:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   write(fd, &c, 1);
- 568:	8d 45 e5             	lea    -0x1b(%ebp),%eax
+ 578:	8d 45 e5             	lea    -0x1b(%ebp),%eax
       state = 0;
- 56b:	31 ff                	xor    %edi,%edi
+ 57b:	31 ff                	xor    %edi,%edi
   write(fd, &c, 1);
- 56d:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
- 574:	00 
- 575:	89 44 24 04          	mov    %eax,0x4(%esp)
- 579:	89 34 24             	mov    %esi,(%esp)
- 57c:	c6 45 e5 25          	movb   $0x25,-0x1b(%ebp)
- 580:	e8 3d fd ff ff       	call   2c2 <write>
- 585:	e9 b1 fe ff ff       	jmp    43b <printf+0x4b>
- 58a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 57d:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+ 584:	00 
+ 585:	89 44 24 04          	mov    %eax,0x4(%esp)
+ 589:	89 34 24             	mov    %esi,(%esp)
+ 58c:	c6 45 e5 25          	movb   $0x25,-0x1b(%ebp)
+ 590:	e8 2d fd ff ff       	call   2c2 <write>
+ 595:	e9 b1 fe ff ff       	jmp    44b <printf+0x4b>
+ 59a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         printint(fd, *ap, 10, 1);
- 590:	8b 45 d4             	mov    -0x2c(%ebp),%eax
- 593:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 5a0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+ 5a3:	b9 0a 00 00 00       	mov    $0xa,%ecx
       state = 0;
- 598:	66 31 ff             	xor    %di,%di
+ 5a8:	66 31 ff             	xor    %di,%di
         printint(fd, *ap, 10, 1);
- 59b:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
- 5a2:	8b 10                	mov    (%eax),%edx
- 5a4:	89 f0                	mov    %esi,%eax
- 5a6:	e8 a5 fd ff ff       	call   350 <printint>
+ 5ab:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+ 5b2:	8b 10                	mov    (%eax),%edx
+ 5b4:	89 f0                	mov    %esi,%eax
+ 5b6:	e8 a5 fd ff ff       	call   360 <printint>
         ap++;
- 5ab:	83 45 d4 04          	addl   $0x4,-0x2c(%ebp)
- 5af:	e9 87 fe ff ff       	jmp    43b <printf+0x4b>
+ 5bb:	83 45 d4 04          	addl   $0x4,-0x2c(%ebp)
+ 5bf:	e9 87 fe ff ff       	jmp    44b <printf+0x4b>
         putc(fd, *ap);
- 5b4:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+ 5c4:	8b 45 d4             	mov    -0x2c(%ebp),%eax
       state = 0;
- 5b7:	31 ff                	xor    %edi,%edi
+ 5c7:	31 ff                	xor    %edi,%edi
         putc(fd, *ap);
- 5b9:	8b 00                	mov    (%eax),%eax
+ 5c9:	8b 00                	mov    (%eax),%eax
   write(fd, &c, 1);
- 5bb:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
- 5c2:	00 
- 5c3:	89 34 24             	mov    %esi,(%esp)
+ 5cb:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+ 5d2:	00 
+ 5d3:	89 34 24             	mov    %esi,(%esp)
         putc(fd, *ap);
- 5c6:	88 45 e4             	mov    %al,-0x1c(%ebp)
+ 5d6:	88 45 e4             	mov    %al,-0x1c(%ebp)
   write(fd, &c, 1);
- 5c9:	8d 45 e4             	lea    -0x1c(%ebp),%eax
- 5cc:	89 44 24 04          	mov    %eax,0x4(%esp)
- 5d0:	e8 ed fc ff ff       	call   2c2 <write>
+ 5d9:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+ 5dc:	89 44 24 04          	mov    %eax,0x4(%esp)
+ 5e0:	e8 dd fc ff ff       	call   2c2 <write>
         ap++;
- 5d5:	83 45 d4 04          	addl   $0x4,-0x2c(%ebp)
- 5d9:	e9 5d fe ff ff       	jmp    43b <printf+0x4b>
- 5de:	66 90                	xchg   %ax,%ax
+ 5e5:	83 45 d4 04          	addl   $0x4,-0x2c(%ebp)
+ 5e9:	e9 5d fe ff ff       	jmp    44b <printf+0x4b>
+ 5ee:	66 90                	xchg   %ax,%ax
 
-000005e0 <free>:
+000005f0 <free>:
 static Header base;
 static Header *freep;
 
 void
 free(void *ap)
 {
- 5e0:	55                   	push   %ebp
+ 5f0:	55                   	push   %ebp
   Header *bp, *p;
 
   bp = (Header*)ap - 1;
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 5e1:	a1 fc 09 00 00       	mov    0x9fc,%eax
+ 5f1:	a1 0c 0a 00 00       	mov    0xa0c,%eax
 {
- 5e6:	89 e5                	mov    %esp,%ebp
- 5e8:	57                   	push   %edi
- 5e9:	56                   	push   %esi
- 5ea:	53                   	push   %ebx
- 5eb:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 5f6:	89 e5                	mov    %esp,%ebp
+ 5f8:	57                   	push   %edi
+ 5f9:	56                   	push   %esi
+ 5fa:	53                   	push   %ebx
+ 5fb:	8b 5d 08             	mov    0x8(%ebp),%ebx
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 5ee:	8b 08                	mov    (%eax),%ecx
+ 5fe:	8b 08                	mov    (%eax),%ecx
   bp = (Header*)ap - 1;
- 5f0:	8d 53 f8             	lea    -0x8(%ebx),%edx
+ 600:	8d 53 f8             	lea    -0x8(%ebx),%edx
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 5f3:	39 d0                	cmp    %edx,%eax
- 5f5:	72 11                	jb     608 <free+0x28>
- 5f7:	90                   	nop
+ 603:	39 d0                	cmp    %edx,%eax
+ 605:	72 11                	jb     618 <free+0x28>
+ 607:	90                   	nop
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 5f8:	39 c8                	cmp    %ecx,%eax
- 5fa:	72 04                	jb     600 <free+0x20>
- 5fc:	39 ca                	cmp    %ecx,%edx
- 5fe:	72 10                	jb     610 <free+0x30>
- 600:	89 c8                	mov    %ecx,%eax
+ 608:	39 c8                	cmp    %ecx,%eax
+ 60a:	72 04                	jb     610 <free+0x20>
+ 60c:	39 ca                	cmp    %ecx,%edx
+ 60e:	72 10                	jb     620 <free+0x30>
+ 610:	89 c8                	mov    %ecx,%eax
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 602:	39 d0                	cmp    %edx,%eax
+ 612:	39 d0                	cmp    %edx,%eax
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 604:	8b 08                	mov    (%eax),%ecx
+ 614:	8b 08                	mov    (%eax),%ecx
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 606:	73 f0                	jae    5f8 <free+0x18>
- 608:	39 ca                	cmp    %ecx,%edx
- 60a:	72 04                	jb     610 <free+0x30>
+ 616:	73 f0                	jae    608 <free+0x18>
+ 618:	39 ca                	cmp    %ecx,%edx
+ 61a:	72 04                	jb     620 <free+0x30>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 60c:	39 c8                	cmp    %ecx,%eax
- 60e:	72 f0                	jb     600 <free+0x20>
+ 61c:	39 c8                	cmp    %ecx,%eax
+ 61e:	72 f0                	jb     610 <free+0x20>
       break;
   if(bp + bp->s.size == p->s.ptr){
- 610:	8b 73 fc             	mov    -0x4(%ebx),%esi
- 613:	8d 3c f2             	lea    (%edx,%esi,8),%edi
- 616:	39 cf                	cmp    %ecx,%edi
- 618:	74 1e                	je     638 <free+0x58>
+ 620:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 623:	8d 3c f2             	lea    (%edx,%esi,8),%edi
+ 626:	39 cf                	cmp    %ecx,%edi
+ 628:	74 1e                	je     648 <free+0x58>
     bp->s.size += p->s.ptr->s.size;
     bp->s.ptr = p->s.ptr->s.ptr;
   } else
     bp->s.ptr = p->s.ptr;
- 61a:	89 4b f8             	mov    %ecx,-0x8(%ebx)
+ 62a:	89 4b f8             	mov    %ecx,-0x8(%ebx)
   if(p + p->s.size == bp){
- 61d:	8b 48 04             	mov    0x4(%eax),%ecx
- 620:	8d 34 c8             	lea    (%eax,%ecx,8),%esi
- 623:	39 f2                	cmp    %esi,%edx
- 625:	74 28                	je     64f <free+0x6f>
+ 62d:	8b 48 04             	mov    0x4(%eax),%ecx
+ 630:	8d 34 c8             	lea    (%eax,%ecx,8),%esi
+ 633:	39 f2                	cmp    %esi,%edx
+ 635:	74 28                	je     65f <free+0x6f>
     p->s.size += bp->s.size;
     p->s.ptr = bp->s.ptr;
   } else
     p->s.ptr = bp;
- 627:	89 10                	mov    %edx,(%eax)
+ 637:	89 10                	mov    %edx,(%eax)
   freep = p;
- 629:	a3 fc 09 00 00       	mov    %eax,0x9fc
+ 639:	a3 0c 0a 00 00       	mov    %eax,0xa0c
 }
- 62e:	5b                   	pop    %ebx
- 62f:	5e                   	pop    %esi
- 630:	5f                   	pop    %edi
- 631:	5d                   	pop    %ebp
- 632:	c3                   	ret    
- 633:	90                   	nop
- 634:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 63e:	5b                   	pop    %ebx
+ 63f:	5e                   	pop    %esi
+ 640:	5f                   	pop    %edi
+ 641:	5d                   	pop    %ebp
+ 642:	c3                   	ret    
+ 643:	90                   	nop
+ 644:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     bp->s.size += p->s.ptr->s.size;
- 638:	03 71 04             	add    0x4(%ecx),%esi
- 63b:	89 73 fc             	mov    %esi,-0x4(%ebx)
+ 648:	03 71 04             	add    0x4(%ecx),%esi
+ 64b:	89 73 fc             	mov    %esi,-0x4(%ebx)
     bp->s.ptr = p->s.ptr->s.ptr;
- 63e:	8b 08                	mov    (%eax),%ecx
- 640:	8b 09                	mov    (%ecx),%ecx
- 642:	89 4b f8             	mov    %ecx,-0x8(%ebx)
+ 64e:	8b 08                	mov    (%eax),%ecx
+ 650:	8b 09                	mov    (%ecx),%ecx
+ 652:	89 4b f8             	mov    %ecx,-0x8(%ebx)
   if(p + p->s.size == bp){
- 645:	8b 48 04             	mov    0x4(%eax),%ecx
- 648:	8d 34 c8             	lea    (%eax,%ecx,8),%esi
- 64b:	39 f2                	cmp    %esi,%edx
- 64d:	75 d8                	jne    627 <free+0x47>
+ 655:	8b 48 04             	mov    0x4(%eax),%ecx
+ 658:	8d 34 c8             	lea    (%eax,%ecx,8),%esi
+ 65b:	39 f2                	cmp    %esi,%edx
+ 65d:	75 d8                	jne    637 <free+0x47>
     p->s.size += bp->s.size;
- 64f:	03 4b fc             	add    -0x4(%ebx),%ecx
+ 65f:	03 4b fc             	add    -0x4(%ebx),%ecx
   freep = p;
- 652:	a3 fc 09 00 00       	mov    %eax,0x9fc
+ 662:	a3 0c 0a 00 00       	mov    %eax,0xa0c
     p->s.size += bp->s.size;
- 657:	89 48 04             	mov    %ecx,0x4(%eax)
+ 667:	89 48 04             	mov    %ecx,0x4(%eax)
     p->s.ptr = bp->s.ptr;
- 65a:	8b 53 f8             	mov    -0x8(%ebx),%edx
- 65d:	89 10                	mov    %edx,(%eax)
+ 66a:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 66d:	89 10                	mov    %edx,(%eax)
 }
- 65f:	5b                   	pop    %ebx
- 660:	5e                   	pop    %esi
- 661:	5f                   	pop    %edi
- 662:	5d                   	pop    %ebp
- 663:	c3                   	ret    
- 664:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
- 66a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
-
-00000670 <malloc>:
+ 66f:	5b                   	pop    %ebx
+ 670:	5e                   	pop    %esi
+ 671:	5f                   	pop    %edi
+ 672:	5d                   	pop    %ebp
+ 673:	c3                   	ret    
+ 674:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 67a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+00000680 <malloc>:
   return freep;
 }
 
 void*
 malloc(uint nbytes)
 {
- 670:	55                   	push   %ebp
- 671:	89 e5                	mov    %esp,%ebp
- 673:	57                   	push   %edi
- 674:	56                   	push   %esi
- 675:	53                   	push   %ebx
- 676:	83 ec 1c             	sub    $0x1c,%esp
+ 680:	55                   	push   %ebp
+ 681:	89 e5                	mov    %esp,%ebp
+ 683:	57                   	push   %edi
+ 684:	56                   	push   %esi
+ 685:	53                   	push   %ebx
+ 686:	83 ec 1c             	sub    $0x1c,%esp
   Header *p, *prevp;
   uint nunits;
 
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 679:	8b 45 08             	mov    0x8(%ebp),%eax
+ 689:	8b 45 08             	mov    0x8(%ebp),%eax
   if((prevp = freep) == 0){
- 67c:	8b 1d fc 09 00 00    	mov    0x9fc,%ebx
+ 68c:	8b 1d 0c 0a 00 00    	mov    0xa0c,%ebx
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 682:	8d 48 07             	lea    0x7(%eax),%ecx
- 685:	c1 e9 03             	shr    $0x3,%ecx
+ 692:	8d 48 07             	lea    0x7(%eax),%ecx
+ 695:	c1 e9 03             	shr    $0x3,%ecx
   if((prevp = freep) == 0){
- 688:	85 db                	test   %ebx,%ebx
+ 698:	85 db                	test   %ebx,%ebx
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 68a:	8d 71 01             	lea    0x1(%ecx),%esi
+ 69a:	8d 71 01             	lea    0x1(%ecx),%esi
   if((prevp = freep) == 0){
- 68d:	0f 84 9b 00 00 00    	je     72e <malloc+0xbe>
- 693:	8b 13                	mov    (%ebx),%edx
- 695:	8b 7a 04             	mov    0x4(%edx),%edi
+ 69d:	0f 84 9b 00 00 00    	je     73e <malloc+0xbe>
+ 6a3:	8b 13                	mov    (%ebx),%edx
+ 6a5:	8b 7a 04             	mov    0x4(%edx),%edi
     base.s.ptr = freep = prevp = &base;
     base.s.size = 0;
   }
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
     if(p->s.size >= nunits){
- 698:	39 fe                	cmp    %edi,%esi
- 69a:	76 64                	jbe    700 <malloc+0x90>
- 69c:	8d 04 f5 00 00 00 00 	lea    0x0(,%esi,8),%eax
+ 6a8:	39 fe                	cmp    %edi,%esi
+ 6aa:	76 64                	jbe    710 <malloc+0x90>
+ 6ac:	8d 04 f5 00 00 00 00 	lea    0x0(,%esi,8),%eax
   if(nu < 4096)
- 6a3:	bb 00 80 00 00       	mov    $0x8000,%ebx
- 6a8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
- 6ab:	eb 0e                	jmp    6bb <malloc+0x4b>
- 6ad:	8d 76 00             	lea    0x0(%esi),%esi
+ 6b3:	bb 00 80 00 00       	mov    $0x8000,%ebx
+ 6b8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+ 6bb:	eb 0e                	jmp    6cb <malloc+0x4b>
+ 6bd:	8d 76 00             	lea    0x0(%esi),%esi
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 6b0:	8b 02                	mov    (%edx),%eax
+ 6c0:	8b 02                	mov    (%edx),%eax
     if(p->s.size >= nunits){
- 6b2:	8b 78 04             	mov    0x4(%eax),%edi
- 6b5:	39 fe                	cmp    %edi,%esi
- 6b7:	76 4f                	jbe    708 <malloc+0x98>
- 6b9:	89 c2                	mov    %eax,%edx
+ 6c2:	8b 78 04             	mov    0x4(%eax),%edi
+ 6c5:	39 fe                	cmp    %edi,%esi
+ 6c7:	76 4f                	jbe    718 <malloc+0x98>
+ 6c9:	89 c2                	mov    %eax,%edx
         p->s.size = nunits;
       }
       freep = prevp;
       return (void*)(p + 1);
     }
     if(p == freep)
- 6bb:	3b 15 fc 09 00 00    	cmp    0x9fc,%edx
- 6c1:	75 ed                	jne    6b0 <malloc+0x40>
+ 6cb:	3b 15 0c 0a 00 00    	cmp    0xa0c,%edx
+ 6d1:	75 ed                	jne    6c0 <malloc+0x40>
   if(nu < 4096)
- 6c3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
- 6c6:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
- 6cc:	bf 00 10 00 00       	mov    $0x1000,%edi
- 6d1:	0f 43 fe             	cmovae %esi,%edi
- 6d4:	0f 42 c3             	cmovb  %ebx,%eax
+ 6d3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+ 6d6:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+ 6dc:	bf 00 10 00 00       	mov    $0x1000,%edi
+ 6e1:	0f 43 fe             	cmovae %esi,%edi
+ 6e4:	0f 42 c3             	cmovb  %ebx,%eax
   p = sbrk(nu * sizeof(Header));
- 6d7:	89 04 24             	mov    %eax,(%esp)
- 6da:	e8 4b fc ff ff       	call   32a <sbrk>
+ 6e7:	89 04 24             	mov    %eax,(%esp)
+ 6ea:	e8 3b fc ff ff       	call   32a <sbrk>
   if(p == (char*)-1)
- 6df:	83 f8 ff             	cmp    $0xffffffff,%eax
- 6e2:	74 18                	je     6fc <malloc+0x8c>
+ 6ef:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 6f2:	74 18                	je     70c <malloc+0x8c>
   hp->s.size = nu;
- 6e4:	89 78 04             	mov    %edi,0x4(%eax)
+ 6f4:	89 78 04             	mov    %edi,0x4(%eax)
   free((void*)(hp + 1));
- 6e7:	83 c0 08             	add    $0x8,%eax
- 6ea:	89 04 24             	mov    %eax,(%esp)
- 6ed:	e8 ee fe ff ff       	call   5e0 <free>
+ 6f7:	83 c0 08             	add    $0x8,%eax
+ 6fa:	89 04 24             	mov    %eax,(%esp)
+ 6fd:	e8 ee fe ff ff       	call   5f0 <free>
   return freep;
- 6f2:	8b 15 fc 09 00 00    	mov    0x9fc,%edx
+ 702:	8b 15 0c 0a 00 00    	mov    0xa0c,%edx
       if((p = morecore(nunits)) == 0)
- 6f8:	85 d2                	test   %edx,%edx
- 6fa:	75 b4                	jne    6b0 <malloc+0x40>
+ 708:	85 d2                	test   %edx,%edx
+ 70a:	75 b4                	jne    6c0 <malloc+0x40>
         return 0;
- 6fc:	31 c0                	xor    %eax,%eax
- 6fe:	eb 20                	jmp    720 <malloc+0xb0>
+ 70c:	31 c0                	xor    %eax,%eax
+ 70e:	eb 20                	jmp    730 <malloc+0xb0>
     if(p->s.size >= nunits){
- 700:	89 d0                	mov    %edx,%eax
- 702:	89 da                	mov    %ebx,%edx
- 704:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 710:	89 d0                	mov    %edx,%eax
+ 712:	89 da                	mov    %ebx,%edx
+ 714:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
       if(p->s.size == nunits)
- 708:	39 fe                	cmp    %edi,%esi
- 70a:	74 1c                	je     728 <malloc+0xb8>
+ 718:	39 fe                	cmp    %edi,%esi
+ 71a:	74 1c                	je     738 <malloc+0xb8>
         p->s.size -= nunits;
- 70c:	29 f7                	sub    %esi,%edi
- 70e:	89 78 04             	mov    %edi,0x4(%eax)
+ 71c:	29 f7                	sub    %esi,%edi
+ 71e:	89 78 04             	mov    %edi,0x4(%eax)
         p += p->s.size;
- 711:	8d 04 f8             	lea    (%eax,%edi,8),%eax
+ 721:	8d 04 f8             	lea    (%eax,%edi,8),%eax
         p->s.size = nunits;
- 714:	89 70 04             	mov    %esi,0x4(%eax)
+ 724:	89 70 04             	mov    %esi,0x4(%eax)
       freep = prevp;
- 717:	89 15 fc 09 00 00    	mov    %edx,0x9fc
+ 727:	89 15 0c 0a 00 00    	mov    %edx,0xa0c
       return (void*)(p + 1);
- 71d:	83 c0 08             	add    $0x8,%eax
+ 72d:	83 c0 08             	add    $0x8,%eax
   }
 }
- 720:	83 c4 1c             	add    $0x1c,%esp
- 723:	5b                   	pop    %ebx
- 724:	5e                   	pop    %esi
- 725:	5f                   	pop    %edi
- 726:	5d                   	pop    %ebp
- 727:	c3                   	ret    
+ 730:	83 c4 1c             	add    $0x1c,%esp
+ 733:	5b                   	pop    %ebx
+ 734:	5e                   	pop    %esi
+ 735:	5f                   	pop    %edi
+ 736:	5d                   	pop    %ebp
+ 737:	c3                   	ret    
         prevp->s.ptr = p->s.ptr;
- 728:	8b 08                	mov    (%eax),%ecx
- 72a:	89 0a                	mov    %ecx,(%edx)
- 72c:	eb e9                	jmp    717 <malloc+0xa7>
+ 738:	8b 08                	mov    (%eax),%ecx
+ 73a:	89 0a                	mov    %ecx,(%edx)
+ 73c:	eb e9                	jmp    727 <malloc+0xa7>
     base.s.ptr = freep = prevp = &base;
- 72e:	c7 05 fc 09 00 00 00 	movl   $0xa00,0x9fc
- 735:	0a 00 00 
+ 73e:	c7 05 0c 0a 00 00 10 	movl   $0xa10,0xa0c
+ 745:	0a 00 00 
     base.s.size = 0;
- 738:	ba 00 0a 00 00       	mov    $0xa00,%edx
+ 748:	ba 10 0a 00 00       	mov    $0xa10,%edx
     base.s.ptr = freep = prevp = &base;
- 73d:	c7 05 00 0a 00 00 00 	movl   $0xa00,0xa00
- 744:	0a 00 00 
+ 74d:	c7 05 10 0a 00 00 10 	movl   $0xa10,0xa10
+ 754:	0a 00 00 
     base.s.size = 0;
- 747:	c7 05 04 0a 00 00 00 	movl   $0x0,0xa04
- 74e:	00 00 00 
- 751:	e9 46 ff ff ff       	jmp    69c <malloc+0x2c>
+ 757:	c7 05 14 0a 00 00 00 	movl   $0x0,0xa14
+ 75e:	00 00 00 
+ 761:	e9 46 ff ff ff       	jmp    6ac <malloc+0x2c>
diff --git a/ln.o b/ln.o
index f44cfe1..94e669d 100644
Binary files a/ln.o and b/ln.o differ
diff --git a/ln.sym b/ln.sym
index c1e47f7..0b50488 100644
--- a/ln.sym
+++ b/ln.sym
@@ -1,7 +1,7 @@
 00000000 .text
-00000756 .rodata
-00000798 .eh_frame
-000009fc .bss
+00000766 .rodata
+000007a8 .eh_frame
+00000a0c .bss
 00000000 .comment
 00000000 .debug_aranges
 00000000 .debug_info
@@ -13,25 +13,27 @@
 00000000 ln.c
 00000000 ulib.c
 00000000 printf.c
-00000350 printint
-00000784 digits.1358
+00000360 printint
+00000794 digits.1362
 00000000 umalloc.c
-000009fc freep
-00000a00 base
+00000a0c freep
+00000a10 base
 00000080 strcpy
 00000342 waitpid
-000003f0 printf
+00000400 printf
 00000270 memmove
 000002ea mknod
 00000190 gets
 00000322 getpid
-00000670 malloc
+00000680 malloc
 00000332 sleep
 000002b2 pipe
+0000034a setPrior
 000002c2 write
 000002fa fstat
 000002d2 kill
 00000312 chdir
+00000352 getPrior
 000002da exec
 000002aa wait
 000002ba read
@@ -39,14 +41,14 @@
 0000029a fork
 0000032a sbrk
 0000033a uptime
-000009fc __bss_start
+00000a0c __bss_start
 00000130 memset
 00000000 main
 000000b0 strcmp
 0000031a dup
 000001f0 stat
-000009fc _edata
-00000a08 _end
+00000a0c _edata
+00000a18 _end
 00000302 link
 000002a2 exit
 00000240 atoi
@@ -55,4 +57,4 @@
 00000150 strchr
 0000030a mkdir
 000002ca close
-000005e0 free
+000005f0 free
diff --git a/log.o b/log.o
index e1bb843..d339e07 100644
Binary files a/log.o and b/log.o differ
diff --git a/ls.asm b/ls.asm
index 7ff9a8f..cc8f211 100644
--- a/ls.asm
+++ b/ls.asm
@@ -47,7 +47,7 @@ main(int argc, char *argv[])
   32:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
   39:	e8 74 05 00 00       	call   5b2 <exit>
     ls(".");
-  3e:	c7 04 24 ae 0a 00 00 	movl   $0xaae,(%esp)
+  3e:	c7 04 24 be 0a 00 00 	movl   $0xabe,(%esp)
   45:	e8 b6 00 00 00       	call   100 <ls>
     exit(0);
   4a:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
@@ -89,7 +89,7 @@ main(int argc, char *argv[])
   9c:	89 1c 24             	mov    %ebx,(%esp)
   9f:	e8 6c 03 00 00       	call   410 <strlen>
   a4:	89 5c 24 04          	mov    %ebx,0x4(%esp)
-  a8:	c7 04 24 98 0d 00 00 	movl   $0xd98,(%esp)
+  a8:	c7 04 24 a8 0d 00 00 	movl   $0xda8,(%esp)
   af:	89 44 24 08          	mov    %eax,0x8(%esp)
   b3:	e8 c8 04 00 00       	call   580 <memmove>
   memset(buf+strlen(p), ' ', DIRSIZ-strlen(p));
@@ -97,7 +97,7 @@ main(int argc, char *argv[])
   bb:	e8 50 03 00 00       	call   410 <strlen>
   c0:	89 1c 24             	mov    %ebx,(%esp)
   return buf;
-  c3:	bb 98 0d 00 00       	mov    $0xd98,%ebx
+  c3:	bb a8 0d 00 00       	mov    $0xda8,%ebx
   memset(buf+strlen(p), ' ', DIRSIZ-strlen(p));
   c8:	89 c6                	mov    %eax,%esi
   ca:	e8 41 03 00 00       	call   410 <strlen>
@@ -106,7 +106,7 @@ main(int argc, char *argv[])
   d6:	89 54 24 08          	mov    %edx,0x8(%esp)
   da:	c7 44 24 04 20 00 00 	movl   $0x20,0x4(%esp)
   e1:	00 
-  e2:	05 98 0d 00 00       	add    $0xd98,%eax
+  e2:	05 a8 0d 00 00       	add    $0xda8,%eax
   e7:	89 04 24             	mov    %eax,(%esp)
   ea:	e8 51 03 00 00       	call   440 <memset>
 }
@@ -159,12 +159,12 @@ main(int argc, char *argv[])
  176:	89 74 24 10          	mov    %esi,0x10(%esp)
  17a:	c7 44 24 0c 02 00 00 	movl   $0x2,0xc(%esp)
  181:	00 
- 182:	c7 44 24 04 8e 0a 00 	movl   $0xa8e,0x4(%esp)
+ 182:	c7 44 24 04 9e 0a 00 	movl   $0xa9e,0x4(%esp)
  189:	00 
  18a:	89 54 24 14          	mov    %edx,0x14(%esp)
  18e:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  195:	89 44 24 08          	mov    %eax,0x8(%esp)
- 199:	e8 62 05 00 00       	call   700 <printf>
+ 199:	e8 72 05 00 00       	call   710 <printf>
   close(fd);
  19e:	89 1c 24             	mov    %ebx,(%esp)
  1a1:	e8 34 04 00 00       	call   5da <close>
@@ -244,7 +244,7 @@ main(int argc, char *argv[])
  2a9:	e8 b2 fd ff ff       	call   60 <fmtname>
  2ae:	8b 8d ac fd ff ff    	mov    -0x254(%ebp),%ecx
  2b4:	8b 95 b0 fd ff ff    	mov    -0x250(%ebp),%edx
- 2ba:	c7 44 24 04 8e 0a 00 	movl   $0xa8e,0x4(%esp)
+ 2ba:	c7 44 24 04 9e 0a 00 	movl   $0xa9e,0x4(%esp)
  2c1:	00 
  2c2:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  2c9:	89 4c 24 14          	mov    %ecx,0x14(%esp)
@@ -252,15 +252,15 @@ main(int argc, char *argv[])
  2d3:	89 54 24 0c          	mov    %edx,0xc(%esp)
  2d7:	89 44 24 08          	mov    %eax,0x8(%esp)
  2db:	89 4c 24 10          	mov    %ecx,0x10(%esp)
- 2df:	e8 1c 04 00 00       	call   700 <printf>
+ 2df:	e8 2c 04 00 00       	call   710 <printf>
  2e4:	e9 27 ff ff ff       	jmp    210 <ls+0x110>
  2e9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     printf(2, "ls: cannot open %s\n", path);
  2f0:	89 7c 24 08          	mov    %edi,0x8(%esp)
- 2f4:	c7 44 24 04 66 0a 00 	movl   $0xa66,0x4(%esp)
+ 2f4:	c7 44 24 04 76 0a 00 	movl   $0xa76,0x4(%esp)
  2fb:	00 
  2fc:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
- 303:	e8 f8 03 00 00       	call   700 <printf>
+ 303:	e8 08 04 00 00       	call   710 <printf>
 }
  308:	81 c4 6c 02 00 00    	add    $0x26c,%esp
  30e:	5b                   	pop    %ebx
@@ -271,19 +271,19 @@ main(int argc, char *argv[])
  313:	90                   	nop
  314:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
       printf(1, "ls: path too long\n");
- 318:	c7 44 24 04 9b 0a 00 	movl   $0xa9b,0x4(%esp)
+ 318:	c7 44 24 04 ab 0a 00 	movl   $0xaab,0x4(%esp)
  31f:	00 
  320:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
- 327:	e8 d4 03 00 00       	call   700 <printf>
+ 327:	e8 e4 03 00 00       	call   710 <printf>
       break;
  32c:	e9 6d fe ff ff       	jmp    19e <ls+0x9e>
  331:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     printf(2, "ls: cannot stat %s\n", path);
  338:	89 7c 24 08          	mov    %edi,0x8(%esp)
- 33c:	c7 44 24 04 7a 0a 00 	movl   $0xa7a,0x4(%esp)
+ 33c:	c7 44 24 04 8a 0a 00 	movl   $0xa8a,0x4(%esp)
  343:	00 
  344:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
- 34b:	e8 b0 03 00 00       	call   700 <printf>
+ 34b:	e8 c0 03 00 00       	call   710 <printf>
     close(fd);
  350:	89 1c 24             	mov    %ebx,(%esp)
  353:	e8 82 02 00 00       	call   5da <close>
@@ -293,10 +293,10 @@ main(int argc, char *argv[])
         printf(1, "ls: cannot stat %s\n", buf);
  360:	8d 85 e8 fd ff ff    	lea    -0x218(%ebp),%eax
  366:	89 44 24 08          	mov    %eax,0x8(%esp)
- 36a:	c7 44 24 04 7a 0a 00 	movl   $0xa7a,0x4(%esp)
+ 36a:	c7 44 24 04 8a 0a 00 	movl   $0xa8a,0x4(%esp)
  371:	00 
  372:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
- 379:	e8 82 03 00 00       	call   700 <printf>
+ 379:	e8 92 03 00 00       	call   710 <printf>
         continue;
  37e:	e9 8d fe ff ff       	jmp    210 <ls+0x110>
  383:	66 90                	xchg   %ax,%ax
@@ -821,580 +821,592 @@ SYSCALL(uptime)
  651:	c3                   	ret    
 
 00000652 <waitpid>:
+SYSCALL(waitpid)
  652:	b8 16 00 00 00       	mov    $0x16,%eax
  657:	cd 40                	int    $0x40
  659:	c3                   	ret    
- 65a:	66 90                	xchg   %ax,%ax
- 65c:	66 90                	xchg   %ax,%ax
- 65e:	66 90                	xchg   %ax,%ax
 
-00000660 <printint>:
+0000065a <setPrior>:
+SYSCALL(setPrior)
+ 65a:	b8 17 00 00 00       	mov    $0x17,%eax
+ 65f:	cd 40                	int    $0x40
+ 661:	c3                   	ret    
+
+00000662 <getPrior>:
+ 662:	b8 18 00 00 00       	mov    $0x18,%eax
+ 667:	cd 40                	int    $0x40
+ 669:	c3                   	ret    
+ 66a:	66 90                	xchg   %ax,%ax
+ 66c:	66 90                	xchg   %ax,%ax
+ 66e:	66 90                	xchg   %ax,%ax
+
+00000670 <printint>:
   write(fd, &c, 1);
 }
 
 static void
 printint(int fd, int xx, int base, int sgn)
 {
- 660:	55                   	push   %ebp
- 661:	89 e5                	mov    %esp,%ebp
- 663:	57                   	push   %edi
- 664:	56                   	push   %esi
- 665:	89 c6                	mov    %eax,%esi
- 667:	53                   	push   %ebx
- 668:	83 ec 4c             	sub    $0x4c,%esp
+ 670:	55                   	push   %ebp
+ 671:	89 e5                	mov    %esp,%ebp
+ 673:	57                   	push   %edi
+ 674:	56                   	push   %esi
+ 675:	89 c6                	mov    %eax,%esi
+ 677:	53                   	push   %ebx
+ 678:	83 ec 4c             	sub    $0x4c,%esp
   char buf[16];
   int i, neg;
   uint x;
 
   neg = 0;
   if(sgn && xx < 0){
- 66b:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 66e:	85 db                	test   %ebx,%ebx
- 670:	74 09                	je     67b <printint+0x1b>
- 672:	89 d0                	mov    %edx,%eax
- 674:	c1 e8 1f             	shr    $0x1f,%eax
- 677:	84 c0                	test   %al,%al
- 679:	75 75                	jne    6f0 <printint+0x90>
+ 67b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 67e:	85 db                	test   %ebx,%ebx
+ 680:	74 09                	je     68b <printint+0x1b>
+ 682:	89 d0                	mov    %edx,%eax
+ 684:	c1 e8 1f             	shr    $0x1f,%eax
+ 687:	84 c0                	test   %al,%al
+ 689:	75 75                	jne    700 <printint+0x90>
     neg = 1;
     x = -xx;
   } else {
     x = xx;
- 67b:	89 d0                	mov    %edx,%eax
+ 68b:	89 d0                	mov    %edx,%eax
   neg = 0;
- 67d:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
- 684:	89 75 c0             	mov    %esi,-0x40(%ebp)
+ 68d:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
+ 694:	89 75 c0             	mov    %esi,-0x40(%ebp)
   }
 
   i = 0;
- 687:	31 ff                	xor    %edi,%edi
- 689:	89 ce                	mov    %ecx,%esi
- 68b:	8d 5d d7             	lea    -0x29(%ebp),%ebx
- 68e:	eb 02                	jmp    692 <printint+0x32>
+ 697:	31 ff                	xor    %edi,%edi
+ 699:	89 ce                	mov    %ecx,%esi
+ 69b:	8d 5d d7             	lea    -0x29(%ebp),%ebx
+ 69e:	eb 02                	jmp    6a2 <printint+0x32>
   do{
     buf[i++] = digits[x % base];
- 690:	89 cf                	mov    %ecx,%edi
- 692:	31 d2                	xor    %edx,%edx
- 694:	f7 f6                	div    %esi
- 696:	8d 4f 01             	lea    0x1(%edi),%ecx
- 699:	0f b6 92 b7 0a 00 00 	movzbl 0xab7(%edx),%edx
+ 6a0:	89 cf                	mov    %ecx,%edi
+ 6a2:	31 d2                	xor    %edx,%edx
+ 6a4:	f7 f6                	div    %esi
+ 6a6:	8d 4f 01             	lea    0x1(%edi),%ecx
+ 6a9:	0f b6 92 c7 0a 00 00 	movzbl 0xac7(%edx),%edx
   }while((x /= base) != 0);
- 6a0:	85 c0                	test   %eax,%eax
+ 6b0:	85 c0                	test   %eax,%eax
     buf[i++] = digits[x % base];
- 6a2:	88 14 0b             	mov    %dl,(%ebx,%ecx,1)
+ 6b2:	88 14 0b             	mov    %dl,(%ebx,%ecx,1)
   }while((x /= base) != 0);
- 6a5:	75 e9                	jne    690 <printint+0x30>
+ 6b5:	75 e9                	jne    6a0 <printint+0x30>
   if(neg)
- 6a7:	8b 55 c4             	mov    -0x3c(%ebp),%edx
+ 6b7:	8b 55 c4             	mov    -0x3c(%ebp),%edx
     buf[i++] = digits[x % base];
- 6aa:	89 c8                	mov    %ecx,%eax
- 6ac:	8b 75 c0             	mov    -0x40(%ebp),%esi
+ 6ba:	89 c8                	mov    %ecx,%eax
+ 6bc:	8b 75 c0             	mov    -0x40(%ebp),%esi
   if(neg)
- 6af:	85 d2                	test   %edx,%edx
- 6b1:	74 08                	je     6bb <printint+0x5b>
+ 6bf:	85 d2                	test   %edx,%edx
+ 6c1:	74 08                	je     6cb <printint+0x5b>
     buf[i++] = '-';
- 6b3:	8d 4f 02             	lea    0x2(%edi),%ecx
- 6b6:	c6 44 05 d8 2d       	movb   $0x2d,-0x28(%ebp,%eax,1)
+ 6c3:	8d 4f 02             	lea    0x2(%edi),%ecx
+ 6c6:	c6 44 05 d8 2d       	movb   $0x2d,-0x28(%ebp,%eax,1)
 
   while(--i >= 0)
- 6bb:	8d 79 ff             	lea    -0x1(%ecx),%edi
- 6be:	66 90                	xchg   %ax,%ax
- 6c0:	0f b6 44 3d d8       	movzbl -0x28(%ebp,%edi,1),%eax
- 6c5:	83 ef 01             	sub    $0x1,%edi
+ 6cb:	8d 79 ff             	lea    -0x1(%ecx),%edi
+ 6ce:	66 90                	xchg   %ax,%ax
+ 6d0:	0f b6 44 3d d8       	movzbl -0x28(%ebp,%edi,1),%eax
+ 6d5:	83 ef 01             	sub    $0x1,%edi
   write(fd, &c, 1);
- 6c8:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
- 6cf:	00 
- 6d0:	89 5c 24 04          	mov    %ebx,0x4(%esp)
- 6d4:	89 34 24             	mov    %esi,(%esp)
- 6d7:	88 45 d7             	mov    %al,-0x29(%ebp)
- 6da:	e8 f3 fe ff ff       	call   5d2 <write>
+ 6d8:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+ 6df:	00 
+ 6e0:	89 5c 24 04          	mov    %ebx,0x4(%esp)
+ 6e4:	89 34 24             	mov    %esi,(%esp)
+ 6e7:	88 45 d7             	mov    %al,-0x29(%ebp)
+ 6ea:	e8 e3 fe ff ff       	call   5d2 <write>
   while(--i >= 0)
- 6df:	83 ff ff             	cmp    $0xffffffff,%edi
- 6e2:	75 dc                	jne    6c0 <printint+0x60>
+ 6ef:	83 ff ff             	cmp    $0xffffffff,%edi
+ 6f2:	75 dc                	jne    6d0 <printint+0x60>
     putc(fd, buf[i]);
 }
- 6e4:	83 c4 4c             	add    $0x4c,%esp
- 6e7:	5b                   	pop    %ebx
- 6e8:	5e                   	pop    %esi
- 6e9:	5f                   	pop    %edi
- 6ea:	5d                   	pop    %ebp
- 6eb:	c3                   	ret    
- 6ec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 6f4:	83 c4 4c             	add    $0x4c,%esp
+ 6f7:	5b                   	pop    %ebx
+ 6f8:	5e                   	pop    %esi
+ 6f9:	5f                   	pop    %edi
+ 6fa:	5d                   	pop    %ebp
+ 6fb:	c3                   	ret    
+ 6fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     x = -xx;
- 6f0:	89 d0                	mov    %edx,%eax
- 6f2:	f7 d8                	neg    %eax
+ 700:	89 d0                	mov    %edx,%eax
+ 702:	f7 d8                	neg    %eax
     neg = 1;
- 6f4:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
- 6fb:	eb 87                	jmp    684 <printint+0x24>
- 6fd:	8d 76 00             	lea    0x0(%esi),%esi
+ 704:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
+ 70b:	eb 87                	jmp    694 <printint+0x24>
+ 70d:	8d 76 00             	lea    0x0(%esi),%esi
 
-00000700 <printf>:
+00000710 <printf>:
 
 // Print to the given fd. Only understands %d, %x, %p, %s.
 void
 printf(int fd, const char *fmt, ...)
 {
- 700:	55                   	push   %ebp
- 701:	89 e5                	mov    %esp,%ebp
- 703:	57                   	push   %edi
+ 710:	55                   	push   %ebp
+ 711:	89 e5                	mov    %esp,%ebp
+ 713:	57                   	push   %edi
   char *s;
   int c, i, state;
   uint *ap;
 
   state = 0;
- 704:	31 ff                	xor    %edi,%edi
+ 714:	31 ff                	xor    %edi,%edi
 {
- 706:	56                   	push   %esi
- 707:	53                   	push   %ebx
- 708:	83 ec 3c             	sub    $0x3c,%esp
+ 716:	56                   	push   %esi
+ 717:	53                   	push   %ebx
+ 718:	83 ec 3c             	sub    $0x3c,%esp
   ap = (uint*)(void*)&fmt + 1;
   for(i = 0; fmt[i]; i++){
- 70b:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+ 71b:	8b 5d 0c             	mov    0xc(%ebp),%ebx
   ap = (uint*)(void*)&fmt + 1;
- 70e:	8d 45 10             	lea    0x10(%ebp),%eax
+ 71e:	8d 45 10             	lea    0x10(%ebp),%eax
 {
- 711:	8b 75 08             	mov    0x8(%ebp),%esi
+ 721:	8b 75 08             	mov    0x8(%ebp),%esi
   ap = (uint*)(void*)&fmt + 1;
- 714:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ 724:	89 45 d4             	mov    %eax,-0x2c(%ebp)
   for(i = 0; fmt[i]; i++){
- 717:	0f b6 13             	movzbl (%ebx),%edx
- 71a:	83 c3 01             	add    $0x1,%ebx
- 71d:	84 d2                	test   %dl,%dl
- 71f:	75 39                	jne    75a <printf+0x5a>
- 721:	e9 c2 00 00 00       	jmp    7e8 <printf+0xe8>
- 726:	66 90                	xchg   %ax,%ax
+ 727:	0f b6 13             	movzbl (%ebx),%edx
+ 72a:	83 c3 01             	add    $0x1,%ebx
+ 72d:	84 d2                	test   %dl,%dl
+ 72f:	75 39                	jne    76a <printf+0x5a>
+ 731:	e9 c2 00 00 00       	jmp    7f8 <printf+0xe8>
+ 736:	66 90                	xchg   %ax,%ax
     c = fmt[i] & 0xff;
     if(state == 0){
       if(c == '%'){
- 728:	83 fa 25             	cmp    $0x25,%edx
- 72b:	0f 84 bf 00 00 00    	je     7f0 <printf+0xf0>
+ 738:	83 fa 25             	cmp    $0x25,%edx
+ 73b:	0f 84 bf 00 00 00    	je     800 <printf+0xf0>
   write(fd, &c, 1);
- 731:	8d 45 e2             	lea    -0x1e(%ebp),%eax
- 734:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
- 73b:	00 
- 73c:	89 44 24 04          	mov    %eax,0x4(%esp)
- 740:	89 34 24             	mov    %esi,(%esp)
+ 741:	8d 45 e2             	lea    -0x1e(%ebp),%eax
+ 744:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+ 74b:	00 
+ 74c:	89 44 24 04          	mov    %eax,0x4(%esp)
+ 750:	89 34 24             	mov    %esi,(%esp)
         state = '%';
       } else {
         putc(fd, c);
- 743:	88 55 e2             	mov    %dl,-0x1e(%ebp)
+ 753:	88 55 e2             	mov    %dl,-0x1e(%ebp)
   write(fd, &c, 1);
- 746:	e8 87 fe ff ff       	call   5d2 <write>
- 74b:	83 c3 01             	add    $0x1,%ebx
+ 756:	e8 77 fe ff ff       	call   5d2 <write>
+ 75b:	83 c3 01             	add    $0x1,%ebx
   for(i = 0; fmt[i]; i++){
- 74e:	0f b6 53 ff          	movzbl -0x1(%ebx),%edx
- 752:	84 d2                	test   %dl,%dl
- 754:	0f 84 8e 00 00 00    	je     7e8 <printf+0xe8>
+ 75e:	0f b6 53 ff          	movzbl -0x1(%ebx),%edx
+ 762:	84 d2                	test   %dl,%dl
+ 764:	0f 84 8e 00 00 00    	je     7f8 <printf+0xe8>
     if(state == 0){
- 75a:	85 ff                	test   %edi,%edi
+ 76a:	85 ff                	test   %edi,%edi
     c = fmt[i] & 0xff;
- 75c:	0f be c2             	movsbl %dl,%eax
+ 76c:	0f be c2             	movsbl %dl,%eax
     if(state == 0){
- 75f:	74 c7                	je     728 <printf+0x28>
+ 76f:	74 c7                	je     738 <printf+0x28>
       }
     } else if(state == '%'){
- 761:	83 ff 25             	cmp    $0x25,%edi
- 764:	75 e5                	jne    74b <printf+0x4b>
+ 771:	83 ff 25             	cmp    $0x25,%edi
+ 774:	75 e5                	jne    75b <printf+0x4b>
       if(c == 'd'){
- 766:	83 fa 64             	cmp    $0x64,%edx
- 769:	0f 84 31 01 00 00    	je     8a0 <printf+0x1a0>
+ 776:	83 fa 64             	cmp    $0x64,%edx
+ 779:	0f 84 31 01 00 00    	je     8b0 <printf+0x1a0>
         printint(fd, *ap, 10, 1);
         ap++;
       } else if(c == 'x' || c == 'p'){
- 76f:	25 f7 00 00 00       	and    $0xf7,%eax
- 774:	83 f8 70             	cmp    $0x70,%eax
- 777:	0f 84 83 00 00 00    	je     800 <printf+0x100>
+ 77f:	25 f7 00 00 00       	and    $0xf7,%eax
+ 784:	83 f8 70             	cmp    $0x70,%eax
+ 787:	0f 84 83 00 00 00    	je     810 <printf+0x100>
         printint(fd, *ap, 16, 0);
         ap++;
       } else if(c == 's'){
- 77d:	83 fa 73             	cmp    $0x73,%edx
- 780:	0f 84 a2 00 00 00    	je     828 <printf+0x128>
+ 78d:	83 fa 73             	cmp    $0x73,%edx
+ 790:	0f 84 a2 00 00 00    	je     838 <printf+0x128>
           s = "(null)";
         while(*s != 0){
           putc(fd, *s);
           s++;
         }
       } else if(c == 'c'){
- 786:	83 fa 63             	cmp    $0x63,%edx
- 789:	0f 84 35 01 00 00    	je     8c4 <printf+0x1c4>
+ 796:	83 fa 63             	cmp    $0x63,%edx
+ 799:	0f 84 35 01 00 00    	je     8d4 <printf+0x1c4>
         putc(fd, *ap);
         ap++;
       } else if(c == '%'){
- 78f:	83 fa 25             	cmp    $0x25,%edx
- 792:	0f 84 e0 00 00 00    	je     878 <printf+0x178>
+ 79f:	83 fa 25             	cmp    $0x25,%edx
+ 7a2:	0f 84 e0 00 00 00    	je     888 <printf+0x178>
   write(fd, &c, 1);
- 798:	8d 45 e6             	lea    -0x1a(%ebp),%eax
- 79b:	83 c3 01             	add    $0x1,%ebx
- 79e:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
- 7a5:	00 
+ 7a8:	8d 45 e6             	lea    -0x1a(%ebp),%eax
+ 7ab:	83 c3 01             	add    $0x1,%ebx
+ 7ae:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+ 7b5:	00 
       } else {
         // Unknown % sequence.  Print it to draw attention.
         putc(fd, '%');
         putc(fd, c);
       }
       state = 0;
- 7a6:	31 ff                	xor    %edi,%edi
+ 7b6:	31 ff                	xor    %edi,%edi
   write(fd, &c, 1);
- 7a8:	89 44 24 04          	mov    %eax,0x4(%esp)
- 7ac:	89 34 24             	mov    %esi,(%esp)
- 7af:	89 55 d0             	mov    %edx,-0x30(%ebp)
- 7b2:	c6 45 e6 25          	movb   $0x25,-0x1a(%ebp)
- 7b6:	e8 17 fe ff ff       	call   5d2 <write>
+ 7b8:	89 44 24 04          	mov    %eax,0x4(%esp)
+ 7bc:	89 34 24             	mov    %esi,(%esp)
+ 7bf:	89 55 d0             	mov    %edx,-0x30(%ebp)
+ 7c2:	c6 45 e6 25          	movb   $0x25,-0x1a(%ebp)
+ 7c6:	e8 07 fe ff ff       	call   5d2 <write>
         putc(fd, c);
- 7bb:	8b 55 d0             	mov    -0x30(%ebp),%edx
+ 7cb:	8b 55 d0             	mov    -0x30(%ebp),%edx
   write(fd, &c, 1);
- 7be:	8d 45 e7             	lea    -0x19(%ebp),%eax
- 7c1:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
- 7c8:	00 
- 7c9:	89 44 24 04          	mov    %eax,0x4(%esp)
- 7cd:	89 34 24             	mov    %esi,(%esp)
+ 7ce:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 7d1:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+ 7d8:	00 
+ 7d9:	89 44 24 04          	mov    %eax,0x4(%esp)
+ 7dd:	89 34 24             	mov    %esi,(%esp)
         putc(fd, c);
- 7d0:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 7e0:	88 55 e7             	mov    %dl,-0x19(%ebp)
   write(fd, &c, 1);
- 7d3:	e8 fa fd ff ff       	call   5d2 <write>
+ 7e3:	e8 ea fd ff ff       	call   5d2 <write>
   for(i = 0; fmt[i]; i++){
- 7d8:	0f b6 53 ff          	movzbl -0x1(%ebx),%edx
- 7dc:	84 d2                	test   %dl,%dl
- 7de:	0f 85 76 ff ff ff    	jne    75a <printf+0x5a>
- 7e4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 7e8:	0f b6 53 ff          	movzbl -0x1(%ebx),%edx
+ 7ec:	84 d2                	test   %dl,%dl
+ 7ee:	0f 85 76 ff ff ff    	jne    76a <printf+0x5a>
+ 7f4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     }
   }
 }
- 7e8:	83 c4 3c             	add    $0x3c,%esp
- 7eb:	5b                   	pop    %ebx
- 7ec:	5e                   	pop    %esi
- 7ed:	5f                   	pop    %edi
- 7ee:	5d                   	pop    %ebp
- 7ef:	c3                   	ret    
+ 7f8:	83 c4 3c             	add    $0x3c,%esp
+ 7fb:	5b                   	pop    %ebx
+ 7fc:	5e                   	pop    %esi
+ 7fd:	5f                   	pop    %edi
+ 7fe:	5d                   	pop    %ebp
+ 7ff:	c3                   	ret    
         state = '%';
- 7f0:	bf 25 00 00 00       	mov    $0x25,%edi
- 7f5:	e9 51 ff ff ff       	jmp    74b <printf+0x4b>
- 7fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 800:	bf 25 00 00 00       	mov    $0x25,%edi
+ 805:	e9 51 ff ff ff       	jmp    75b <printf+0x4b>
+ 80a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         printint(fd, *ap, 16, 0);
- 800:	8b 45 d4             	mov    -0x2c(%ebp),%eax
- 803:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 810:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+ 813:	b9 10 00 00 00       	mov    $0x10,%ecx
       state = 0;
- 808:	31 ff                	xor    %edi,%edi
+ 818:	31 ff                	xor    %edi,%edi
         printint(fd, *ap, 16, 0);
- 80a:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
- 811:	8b 10                	mov    (%eax),%edx
- 813:	89 f0                	mov    %esi,%eax
- 815:	e8 46 fe ff ff       	call   660 <printint>
+ 81a:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+ 821:	8b 10                	mov    (%eax),%edx
+ 823:	89 f0                	mov    %esi,%eax
+ 825:	e8 46 fe ff ff       	call   670 <printint>
         ap++;
- 81a:	83 45 d4 04          	addl   $0x4,-0x2c(%ebp)
- 81e:	e9 28 ff ff ff       	jmp    74b <printf+0x4b>
- 823:	90                   	nop
- 824:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 82a:	83 45 d4 04          	addl   $0x4,-0x2c(%ebp)
+ 82e:	e9 28 ff ff ff       	jmp    75b <printf+0x4b>
+ 833:	90                   	nop
+ 834:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
         s = (char*)*ap;
- 828:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+ 838:	8b 45 d4             	mov    -0x2c(%ebp),%eax
         ap++;
- 82b:	83 45 d4 04          	addl   $0x4,-0x2c(%ebp)
+ 83b:	83 45 d4 04          	addl   $0x4,-0x2c(%ebp)
         s = (char*)*ap;
- 82f:	8b 38                	mov    (%eax),%edi
+ 83f:	8b 38                	mov    (%eax),%edi
           s = "(null)";
- 831:	b8 b0 0a 00 00       	mov    $0xab0,%eax
- 836:	85 ff                	test   %edi,%edi
- 838:	0f 44 f8             	cmove  %eax,%edi
+ 841:	b8 c0 0a 00 00       	mov    $0xac0,%eax
+ 846:	85 ff                	test   %edi,%edi
+ 848:	0f 44 f8             	cmove  %eax,%edi
         while(*s != 0){
- 83b:	0f b6 07             	movzbl (%edi),%eax
- 83e:	84 c0                	test   %al,%al
- 840:	74 2a                	je     86c <printf+0x16c>
- 842:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
- 848:	88 45 e3             	mov    %al,-0x1d(%ebp)
+ 84b:	0f b6 07             	movzbl (%edi),%eax
+ 84e:	84 c0                	test   %al,%al
+ 850:	74 2a                	je     87c <printf+0x16c>
+ 852:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 858:	88 45 e3             	mov    %al,-0x1d(%ebp)
   write(fd, &c, 1);
- 84b:	8d 45 e3             	lea    -0x1d(%ebp),%eax
+ 85b:	8d 45 e3             	lea    -0x1d(%ebp),%eax
           s++;
- 84e:	83 c7 01             	add    $0x1,%edi
+ 85e:	83 c7 01             	add    $0x1,%edi
   write(fd, &c, 1);
- 851:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
- 858:	00 
- 859:	89 44 24 04          	mov    %eax,0x4(%esp)
- 85d:	89 34 24             	mov    %esi,(%esp)
- 860:	e8 6d fd ff ff       	call   5d2 <write>
+ 861:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+ 868:	00 
+ 869:	89 44 24 04          	mov    %eax,0x4(%esp)
+ 86d:	89 34 24             	mov    %esi,(%esp)
+ 870:	e8 5d fd ff ff       	call   5d2 <write>
         while(*s != 0){
- 865:	0f b6 07             	movzbl (%edi),%eax
- 868:	84 c0                	test   %al,%al
- 86a:	75 dc                	jne    848 <printf+0x148>
+ 875:	0f b6 07             	movzbl (%edi),%eax
+ 878:	84 c0                	test   %al,%al
+ 87a:	75 dc                	jne    858 <printf+0x148>
       state = 0;
- 86c:	31 ff                	xor    %edi,%edi
- 86e:	e9 d8 fe ff ff       	jmp    74b <printf+0x4b>
- 873:	90                   	nop
- 874:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 87c:	31 ff                	xor    %edi,%edi
+ 87e:	e9 d8 fe ff ff       	jmp    75b <printf+0x4b>
+ 883:	90                   	nop
+ 884:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   write(fd, &c, 1);
- 878:	8d 45 e5             	lea    -0x1b(%ebp),%eax
+ 888:	8d 45 e5             	lea    -0x1b(%ebp),%eax
       state = 0;
- 87b:	31 ff                	xor    %edi,%edi
+ 88b:	31 ff                	xor    %edi,%edi
   write(fd, &c, 1);
- 87d:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
- 884:	00 
- 885:	89 44 24 04          	mov    %eax,0x4(%esp)
- 889:	89 34 24             	mov    %esi,(%esp)
- 88c:	c6 45 e5 25          	movb   $0x25,-0x1b(%ebp)
- 890:	e8 3d fd ff ff       	call   5d2 <write>
- 895:	e9 b1 fe ff ff       	jmp    74b <printf+0x4b>
- 89a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 88d:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+ 894:	00 
+ 895:	89 44 24 04          	mov    %eax,0x4(%esp)
+ 899:	89 34 24             	mov    %esi,(%esp)
+ 89c:	c6 45 e5 25          	movb   $0x25,-0x1b(%ebp)
+ 8a0:	e8 2d fd ff ff       	call   5d2 <write>
+ 8a5:	e9 b1 fe ff ff       	jmp    75b <printf+0x4b>
+ 8aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         printint(fd, *ap, 10, 1);
- 8a0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
- 8a3:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 8b0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+ 8b3:	b9 0a 00 00 00       	mov    $0xa,%ecx
       state = 0;
- 8a8:	66 31 ff             	xor    %di,%di
+ 8b8:	66 31 ff             	xor    %di,%di
         printint(fd, *ap, 10, 1);
- 8ab:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
- 8b2:	8b 10                	mov    (%eax),%edx
- 8b4:	89 f0                	mov    %esi,%eax
- 8b6:	e8 a5 fd ff ff       	call   660 <printint>
+ 8bb:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+ 8c2:	8b 10                	mov    (%eax),%edx
+ 8c4:	89 f0                	mov    %esi,%eax
+ 8c6:	e8 a5 fd ff ff       	call   670 <printint>
         ap++;
- 8bb:	83 45 d4 04          	addl   $0x4,-0x2c(%ebp)
- 8bf:	e9 87 fe ff ff       	jmp    74b <printf+0x4b>
+ 8cb:	83 45 d4 04          	addl   $0x4,-0x2c(%ebp)
+ 8cf:	e9 87 fe ff ff       	jmp    75b <printf+0x4b>
         putc(fd, *ap);
- 8c4:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+ 8d4:	8b 45 d4             	mov    -0x2c(%ebp),%eax
       state = 0;
- 8c7:	31 ff                	xor    %edi,%edi
+ 8d7:	31 ff                	xor    %edi,%edi
         putc(fd, *ap);
- 8c9:	8b 00                	mov    (%eax),%eax
+ 8d9:	8b 00                	mov    (%eax),%eax
   write(fd, &c, 1);
- 8cb:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
- 8d2:	00 
- 8d3:	89 34 24             	mov    %esi,(%esp)
+ 8db:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+ 8e2:	00 
+ 8e3:	89 34 24             	mov    %esi,(%esp)
         putc(fd, *ap);
- 8d6:	88 45 e4             	mov    %al,-0x1c(%ebp)
+ 8e6:	88 45 e4             	mov    %al,-0x1c(%ebp)
   write(fd, &c, 1);
- 8d9:	8d 45 e4             	lea    -0x1c(%ebp),%eax
- 8dc:	89 44 24 04          	mov    %eax,0x4(%esp)
- 8e0:	e8 ed fc ff ff       	call   5d2 <write>
+ 8e9:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+ 8ec:	89 44 24 04          	mov    %eax,0x4(%esp)
+ 8f0:	e8 dd fc ff ff       	call   5d2 <write>
         ap++;
- 8e5:	83 45 d4 04          	addl   $0x4,-0x2c(%ebp)
- 8e9:	e9 5d fe ff ff       	jmp    74b <printf+0x4b>
- 8ee:	66 90                	xchg   %ax,%ax
+ 8f5:	83 45 d4 04          	addl   $0x4,-0x2c(%ebp)
+ 8f9:	e9 5d fe ff ff       	jmp    75b <printf+0x4b>
+ 8fe:	66 90                	xchg   %ax,%ax
 
-000008f0 <free>:
+00000900 <free>:
 static Header base;
 static Header *freep;
 
 void
 free(void *ap)
 {
- 8f0:	55                   	push   %ebp
+ 900:	55                   	push   %ebp
   Header *bp, *p;
 
   bp = (Header*)ap - 1;
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 8f1:	a1 a8 0d 00 00       	mov    0xda8,%eax
+ 901:	a1 b8 0d 00 00       	mov    0xdb8,%eax
 {
- 8f6:	89 e5                	mov    %esp,%ebp
- 8f8:	57                   	push   %edi
- 8f9:	56                   	push   %esi
- 8fa:	53                   	push   %ebx
- 8fb:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 906:	89 e5                	mov    %esp,%ebp
+ 908:	57                   	push   %edi
+ 909:	56                   	push   %esi
+ 90a:	53                   	push   %ebx
+ 90b:	8b 5d 08             	mov    0x8(%ebp),%ebx
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 8fe:	8b 08                	mov    (%eax),%ecx
+ 90e:	8b 08                	mov    (%eax),%ecx
   bp = (Header*)ap - 1;
- 900:	8d 53 f8             	lea    -0x8(%ebx),%edx
+ 910:	8d 53 f8             	lea    -0x8(%ebx),%edx
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 903:	39 d0                	cmp    %edx,%eax
- 905:	72 11                	jb     918 <free+0x28>
- 907:	90                   	nop
+ 913:	39 d0                	cmp    %edx,%eax
+ 915:	72 11                	jb     928 <free+0x28>
+ 917:	90                   	nop
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 908:	39 c8                	cmp    %ecx,%eax
- 90a:	72 04                	jb     910 <free+0x20>
- 90c:	39 ca                	cmp    %ecx,%edx
- 90e:	72 10                	jb     920 <free+0x30>
- 910:	89 c8                	mov    %ecx,%eax
+ 918:	39 c8                	cmp    %ecx,%eax
+ 91a:	72 04                	jb     920 <free+0x20>
+ 91c:	39 ca                	cmp    %ecx,%edx
+ 91e:	72 10                	jb     930 <free+0x30>
+ 920:	89 c8                	mov    %ecx,%eax
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 912:	39 d0                	cmp    %edx,%eax
+ 922:	39 d0                	cmp    %edx,%eax
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 914:	8b 08                	mov    (%eax),%ecx
+ 924:	8b 08                	mov    (%eax),%ecx
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 916:	73 f0                	jae    908 <free+0x18>
- 918:	39 ca                	cmp    %ecx,%edx
- 91a:	72 04                	jb     920 <free+0x30>
+ 926:	73 f0                	jae    918 <free+0x18>
+ 928:	39 ca                	cmp    %ecx,%edx
+ 92a:	72 04                	jb     930 <free+0x30>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 91c:	39 c8                	cmp    %ecx,%eax
- 91e:	72 f0                	jb     910 <free+0x20>
+ 92c:	39 c8                	cmp    %ecx,%eax
+ 92e:	72 f0                	jb     920 <free+0x20>
       break;
   if(bp + bp->s.size == p->s.ptr){
- 920:	8b 73 fc             	mov    -0x4(%ebx),%esi
- 923:	8d 3c f2             	lea    (%edx,%esi,8),%edi
- 926:	39 cf                	cmp    %ecx,%edi
- 928:	74 1e                	je     948 <free+0x58>
+ 930:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 933:	8d 3c f2             	lea    (%edx,%esi,8),%edi
+ 936:	39 cf                	cmp    %ecx,%edi
+ 938:	74 1e                	je     958 <free+0x58>
     bp->s.size += p->s.ptr->s.size;
     bp->s.ptr = p->s.ptr->s.ptr;
   } else
     bp->s.ptr = p->s.ptr;
- 92a:	89 4b f8             	mov    %ecx,-0x8(%ebx)
+ 93a:	89 4b f8             	mov    %ecx,-0x8(%ebx)
   if(p + p->s.size == bp){
- 92d:	8b 48 04             	mov    0x4(%eax),%ecx
- 930:	8d 34 c8             	lea    (%eax,%ecx,8),%esi
- 933:	39 f2                	cmp    %esi,%edx
- 935:	74 28                	je     95f <free+0x6f>
+ 93d:	8b 48 04             	mov    0x4(%eax),%ecx
+ 940:	8d 34 c8             	lea    (%eax,%ecx,8),%esi
+ 943:	39 f2                	cmp    %esi,%edx
+ 945:	74 28                	je     96f <free+0x6f>
     p->s.size += bp->s.size;
     p->s.ptr = bp->s.ptr;
   } else
     p->s.ptr = bp;
- 937:	89 10                	mov    %edx,(%eax)
+ 947:	89 10                	mov    %edx,(%eax)
   freep = p;
- 939:	a3 a8 0d 00 00       	mov    %eax,0xda8
+ 949:	a3 b8 0d 00 00       	mov    %eax,0xdb8
 }
- 93e:	5b                   	pop    %ebx
- 93f:	5e                   	pop    %esi
- 940:	5f                   	pop    %edi
- 941:	5d                   	pop    %ebp
- 942:	c3                   	ret    
- 943:	90                   	nop
- 944:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 94e:	5b                   	pop    %ebx
+ 94f:	5e                   	pop    %esi
+ 950:	5f                   	pop    %edi
+ 951:	5d                   	pop    %ebp
+ 952:	c3                   	ret    
+ 953:	90                   	nop
+ 954:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     bp->s.size += p->s.ptr->s.size;
- 948:	03 71 04             	add    0x4(%ecx),%esi
- 94b:	89 73 fc             	mov    %esi,-0x4(%ebx)
+ 958:	03 71 04             	add    0x4(%ecx),%esi
+ 95b:	89 73 fc             	mov    %esi,-0x4(%ebx)
     bp->s.ptr = p->s.ptr->s.ptr;
- 94e:	8b 08                	mov    (%eax),%ecx
- 950:	8b 09                	mov    (%ecx),%ecx
- 952:	89 4b f8             	mov    %ecx,-0x8(%ebx)
+ 95e:	8b 08                	mov    (%eax),%ecx
+ 960:	8b 09                	mov    (%ecx),%ecx
+ 962:	89 4b f8             	mov    %ecx,-0x8(%ebx)
   if(p + p->s.size == bp){
- 955:	8b 48 04             	mov    0x4(%eax),%ecx
- 958:	8d 34 c8             	lea    (%eax,%ecx,8),%esi
- 95b:	39 f2                	cmp    %esi,%edx
- 95d:	75 d8                	jne    937 <free+0x47>
+ 965:	8b 48 04             	mov    0x4(%eax),%ecx
+ 968:	8d 34 c8             	lea    (%eax,%ecx,8),%esi
+ 96b:	39 f2                	cmp    %esi,%edx
+ 96d:	75 d8                	jne    947 <free+0x47>
     p->s.size += bp->s.size;
- 95f:	03 4b fc             	add    -0x4(%ebx),%ecx
+ 96f:	03 4b fc             	add    -0x4(%ebx),%ecx
   freep = p;
- 962:	a3 a8 0d 00 00       	mov    %eax,0xda8
+ 972:	a3 b8 0d 00 00       	mov    %eax,0xdb8
     p->s.size += bp->s.size;
- 967:	89 48 04             	mov    %ecx,0x4(%eax)
+ 977:	89 48 04             	mov    %ecx,0x4(%eax)
     p->s.ptr = bp->s.ptr;
- 96a:	8b 53 f8             	mov    -0x8(%ebx),%edx
- 96d:	89 10                	mov    %edx,(%eax)
+ 97a:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 97d:	89 10                	mov    %edx,(%eax)
 }
- 96f:	5b                   	pop    %ebx
- 970:	5e                   	pop    %esi
- 971:	5f                   	pop    %edi
- 972:	5d                   	pop    %ebp
- 973:	c3                   	ret    
- 974:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
- 97a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
-
-00000980 <malloc>:
+ 97f:	5b                   	pop    %ebx
+ 980:	5e                   	pop    %esi
+ 981:	5f                   	pop    %edi
+ 982:	5d                   	pop    %ebp
+ 983:	c3                   	ret    
+ 984:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 98a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+00000990 <malloc>:
   return freep;
 }
 
 void*
 malloc(uint nbytes)
 {
- 980:	55                   	push   %ebp
- 981:	89 e5                	mov    %esp,%ebp
- 983:	57                   	push   %edi
- 984:	56                   	push   %esi
- 985:	53                   	push   %ebx
- 986:	83 ec 1c             	sub    $0x1c,%esp
+ 990:	55                   	push   %ebp
+ 991:	89 e5                	mov    %esp,%ebp
+ 993:	57                   	push   %edi
+ 994:	56                   	push   %esi
+ 995:	53                   	push   %ebx
+ 996:	83 ec 1c             	sub    $0x1c,%esp
   Header *p, *prevp;
   uint nunits;
 
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 989:	8b 45 08             	mov    0x8(%ebp),%eax
+ 999:	8b 45 08             	mov    0x8(%ebp),%eax
   if((prevp = freep) == 0){
- 98c:	8b 1d a8 0d 00 00    	mov    0xda8,%ebx
+ 99c:	8b 1d b8 0d 00 00    	mov    0xdb8,%ebx
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 992:	8d 48 07             	lea    0x7(%eax),%ecx
- 995:	c1 e9 03             	shr    $0x3,%ecx
+ 9a2:	8d 48 07             	lea    0x7(%eax),%ecx
+ 9a5:	c1 e9 03             	shr    $0x3,%ecx
   if((prevp = freep) == 0){
- 998:	85 db                	test   %ebx,%ebx
+ 9a8:	85 db                	test   %ebx,%ebx
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 99a:	8d 71 01             	lea    0x1(%ecx),%esi
+ 9aa:	8d 71 01             	lea    0x1(%ecx),%esi
   if((prevp = freep) == 0){
- 99d:	0f 84 9b 00 00 00    	je     a3e <malloc+0xbe>
- 9a3:	8b 13                	mov    (%ebx),%edx
- 9a5:	8b 7a 04             	mov    0x4(%edx),%edi
+ 9ad:	0f 84 9b 00 00 00    	je     a4e <malloc+0xbe>
+ 9b3:	8b 13                	mov    (%ebx),%edx
+ 9b5:	8b 7a 04             	mov    0x4(%edx),%edi
     base.s.ptr = freep = prevp = &base;
     base.s.size = 0;
   }
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
     if(p->s.size >= nunits){
- 9a8:	39 fe                	cmp    %edi,%esi
- 9aa:	76 64                	jbe    a10 <malloc+0x90>
- 9ac:	8d 04 f5 00 00 00 00 	lea    0x0(,%esi,8),%eax
+ 9b8:	39 fe                	cmp    %edi,%esi
+ 9ba:	76 64                	jbe    a20 <malloc+0x90>
+ 9bc:	8d 04 f5 00 00 00 00 	lea    0x0(,%esi,8),%eax
   if(nu < 4096)
- 9b3:	bb 00 80 00 00       	mov    $0x8000,%ebx
- 9b8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
- 9bb:	eb 0e                	jmp    9cb <malloc+0x4b>
- 9bd:	8d 76 00             	lea    0x0(%esi),%esi
+ 9c3:	bb 00 80 00 00       	mov    $0x8000,%ebx
+ 9c8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+ 9cb:	eb 0e                	jmp    9db <malloc+0x4b>
+ 9cd:	8d 76 00             	lea    0x0(%esi),%esi
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 9c0:	8b 02                	mov    (%edx),%eax
+ 9d0:	8b 02                	mov    (%edx),%eax
     if(p->s.size >= nunits){
- 9c2:	8b 78 04             	mov    0x4(%eax),%edi
- 9c5:	39 fe                	cmp    %edi,%esi
- 9c7:	76 4f                	jbe    a18 <malloc+0x98>
- 9c9:	89 c2                	mov    %eax,%edx
+ 9d2:	8b 78 04             	mov    0x4(%eax),%edi
+ 9d5:	39 fe                	cmp    %edi,%esi
+ 9d7:	76 4f                	jbe    a28 <malloc+0x98>
+ 9d9:	89 c2                	mov    %eax,%edx
         p->s.size = nunits;
       }
       freep = prevp;
       return (void*)(p + 1);
     }
     if(p == freep)
- 9cb:	3b 15 a8 0d 00 00    	cmp    0xda8,%edx
- 9d1:	75 ed                	jne    9c0 <malloc+0x40>
+ 9db:	3b 15 b8 0d 00 00    	cmp    0xdb8,%edx
+ 9e1:	75 ed                	jne    9d0 <malloc+0x40>
   if(nu < 4096)
- 9d3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
- 9d6:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
- 9dc:	bf 00 10 00 00       	mov    $0x1000,%edi
- 9e1:	0f 43 fe             	cmovae %esi,%edi
- 9e4:	0f 42 c3             	cmovb  %ebx,%eax
+ 9e3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+ 9e6:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+ 9ec:	bf 00 10 00 00       	mov    $0x1000,%edi
+ 9f1:	0f 43 fe             	cmovae %esi,%edi
+ 9f4:	0f 42 c3             	cmovb  %ebx,%eax
   p = sbrk(nu * sizeof(Header));
- 9e7:	89 04 24             	mov    %eax,(%esp)
- 9ea:	e8 4b fc ff ff       	call   63a <sbrk>
+ 9f7:	89 04 24             	mov    %eax,(%esp)
+ 9fa:	e8 3b fc ff ff       	call   63a <sbrk>
   if(p == (char*)-1)
- 9ef:	83 f8 ff             	cmp    $0xffffffff,%eax
- 9f2:	74 18                	je     a0c <malloc+0x8c>
+ 9ff:	83 f8 ff             	cmp    $0xffffffff,%eax
+ a02:	74 18                	je     a1c <malloc+0x8c>
   hp->s.size = nu;
- 9f4:	89 78 04             	mov    %edi,0x4(%eax)
+ a04:	89 78 04             	mov    %edi,0x4(%eax)
   free((void*)(hp + 1));
- 9f7:	83 c0 08             	add    $0x8,%eax
- 9fa:	89 04 24             	mov    %eax,(%esp)
- 9fd:	e8 ee fe ff ff       	call   8f0 <free>
+ a07:	83 c0 08             	add    $0x8,%eax
+ a0a:	89 04 24             	mov    %eax,(%esp)
+ a0d:	e8 ee fe ff ff       	call   900 <free>
   return freep;
- a02:	8b 15 a8 0d 00 00    	mov    0xda8,%edx
+ a12:	8b 15 b8 0d 00 00    	mov    0xdb8,%edx
       if((p = morecore(nunits)) == 0)
- a08:	85 d2                	test   %edx,%edx
- a0a:	75 b4                	jne    9c0 <malloc+0x40>
+ a18:	85 d2                	test   %edx,%edx
+ a1a:	75 b4                	jne    9d0 <malloc+0x40>
         return 0;
- a0c:	31 c0                	xor    %eax,%eax
- a0e:	eb 20                	jmp    a30 <malloc+0xb0>
+ a1c:	31 c0                	xor    %eax,%eax
+ a1e:	eb 20                	jmp    a40 <malloc+0xb0>
     if(p->s.size >= nunits){
- a10:	89 d0                	mov    %edx,%eax
- a12:	89 da                	mov    %ebx,%edx
- a14:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ a20:	89 d0                	mov    %edx,%eax
+ a22:	89 da                	mov    %ebx,%edx
+ a24:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
       if(p->s.size == nunits)
- a18:	39 fe                	cmp    %edi,%esi
- a1a:	74 1c                	je     a38 <malloc+0xb8>
+ a28:	39 fe                	cmp    %edi,%esi
+ a2a:	74 1c                	je     a48 <malloc+0xb8>
         p->s.size -= nunits;
- a1c:	29 f7                	sub    %esi,%edi
- a1e:	89 78 04             	mov    %edi,0x4(%eax)
+ a2c:	29 f7                	sub    %esi,%edi
+ a2e:	89 78 04             	mov    %edi,0x4(%eax)
         p += p->s.size;
- a21:	8d 04 f8             	lea    (%eax,%edi,8),%eax
+ a31:	8d 04 f8             	lea    (%eax,%edi,8),%eax
         p->s.size = nunits;
- a24:	89 70 04             	mov    %esi,0x4(%eax)
+ a34:	89 70 04             	mov    %esi,0x4(%eax)
       freep = prevp;
- a27:	89 15 a8 0d 00 00    	mov    %edx,0xda8
+ a37:	89 15 b8 0d 00 00    	mov    %edx,0xdb8
       return (void*)(p + 1);
- a2d:	83 c0 08             	add    $0x8,%eax
+ a3d:	83 c0 08             	add    $0x8,%eax
   }
 }
- a30:	83 c4 1c             	add    $0x1c,%esp
- a33:	5b                   	pop    %ebx
- a34:	5e                   	pop    %esi
- a35:	5f                   	pop    %edi
- a36:	5d                   	pop    %ebp
- a37:	c3                   	ret    
+ a40:	83 c4 1c             	add    $0x1c,%esp
+ a43:	5b                   	pop    %ebx
+ a44:	5e                   	pop    %esi
+ a45:	5f                   	pop    %edi
+ a46:	5d                   	pop    %ebp
+ a47:	c3                   	ret    
         prevp->s.ptr = p->s.ptr;
- a38:	8b 08                	mov    (%eax),%ecx
- a3a:	89 0a                	mov    %ecx,(%edx)
- a3c:	eb e9                	jmp    a27 <malloc+0xa7>
+ a48:	8b 08                	mov    (%eax),%ecx
+ a4a:	89 0a                	mov    %ecx,(%edx)
+ a4c:	eb e9                	jmp    a37 <malloc+0xa7>
     base.s.ptr = freep = prevp = &base;
- a3e:	c7 05 a8 0d 00 00 ac 	movl   $0xdac,0xda8
- a45:	0d 00 00 
+ a4e:	c7 05 b8 0d 00 00 bc 	movl   $0xdbc,0xdb8
+ a55:	0d 00 00 
     base.s.size = 0;
- a48:	ba ac 0d 00 00       	mov    $0xdac,%edx
+ a58:	ba bc 0d 00 00       	mov    $0xdbc,%edx
     base.s.ptr = freep = prevp = &base;
- a4d:	c7 05 ac 0d 00 00 ac 	movl   $0xdac,0xdac
- a54:	0d 00 00 
+ a5d:	c7 05 bc 0d 00 00 bc 	movl   $0xdbc,0xdbc
+ a64:	0d 00 00 
     base.s.size = 0;
- a57:	c7 05 b0 0d 00 00 00 	movl   $0x0,0xdb0
- a5e:	00 00 00 
- a61:	e9 46 ff ff ff       	jmp    9ac <malloc+0x2c>
+ a67:	c7 05 c0 0d 00 00 00 	movl   $0x0,0xdc0
+ a6e:	00 00 00 
+ a71:	e9 46 ff ff ff       	jmp    9bc <malloc+0x2c>
diff --git a/ls.o b/ls.o
index a3ea465..bf963e1 100644
Binary files a/ls.o and b/ls.o differ
diff --git a/ls.sym b/ls.sym
index d5cdbdc..587f4f1 100644
--- a/ls.sym
+++ b/ls.sym
@@ -1,7 +1,7 @@
 00000000 .text
-00000a66 .rodata
-00000ac8 .eh_frame
-00000d98 .bss
+00000a76 .rodata
+00000ad8 .eh_frame
+00000da8 .bss
 00000000 .comment
 00000000 .debug_aranges
 00000000 .debug_info
@@ -11,29 +11,31 @@
 00000000 .debug_loc
 00000000 .debug_ranges
 00000000 ls.c
-00000d98 buf.1369
+00000da8 buf.1373
 00000000 ulib.c
 00000000 printf.c
-00000660 printint
-00000ab7 digits.1358
+00000670 printint
+00000ac7 digits.1362
 00000000 umalloc.c
-00000da8 freep
-00000dac base
+00000db8 freep
+00000dbc base
 00000390 strcpy
 00000060 fmtname
 00000652 waitpid
-00000700 printf
+00000710 printf
 00000580 memmove
 000005fa mknod
 000004a0 gets
 00000632 getpid
-00000980 malloc
+00000990 malloc
 00000642 sleep
 000005c2 pipe
+0000065a setPrior
 000005d2 write
 0000060a fstat
 000005e2 kill
 00000622 chdir
+00000662 getPrior
 000005ea exec
 000005ba wait
 000005ca read
@@ -41,14 +43,14 @@
 000005aa fork
 0000063a sbrk
 0000064a uptime
-00000d98 __bss_start
+00000da8 __bss_start
 00000440 memset
 00000000 main
 000003c0 strcmp
 0000062a dup
 00000500 stat
-00000d98 _edata
-00000db4 _end
+00000da8 _edata
+00000dc4 _end
 00000612 link
 00000100 ls
 000005b2 exit
@@ -58,4 +60,4 @@
 00000460 strchr
 0000061a mkdir
 000005da close
-000008f0 free
+00000900 free
diff --git a/main.o b/main.o
index 24f126c..2b853fb 100644
Binary files a/main.o and b/main.o differ
diff --git a/mkdir.asm b/mkdir.asm
index 38e6aa9..063c31e 100644
--- a/mkdir.asm
+++ b/mkdir.asm
@@ -56,18 +56,18 @@ main(int argc, char *argv[])
   3f:	e8 5e 02 00 00       	call   2a2 <exit>
       printf(2, "mkdir: %s failed to create\n", argv[i]);
   44:	8b 03                	mov    (%ebx),%eax
-  46:	c7 44 24 04 6d 07 00 	movl   $0x76d,0x4(%esp)
+  46:	c7 44 24 04 7d 07 00 	movl   $0x77d,0x4(%esp)
   4d:	00 
   4e:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
   55:	89 44 24 08          	mov    %eax,0x8(%esp)
-  59:	e8 92 03 00 00       	call   3f0 <printf>
+  59:	e8 a2 03 00 00       	call   400 <printf>
       break;
   5e:	eb d8                	jmp    38 <main+0x38>
     printf(2, "Usage: mkdir files...\n");
-  60:	c7 44 24 04 56 07 00 	movl   $0x756,0x4(%esp)
+  60:	c7 44 24 04 66 07 00 	movl   $0x766,0x4(%esp)
   67:	00 
   68:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-  6f:	e8 7c 03 00 00       	call   3f0 <printf>
+  6f:	e8 8c 03 00 00       	call   400 <printf>
     exit(0);
   74:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
   7b:	e8 22 02 00 00       	call   2a2 <exit>
@@ -586,580 +586,592 @@ SYSCALL(uptime)
  341:	c3                   	ret    
 
 00000342 <waitpid>:
+SYSCALL(waitpid)
  342:	b8 16 00 00 00       	mov    $0x16,%eax
  347:	cd 40                	int    $0x40
  349:	c3                   	ret    
- 34a:	66 90                	xchg   %ax,%ax
- 34c:	66 90                	xchg   %ax,%ax
- 34e:	66 90                	xchg   %ax,%ax
 
-00000350 <printint>:
+0000034a <setPrior>:
+SYSCALL(setPrior)
+ 34a:	b8 17 00 00 00       	mov    $0x17,%eax
+ 34f:	cd 40                	int    $0x40
+ 351:	c3                   	ret    
+
+00000352 <getPrior>:
+ 352:	b8 18 00 00 00       	mov    $0x18,%eax
+ 357:	cd 40                	int    $0x40
+ 359:	c3                   	ret    
+ 35a:	66 90                	xchg   %ax,%ax
+ 35c:	66 90                	xchg   %ax,%ax
+ 35e:	66 90                	xchg   %ax,%ax
+
+00000360 <printint>:
   write(fd, &c, 1);
 }
 
 static void
 printint(int fd, int xx, int base, int sgn)
 {
- 350:	55                   	push   %ebp
- 351:	89 e5                	mov    %esp,%ebp
- 353:	57                   	push   %edi
- 354:	56                   	push   %esi
- 355:	89 c6                	mov    %eax,%esi
- 357:	53                   	push   %ebx
- 358:	83 ec 4c             	sub    $0x4c,%esp
+ 360:	55                   	push   %ebp
+ 361:	89 e5                	mov    %esp,%ebp
+ 363:	57                   	push   %edi
+ 364:	56                   	push   %esi
+ 365:	89 c6                	mov    %eax,%esi
+ 367:	53                   	push   %ebx
+ 368:	83 ec 4c             	sub    $0x4c,%esp
   char buf[16];
   int i, neg;
   uint x;
 
   neg = 0;
   if(sgn && xx < 0){
- 35b:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 35e:	85 db                	test   %ebx,%ebx
- 360:	74 09                	je     36b <printint+0x1b>
- 362:	89 d0                	mov    %edx,%eax
- 364:	c1 e8 1f             	shr    $0x1f,%eax
- 367:	84 c0                	test   %al,%al
- 369:	75 75                	jne    3e0 <printint+0x90>
+ 36b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 36e:	85 db                	test   %ebx,%ebx
+ 370:	74 09                	je     37b <printint+0x1b>
+ 372:	89 d0                	mov    %edx,%eax
+ 374:	c1 e8 1f             	shr    $0x1f,%eax
+ 377:	84 c0                	test   %al,%al
+ 379:	75 75                	jne    3f0 <printint+0x90>
     neg = 1;
     x = -xx;
   } else {
     x = xx;
- 36b:	89 d0                	mov    %edx,%eax
+ 37b:	89 d0                	mov    %edx,%eax
   neg = 0;
- 36d:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
- 374:	89 75 c0             	mov    %esi,-0x40(%ebp)
+ 37d:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
+ 384:	89 75 c0             	mov    %esi,-0x40(%ebp)
   }
 
   i = 0;
- 377:	31 ff                	xor    %edi,%edi
- 379:	89 ce                	mov    %ecx,%esi
- 37b:	8d 5d d7             	lea    -0x29(%ebp),%ebx
- 37e:	eb 02                	jmp    382 <printint+0x32>
+ 387:	31 ff                	xor    %edi,%edi
+ 389:	89 ce                	mov    %ecx,%esi
+ 38b:	8d 5d d7             	lea    -0x29(%ebp),%ebx
+ 38e:	eb 02                	jmp    392 <printint+0x32>
   do{
     buf[i++] = digits[x % base];
- 380:	89 cf                	mov    %ecx,%edi
- 382:	31 d2                	xor    %edx,%edx
- 384:	f7 f6                	div    %esi
- 386:	8d 4f 01             	lea    0x1(%edi),%ecx
- 389:	0f b6 92 90 07 00 00 	movzbl 0x790(%edx),%edx
+ 390:	89 cf                	mov    %ecx,%edi
+ 392:	31 d2                	xor    %edx,%edx
+ 394:	f7 f6                	div    %esi
+ 396:	8d 4f 01             	lea    0x1(%edi),%ecx
+ 399:	0f b6 92 a0 07 00 00 	movzbl 0x7a0(%edx),%edx
   }while((x /= base) != 0);
- 390:	85 c0                	test   %eax,%eax
+ 3a0:	85 c0                	test   %eax,%eax
     buf[i++] = digits[x % base];
- 392:	88 14 0b             	mov    %dl,(%ebx,%ecx,1)
+ 3a2:	88 14 0b             	mov    %dl,(%ebx,%ecx,1)
   }while((x /= base) != 0);
- 395:	75 e9                	jne    380 <printint+0x30>
+ 3a5:	75 e9                	jne    390 <printint+0x30>
   if(neg)
- 397:	8b 55 c4             	mov    -0x3c(%ebp),%edx
+ 3a7:	8b 55 c4             	mov    -0x3c(%ebp),%edx
     buf[i++] = digits[x % base];
- 39a:	89 c8                	mov    %ecx,%eax
- 39c:	8b 75 c0             	mov    -0x40(%ebp),%esi
+ 3aa:	89 c8                	mov    %ecx,%eax
+ 3ac:	8b 75 c0             	mov    -0x40(%ebp),%esi
   if(neg)
- 39f:	85 d2                	test   %edx,%edx
- 3a1:	74 08                	je     3ab <printint+0x5b>
+ 3af:	85 d2                	test   %edx,%edx
+ 3b1:	74 08                	je     3bb <printint+0x5b>
     buf[i++] = '-';
- 3a3:	8d 4f 02             	lea    0x2(%edi),%ecx
- 3a6:	c6 44 05 d8 2d       	movb   $0x2d,-0x28(%ebp,%eax,1)
+ 3b3:	8d 4f 02             	lea    0x2(%edi),%ecx
+ 3b6:	c6 44 05 d8 2d       	movb   $0x2d,-0x28(%ebp,%eax,1)
 
   while(--i >= 0)
- 3ab:	8d 79 ff             	lea    -0x1(%ecx),%edi
- 3ae:	66 90                	xchg   %ax,%ax
- 3b0:	0f b6 44 3d d8       	movzbl -0x28(%ebp,%edi,1),%eax
- 3b5:	83 ef 01             	sub    $0x1,%edi
+ 3bb:	8d 79 ff             	lea    -0x1(%ecx),%edi
+ 3be:	66 90                	xchg   %ax,%ax
+ 3c0:	0f b6 44 3d d8       	movzbl -0x28(%ebp,%edi,1),%eax
+ 3c5:	83 ef 01             	sub    $0x1,%edi
   write(fd, &c, 1);
- 3b8:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
- 3bf:	00 
- 3c0:	89 5c 24 04          	mov    %ebx,0x4(%esp)
- 3c4:	89 34 24             	mov    %esi,(%esp)
- 3c7:	88 45 d7             	mov    %al,-0x29(%ebp)
- 3ca:	e8 f3 fe ff ff       	call   2c2 <write>
+ 3c8:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+ 3cf:	00 
+ 3d0:	89 5c 24 04          	mov    %ebx,0x4(%esp)
+ 3d4:	89 34 24             	mov    %esi,(%esp)
+ 3d7:	88 45 d7             	mov    %al,-0x29(%ebp)
+ 3da:	e8 e3 fe ff ff       	call   2c2 <write>
   while(--i >= 0)
- 3cf:	83 ff ff             	cmp    $0xffffffff,%edi
- 3d2:	75 dc                	jne    3b0 <printint+0x60>
+ 3df:	83 ff ff             	cmp    $0xffffffff,%edi
+ 3e2:	75 dc                	jne    3c0 <printint+0x60>
     putc(fd, buf[i]);
 }
- 3d4:	83 c4 4c             	add    $0x4c,%esp
- 3d7:	5b                   	pop    %ebx
- 3d8:	5e                   	pop    %esi
- 3d9:	5f                   	pop    %edi
- 3da:	5d                   	pop    %ebp
- 3db:	c3                   	ret    
- 3dc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 3e4:	83 c4 4c             	add    $0x4c,%esp
+ 3e7:	5b                   	pop    %ebx
+ 3e8:	5e                   	pop    %esi
+ 3e9:	5f                   	pop    %edi
+ 3ea:	5d                   	pop    %ebp
+ 3eb:	c3                   	ret    
+ 3ec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     x = -xx;
- 3e0:	89 d0                	mov    %edx,%eax
- 3e2:	f7 d8                	neg    %eax
+ 3f0:	89 d0                	mov    %edx,%eax
+ 3f2:	f7 d8                	neg    %eax
     neg = 1;
- 3e4:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
- 3eb:	eb 87                	jmp    374 <printint+0x24>
- 3ed:	8d 76 00             	lea    0x0(%esi),%esi
+ 3f4:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
+ 3fb:	eb 87                	jmp    384 <printint+0x24>
+ 3fd:	8d 76 00             	lea    0x0(%esi),%esi
 
-000003f0 <printf>:
+00000400 <printf>:
 
 // Print to the given fd. Only understands %d, %x, %p, %s.
 void
 printf(int fd, const char *fmt, ...)
 {
- 3f0:	55                   	push   %ebp
- 3f1:	89 e5                	mov    %esp,%ebp
- 3f3:	57                   	push   %edi
+ 400:	55                   	push   %ebp
+ 401:	89 e5                	mov    %esp,%ebp
+ 403:	57                   	push   %edi
   char *s;
   int c, i, state;
   uint *ap;
 
   state = 0;
- 3f4:	31 ff                	xor    %edi,%edi
+ 404:	31 ff                	xor    %edi,%edi
 {
- 3f6:	56                   	push   %esi
- 3f7:	53                   	push   %ebx
- 3f8:	83 ec 3c             	sub    $0x3c,%esp
+ 406:	56                   	push   %esi
+ 407:	53                   	push   %ebx
+ 408:	83 ec 3c             	sub    $0x3c,%esp
   ap = (uint*)(void*)&fmt + 1;
   for(i = 0; fmt[i]; i++){
- 3fb:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+ 40b:	8b 5d 0c             	mov    0xc(%ebp),%ebx
   ap = (uint*)(void*)&fmt + 1;
- 3fe:	8d 45 10             	lea    0x10(%ebp),%eax
+ 40e:	8d 45 10             	lea    0x10(%ebp),%eax
 {
- 401:	8b 75 08             	mov    0x8(%ebp),%esi
+ 411:	8b 75 08             	mov    0x8(%ebp),%esi
   ap = (uint*)(void*)&fmt + 1;
- 404:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ 414:	89 45 d4             	mov    %eax,-0x2c(%ebp)
   for(i = 0; fmt[i]; i++){
- 407:	0f b6 13             	movzbl (%ebx),%edx
- 40a:	83 c3 01             	add    $0x1,%ebx
- 40d:	84 d2                	test   %dl,%dl
- 40f:	75 39                	jne    44a <printf+0x5a>
- 411:	e9 c2 00 00 00       	jmp    4d8 <printf+0xe8>
- 416:	66 90                	xchg   %ax,%ax
+ 417:	0f b6 13             	movzbl (%ebx),%edx
+ 41a:	83 c3 01             	add    $0x1,%ebx
+ 41d:	84 d2                	test   %dl,%dl
+ 41f:	75 39                	jne    45a <printf+0x5a>
+ 421:	e9 c2 00 00 00       	jmp    4e8 <printf+0xe8>
+ 426:	66 90                	xchg   %ax,%ax
     c = fmt[i] & 0xff;
     if(state == 0){
       if(c == '%'){
- 418:	83 fa 25             	cmp    $0x25,%edx
- 41b:	0f 84 bf 00 00 00    	je     4e0 <printf+0xf0>
+ 428:	83 fa 25             	cmp    $0x25,%edx
+ 42b:	0f 84 bf 00 00 00    	je     4f0 <printf+0xf0>
   write(fd, &c, 1);
- 421:	8d 45 e2             	lea    -0x1e(%ebp),%eax
- 424:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
- 42b:	00 
- 42c:	89 44 24 04          	mov    %eax,0x4(%esp)
- 430:	89 34 24             	mov    %esi,(%esp)
+ 431:	8d 45 e2             	lea    -0x1e(%ebp),%eax
+ 434:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+ 43b:	00 
+ 43c:	89 44 24 04          	mov    %eax,0x4(%esp)
+ 440:	89 34 24             	mov    %esi,(%esp)
         state = '%';
       } else {
         putc(fd, c);
- 433:	88 55 e2             	mov    %dl,-0x1e(%ebp)
+ 443:	88 55 e2             	mov    %dl,-0x1e(%ebp)
   write(fd, &c, 1);
- 436:	e8 87 fe ff ff       	call   2c2 <write>
- 43b:	83 c3 01             	add    $0x1,%ebx
+ 446:	e8 77 fe ff ff       	call   2c2 <write>
+ 44b:	83 c3 01             	add    $0x1,%ebx
   for(i = 0; fmt[i]; i++){
- 43e:	0f b6 53 ff          	movzbl -0x1(%ebx),%edx
- 442:	84 d2                	test   %dl,%dl
- 444:	0f 84 8e 00 00 00    	je     4d8 <printf+0xe8>
+ 44e:	0f b6 53 ff          	movzbl -0x1(%ebx),%edx
+ 452:	84 d2                	test   %dl,%dl
+ 454:	0f 84 8e 00 00 00    	je     4e8 <printf+0xe8>
     if(state == 0){
- 44a:	85 ff                	test   %edi,%edi
+ 45a:	85 ff                	test   %edi,%edi
     c = fmt[i] & 0xff;
- 44c:	0f be c2             	movsbl %dl,%eax
+ 45c:	0f be c2             	movsbl %dl,%eax
     if(state == 0){
- 44f:	74 c7                	je     418 <printf+0x28>
+ 45f:	74 c7                	je     428 <printf+0x28>
       }
     } else if(state == '%'){
- 451:	83 ff 25             	cmp    $0x25,%edi
- 454:	75 e5                	jne    43b <printf+0x4b>
+ 461:	83 ff 25             	cmp    $0x25,%edi
+ 464:	75 e5                	jne    44b <printf+0x4b>
       if(c == 'd'){
- 456:	83 fa 64             	cmp    $0x64,%edx
- 459:	0f 84 31 01 00 00    	je     590 <printf+0x1a0>
+ 466:	83 fa 64             	cmp    $0x64,%edx
+ 469:	0f 84 31 01 00 00    	je     5a0 <printf+0x1a0>
         printint(fd, *ap, 10, 1);
         ap++;
       } else if(c == 'x' || c == 'p'){
- 45f:	25 f7 00 00 00       	and    $0xf7,%eax
- 464:	83 f8 70             	cmp    $0x70,%eax
- 467:	0f 84 83 00 00 00    	je     4f0 <printf+0x100>
+ 46f:	25 f7 00 00 00       	and    $0xf7,%eax
+ 474:	83 f8 70             	cmp    $0x70,%eax
+ 477:	0f 84 83 00 00 00    	je     500 <printf+0x100>
         printint(fd, *ap, 16, 0);
         ap++;
       } else if(c == 's'){
- 46d:	83 fa 73             	cmp    $0x73,%edx
- 470:	0f 84 a2 00 00 00    	je     518 <printf+0x128>
+ 47d:	83 fa 73             	cmp    $0x73,%edx
+ 480:	0f 84 a2 00 00 00    	je     528 <printf+0x128>
           s = "(null)";
         while(*s != 0){
           putc(fd, *s);
           s++;
         }
       } else if(c == 'c'){
- 476:	83 fa 63             	cmp    $0x63,%edx
- 479:	0f 84 35 01 00 00    	je     5b4 <printf+0x1c4>
+ 486:	83 fa 63             	cmp    $0x63,%edx
+ 489:	0f 84 35 01 00 00    	je     5c4 <printf+0x1c4>
         putc(fd, *ap);
         ap++;
       } else if(c == '%'){
- 47f:	83 fa 25             	cmp    $0x25,%edx
- 482:	0f 84 e0 00 00 00    	je     568 <printf+0x178>
+ 48f:	83 fa 25             	cmp    $0x25,%edx
+ 492:	0f 84 e0 00 00 00    	je     578 <printf+0x178>
   write(fd, &c, 1);
- 488:	8d 45 e6             	lea    -0x1a(%ebp),%eax
- 48b:	83 c3 01             	add    $0x1,%ebx
- 48e:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
- 495:	00 
+ 498:	8d 45 e6             	lea    -0x1a(%ebp),%eax
+ 49b:	83 c3 01             	add    $0x1,%ebx
+ 49e:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+ 4a5:	00 
       } else {
         // Unknown % sequence.  Print it to draw attention.
         putc(fd, '%');
         putc(fd, c);
       }
       state = 0;
- 496:	31 ff                	xor    %edi,%edi
+ 4a6:	31 ff                	xor    %edi,%edi
   write(fd, &c, 1);
- 498:	89 44 24 04          	mov    %eax,0x4(%esp)
- 49c:	89 34 24             	mov    %esi,(%esp)
- 49f:	89 55 d0             	mov    %edx,-0x30(%ebp)
- 4a2:	c6 45 e6 25          	movb   $0x25,-0x1a(%ebp)
- 4a6:	e8 17 fe ff ff       	call   2c2 <write>
+ 4a8:	89 44 24 04          	mov    %eax,0x4(%esp)
+ 4ac:	89 34 24             	mov    %esi,(%esp)
+ 4af:	89 55 d0             	mov    %edx,-0x30(%ebp)
+ 4b2:	c6 45 e6 25          	movb   $0x25,-0x1a(%ebp)
+ 4b6:	e8 07 fe ff ff       	call   2c2 <write>
         putc(fd, c);
- 4ab:	8b 55 d0             	mov    -0x30(%ebp),%edx
+ 4bb:	8b 55 d0             	mov    -0x30(%ebp),%edx
   write(fd, &c, 1);
- 4ae:	8d 45 e7             	lea    -0x19(%ebp),%eax
- 4b1:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
- 4b8:	00 
- 4b9:	89 44 24 04          	mov    %eax,0x4(%esp)
- 4bd:	89 34 24             	mov    %esi,(%esp)
+ 4be:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 4c1:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+ 4c8:	00 
+ 4c9:	89 44 24 04          	mov    %eax,0x4(%esp)
+ 4cd:	89 34 24             	mov    %esi,(%esp)
         putc(fd, c);
- 4c0:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 4d0:	88 55 e7             	mov    %dl,-0x19(%ebp)
   write(fd, &c, 1);
- 4c3:	e8 fa fd ff ff       	call   2c2 <write>
+ 4d3:	e8 ea fd ff ff       	call   2c2 <write>
   for(i = 0; fmt[i]; i++){
- 4c8:	0f b6 53 ff          	movzbl -0x1(%ebx),%edx
- 4cc:	84 d2                	test   %dl,%dl
- 4ce:	0f 85 76 ff ff ff    	jne    44a <printf+0x5a>
- 4d4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 4d8:	0f b6 53 ff          	movzbl -0x1(%ebx),%edx
+ 4dc:	84 d2                	test   %dl,%dl
+ 4de:	0f 85 76 ff ff ff    	jne    45a <printf+0x5a>
+ 4e4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     }
   }
 }
- 4d8:	83 c4 3c             	add    $0x3c,%esp
- 4db:	5b                   	pop    %ebx
- 4dc:	5e                   	pop    %esi
- 4dd:	5f                   	pop    %edi
- 4de:	5d                   	pop    %ebp
- 4df:	c3                   	ret    
+ 4e8:	83 c4 3c             	add    $0x3c,%esp
+ 4eb:	5b                   	pop    %ebx
+ 4ec:	5e                   	pop    %esi
+ 4ed:	5f                   	pop    %edi
+ 4ee:	5d                   	pop    %ebp
+ 4ef:	c3                   	ret    
         state = '%';
- 4e0:	bf 25 00 00 00       	mov    $0x25,%edi
- 4e5:	e9 51 ff ff ff       	jmp    43b <printf+0x4b>
- 4ea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 4f0:	bf 25 00 00 00       	mov    $0x25,%edi
+ 4f5:	e9 51 ff ff ff       	jmp    44b <printf+0x4b>
+ 4fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         printint(fd, *ap, 16, 0);
- 4f0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
- 4f3:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 500:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+ 503:	b9 10 00 00 00       	mov    $0x10,%ecx
       state = 0;
- 4f8:	31 ff                	xor    %edi,%edi
+ 508:	31 ff                	xor    %edi,%edi
         printint(fd, *ap, 16, 0);
- 4fa:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
- 501:	8b 10                	mov    (%eax),%edx
- 503:	89 f0                	mov    %esi,%eax
- 505:	e8 46 fe ff ff       	call   350 <printint>
+ 50a:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+ 511:	8b 10                	mov    (%eax),%edx
+ 513:	89 f0                	mov    %esi,%eax
+ 515:	e8 46 fe ff ff       	call   360 <printint>
         ap++;
- 50a:	83 45 d4 04          	addl   $0x4,-0x2c(%ebp)
- 50e:	e9 28 ff ff ff       	jmp    43b <printf+0x4b>
- 513:	90                   	nop
- 514:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 51a:	83 45 d4 04          	addl   $0x4,-0x2c(%ebp)
+ 51e:	e9 28 ff ff ff       	jmp    44b <printf+0x4b>
+ 523:	90                   	nop
+ 524:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
         s = (char*)*ap;
- 518:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+ 528:	8b 45 d4             	mov    -0x2c(%ebp),%eax
         ap++;
- 51b:	83 45 d4 04          	addl   $0x4,-0x2c(%ebp)
+ 52b:	83 45 d4 04          	addl   $0x4,-0x2c(%ebp)
         s = (char*)*ap;
- 51f:	8b 38                	mov    (%eax),%edi
+ 52f:	8b 38                	mov    (%eax),%edi
           s = "(null)";
- 521:	b8 89 07 00 00       	mov    $0x789,%eax
- 526:	85 ff                	test   %edi,%edi
- 528:	0f 44 f8             	cmove  %eax,%edi
+ 531:	b8 99 07 00 00       	mov    $0x799,%eax
+ 536:	85 ff                	test   %edi,%edi
+ 538:	0f 44 f8             	cmove  %eax,%edi
         while(*s != 0){
- 52b:	0f b6 07             	movzbl (%edi),%eax
- 52e:	84 c0                	test   %al,%al
- 530:	74 2a                	je     55c <printf+0x16c>
- 532:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
- 538:	88 45 e3             	mov    %al,-0x1d(%ebp)
+ 53b:	0f b6 07             	movzbl (%edi),%eax
+ 53e:	84 c0                	test   %al,%al
+ 540:	74 2a                	je     56c <printf+0x16c>
+ 542:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 548:	88 45 e3             	mov    %al,-0x1d(%ebp)
   write(fd, &c, 1);
- 53b:	8d 45 e3             	lea    -0x1d(%ebp),%eax
+ 54b:	8d 45 e3             	lea    -0x1d(%ebp),%eax
           s++;
- 53e:	83 c7 01             	add    $0x1,%edi
+ 54e:	83 c7 01             	add    $0x1,%edi
   write(fd, &c, 1);
- 541:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
- 548:	00 
- 549:	89 44 24 04          	mov    %eax,0x4(%esp)
- 54d:	89 34 24             	mov    %esi,(%esp)
- 550:	e8 6d fd ff ff       	call   2c2 <write>
+ 551:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+ 558:	00 
+ 559:	89 44 24 04          	mov    %eax,0x4(%esp)
+ 55d:	89 34 24             	mov    %esi,(%esp)
+ 560:	e8 5d fd ff ff       	call   2c2 <write>
         while(*s != 0){
- 555:	0f b6 07             	movzbl (%edi),%eax
- 558:	84 c0                	test   %al,%al
- 55a:	75 dc                	jne    538 <printf+0x148>
+ 565:	0f b6 07             	movzbl (%edi),%eax
+ 568:	84 c0                	test   %al,%al
+ 56a:	75 dc                	jne    548 <printf+0x148>
       state = 0;
- 55c:	31 ff                	xor    %edi,%edi
- 55e:	e9 d8 fe ff ff       	jmp    43b <printf+0x4b>
- 563:	90                   	nop
- 564:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 56c:	31 ff                	xor    %edi,%edi
+ 56e:	e9 d8 fe ff ff       	jmp    44b <printf+0x4b>
+ 573:	90                   	nop
+ 574:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   write(fd, &c, 1);
- 568:	8d 45 e5             	lea    -0x1b(%ebp),%eax
+ 578:	8d 45 e5             	lea    -0x1b(%ebp),%eax
       state = 0;
- 56b:	31 ff                	xor    %edi,%edi
+ 57b:	31 ff                	xor    %edi,%edi
   write(fd, &c, 1);
- 56d:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
- 574:	00 
- 575:	89 44 24 04          	mov    %eax,0x4(%esp)
- 579:	89 34 24             	mov    %esi,(%esp)
- 57c:	c6 45 e5 25          	movb   $0x25,-0x1b(%ebp)
- 580:	e8 3d fd ff ff       	call   2c2 <write>
- 585:	e9 b1 fe ff ff       	jmp    43b <printf+0x4b>
- 58a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 57d:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+ 584:	00 
+ 585:	89 44 24 04          	mov    %eax,0x4(%esp)
+ 589:	89 34 24             	mov    %esi,(%esp)
+ 58c:	c6 45 e5 25          	movb   $0x25,-0x1b(%ebp)
+ 590:	e8 2d fd ff ff       	call   2c2 <write>
+ 595:	e9 b1 fe ff ff       	jmp    44b <printf+0x4b>
+ 59a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         printint(fd, *ap, 10, 1);
- 590:	8b 45 d4             	mov    -0x2c(%ebp),%eax
- 593:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 5a0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+ 5a3:	b9 0a 00 00 00       	mov    $0xa,%ecx
       state = 0;
- 598:	66 31 ff             	xor    %di,%di
+ 5a8:	66 31 ff             	xor    %di,%di
         printint(fd, *ap, 10, 1);
- 59b:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
- 5a2:	8b 10                	mov    (%eax),%edx
- 5a4:	89 f0                	mov    %esi,%eax
- 5a6:	e8 a5 fd ff ff       	call   350 <printint>
+ 5ab:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+ 5b2:	8b 10                	mov    (%eax),%edx
+ 5b4:	89 f0                	mov    %esi,%eax
+ 5b6:	e8 a5 fd ff ff       	call   360 <printint>
         ap++;
- 5ab:	83 45 d4 04          	addl   $0x4,-0x2c(%ebp)
- 5af:	e9 87 fe ff ff       	jmp    43b <printf+0x4b>
+ 5bb:	83 45 d4 04          	addl   $0x4,-0x2c(%ebp)
+ 5bf:	e9 87 fe ff ff       	jmp    44b <printf+0x4b>
         putc(fd, *ap);
- 5b4:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+ 5c4:	8b 45 d4             	mov    -0x2c(%ebp),%eax
       state = 0;
- 5b7:	31 ff                	xor    %edi,%edi
+ 5c7:	31 ff                	xor    %edi,%edi
         putc(fd, *ap);
- 5b9:	8b 00                	mov    (%eax),%eax
+ 5c9:	8b 00                	mov    (%eax),%eax
   write(fd, &c, 1);
- 5bb:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
- 5c2:	00 
- 5c3:	89 34 24             	mov    %esi,(%esp)
+ 5cb:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+ 5d2:	00 
+ 5d3:	89 34 24             	mov    %esi,(%esp)
         putc(fd, *ap);
- 5c6:	88 45 e4             	mov    %al,-0x1c(%ebp)
+ 5d6:	88 45 e4             	mov    %al,-0x1c(%ebp)
   write(fd, &c, 1);
- 5c9:	8d 45 e4             	lea    -0x1c(%ebp),%eax
- 5cc:	89 44 24 04          	mov    %eax,0x4(%esp)
- 5d0:	e8 ed fc ff ff       	call   2c2 <write>
+ 5d9:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+ 5dc:	89 44 24 04          	mov    %eax,0x4(%esp)
+ 5e0:	e8 dd fc ff ff       	call   2c2 <write>
         ap++;
- 5d5:	83 45 d4 04          	addl   $0x4,-0x2c(%ebp)
- 5d9:	e9 5d fe ff ff       	jmp    43b <printf+0x4b>
- 5de:	66 90                	xchg   %ax,%ax
+ 5e5:	83 45 d4 04          	addl   $0x4,-0x2c(%ebp)
+ 5e9:	e9 5d fe ff ff       	jmp    44b <printf+0x4b>
+ 5ee:	66 90                	xchg   %ax,%ax
 
-000005e0 <free>:
+000005f0 <free>:
 static Header base;
 static Header *freep;
 
 void
 free(void *ap)
 {
- 5e0:	55                   	push   %ebp
+ 5f0:	55                   	push   %ebp
   Header *bp, *p;
 
   bp = (Header*)ap - 1;
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 5e1:	a1 10 0a 00 00       	mov    0xa10,%eax
+ 5f1:	a1 20 0a 00 00       	mov    0xa20,%eax
 {
- 5e6:	89 e5                	mov    %esp,%ebp
- 5e8:	57                   	push   %edi
- 5e9:	56                   	push   %esi
- 5ea:	53                   	push   %ebx
- 5eb:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 5f6:	89 e5                	mov    %esp,%ebp
+ 5f8:	57                   	push   %edi
+ 5f9:	56                   	push   %esi
+ 5fa:	53                   	push   %ebx
+ 5fb:	8b 5d 08             	mov    0x8(%ebp),%ebx
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 5ee:	8b 08                	mov    (%eax),%ecx
+ 5fe:	8b 08                	mov    (%eax),%ecx
   bp = (Header*)ap - 1;
- 5f0:	8d 53 f8             	lea    -0x8(%ebx),%edx
+ 600:	8d 53 f8             	lea    -0x8(%ebx),%edx
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 5f3:	39 d0                	cmp    %edx,%eax
- 5f5:	72 11                	jb     608 <free+0x28>
- 5f7:	90                   	nop
+ 603:	39 d0                	cmp    %edx,%eax
+ 605:	72 11                	jb     618 <free+0x28>
+ 607:	90                   	nop
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 5f8:	39 c8                	cmp    %ecx,%eax
- 5fa:	72 04                	jb     600 <free+0x20>
- 5fc:	39 ca                	cmp    %ecx,%edx
- 5fe:	72 10                	jb     610 <free+0x30>
- 600:	89 c8                	mov    %ecx,%eax
+ 608:	39 c8                	cmp    %ecx,%eax
+ 60a:	72 04                	jb     610 <free+0x20>
+ 60c:	39 ca                	cmp    %ecx,%edx
+ 60e:	72 10                	jb     620 <free+0x30>
+ 610:	89 c8                	mov    %ecx,%eax
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 602:	39 d0                	cmp    %edx,%eax
+ 612:	39 d0                	cmp    %edx,%eax
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 604:	8b 08                	mov    (%eax),%ecx
+ 614:	8b 08                	mov    (%eax),%ecx
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 606:	73 f0                	jae    5f8 <free+0x18>
- 608:	39 ca                	cmp    %ecx,%edx
- 60a:	72 04                	jb     610 <free+0x30>
+ 616:	73 f0                	jae    608 <free+0x18>
+ 618:	39 ca                	cmp    %ecx,%edx
+ 61a:	72 04                	jb     620 <free+0x30>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 60c:	39 c8                	cmp    %ecx,%eax
- 60e:	72 f0                	jb     600 <free+0x20>
+ 61c:	39 c8                	cmp    %ecx,%eax
+ 61e:	72 f0                	jb     610 <free+0x20>
       break;
   if(bp + bp->s.size == p->s.ptr){
- 610:	8b 73 fc             	mov    -0x4(%ebx),%esi
- 613:	8d 3c f2             	lea    (%edx,%esi,8),%edi
- 616:	39 cf                	cmp    %ecx,%edi
- 618:	74 1e                	je     638 <free+0x58>
+ 620:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 623:	8d 3c f2             	lea    (%edx,%esi,8),%edi
+ 626:	39 cf                	cmp    %ecx,%edi
+ 628:	74 1e                	je     648 <free+0x58>
     bp->s.size += p->s.ptr->s.size;
     bp->s.ptr = p->s.ptr->s.ptr;
   } else
     bp->s.ptr = p->s.ptr;
- 61a:	89 4b f8             	mov    %ecx,-0x8(%ebx)
+ 62a:	89 4b f8             	mov    %ecx,-0x8(%ebx)
   if(p + p->s.size == bp){
- 61d:	8b 48 04             	mov    0x4(%eax),%ecx
- 620:	8d 34 c8             	lea    (%eax,%ecx,8),%esi
- 623:	39 f2                	cmp    %esi,%edx
- 625:	74 28                	je     64f <free+0x6f>
+ 62d:	8b 48 04             	mov    0x4(%eax),%ecx
+ 630:	8d 34 c8             	lea    (%eax,%ecx,8),%esi
+ 633:	39 f2                	cmp    %esi,%edx
+ 635:	74 28                	je     65f <free+0x6f>
     p->s.size += bp->s.size;
     p->s.ptr = bp->s.ptr;
   } else
     p->s.ptr = bp;
- 627:	89 10                	mov    %edx,(%eax)
+ 637:	89 10                	mov    %edx,(%eax)
   freep = p;
- 629:	a3 10 0a 00 00       	mov    %eax,0xa10
+ 639:	a3 20 0a 00 00       	mov    %eax,0xa20
 }
- 62e:	5b                   	pop    %ebx
- 62f:	5e                   	pop    %esi
- 630:	5f                   	pop    %edi
- 631:	5d                   	pop    %ebp
- 632:	c3                   	ret    
- 633:	90                   	nop
- 634:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 63e:	5b                   	pop    %ebx
+ 63f:	5e                   	pop    %esi
+ 640:	5f                   	pop    %edi
+ 641:	5d                   	pop    %ebp
+ 642:	c3                   	ret    
+ 643:	90                   	nop
+ 644:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     bp->s.size += p->s.ptr->s.size;
- 638:	03 71 04             	add    0x4(%ecx),%esi
- 63b:	89 73 fc             	mov    %esi,-0x4(%ebx)
+ 648:	03 71 04             	add    0x4(%ecx),%esi
+ 64b:	89 73 fc             	mov    %esi,-0x4(%ebx)
     bp->s.ptr = p->s.ptr->s.ptr;
- 63e:	8b 08                	mov    (%eax),%ecx
- 640:	8b 09                	mov    (%ecx),%ecx
- 642:	89 4b f8             	mov    %ecx,-0x8(%ebx)
+ 64e:	8b 08                	mov    (%eax),%ecx
+ 650:	8b 09                	mov    (%ecx),%ecx
+ 652:	89 4b f8             	mov    %ecx,-0x8(%ebx)
   if(p + p->s.size == bp){
- 645:	8b 48 04             	mov    0x4(%eax),%ecx
- 648:	8d 34 c8             	lea    (%eax,%ecx,8),%esi
- 64b:	39 f2                	cmp    %esi,%edx
- 64d:	75 d8                	jne    627 <free+0x47>
+ 655:	8b 48 04             	mov    0x4(%eax),%ecx
+ 658:	8d 34 c8             	lea    (%eax,%ecx,8),%esi
+ 65b:	39 f2                	cmp    %esi,%edx
+ 65d:	75 d8                	jne    637 <free+0x47>
     p->s.size += bp->s.size;
- 64f:	03 4b fc             	add    -0x4(%ebx),%ecx
+ 65f:	03 4b fc             	add    -0x4(%ebx),%ecx
   freep = p;
- 652:	a3 10 0a 00 00       	mov    %eax,0xa10
+ 662:	a3 20 0a 00 00       	mov    %eax,0xa20
     p->s.size += bp->s.size;
- 657:	89 48 04             	mov    %ecx,0x4(%eax)
+ 667:	89 48 04             	mov    %ecx,0x4(%eax)
     p->s.ptr = bp->s.ptr;
- 65a:	8b 53 f8             	mov    -0x8(%ebx),%edx
- 65d:	89 10                	mov    %edx,(%eax)
+ 66a:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 66d:	89 10                	mov    %edx,(%eax)
 }
- 65f:	5b                   	pop    %ebx
- 660:	5e                   	pop    %esi
- 661:	5f                   	pop    %edi
- 662:	5d                   	pop    %ebp
- 663:	c3                   	ret    
- 664:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
- 66a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
-
-00000670 <malloc>:
+ 66f:	5b                   	pop    %ebx
+ 670:	5e                   	pop    %esi
+ 671:	5f                   	pop    %edi
+ 672:	5d                   	pop    %ebp
+ 673:	c3                   	ret    
+ 674:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 67a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+00000680 <malloc>:
   return freep;
 }
 
 void*
 malloc(uint nbytes)
 {
- 670:	55                   	push   %ebp
- 671:	89 e5                	mov    %esp,%ebp
- 673:	57                   	push   %edi
- 674:	56                   	push   %esi
- 675:	53                   	push   %ebx
- 676:	83 ec 1c             	sub    $0x1c,%esp
+ 680:	55                   	push   %ebp
+ 681:	89 e5                	mov    %esp,%ebp
+ 683:	57                   	push   %edi
+ 684:	56                   	push   %esi
+ 685:	53                   	push   %ebx
+ 686:	83 ec 1c             	sub    $0x1c,%esp
   Header *p, *prevp;
   uint nunits;
 
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 679:	8b 45 08             	mov    0x8(%ebp),%eax
+ 689:	8b 45 08             	mov    0x8(%ebp),%eax
   if((prevp = freep) == 0){
- 67c:	8b 1d 10 0a 00 00    	mov    0xa10,%ebx
+ 68c:	8b 1d 20 0a 00 00    	mov    0xa20,%ebx
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 682:	8d 48 07             	lea    0x7(%eax),%ecx
- 685:	c1 e9 03             	shr    $0x3,%ecx
+ 692:	8d 48 07             	lea    0x7(%eax),%ecx
+ 695:	c1 e9 03             	shr    $0x3,%ecx
   if((prevp = freep) == 0){
- 688:	85 db                	test   %ebx,%ebx
+ 698:	85 db                	test   %ebx,%ebx
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 68a:	8d 71 01             	lea    0x1(%ecx),%esi
+ 69a:	8d 71 01             	lea    0x1(%ecx),%esi
   if((prevp = freep) == 0){
- 68d:	0f 84 9b 00 00 00    	je     72e <malloc+0xbe>
- 693:	8b 13                	mov    (%ebx),%edx
- 695:	8b 7a 04             	mov    0x4(%edx),%edi
+ 69d:	0f 84 9b 00 00 00    	je     73e <malloc+0xbe>
+ 6a3:	8b 13                	mov    (%ebx),%edx
+ 6a5:	8b 7a 04             	mov    0x4(%edx),%edi
     base.s.ptr = freep = prevp = &base;
     base.s.size = 0;
   }
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
     if(p->s.size >= nunits){
- 698:	39 fe                	cmp    %edi,%esi
- 69a:	76 64                	jbe    700 <malloc+0x90>
- 69c:	8d 04 f5 00 00 00 00 	lea    0x0(,%esi,8),%eax
+ 6a8:	39 fe                	cmp    %edi,%esi
+ 6aa:	76 64                	jbe    710 <malloc+0x90>
+ 6ac:	8d 04 f5 00 00 00 00 	lea    0x0(,%esi,8),%eax
   if(nu < 4096)
- 6a3:	bb 00 80 00 00       	mov    $0x8000,%ebx
- 6a8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
- 6ab:	eb 0e                	jmp    6bb <malloc+0x4b>
- 6ad:	8d 76 00             	lea    0x0(%esi),%esi
+ 6b3:	bb 00 80 00 00       	mov    $0x8000,%ebx
+ 6b8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+ 6bb:	eb 0e                	jmp    6cb <malloc+0x4b>
+ 6bd:	8d 76 00             	lea    0x0(%esi),%esi
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 6b0:	8b 02                	mov    (%edx),%eax
+ 6c0:	8b 02                	mov    (%edx),%eax
     if(p->s.size >= nunits){
- 6b2:	8b 78 04             	mov    0x4(%eax),%edi
- 6b5:	39 fe                	cmp    %edi,%esi
- 6b7:	76 4f                	jbe    708 <malloc+0x98>
- 6b9:	89 c2                	mov    %eax,%edx
+ 6c2:	8b 78 04             	mov    0x4(%eax),%edi
+ 6c5:	39 fe                	cmp    %edi,%esi
+ 6c7:	76 4f                	jbe    718 <malloc+0x98>
+ 6c9:	89 c2                	mov    %eax,%edx
         p->s.size = nunits;
       }
       freep = prevp;
       return (void*)(p + 1);
     }
     if(p == freep)
- 6bb:	3b 15 10 0a 00 00    	cmp    0xa10,%edx
- 6c1:	75 ed                	jne    6b0 <malloc+0x40>
+ 6cb:	3b 15 20 0a 00 00    	cmp    0xa20,%edx
+ 6d1:	75 ed                	jne    6c0 <malloc+0x40>
   if(nu < 4096)
- 6c3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
- 6c6:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
- 6cc:	bf 00 10 00 00       	mov    $0x1000,%edi
- 6d1:	0f 43 fe             	cmovae %esi,%edi
- 6d4:	0f 42 c3             	cmovb  %ebx,%eax
+ 6d3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+ 6d6:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+ 6dc:	bf 00 10 00 00       	mov    $0x1000,%edi
+ 6e1:	0f 43 fe             	cmovae %esi,%edi
+ 6e4:	0f 42 c3             	cmovb  %ebx,%eax
   p = sbrk(nu * sizeof(Header));
- 6d7:	89 04 24             	mov    %eax,(%esp)
- 6da:	e8 4b fc ff ff       	call   32a <sbrk>
+ 6e7:	89 04 24             	mov    %eax,(%esp)
+ 6ea:	e8 3b fc ff ff       	call   32a <sbrk>
   if(p == (char*)-1)
- 6df:	83 f8 ff             	cmp    $0xffffffff,%eax
- 6e2:	74 18                	je     6fc <malloc+0x8c>
+ 6ef:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 6f2:	74 18                	je     70c <malloc+0x8c>
   hp->s.size = nu;
- 6e4:	89 78 04             	mov    %edi,0x4(%eax)
+ 6f4:	89 78 04             	mov    %edi,0x4(%eax)
   free((void*)(hp + 1));
- 6e7:	83 c0 08             	add    $0x8,%eax
- 6ea:	89 04 24             	mov    %eax,(%esp)
- 6ed:	e8 ee fe ff ff       	call   5e0 <free>
+ 6f7:	83 c0 08             	add    $0x8,%eax
+ 6fa:	89 04 24             	mov    %eax,(%esp)
+ 6fd:	e8 ee fe ff ff       	call   5f0 <free>
   return freep;
- 6f2:	8b 15 10 0a 00 00    	mov    0xa10,%edx
+ 702:	8b 15 20 0a 00 00    	mov    0xa20,%edx
       if((p = morecore(nunits)) == 0)
- 6f8:	85 d2                	test   %edx,%edx
- 6fa:	75 b4                	jne    6b0 <malloc+0x40>
+ 708:	85 d2                	test   %edx,%edx
+ 70a:	75 b4                	jne    6c0 <malloc+0x40>
         return 0;
- 6fc:	31 c0                	xor    %eax,%eax
- 6fe:	eb 20                	jmp    720 <malloc+0xb0>
+ 70c:	31 c0                	xor    %eax,%eax
+ 70e:	eb 20                	jmp    730 <malloc+0xb0>
     if(p->s.size >= nunits){
- 700:	89 d0                	mov    %edx,%eax
- 702:	89 da                	mov    %ebx,%edx
- 704:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 710:	89 d0                	mov    %edx,%eax
+ 712:	89 da                	mov    %ebx,%edx
+ 714:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
       if(p->s.size == nunits)
- 708:	39 fe                	cmp    %edi,%esi
- 70a:	74 1c                	je     728 <malloc+0xb8>
+ 718:	39 fe                	cmp    %edi,%esi
+ 71a:	74 1c                	je     738 <malloc+0xb8>
         p->s.size -= nunits;
- 70c:	29 f7                	sub    %esi,%edi
- 70e:	89 78 04             	mov    %edi,0x4(%eax)
+ 71c:	29 f7                	sub    %esi,%edi
+ 71e:	89 78 04             	mov    %edi,0x4(%eax)
         p += p->s.size;
- 711:	8d 04 f8             	lea    (%eax,%edi,8),%eax
+ 721:	8d 04 f8             	lea    (%eax,%edi,8),%eax
         p->s.size = nunits;
- 714:	89 70 04             	mov    %esi,0x4(%eax)
+ 724:	89 70 04             	mov    %esi,0x4(%eax)
       freep = prevp;
- 717:	89 15 10 0a 00 00    	mov    %edx,0xa10
+ 727:	89 15 20 0a 00 00    	mov    %edx,0xa20
       return (void*)(p + 1);
- 71d:	83 c0 08             	add    $0x8,%eax
+ 72d:	83 c0 08             	add    $0x8,%eax
   }
 }
- 720:	83 c4 1c             	add    $0x1c,%esp
- 723:	5b                   	pop    %ebx
- 724:	5e                   	pop    %esi
- 725:	5f                   	pop    %edi
- 726:	5d                   	pop    %ebp
- 727:	c3                   	ret    
+ 730:	83 c4 1c             	add    $0x1c,%esp
+ 733:	5b                   	pop    %ebx
+ 734:	5e                   	pop    %esi
+ 735:	5f                   	pop    %edi
+ 736:	5d                   	pop    %ebp
+ 737:	c3                   	ret    
         prevp->s.ptr = p->s.ptr;
- 728:	8b 08                	mov    (%eax),%ecx
- 72a:	89 0a                	mov    %ecx,(%edx)
- 72c:	eb e9                	jmp    717 <malloc+0xa7>
+ 738:	8b 08                	mov    (%eax),%ecx
+ 73a:	89 0a                	mov    %ecx,(%edx)
+ 73c:	eb e9                	jmp    727 <malloc+0xa7>
     base.s.ptr = freep = prevp = &base;
- 72e:	c7 05 10 0a 00 00 14 	movl   $0xa14,0xa10
- 735:	0a 00 00 
+ 73e:	c7 05 20 0a 00 00 24 	movl   $0xa24,0xa20
+ 745:	0a 00 00 
     base.s.size = 0;
- 738:	ba 14 0a 00 00       	mov    $0xa14,%edx
+ 748:	ba 24 0a 00 00       	mov    $0xa24,%edx
     base.s.ptr = freep = prevp = &base;
- 73d:	c7 05 14 0a 00 00 14 	movl   $0xa14,0xa14
- 744:	0a 00 00 
+ 74d:	c7 05 24 0a 00 00 24 	movl   $0xa24,0xa24
+ 754:	0a 00 00 
     base.s.size = 0;
- 747:	c7 05 18 0a 00 00 00 	movl   $0x0,0xa18
- 74e:	00 00 00 
- 751:	e9 46 ff ff ff       	jmp    69c <malloc+0x2c>
+ 757:	c7 05 28 0a 00 00 00 	movl   $0x0,0xa28
+ 75e:	00 00 00 
+ 761:	e9 46 ff ff ff       	jmp    6ac <malloc+0x2c>
diff --git a/mkdir.o b/mkdir.o
index 506b249..10b603a 100644
Binary files a/mkdir.o and b/mkdir.o differ
diff --git a/mkdir.sym b/mkdir.sym
index 9a65d9f..8dffbd2 100644
--- a/mkdir.sym
+++ b/mkdir.sym
@@ -1,7 +1,7 @@
 00000000 .text
-00000756 .rodata
-000007a4 .eh_frame
-00000a10 .bss
+00000766 .rodata
+000007b4 .eh_frame
+00000a20 .bss
 00000000 .comment
 00000000 .debug_aranges
 00000000 .debug_info
@@ -13,25 +13,27 @@
 00000000 mkdir.c
 00000000 ulib.c
 00000000 printf.c
-00000350 printint
-00000790 digits.1358
+00000360 printint
+000007a0 digits.1362
 00000000 umalloc.c
-00000a10 freep
-00000a14 base
+00000a20 freep
+00000a24 base
 00000080 strcpy
 00000342 waitpid
-000003f0 printf
+00000400 printf
 00000270 memmove
 000002ea mknod
 00000190 gets
 00000322 getpid
-00000670 malloc
+00000680 malloc
 00000332 sleep
 000002b2 pipe
+0000034a setPrior
 000002c2 write
 000002fa fstat
 000002d2 kill
 00000312 chdir
+00000352 getPrior
 000002da exec
 000002aa wait
 000002ba read
@@ -39,14 +41,14 @@
 0000029a fork
 0000032a sbrk
 0000033a uptime
-00000a10 __bss_start
+00000a20 __bss_start
 00000130 memset
 00000000 main
 000000b0 strcmp
 0000031a dup
 000001f0 stat
-00000a10 _edata
-00000a1c _end
+00000a20 _edata
+00000a2c _end
 00000302 link
 000002a2 exit
 00000240 atoi
@@ -55,4 +57,4 @@
 00000150 strchr
 0000030a mkdir
 000002ca close
-000005e0 free
+000005f0 free
diff --git a/mp.o b/mp.o
index f061343..829054e 100644
Binary files a/mp.o and b/mp.o differ
diff --git a/pipe.o b/pipe.o
index b992df7..8e5490f 100644
Binary files a/pipe.o and b/pipe.o differ
diff --git a/printf.o b/printf.o
index 46a5560..cc1fbf2 100644
Binary files a/printf.o and b/printf.o differ
diff --git a/proc.c b/proc.c
index fcf3451..887b696 100644
--- a/proc.c
+++ b/proc.c
@@ -215,6 +215,10 @@ fork(void)
   acquire(&ptable.lock);
 
   np->state = RUNNABLE;
+  np->starttime = ticks;
+  np->runtime = 0;
+  curproc->runtime = time - np->starttime;
+  time = np->starttime;
 
   release(&ptable.lock);
 
@@ -261,6 +265,15 @@ exit(int stat)
     }
   }
 
+  curproc->endtime = ticks;
+  curproc->turnaround = curproc->endtime - curproc->starttime;
+  curproc->runtime += curproc->endtime - time;
+
+  cprintf("PID:%d - Start time: %d \n", curproc->pid, curproc->starttime);
+  cprintf("PID:%d - End time: %d \n", curproc->pid, curproc->endtime);
+  cprintf("PID:%d - Turnaround time: %d \n", curproc->pid, curproc->turnaround);
+  cprintf("PID:%d - Burst time: %d \n", curproc->pid, curproc->turnaround - curproc->runtime);
+
   // Jump into the scheduler, never to return.
   curproc->state = ZOMBIE;
   curproc->status = stat;
@@ -382,12 +395,26 @@ scheduler(void)
   for(;;){
     // Enable interrupts on this processor.
     sti();
+    int lowP = 50;
 
     // Loop over process table looking for process to run.
     acquire(&ptable.lock);
     for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+      if(p->state == RUNNABLE && p->priority < lowP)
+        lowP = p->priority;
+    }
+
+    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
       if(p->state != RUNNABLE)
         continue;
+      
+      if(p->priority != lowP){
+        if (p->priority > 0){
+          p->priority--;
+        }
+        continue;
+      }
+    
 
       // Switch to chosen process.  It is the process's job
       // to release ptable.lock and then reacquire it
@@ -397,11 +424,10 @@ scheduler(void)
       p->state = RUNNING;
 
       swtch(&(c->scheduler), p->context);
-      switchkvm();
-
-      // Process is done running for now.
-      // It should have changed its p->state before coming back.
-      c->proc = 0;
+      switchkvm(); 
+    // Process is done running for now.
+    // It should have changed its p->state before coming back.
+    c->proc = 0;
     }
     release(&ptable.lock);
 
@@ -444,6 +470,20 @@ yield(void)
   release(&ptable.lock);
 }
 
+void 
+setPrior(int priority)
+{
+  struct proc *p = myproc();
+  p->priority = priority;
+}
+
+int
+getPrior(void)
+{
+  struct proc *p = myproc();
+  return p->priority;
+}
+
 // A fork child's very first scheduling by scheduler()
 // will swtch here.  "Return" to user space.
 void
diff --git a/proc.h b/proc.h
index e518e6e..5f8d121 100644
--- a/proc.h
+++ b/proc.h
@@ -51,8 +51,15 @@ struct proc {
   char name[16];               // Process name (debugging)
   int status;
   int options;
+  int priority;
+  int starttime;
+  int endtime;
+  int runtime;
+  int turnaround;
 };
 
+int time;
+
 // Process memory is laid out contiguously, low addresses first:
 //   text
 //   original data and bss
diff --git a/proc.o b/proc.o
index dfc6bf0..a8d393d 100644
Binary files a/proc.o and b/proc.o differ
diff --git a/rm.asm b/rm.asm
index 2f45cea..0a71e0d 100644
--- a/rm.asm
+++ b/rm.asm
@@ -56,18 +56,18 @@ main(int argc, char *argv[])
   3f:	e8 5e 02 00 00       	call   2a2 <exit>
       printf(2, "rm: %s failed to delete\n", argv[i]);
   44:	8b 03                	mov    (%ebx),%eax
-  46:	c7 44 24 04 6a 07 00 	movl   $0x76a,0x4(%esp)
+  46:	c7 44 24 04 7a 07 00 	movl   $0x77a,0x4(%esp)
   4d:	00 
   4e:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
   55:	89 44 24 08          	mov    %eax,0x8(%esp)
-  59:	e8 92 03 00 00       	call   3f0 <printf>
+  59:	e8 a2 03 00 00       	call   400 <printf>
       break;
   5e:	eb d8                	jmp    38 <main+0x38>
     printf(2, "Usage: rm files...\n");
-  60:	c7 44 24 04 56 07 00 	movl   $0x756,0x4(%esp)
+  60:	c7 44 24 04 66 07 00 	movl   $0x766,0x4(%esp)
   67:	00 
   68:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-  6f:	e8 7c 03 00 00       	call   3f0 <printf>
+  6f:	e8 8c 03 00 00       	call   400 <printf>
     exit(0);
   74:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
   7b:	e8 22 02 00 00       	call   2a2 <exit>
@@ -586,580 +586,592 @@ SYSCALL(uptime)
  341:	c3                   	ret    
 
 00000342 <waitpid>:
+SYSCALL(waitpid)
  342:	b8 16 00 00 00       	mov    $0x16,%eax
  347:	cd 40                	int    $0x40
  349:	c3                   	ret    
- 34a:	66 90                	xchg   %ax,%ax
- 34c:	66 90                	xchg   %ax,%ax
- 34e:	66 90                	xchg   %ax,%ax
 
-00000350 <printint>:
+0000034a <setPrior>:
+SYSCALL(setPrior)
+ 34a:	b8 17 00 00 00       	mov    $0x17,%eax
+ 34f:	cd 40                	int    $0x40
+ 351:	c3                   	ret    
+
+00000352 <getPrior>:
+ 352:	b8 18 00 00 00       	mov    $0x18,%eax
+ 357:	cd 40                	int    $0x40
+ 359:	c3                   	ret    
+ 35a:	66 90                	xchg   %ax,%ax
+ 35c:	66 90                	xchg   %ax,%ax
+ 35e:	66 90                	xchg   %ax,%ax
+
+00000360 <printint>:
   write(fd, &c, 1);
 }
 
 static void
 printint(int fd, int xx, int base, int sgn)
 {
- 350:	55                   	push   %ebp
- 351:	89 e5                	mov    %esp,%ebp
- 353:	57                   	push   %edi
- 354:	56                   	push   %esi
- 355:	89 c6                	mov    %eax,%esi
- 357:	53                   	push   %ebx
- 358:	83 ec 4c             	sub    $0x4c,%esp
+ 360:	55                   	push   %ebp
+ 361:	89 e5                	mov    %esp,%ebp
+ 363:	57                   	push   %edi
+ 364:	56                   	push   %esi
+ 365:	89 c6                	mov    %eax,%esi
+ 367:	53                   	push   %ebx
+ 368:	83 ec 4c             	sub    $0x4c,%esp
   char buf[16];
   int i, neg;
   uint x;
 
   neg = 0;
   if(sgn && xx < 0){
- 35b:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 35e:	85 db                	test   %ebx,%ebx
- 360:	74 09                	je     36b <printint+0x1b>
- 362:	89 d0                	mov    %edx,%eax
- 364:	c1 e8 1f             	shr    $0x1f,%eax
- 367:	84 c0                	test   %al,%al
- 369:	75 75                	jne    3e0 <printint+0x90>
+ 36b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 36e:	85 db                	test   %ebx,%ebx
+ 370:	74 09                	je     37b <printint+0x1b>
+ 372:	89 d0                	mov    %edx,%eax
+ 374:	c1 e8 1f             	shr    $0x1f,%eax
+ 377:	84 c0                	test   %al,%al
+ 379:	75 75                	jne    3f0 <printint+0x90>
     neg = 1;
     x = -xx;
   } else {
     x = xx;
- 36b:	89 d0                	mov    %edx,%eax
+ 37b:	89 d0                	mov    %edx,%eax
   neg = 0;
- 36d:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
- 374:	89 75 c0             	mov    %esi,-0x40(%ebp)
+ 37d:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
+ 384:	89 75 c0             	mov    %esi,-0x40(%ebp)
   }
 
   i = 0;
- 377:	31 ff                	xor    %edi,%edi
- 379:	89 ce                	mov    %ecx,%esi
- 37b:	8d 5d d7             	lea    -0x29(%ebp),%ebx
- 37e:	eb 02                	jmp    382 <printint+0x32>
+ 387:	31 ff                	xor    %edi,%edi
+ 389:	89 ce                	mov    %ecx,%esi
+ 38b:	8d 5d d7             	lea    -0x29(%ebp),%ebx
+ 38e:	eb 02                	jmp    392 <printint+0x32>
   do{
     buf[i++] = digits[x % base];
- 380:	89 cf                	mov    %ecx,%edi
- 382:	31 d2                	xor    %edx,%edx
- 384:	f7 f6                	div    %esi
- 386:	8d 4f 01             	lea    0x1(%edi),%ecx
- 389:	0f b6 92 8a 07 00 00 	movzbl 0x78a(%edx),%edx
+ 390:	89 cf                	mov    %ecx,%edi
+ 392:	31 d2                	xor    %edx,%edx
+ 394:	f7 f6                	div    %esi
+ 396:	8d 4f 01             	lea    0x1(%edi),%ecx
+ 399:	0f b6 92 9a 07 00 00 	movzbl 0x79a(%edx),%edx
   }while((x /= base) != 0);
- 390:	85 c0                	test   %eax,%eax
+ 3a0:	85 c0                	test   %eax,%eax
     buf[i++] = digits[x % base];
- 392:	88 14 0b             	mov    %dl,(%ebx,%ecx,1)
+ 3a2:	88 14 0b             	mov    %dl,(%ebx,%ecx,1)
   }while((x /= base) != 0);
- 395:	75 e9                	jne    380 <printint+0x30>
+ 3a5:	75 e9                	jne    390 <printint+0x30>
   if(neg)
- 397:	8b 55 c4             	mov    -0x3c(%ebp),%edx
+ 3a7:	8b 55 c4             	mov    -0x3c(%ebp),%edx
     buf[i++] = digits[x % base];
- 39a:	89 c8                	mov    %ecx,%eax
- 39c:	8b 75 c0             	mov    -0x40(%ebp),%esi
+ 3aa:	89 c8                	mov    %ecx,%eax
+ 3ac:	8b 75 c0             	mov    -0x40(%ebp),%esi
   if(neg)
- 39f:	85 d2                	test   %edx,%edx
- 3a1:	74 08                	je     3ab <printint+0x5b>
+ 3af:	85 d2                	test   %edx,%edx
+ 3b1:	74 08                	je     3bb <printint+0x5b>
     buf[i++] = '-';
- 3a3:	8d 4f 02             	lea    0x2(%edi),%ecx
- 3a6:	c6 44 05 d8 2d       	movb   $0x2d,-0x28(%ebp,%eax,1)
+ 3b3:	8d 4f 02             	lea    0x2(%edi),%ecx
+ 3b6:	c6 44 05 d8 2d       	movb   $0x2d,-0x28(%ebp,%eax,1)
 
   while(--i >= 0)
- 3ab:	8d 79 ff             	lea    -0x1(%ecx),%edi
- 3ae:	66 90                	xchg   %ax,%ax
- 3b0:	0f b6 44 3d d8       	movzbl -0x28(%ebp,%edi,1),%eax
- 3b5:	83 ef 01             	sub    $0x1,%edi
+ 3bb:	8d 79 ff             	lea    -0x1(%ecx),%edi
+ 3be:	66 90                	xchg   %ax,%ax
+ 3c0:	0f b6 44 3d d8       	movzbl -0x28(%ebp,%edi,1),%eax
+ 3c5:	83 ef 01             	sub    $0x1,%edi
   write(fd, &c, 1);
- 3b8:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
- 3bf:	00 
- 3c0:	89 5c 24 04          	mov    %ebx,0x4(%esp)
- 3c4:	89 34 24             	mov    %esi,(%esp)
- 3c7:	88 45 d7             	mov    %al,-0x29(%ebp)
- 3ca:	e8 f3 fe ff ff       	call   2c2 <write>
+ 3c8:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+ 3cf:	00 
+ 3d0:	89 5c 24 04          	mov    %ebx,0x4(%esp)
+ 3d4:	89 34 24             	mov    %esi,(%esp)
+ 3d7:	88 45 d7             	mov    %al,-0x29(%ebp)
+ 3da:	e8 e3 fe ff ff       	call   2c2 <write>
   while(--i >= 0)
- 3cf:	83 ff ff             	cmp    $0xffffffff,%edi
- 3d2:	75 dc                	jne    3b0 <printint+0x60>
+ 3df:	83 ff ff             	cmp    $0xffffffff,%edi
+ 3e2:	75 dc                	jne    3c0 <printint+0x60>
     putc(fd, buf[i]);
 }
- 3d4:	83 c4 4c             	add    $0x4c,%esp
- 3d7:	5b                   	pop    %ebx
- 3d8:	5e                   	pop    %esi
- 3d9:	5f                   	pop    %edi
- 3da:	5d                   	pop    %ebp
- 3db:	c3                   	ret    
- 3dc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 3e4:	83 c4 4c             	add    $0x4c,%esp
+ 3e7:	5b                   	pop    %ebx
+ 3e8:	5e                   	pop    %esi
+ 3e9:	5f                   	pop    %edi
+ 3ea:	5d                   	pop    %ebp
+ 3eb:	c3                   	ret    
+ 3ec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     x = -xx;
- 3e0:	89 d0                	mov    %edx,%eax
- 3e2:	f7 d8                	neg    %eax
+ 3f0:	89 d0                	mov    %edx,%eax
+ 3f2:	f7 d8                	neg    %eax
     neg = 1;
- 3e4:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
- 3eb:	eb 87                	jmp    374 <printint+0x24>
- 3ed:	8d 76 00             	lea    0x0(%esi),%esi
+ 3f4:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
+ 3fb:	eb 87                	jmp    384 <printint+0x24>
+ 3fd:	8d 76 00             	lea    0x0(%esi),%esi
 
-000003f0 <printf>:
+00000400 <printf>:
 
 // Print to the given fd. Only understands %d, %x, %p, %s.
 void
 printf(int fd, const char *fmt, ...)
 {
- 3f0:	55                   	push   %ebp
- 3f1:	89 e5                	mov    %esp,%ebp
- 3f3:	57                   	push   %edi
+ 400:	55                   	push   %ebp
+ 401:	89 e5                	mov    %esp,%ebp
+ 403:	57                   	push   %edi
   char *s;
   int c, i, state;
   uint *ap;
 
   state = 0;
- 3f4:	31 ff                	xor    %edi,%edi
+ 404:	31 ff                	xor    %edi,%edi
 {
- 3f6:	56                   	push   %esi
- 3f7:	53                   	push   %ebx
- 3f8:	83 ec 3c             	sub    $0x3c,%esp
+ 406:	56                   	push   %esi
+ 407:	53                   	push   %ebx
+ 408:	83 ec 3c             	sub    $0x3c,%esp
   ap = (uint*)(void*)&fmt + 1;
   for(i = 0; fmt[i]; i++){
- 3fb:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+ 40b:	8b 5d 0c             	mov    0xc(%ebp),%ebx
   ap = (uint*)(void*)&fmt + 1;
- 3fe:	8d 45 10             	lea    0x10(%ebp),%eax
+ 40e:	8d 45 10             	lea    0x10(%ebp),%eax
 {
- 401:	8b 75 08             	mov    0x8(%ebp),%esi
+ 411:	8b 75 08             	mov    0x8(%ebp),%esi
   ap = (uint*)(void*)&fmt + 1;
- 404:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ 414:	89 45 d4             	mov    %eax,-0x2c(%ebp)
   for(i = 0; fmt[i]; i++){
- 407:	0f b6 13             	movzbl (%ebx),%edx
- 40a:	83 c3 01             	add    $0x1,%ebx
- 40d:	84 d2                	test   %dl,%dl
- 40f:	75 39                	jne    44a <printf+0x5a>
- 411:	e9 c2 00 00 00       	jmp    4d8 <printf+0xe8>
- 416:	66 90                	xchg   %ax,%ax
+ 417:	0f b6 13             	movzbl (%ebx),%edx
+ 41a:	83 c3 01             	add    $0x1,%ebx
+ 41d:	84 d2                	test   %dl,%dl
+ 41f:	75 39                	jne    45a <printf+0x5a>
+ 421:	e9 c2 00 00 00       	jmp    4e8 <printf+0xe8>
+ 426:	66 90                	xchg   %ax,%ax
     c = fmt[i] & 0xff;
     if(state == 0){
       if(c == '%'){
- 418:	83 fa 25             	cmp    $0x25,%edx
- 41b:	0f 84 bf 00 00 00    	je     4e0 <printf+0xf0>
+ 428:	83 fa 25             	cmp    $0x25,%edx
+ 42b:	0f 84 bf 00 00 00    	je     4f0 <printf+0xf0>
   write(fd, &c, 1);
- 421:	8d 45 e2             	lea    -0x1e(%ebp),%eax
- 424:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
- 42b:	00 
- 42c:	89 44 24 04          	mov    %eax,0x4(%esp)
- 430:	89 34 24             	mov    %esi,(%esp)
+ 431:	8d 45 e2             	lea    -0x1e(%ebp),%eax
+ 434:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+ 43b:	00 
+ 43c:	89 44 24 04          	mov    %eax,0x4(%esp)
+ 440:	89 34 24             	mov    %esi,(%esp)
         state = '%';
       } else {
         putc(fd, c);
- 433:	88 55 e2             	mov    %dl,-0x1e(%ebp)
+ 443:	88 55 e2             	mov    %dl,-0x1e(%ebp)
   write(fd, &c, 1);
- 436:	e8 87 fe ff ff       	call   2c2 <write>
- 43b:	83 c3 01             	add    $0x1,%ebx
+ 446:	e8 77 fe ff ff       	call   2c2 <write>
+ 44b:	83 c3 01             	add    $0x1,%ebx
   for(i = 0; fmt[i]; i++){
- 43e:	0f b6 53 ff          	movzbl -0x1(%ebx),%edx
- 442:	84 d2                	test   %dl,%dl
- 444:	0f 84 8e 00 00 00    	je     4d8 <printf+0xe8>
+ 44e:	0f b6 53 ff          	movzbl -0x1(%ebx),%edx
+ 452:	84 d2                	test   %dl,%dl
+ 454:	0f 84 8e 00 00 00    	je     4e8 <printf+0xe8>
     if(state == 0){
- 44a:	85 ff                	test   %edi,%edi
+ 45a:	85 ff                	test   %edi,%edi
     c = fmt[i] & 0xff;
- 44c:	0f be c2             	movsbl %dl,%eax
+ 45c:	0f be c2             	movsbl %dl,%eax
     if(state == 0){
- 44f:	74 c7                	je     418 <printf+0x28>
+ 45f:	74 c7                	je     428 <printf+0x28>
       }
     } else if(state == '%'){
- 451:	83 ff 25             	cmp    $0x25,%edi
- 454:	75 e5                	jne    43b <printf+0x4b>
+ 461:	83 ff 25             	cmp    $0x25,%edi
+ 464:	75 e5                	jne    44b <printf+0x4b>
       if(c == 'd'){
- 456:	83 fa 64             	cmp    $0x64,%edx
- 459:	0f 84 31 01 00 00    	je     590 <printf+0x1a0>
+ 466:	83 fa 64             	cmp    $0x64,%edx
+ 469:	0f 84 31 01 00 00    	je     5a0 <printf+0x1a0>
         printint(fd, *ap, 10, 1);
         ap++;
       } else if(c == 'x' || c == 'p'){
- 45f:	25 f7 00 00 00       	and    $0xf7,%eax
- 464:	83 f8 70             	cmp    $0x70,%eax
- 467:	0f 84 83 00 00 00    	je     4f0 <printf+0x100>
+ 46f:	25 f7 00 00 00       	and    $0xf7,%eax
+ 474:	83 f8 70             	cmp    $0x70,%eax
+ 477:	0f 84 83 00 00 00    	je     500 <printf+0x100>
         printint(fd, *ap, 16, 0);
         ap++;
       } else if(c == 's'){
- 46d:	83 fa 73             	cmp    $0x73,%edx
- 470:	0f 84 a2 00 00 00    	je     518 <printf+0x128>
+ 47d:	83 fa 73             	cmp    $0x73,%edx
+ 480:	0f 84 a2 00 00 00    	je     528 <printf+0x128>
           s = "(null)";
         while(*s != 0){
           putc(fd, *s);
           s++;
         }
       } else if(c == 'c'){
- 476:	83 fa 63             	cmp    $0x63,%edx
- 479:	0f 84 35 01 00 00    	je     5b4 <printf+0x1c4>
+ 486:	83 fa 63             	cmp    $0x63,%edx
+ 489:	0f 84 35 01 00 00    	je     5c4 <printf+0x1c4>
         putc(fd, *ap);
         ap++;
       } else if(c == '%'){
- 47f:	83 fa 25             	cmp    $0x25,%edx
- 482:	0f 84 e0 00 00 00    	je     568 <printf+0x178>
+ 48f:	83 fa 25             	cmp    $0x25,%edx
+ 492:	0f 84 e0 00 00 00    	je     578 <printf+0x178>
   write(fd, &c, 1);
- 488:	8d 45 e6             	lea    -0x1a(%ebp),%eax
- 48b:	83 c3 01             	add    $0x1,%ebx
- 48e:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
- 495:	00 
+ 498:	8d 45 e6             	lea    -0x1a(%ebp),%eax
+ 49b:	83 c3 01             	add    $0x1,%ebx
+ 49e:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+ 4a5:	00 
       } else {
         // Unknown % sequence.  Print it to draw attention.
         putc(fd, '%');
         putc(fd, c);
       }
       state = 0;
- 496:	31 ff                	xor    %edi,%edi
+ 4a6:	31 ff                	xor    %edi,%edi
   write(fd, &c, 1);
- 498:	89 44 24 04          	mov    %eax,0x4(%esp)
- 49c:	89 34 24             	mov    %esi,(%esp)
- 49f:	89 55 d0             	mov    %edx,-0x30(%ebp)
- 4a2:	c6 45 e6 25          	movb   $0x25,-0x1a(%ebp)
- 4a6:	e8 17 fe ff ff       	call   2c2 <write>
+ 4a8:	89 44 24 04          	mov    %eax,0x4(%esp)
+ 4ac:	89 34 24             	mov    %esi,(%esp)
+ 4af:	89 55 d0             	mov    %edx,-0x30(%ebp)
+ 4b2:	c6 45 e6 25          	movb   $0x25,-0x1a(%ebp)
+ 4b6:	e8 07 fe ff ff       	call   2c2 <write>
         putc(fd, c);
- 4ab:	8b 55 d0             	mov    -0x30(%ebp),%edx
+ 4bb:	8b 55 d0             	mov    -0x30(%ebp),%edx
   write(fd, &c, 1);
- 4ae:	8d 45 e7             	lea    -0x19(%ebp),%eax
- 4b1:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
- 4b8:	00 
- 4b9:	89 44 24 04          	mov    %eax,0x4(%esp)
- 4bd:	89 34 24             	mov    %esi,(%esp)
+ 4be:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 4c1:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+ 4c8:	00 
+ 4c9:	89 44 24 04          	mov    %eax,0x4(%esp)
+ 4cd:	89 34 24             	mov    %esi,(%esp)
         putc(fd, c);
- 4c0:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 4d0:	88 55 e7             	mov    %dl,-0x19(%ebp)
   write(fd, &c, 1);
- 4c3:	e8 fa fd ff ff       	call   2c2 <write>
+ 4d3:	e8 ea fd ff ff       	call   2c2 <write>
   for(i = 0; fmt[i]; i++){
- 4c8:	0f b6 53 ff          	movzbl -0x1(%ebx),%edx
- 4cc:	84 d2                	test   %dl,%dl
- 4ce:	0f 85 76 ff ff ff    	jne    44a <printf+0x5a>
- 4d4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 4d8:	0f b6 53 ff          	movzbl -0x1(%ebx),%edx
+ 4dc:	84 d2                	test   %dl,%dl
+ 4de:	0f 85 76 ff ff ff    	jne    45a <printf+0x5a>
+ 4e4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     }
   }
 }
- 4d8:	83 c4 3c             	add    $0x3c,%esp
- 4db:	5b                   	pop    %ebx
- 4dc:	5e                   	pop    %esi
- 4dd:	5f                   	pop    %edi
- 4de:	5d                   	pop    %ebp
- 4df:	c3                   	ret    
+ 4e8:	83 c4 3c             	add    $0x3c,%esp
+ 4eb:	5b                   	pop    %ebx
+ 4ec:	5e                   	pop    %esi
+ 4ed:	5f                   	pop    %edi
+ 4ee:	5d                   	pop    %ebp
+ 4ef:	c3                   	ret    
         state = '%';
- 4e0:	bf 25 00 00 00       	mov    $0x25,%edi
- 4e5:	e9 51 ff ff ff       	jmp    43b <printf+0x4b>
- 4ea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 4f0:	bf 25 00 00 00       	mov    $0x25,%edi
+ 4f5:	e9 51 ff ff ff       	jmp    44b <printf+0x4b>
+ 4fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         printint(fd, *ap, 16, 0);
- 4f0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
- 4f3:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 500:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+ 503:	b9 10 00 00 00       	mov    $0x10,%ecx
       state = 0;
- 4f8:	31 ff                	xor    %edi,%edi
+ 508:	31 ff                	xor    %edi,%edi
         printint(fd, *ap, 16, 0);
- 4fa:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
- 501:	8b 10                	mov    (%eax),%edx
- 503:	89 f0                	mov    %esi,%eax
- 505:	e8 46 fe ff ff       	call   350 <printint>
+ 50a:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+ 511:	8b 10                	mov    (%eax),%edx
+ 513:	89 f0                	mov    %esi,%eax
+ 515:	e8 46 fe ff ff       	call   360 <printint>
         ap++;
- 50a:	83 45 d4 04          	addl   $0x4,-0x2c(%ebp)
- 50e:	e9 28 ff ff ff       	jmp    43b <printf+0x4b>
- 513:	90                   	nop
- 514:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 51a:	83 45 d4 04          	addl   $0x4,-0x2c(%ebp)
+ 51e:	e9 28 ff ff ff       	jmp    44b <printf+0x4b>
+ 523:	90                   	nop
+ 524:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
         s = (char*)*ap;
- 518:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+ 528:	8b 45 d4             	mov    -0x2c(%ebp),%eax
         ap++;
- 51b:	83 45 d4 04          	addl   $0x4,-0x2c(%ebp)
+ 52b:	83 45 d4 04          	addl   $0x4,-0x2c(%ebp)
         s = (char*)*ap;
- 51f:	8b 38                	mov    (%eax),%edi
+ 52f:	8b 38                	mov    (%eax),%edi
           s = "(null)";
- 521:	b8 83 07 00 00       	mov    $0x783,%eax
- 526:	85 ff                	test   %edi,%edi
- 528:	0f 44 f8             	cmove  %eax,%edi
+ 531:	b8 93 07 00 00       	mov    $0x793,%eax
+ 536:	85 ff                	test   %edi,%edi
+ 538:	0f 44 f8             	cmove  %eax,%edi
         while(*s != 0){
- 52b:	0f b6 07             	movzbl (%edi),%eax
- 52e:	84 c0                	test   %al,%al
- 530:	74 2a                	je     55c <printf+0x16c>
- 532:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
- 538:	88 45 e3             	mov    %al,-0x1d(%ebp)
+ 53b:	0f b6 07             	movzbl (%edi),%eax
+ 53e:	84 c0                	test   %al,%al
+ 540:	74 2a                	je     56c <printf+0x16c>
+ 542:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 548:	88 45 e3             	mov    %al,-0x1d(%ebp)
   write(fd, &c, 1);
- 53b:	8d 45 e3             	lea    -0x1d(%ebp),%eax
+ 54b:	8d 45 e3             	lea    -0x1d(%ebp),%eax
           s++;
- 53e:	83 c7 01             	add    $0x1,%edi
+ 54e:	83 c7 01             	add    $0x1,%edi
   write(fd, &c, 1);
- 541:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
- 548:	00 
- 549:	89 44 24 04          	mov    %eax,0x4(%esp)
- 54d:	89 34 24             	mov    %esi,(%esp)
- 550:	e8 6d fd ff ff       	call   2c2 <write>
+ 551:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+ 558:	00 
+ 559:	89 44 24 04          	mov    %eax,0x4(%esp)
+ 55d:	89 34 24             	mov    %esi,(%esp)
+ 560:	e8 5d fd ff ff       	call   2c2 <write>
         while(*s != 0){
- 555:	0f b6 07             	movzbl (%edi),%eax
- 558:	84 c0                	test   %al,%al
- 55a:	75 dc                	jne    538 <printf+0x148>
+ 565:	0f b6 07             	movzbl (%edi),%eax
+ 568:	84 c0                	test   %al,%al
+ 56a:	75 dc                	jne    548 <printf+0x148>
       state = 0;
- 55c:	31 ff                	xor    %edi,%edi
- 55e:	e9 d8 fe ff ff       	jmp    43b <printf+0x4b>
- 563:	90                   	nop
- 564:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 56c:	31 ff                	xor    %edi,%edi
+ 56e:	e9 d8 fe ff ff       	jmp    44b <printf+0x4b>
+ 573:	90                   	nop
+ 574:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   write(fd, &c, 1);
- 568:	8d 45 e5             	lea    -0x1b(%ebp),%eax
+ 578:	8d 45 e5             	lea    -0x1b(%ebp),%eax
       state = 0;
- 56b:	31 ff                	xor    %edi,%edi
+ 57b:	31 ff                	xor    %edi,%edi
   write(fd, &c, 1);
- 56d:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
- 574:	00 
- 575:	89 44 24 04          	mov    %eax,0x4(%esp)
- 579:	89 34 24             	mov    %esi,(%esp)
- 57c:	c6 45 e5 25          	movb   $0x25,-0x1b(%ebp)
- 580:	e8 3d fd ff ff       	call   2c2 <write>
- 585:	e9 b1 fe ff ff       	jmp    43b <printf+0x4b>
- 58a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 57d:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+ 584:	00 
+ 585:	89 44 24 04          	mov    %eax,0x4(%esp)
+ 589:	89 34 24             	mov    %esi,(%esp)
+ 58c:	c6 45 e5 25          	movb   $0x25,-0x1b(%ebp)
+ 590:	e8 2d fd ff ff       	call   2c2 <write>
+ 595:	e9 b1 fe ff ff       	jmp    44b <printf+0x4b>
+ 59a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         printint(fd, *ap, 10, 1);
- 590:	8b 45 d4             	mov    -0x2c(%ebp),%eax
- 593:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 5a0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+ 5a3:	b9 0a 00 00 00       	mov    $0xa,%ecx
       state = 0;
- 598:	66 31 ff             	xor    %di,%di
+ 5a8:	66 31 ff             	xor    %di,%di
         printint(fd, *ap, 10, 1);
- 59b:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
- 5a2:	8b 10                	mov    (%eax),%edx
- 5a4:	89 f0                	mov    %esi,%eax
- 5a6:	e8 a5 fd ff ff       	call   350 <printint>
+ 5ab:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+ 5b2:	8b 10                	mov    (%eax),%edx
+ 5b4:	89 f0                	mov    %esi,%eax
+ 5b6:	e8 a5 fd ff ff       	call   360 <printint>
         ap++;
- 5ab:	83 45 d4 04          	addl   $0x4,-0x2c(%ebp)
- 5af:	e9 87 fe ff ff       	jmp    43b <printf+0x4b>
+ 5bb:	83 45 d4 04          	addl   $0x4,-0x2c(%ebp)
+ 5bf:	e9 87 fe ff ff       	jmp    44b <printf+0x4b>
         putc(fd, *ap);
- 5b4:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+ 5c4:	8b 45 d4             	mov    -0x2c(%ebp),%eax
       state = 0;
- 5b7:	31 ff                	xor    %edi,%edi
+ 5c7:	31 ff                	xor    %edi,%edi
         putc(fd, *ap);
- 5b9:	8b 00                	mov    (%eax),%eax
+ 5c9:	8b 00                	mov    (%eax),%eax
   write(fd, &c, 1);
- 5bb:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
- 5c2:	00 
- 5c3:	89 34 24             	mov    %esi,(%esp)
+ 5cb:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+ 5d2:	00 
+ 5d3:	89 34 24             	mov    %esi,(%esp)
         putc(fd, *ap);
- 5c6:	88 45 e4             	mov    %al,-0x1c(%ebp)
+ 5d6:	88 45 e4             	mov    %al,-0x1c(%ebp)
   write(fd, &c, 1);
- 5c9:	8d 45 e4             	lea    -0x1c(%ebp),%eax
- 5cc:	89 44 24 04          	mov    %eax,0x4(%esp)
- 5d0:	e8 ed fc ff ff       	call   2c2 <write>
+ 5d9:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+ 5dc:	89 44 24 04          	mov    %eax,0x4(%esp)
+ 5e0:	e8 dd fc ff ff       	call   2c2 <write>
         ap++;
- 5d5:	83 45 d4 04          	addl   $0x4,-0x2c(%ebp)
- 5d9:	e9 5d fe ff ff       	jmp    43b <printf+0x4b>
- 5de:	66 90                	xchg   %ax,%ax
+ 5e5:	83 45 d4 04          	addl   $0x4,-0x2c(%ebp)
+ 5e9:	e9 5d fe ff ff       	jmp    44b <printf+0x4b>
+ 5ee:	66 90                	xchg   %ax,%ax
 
-000005e0 <free>:
+000005f0 <free>:
 static Header base;
 static Header *freep;
 
 void
 free(void *ap)
 {
- 5e0:	55                   	push   %ebp
+ 5f0:	55                   	push   %ebp
   Header *bp, *p;
 
   bp = (Header*)ap - 1;
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 5e1:	a1 08 0a 00 00       	mov    0xa08,%eax
+ 5f1:	a1 18 0a 00 00       	mov    0xa18,%eax
 {
- 5e6:	89 e5                	mov    %esp,%ebp
- 5e8:	57                   	push   %edi
- 5e9:	56                   	push   %esi
- 5ea:	53                   	push   %ebx
- 5eb:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 5f6:	89 e5                	mov    %esp,%ebp
+ 5f8:	57                   	push   %edi
+ 5f9:	56                   	push   %esi
+ 5fa:	53                   	push   %ebx
+ 5fb:	8b 5d 08             	mov    0x8(%ebp),%ebx
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 5ee:	8b 08                	mov    (%eax),%ecx
+ 5fe:	8b 08                	mov    (%eax),%ecx
   bp = (Header*)ap - 1;
- 5f0:	8d 53 f8             	lea    -0x8(%ebx),%edx
+ 600:	8d 53 f8             	lea    -0x8(%ebx),%edx
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 5f3:	39 d0                	cmp    %edx,%eax
- 5f5:	72 11                	jb     608 <free+0x28>
- 5f7:	90                   	nop
+ 603:	39 d0                	cmp    %edx,%eax
+ 605:	72 11                	jb     618 <free+0x28>
+ 607:	90                   	nop
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 5f8:	39 c8                	cmp    %ecx,%eax
- 5fa:	72 04                	jb     600 <free+0x20>
- 5fc:	39 ca                	cmp    %ecx,%edx
- 5fe:	72 10                	jb     610 <free+0x30>
- 600:	89 c8                	mov    %ecx,%eax
+ 608:	39 c8                	cmp    %ecx,%eax
+ 60a:	72 04                	jb     610 <free+0x20>
+ 60c:	39 ca                	cmp    %ecx,%edx
+ 60e:	72 10                	jb     620 <free+0x30>
+ 610:	89 c8                	mov    %ecx,%eax
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 602:	39 d0                	cmp    %edx,%eax
+ 612:	39 d0                	cmp    %edx,%eax
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 604:	8b 08                	mov    (%eax),%ecx
+ 614:	8b 08                	mov    (%eax),%ecx
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 606:	73 f0                	jae    5f8 <free+0x18>
- 608:	39 ca                	cmp    %ecx,%edx
- 60a:	72 04                	jb     610 <free+0x30>
+ 616:	73 f0                	jae    608 <free+0x18>
+ 618:	39 ca                	cmp    %ecx,%edx
+ 61a:	72 04                	jb     620 <free+0x30>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 60c:	39 c8                	cmp    %ecx,%eax
- 60e:	72 f0                	jb     600 <free+0x20>
+ 61c:	39 c8                	cmp    %ecx,%eax
+ 61e:	72 f0                	jb     610 <free+0x20>
       break;
   if(bp + bp->s.size == p->s.ptr){
- 610:	8b 73 fc             	mov    -0x4(%ebx),%esi
- 613:	8d 3c f2             	lea    (%edx,%esi,8),%edi
- 616:	39 cf                	cmp    %ecx,%edi
- 618:	74 1e                	je     638 <free+0x58>
+ 620:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 623:	8d 3c f2             	lea    (%edx,%esi,8),%edi
+ 626:	39 cf                	cmp    %ecx,%edi
+ 628:	74 1e                	je     648 <free+0x58>
     bp->s.size += p->s.ptr->s.size;
     bp->s.ptr = p->s.ptr->s.ptr;
   } else
     bp->s.ptr = p->s.ptr;
- 61a:	89 4b f8             	mov    %ecx,-0x8(%ebx)
+ 62a:	89 4b f8             	mov    %ecx,-0x8(%ebx)
   if(p + p->s.size == bp){
- 61d:	8b 48 04             	mov    0x4(%eax),%ecx
- 620:	8d 34 c8             	lea    (%eax,%ecx,8),%esi
- 623:	39 f2                	cmp    %esi,%edx
- 625:	74 28                	je     64f <free+0x6f>
+ 62d:	8b 48 04             	mov    0x4(%eax),%ecx
+ 630:	8d 34 c8             	lea    (%eax,%ecx,8),%esi
+ 633:	39 f2                	cmp    %esi,%edx
+ 635:	74 28                	je     65f <free+0x6f>
     p->s.size += bp->s.size;
     p->s.ptr = bp->s.ptr;
   } else
     p->s.ptr = bp;
- 627:	89 10                	mov    %edx,(%eax)
+ 637:	89 10                	mov    %edx,(%eax)
   freep = p;
- 629:	a3 08 0a 00 00       	mov    %eax,0xa08
+ 639:	a3 18 0a 00 00       	mov    %eax,0xa18
 }
- 62e:	5b                   	pop    %ebx
- 62f:	5e                   	pop    %esi
- 630:	5f                   	pop    %edi
- 631:	5d                   	pop    %ebp
- 632:	c3                   	ret    
- 633:	90                   	nop
- 634:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 63e:	5b                   	pop    %ebx
+ 63f:	5e                   	pop    %esi
+ 640:	5f                   	pop    %edi
+ 641:	5d                   	pop    %ebp
+ 642:	c3                   	ret    
+ 643:	90                   	nop
+ 644:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     bp->s.size += p->s.ptr->s.size;
- 638:	03 71 04             	add    0x4(%ecx),%esi
- 63b:	89 73 fc             	mov    %esi,-0x4(%ebx)
+ 648:	03 71 04             	add    0x4(%ecx),%esi
+ 64b:	89 73 fc             	mov    %esi,-0x4(%ebx)
     bp->s.ptr = p->s.ptr->s.ptr;
- 63e:	8b 08                	mov    (%eax),%ecx
- 640:	8b 09                	mov    (%ecx),%ecx
- 642:	89 4b f8             	mov    %ecx,-0x8(%ebx)
+ 64e:	8b 08                	mov    (%eax),%ecx
+ 650:	8b 09                	mov    (%ecx),%ecx
+ 652:	89 4b f8             	mov    %ecx,-0x8(%ebx)
   if(p + p->s.size == bp){
- 645:	8b 48 04             	mov    0x4(%eax),%ecx
- 648:	8d 34 c8             	lea    (%eax,%ecx,8),%esi
- 64b:	39 f2                	cmp    %esi,%edx
- 64d:	75 d8                	jne    627 <free+0x47>
+ 655:	8b 48 04             	mov    0x4(%eax),%ecx
+ 658:	8d 34 c8             	lea    (%eax,%ecx,8),%esi
+ 65b:	39 f2                	cmp    %esi,%edx
+ 65d:	75 d8                	jne    637 <free+0x47>
     p->s.size += bp->s.size;
- 64f:	03 4b fc             	add    -0x4(%ebx),%ecx
+ 65f:	03 4b fc             	add    -0x4(%ebx),%ecx
   freep = p;
- 652:	a3 08 0a 00 00       	mov    %eax,0xa08
+ 662:	a3 18 0a 00 00       	mov    %eax,0xa18
     p->s.size += bp->s.size;
- 657:	89 48 04             	mov    %ecx,0x4(%eax)
+ 667:	89 48 04             	mov    %ecx,0x4(%eax)
     p->s.ptr = bp->s.ptr;
- 65a:	8b 53 f8             	mov    -0x8(%ebx),%edx
- 65d:	89 10                	mov    %edx,(%eax)
+ 66a:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 66d:	89 10                	mov    %edx,(%eax)
 }
- 65f:	5b                   	pop    %ebx
- 660:	5e                   	pop    %esi
- 661:	5f                   	pop    %edi
- 662:	5d                   	pop    %ebp
- 663:	c3                   	ret    
- 664:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
- 66a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
-
-00000670 <malloc>:
+ 66f:	5b                   	pop    %ebx
+ 670:	5e                   	pop    %esi
+ 671:	5f                   	pop    %edi
+ 672:	5d                   	pop    %ebp
+ 673:	c3                   	ret    
+ 674:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 67a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+00000680 <malloc>:
   return freep;
 }
 
 void*
 malloc(uint nbytes)
 {
- 670:	55                   	push   %ebp
- 671:	89 e5                	mov    %esp,%ebp
- 673:	57                   	push   %edi
- 674:	56                   	push   %esi
- 675:	53                   	push   %ebx
- 676:	83 ec 1c             	sub    $0x1c,%esp
+ 680:	55                   	push   %ebp
+ 681:	89 e5                	mov    %esp,%ebp
+ 683:	57                   	push   %edi
+ 684:	56                   	push   %esi
+ 685:	53                   	push   %ebx
+ 686:	83 ec 1c             	sub    $0x1c,%esp
   Header *p, *prevp;
   uint nunits;
 
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 679:	8b 45 08             	mov    0x8(%ebp),%eax
+ 689:	8b 45 08             	mov    0x8(%ebp),%eax
   if((prevp = freep) == 0){
- 67c:	8b 1d 08 0a 00 00    	mov    0xa08,%ebx
+ 68c:	8b 1d 18 0a 00 00    	mov    0xa18,%ebx
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 682:	8d 48 07             	lea    0x7(%eax),%ecx
- 685:	c1 e9 03             	shr    $0x3,%ecx
+ 692:	8d 48 07             	lea    0x7(%eax),%ecx
+ 695:	c1 e9 03             	shr    $0x3,%ecx
   if((prevp = freep) == 0){
- 688:	85 db                	test   %ebx,%ebx
+ 698:	85 db                	test   %ebx,%ebx
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 68a:	8d 71 01             	lea    0x1(%ecx),%esi
+ 69a:	8d 71 01             	lea    0x1(%ecx),%esi
   if((prevp = freep) == 0){
- 68d:	0f 84 9b 00 00 00    	je     72e <malloc+0xbe>
- 693:	8b 13                	mov    (%ebx),%edx
- 695:	8b 7a 04             	mov    0x4(%edx),%edi
+ 69d:	0f 84 9b 00 00 00    	je     73e <malloc+0xbe>
+ 6a3:	8b 13                	mov    (%ebx),%edx
+ 6a5:	8b 7a 04             	mov    0x4(%edx),%edi
     base.s.ptr = freep = prevp = &base;
     base.s.size = 0;
   }
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
     if(p->s.size >= nunits){
- 698:	39 fe                	cmp    %edi,%esi
- 69a:	76 64                	jbe    700 <malloc+0x90>
- 69c:	8d 04 f5 00 00 00 00 	lea    0x0(,%esi,8),%eax
+ 6a8:	39 fe                	cmp    %edi,%esi
+ 6aa:	76 64                	jbe    710 <malloc+0x90>
+ 6ac:	8d 04 f5 00 00 00 00 	lea    0x0(,%esi,8),%eax
   if(nu < 4096)
- 6a3:	bb 00 80 00 00       	mov    $0x8000,%ebx
- 6a8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
- 6ab:	eb 0e                	jmp    6bb <malloc+0x4b>
- 6ad:	8d 76 00             	lea    0x0(%esi),%esi
+ 6b3:	bb 00 80 00 00       	mov    $0x8000,%ebx
+ 6b8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+ 6bb:	eb 0e                	jmp    6cb <malloc+0x4b>
+ 6bd:	8d 76 00             	lea    0x0(%esi),%esi
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 6b0:	8b 02                	mov    (%edx),%eax
+ 6c0:	8b 02                	mov    (%edx),%eax
     if(p->s.size >= nunits){
- 6b2:	8b 78 04             	mov    0x4(%eax),%edi
- 6b5:	39 fe                	cmp    %edi,%esi
- 6b7:	76 4f                	jbe    708 <malloc+0x98>
- 6b9:	89 c2                	mov    %eax,%edx
+ 6c2:	8b 78 04             	mov    0x4(%eax),%edi
+ 6c5:	39 fe                	cmp    %edi,%esi
+ 6c7:	76 4f                	jbe    718 <malloc+0x98>
+ 6c9:	89 c2                	mov    %eax,%edx
         p->s.size = nunits;
       }
       freep = prevp;
       return (void*)(p + 1);
     }
     if(p == freep)
- 6bb:	3b 15 08 0a 00 00    	cmp    0xa08,%edx
- 6c1:	75 ed                	jne    6b0 <malloc+0x40>
+ 6cb:	3b 15 18 0a 00 00    	cmp    0xa18,%edx
+ 6d1:	75 ed                	jne    6c0 <malloc+0x40>
   if(nu < 4096)
- 6c3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
- 6c6:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
- 6cc:	bf 00 10 00 00       	mov    $0x1000,%edi
- 6d1:	0f 43 fe             	cmovae %esi,%edi
- 6d4:	0f 42 c3             	cmovb  %ebx,%eax
+ 6d3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+ 6d6:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+ 6dc:	bf 00 10 00 00       	mov    $0x1000,%edi
+ 6e1:	0f 43 fe             	cmovae %esi,%edi
+ 6e4:	0f 42 c3             	cmovb  %ebx,%eax
   p = sbrk(nu * sizeof(Header));
- 6d7:	89 04 24             	mov    %eax,(%esp)
- 6da:	e8 4b fc ff ff       	call   32a <sbrk>
+ 6e7:	89 04 24             	mov    %eax,(%esp)
+ 6ea:	e8 3b fc ff ff       	call   32a <sbrk>
   if(p == (char*)-1)
- 6df:	83 f8 ff             	cmp    $0xffffffff,%eax
- 6e2:	74 18                	je     6fc <malloc+0x8c>
+ 6ef:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 6f2:	74 18                	je     70c <malloc+0x8c>
   hp->s.size = nu;
- 6e4:	89 78 04             	mov    %edi,0x4(%eax)
+ 6f4:	89 78 04             	mov    %edi,0x4(%eax)
   free((void*)(hp + 1));
- 6e7:	83 c0 08             	add    $0x8,%eax
- 6ea:	89 04 24             	mov    %eax,(%esp)
- 6ed:	e8 ee fe ff ff       	call   5e0 <free>
+ 6f7:	83 c0 08             	add    $0x8,%eax
+ 6fa:	89 04 24             	mov    %eax,(%esp)
+ 6fd:	e8 ee fe ff ff       	call   5f0 <free>
   return freep;
- 6f2:	8b 15 08 0a 00 00    	mov    0xa08,%edx
+ 702:	8b 15 18 0a 00 00    	mov    0xa18,%edx
       if((p = morecore(nunits)) == 0)
- 6f8:	85 d2                	test   %edx,%edx
- 6fa:	75 b4                	jne    6b0 <malloc+0x40>
+ 708:	85 d2                	test   %edx,%edx
+ 70a:	75 b4                	jne    6c0 <malloc+0x40>
         return 0;
- 6fc:	31 c0                	xor    %eax,%eax
- 6fe:	eb 20                	jmp    720 <malloc+0xb0>
+ 70c:	31 c0                	xor    %eax,%eax
+ 70e:	eb 20                	jmp    730 <malloc+0xb0>
     if(p->s.size >= nunits){
- 700:	89 d0                	mov    %edx,%eax
- 702:	89 da                	mov    %ebx,%edx
- 704:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 710:	89 d0                	mov    %edx,%eax
+ 712:	89 da                	mov    %ebx,%edx
+ 714:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
       if(p->s.size == nunits)
- 708:	39 fe                	cmp    %edi,%esi
- 70a:	74 1c                	je     728 <malloc+0xb8>
+ 718:	39 fe                	cmp    %edi,%esi
+ 71a:	74 1c                	je     738 <malloc+0xb8>
         p->s.size -= nunits;
- 70c:	29 f7                	sub    %esi,%edi
- 70e:	89 78 04             	mov    %edi,0x4(%eax)
+ 71c:	29 f7                	sub    %esi,%edi
+ 71e:	89 78 04             	mov    %edi,0x4(%eax)
         p += p->s.size;
- 711:	8d 04 f8             	lea    (%eax,%edi,8),%eax
+ 721:	8d 04 f8             	lea    (%eax,%edi,8),%eax
         p->s.size = nunits;
- 714:	89 70 04             	mov    %esi,0x4(%eax)
+ 724:	89 70 04             	mov    %esi,0x4(%eax)
       freep = prevp;
- 717:	89 15 08 0a 00 00    	mov    %edx,0xa08
+ 727:	89 15 18 0a 00 00    	mov    %edx,0xa18
       return (void*)(p + 1);
- 71d:	83 c0 08             	add    $0x8,%eax
+ 72d:	83 c0 08             	add    $0x8,%eax
   }
 }
- 720:	83 c4 1c             	add    $0x1c,%esp
- 723:	5b                   	pop    %ebx
- 724:	5e                   	pop    %esi
- 725:	5f                   	pop    %edi
- 726:	5d                   	pop    %ebp
- 727:	c3                   	ret    
+ 730:	83 c4 1c             	add    $0x1c,%esp
+ 733:	5b                   	pop    %ebx
+ 734:	5e                   	pop    %esi
+ 735:	5f                   	pop    %edi
+ 736:	5d                   	pop    %ebp
+ 737:	c3                   	ret    
         prevp->s.ptr = p->s.ptr;
- 728:	8b 08                	mov    (%eax),%ecx
- 72a:	89 0a                	mov    %ecx,(%edx)
- 72c:	eb e9                	jmp    717 <malloc+0xa7>
+ 738:	8b 08                	mov    (%eax),%ecx
+ 73a:	89 0a                	mov    %ecx,(%edx)
+ 73c:	eb e9                	jmp    727 <malloc+0xa7>
     base.s.ptr = freep = prevp = &base;
- 72e:	c7 05 08 0a 00 00 0c 	movl   $0xa0c,0xa08
- 735:	0a 00 00 
+ 73e:	c7 05 18 0a 00 00 1c 	movl   $0xa1c,0xa18
+ 745:	0a 00 00 
     base.s.size = 0;
- 738:	ba 0c 0a 00 00       	mov    $0xa0c,%edx
+ 748:	ba 1c 0a 00 00       	mov    $0xa1c,%edx
     base.s.ptr = freep = prevp = &base;
- 73d:	c7 05 0c 0a 00 00 0c 	movl   $0xa0c,0xa0c
- 744:	0a 00 00 
+ 74d:	c7 05 1c 0a 00 00 1c 	movl   $0xa1c,0xa1c
+ 754:	0a 00 00 
     base.s.size = 0;
- 747:	c7 05 10 0a 00 00 00 	movl   $0x0,0xa10
- 74e:	00 00 00 
- 751:	e9 46 ff ff ff       	jmp    69c <malloc+0x2c>
+ 757:	c7 05 20 0a 00 00 00 	movl   $0x0,0xa20
+ 75e:	00 00 00 
+ 761:	e9 46 ff ff ff       	jmp    6ac <malloc+0x2c>
diff --git a/rm.o b/rm.o
index e47c816..89477d2 100644
Binary files a/rm.o and b/rm.o differ
diff --git a/rm.sym b/rm.sym
index dfd42b1..2e77ced 100644
--- a/rm.sym
+++ b/rm.sym
@@ -1,7 +1,7 @@
 00000000 .text
-00000756 .rodata
-0000079c .eh_frame
-00000a08 .bss
+00000766 .rodata
+000007ac .eh_frame
+00000a18 .bss
 00000000 .comment
 00000000 .debug_aranges
 00000000 .debug_info
@@ -13,25 +13,27 @@
 00000000 rm.c
 00000000 ulib.c
 00000000 printf.c
-00000350 printint
-0000078a digits.1358
+00000360 printint
+0000079a digits.1362
 00000000 umalloc.c
-00000a08 freep
-00000a0c base
+00000a18 freep
+00000a1c base
 00000080 strcpy
 00000342 waitpid
-000003f0 printf
+00000400 printf
 00000270 memmove
 000002ea mknod
 00000190 gets
 00000322 getpid
-00000670 malloc
+00000680 malloc
 00000332 sleep
 000002b2 pipe
+0000034a setPrior
 000002c2 write
 000002fa fstat
 000002d2 kill
 00000312 chdir
+00000352 getPrior
 000002da exec
 000002aa wait
 000002ba read
@@ -39,14 +41,14 @@
 0000029a fork
 0000032a sbrk
 0000033a uptime
-00000a08 __bss_start
+00000a18 __bss_start
 00000130 memset
 00000000 main
 000000b0 strcmp
 0000031a dup
 000001f0 stat
-00000a08 _edata
-00000a14 _end
+00000a18 _edata
+00000a24 _end
 00000302 link
 000002a2 exit
 00000240 atoi
@@ -55,4 +57,4 @@
 00000150 strchr
 0000030a mkdir
 000002ca close
-000005e0 free
+000005f0 free
diff --git a/sh.asm b/sh.asm
index c87c82c..5314551 100644
--- a/sh.asm
+++ b/sh.asm
@@ -29,7 +29,7 @@ main(void)
   while((fd = open("console", O_RDWR)) >= 0){
       19:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
       20:	00 
-      21:	c7 04 24 59 13 00 00 	movl   $0x1359,(%esp)
+      21:	c7 04 24 69 13 00 00 	movl   $0x1369,(%esp)
       28:	e8 15 0e 00 00       	call   e42 <open>
       2d:	85 c0                	test   %eax,%eax
       2f:	79 df                	jns    10 <main+0x10>
@@ -98,10 +98,10 @@ main(void)
         printf(2, "cannot cd %s\n", buf+3);
       d3:	c7 44 24 08 63 19 00 	movl   $0x1963,0x8(%esp)
       da:	00 
-      db:	c7 44 24 04 61 13 00 	movl   $0x1361,0x4(%esp)
+      db:	c7 44 24 04 71 13 00 	movl   $0x1371,0x4(%esp)
       e2:	00 
       e3:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-      ea:	e8 61 0e 00 00       	call   f50 <printf>
+      ea:	e8 71 0e 00 00       	call   f60 <printf>
       ef:	e9 69 ff ff ff       	jmp    5d <main+0x5d>
       close(fd);
       f4:	89 04 24             	mov    %eax,(%esp)
@@ -126,10 +126,10 @@ main(void)
      118:	8b 5d 08             	mov    0x8(%ebp),%ebx
      11b:	8b 75 0c             	mov    0xc(%ebp),%esi
   printf(2, "$ ");
-     11e:	c7 44 24 04 b8 12 00 	movl   $0x12b8,0x4(%esp)
+     11e:	c7 44 24 04 c8 12 00 	movl   $0x12c8,0x4(%esp)
      125:	00 
      126:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-     12d:	e8 1e 0e 00 00       	call   f50 <printf>
+     12d:	e8 2e 0e 00 00       	call   f60 <printf>
   memset(buf, 0, nbuf);
      132:	89 74 24 08          	mov    %esi,0x8(%esp)
      136:	89 1c 24             	mov    %ebx,(%esp)
@@ -167,11 +167,11 @@ panic(char *s)
      173:	83 ec 18             	sub    $0x18,%esp
   printf(2, "%s\n", s);
      176:	8b 45 08             	mov    0x8(%ebp),%eax
-     179:	c7 44 24 04 55 13 00 	movl   $0x1355,0x4(%esp)
+     179:	c7 44 24 04 65 13 00 	movl   $0x1365,0x4(%esp)
      180:	00 
      181:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
      188:	89 44 24 08          	mov    %eax,0x8(%esp)
-     18c:	e8 bf 0d 00 00       	call   f50 <printf>
+     18c:	e8 cf 0d 00 00       	call   f60 <printf>
   exit(0);
      191:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
      198:	e8 65 0c 00 00       	call   e02 <exit>
@@ -199,7 +199,7 @@ fork1(void)
      1b0:	c9                   	leave  
      1b1:	c3                   	ret    
     panic("fork");
-     1b2:	c7 04 24 bb 12 00 00 	movl   $0x12bb,(%esp)
+     1b2:	c7 04 24 cb 12 00 00 	movl   $0x12cb,(%esp)
      1b9:	e8 b2 ff ff ff       	call   170 <panic>
      1be:	66 90                	xchg   %ax,%ax
 
@@ -217,7 +217,7 @@ fork1(void)
      1ce:	83 3b 05             	cmpl   $0x5,(%ebx)
      1d1:	0f 87 fe 00 00 00    	ja     2d5 <runcmd+0x115>
      1d7:	8b 03                	mov    (%ebx),%eax
-     1d9:	ff 24 85 70 13 00 00 	jmp    *0x1370(,%eax,4)
+     1d9:	ff 24 85 80 13 00 00 	jmp    *0x1380(,%eax,4)
     if(pipe(p) < 0)
      1e0:	8d 45 f0             	lea    -0x10(%ebp),%eax
      1e3:	89 04 24             	mov    %eax,(%esp)
@@ -265,11 +265,11 @@ fork1(void)
      263:	e8 d2 0b 00 00       	call   e3a <exec>
     printf(2, "exec %s failed\n", ecmd->argv[0]);
      268:	8b 43 04             	mov    0x4(%ebx),%eax
-     26b:	c7 44 24 04 c7 12 00 	movl   $0x12c7,0x4(%esp)
+     26b:	c7 44 24 04 d7 12 00 	movl   $0x12d7,0x4(%esp)
      272:	00 
      273:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
      27a:	89 44 24 08          	mov    %eax,0x8(%esp)
-     27e:	e8 cd 0c 00 00       	call   f50 <printf>
+     27e:	e8 dd 0c 00 00       	call   f60 <printf>
     break;
      283:	eb b6                	jmp    23b <runcmd+0x7b>
     if(fork1() == 0)
@@ -301,18 +301,18 @@ fork1(void)
      2cd:	89 04 24             	mov    %eax,(%esp)
      2d0:	e8 eb fe ff ff       	call   1c0 <runcmd>
     panic("runcmd");
-     2d5:	c7 04 24 c0 12 00 00 	movl   $0x12c0,(%esp)
+     2d5:	c7 04 24 d0 12 00 00 	movl   $0x12d0,(%esp)
      2dc:	e8 8f fe ff ff       	call   170 <panic>
       panic("pipe");
-     2e1:	c7 04 24 e7 12 00 00 	movl   $0x12e7,(%esp)
+     2e1:	c7 04 24 f7 12 00 00 	movl   $0x12f7,(%esp)
      2e8:	e8 83 fe ff ff       	call   170 <panic>
       printf(2, "open %s failed\n", rcmd->file);
      2ed:	8b 43 08             	mov    0x8(%ebx),%eax
-     2f0:	c7 44 24 04 d7 12 00 	movl   $0x12d7,0x4(%esp)
+     2f0:	c7 44 24 04 e7 12 00 	movl   $0x12e7,0x4(%esp)
      2f7:	00 
      2f8:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
      2ff:	89 44 24 08          	mov    %eax,0x8(%esp)
-     303:	e8 48 0c 00 00       	call   f50 <printf>
+     303:	e8 58 0c 00 00       	call   f60 <printf>
      308:	e9 2e ff ff ff       	jmp    23b <runcmd+0x7b>
       close(0);
      30d:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
@@ -369,7 +369,7 @@ execcmd(void)
 
   cmd = malloc(sizeof(*cmd));
      387:	c7 04 24 54 00 00 00 	movl   $0x54,(%esp)
-     38e:	e8 3d 0e 00 00       	call   11d0 <malloc>
+     38e:	e8 4d 0e 00 00       	call   11e0 <malloc>
   memset(cmd, 0, sizeof(*cmd));
      393:	c7 44 24 08 54 00 00 	movl   $0x54,0x8(%esp)
      39a:	00 
@@ -407,7 +407,7 @@ redircmd(struct cmd *subcmd, char *file, char *efile, int mode, int fd)
 
   cmd = malloc(sizeof(*cmd));
      3c7:	c7 04 24 18 00 00 00 	movl   $0x18,(%esp)
-     3ce:	e8 fd 0d 00 00       	call   11d0 <malloc>
+     3ce:	e8 0d 0e 00 00       	call   11e0 <malloc>
   memset(cmd, 0, sizeof(*cmd));
      3d3:	c7 44 24 08 18 00 00 	movl   $0x18,0x8(%esp)
      3da:	00 
@@ -459,7 +459,7 @@ pipecmd(struct cmd *left, struct cmd *right)
 
   cmd = malloc(sizeof(*cmd));
      427:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
-     42e:	e8 9d 0d 00 00       	call   11d0 <malloc>
+     42e:	e8 ad 0d 00 00       	call   11e0 <malloc>
   memset(cmd, 0, sizeof(*cmd));
      433:	c7 44 24 08 0c 00 00 	movl   $0xc,0x8(%esp)
      43a:	00 
@@ -503,7 +503,7 @@ listcmd(struct cmd *left, struct cmd *right)
 
   cmd = malloc(sizeof(*cmd));
      477:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
-     47e:	e8 4d 0d 00 00       	call   11d0 <malloc>
+     47e:	e8 5d 0d 00 00       	call   11e0 <malloc>
   memset(cmd, 0, sizeof(*cmd));
      483:	c7 44 24 08 0c 00 00 	movl   $0xc,0x8(%esp)
      48a:	00 
@@ -547,7 +547,7 @@ backcmd(struct cmd *subcmd)
 
   cmd = malloc(sizeof(*cmd));
      4c7:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
-     4ce:	e8 fd 0c 00 00       	call   11d0 <malloc>
+     4ce:	e8 0d 0d 00 00       	call   11e0 <malloc>
   memset(cmd, 0, sizeof(*cmd));
      4d3:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
      4da:	00 
@@ -621,7 +621,7 @@ gettoken(char **ps, char *es, char **q, char **eq)
      533:	39 df                	cmp    %ebx,%edi
      535:	74 17                	je     54e <gettoken+0x3e>
      537:	0f be 07             	movsbl (%edi),%eax
-     53a:	c7 04 24 40 19 00 00 	movl   $0x1940,(%esp)
+     53a:	c7 04 24 50 19 00 00 	movl   $0x1950,(%esp)
      541:	89 44 24 04          	mov    %eax,0x4(%esp)
      545:	e8 66 07 00 00       	call   cb0 <strchr>
      54a:	85 c0                	test   %eax,%eax
@@ -667,7 +667,7 @@ gettoken(char **ps, char *es, char **q, char **eq)
      583:	39 df                	cmp    %ebx,%edi
      585:	74 17                	je     59e <gettoken+0x8e>
      587:	0f be 07             	movsbl (%edi),%eax
-     58a:	c7 04 24 40 19 00 00 	movl   $0x1940,(%esp)
+     58a:	c7 04 24 50 19 00 00 	movl   $0x1950,(%esp)
      591:	89 44 24 04          	mov    %eax,0x4(%esp)
      595:	e8 16 07 00 00       	call   cb0 <strchr>
      59a:	85 c0                	test   %eax,%eax
@@ -706,7 +706,7 @@ gettoken(char **ps, char *es, char **q, char **eq)
      5d0:	eb 3b                	jmp    60d <gettoken+0xfd>
      5d2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
      5d8:	0f be 07             	movsbl (%edi),%eax
-     5db:	c7 04 24 38 19 00 00 	movl   $0x1938,(%esp)
+     5db:	c7 04 24 48 19 00 00 	movl   $0x1948,(%esp)
      5e2:	89 44 24 04          	mov    %eax,0x4(%esp)
      5e6:	e8 c5 06 00 00       	call   cb0 <strchr>
      5eb:	85 c0                	test   %eax,%eax
@@ -718,7 +718,7 @@ gettoken(char **ps, char *es, char **q, char **eq)
      5f4:	74 17                	je     60d <gettoken+0xfd>
      5f6:	0f be 07             	movsbl (%edi),%eax
      5f9:	89 44 24 04          	mov    %eax,0x4(%esp)
-     5fd:	c7 04 24 40 19 00 00 	movl   $0x1940,(%esp)
+     5fd:	c7 04 24 50 19 00 00 	movl   $0x1950,(%esp)
      604:	e8 a7 06 00 00       	call   cb0 <strchr>
      609:	85 c0                	test   %eax,%eax
      60b:	74 cb                	je     5d8 <gettoken+0xc8>
@@ -773,7 +773,7 @@ peek(char **ps, char *es, char *toks)
      66b:	39 f3                	cmp    %esi,%ebx
      66d:	74 17                	je     686 <peek+0x36>
      66f:	0f be 03             	movsbl (%ebx),%eax
-     672:	c7 04 24 40 19 00 00 	movl   $0x1940,(%esp)
+     672:	c7 04 24 50 19 00 00 	movl   $0x1950,(%esp)
      679:	89 44 24 04          	mov    %eax,0x4(%esp)
      67d:	e8 2e 06 00 00       	call   cb0 <strchr>
      682:	85 c0                	test   %eax,%eax
@@ -820,7 +820,7 @@ parseredirs(struct cmd *cmd, char **ps, char *es)
   char *q, *eq;
 
   while(peek(ps, es, "<>")){
-     6c0:	c7 44 24 08 09 13 00 	movl   $0x1309,0x8(%esp)
+     6c0:	c7 44 24 08 19 13 00 	movl   $0x1319,0x8(%esp)
      6c7:	00 
      6c8:	89 5c 24 04          	mov    %ebx,0x4(%esp)
      6cc:	89 34 24             	mov    %esi,(%esp)
@@ -896,7 +896,7 @@ parseredirs(struct cmd *cmd, char **ps, char *es)
      781:	5d                   	pop    %ebp
      782:	c3                   	ret    
       panic("missing file for redirection");
-     783:	c7 04 24 ec 12 00 00 	movl   $0x12ec,(%esp)
+     783:	c7 04 24 fc 12 00 00 	movl   $0x12fc,(%esp)
      78a:	e8 e1 f9 ff ff       	call   170 <panic>
      78f:	90                   	nop
 
@@ -921,7 +921,7 @@ parseexec(char **ps, char *es)
   struct cmd *ret;
 
   if(peek(ps, es, "("))
-     79f:	c7 44 24 08 0c 13 00 	movl   $0x130c,0x8(%esp)
+     79f:	c7 44 24 08 1c 13 00 	movl   $0x131c,0x8(%esp)
      7a6:	00 
      7a7:	89 34 24             	mov    %esi,(%esp)
      7aa:	89 7c 24 04          	mov    %edi,0x4(%esp)
@@ -964,7 +964,7 @@ parseexec(char **ps, char *es)
      7f6:	e8 b5 fe ff ff       	call   6b0 <parseredirs>
      7fb:	89 45 d0             	mov    %eax,-0x30(%ebp)
   while(!peek(ps, es, "|)&;")){
-     7fe:	c7 44 24 08 23 13 00 	movl   $0x1323,0x8(%esp)
+     7fe:	c7 44 24 08 33 13 00 	movl   $0x1333,0x8(%esp)
      805:	00 
      806:	89 7c 24 04          	mov    %edi,0x4(%esp)
      80a:	89 34 24             	mov    %esi,(%esp)
@@ -998,7 +998,7 @@ parseexec(char **ps, char *es)
      84b:	83 7d d4 0a          	cmpl   $0xa,-0x2c(%ebp)
      84f:	75 97                	jne    7e8 <parseexec+0x58>
       panic("too many args");
-     851:	c7 04 24 15 13 00 00 	movl   $0x1315,(%esp)
+     851:	c7 04 24 25 13 00 00 	movl   $0x1325,(%esp)
      858:	e8 13 f9 ff ff       	call   170 <panic>
      85d:	8d 76 00             	lea    0x0(%esi),%esi
     return parseblock(ps, es);
@@ -1034,7 +1034,7 @@ parseexec(char **ps, char *es)
      898:	5d                   	pop    %ebp
      899:	c3                   	ret    
       panic("syntax");
-     89a:	c7 04 24 0e 13 00 00 	movl   $0x130e,(%esp)
+     89a:	c7 04 24 1e 13 00 00 	movl   $0x131e,(%esp)
      8a1:	e8 ca f8 ff ff       	call   170 <panic>
      8a6:	8d 76 00             	lea    0x0(%esi),%esi
      8a9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
@@ -1054,7 +1054,7 @@ parseexec(char **ps, char *es)
      8c2:	89 74 24 04          	mov    %esi,0x4(%esp)
      8c6:	e8 c5 fe ff ff       	call   790 <parseexec>
   if(peek(ps, es, "|")){
-     8cb:	c7 44 24 08 28 13 00 	movl   $0x1328,0x8(%esp)
+     8cb:	c7 44 24 08 38 13 00 	movl   $0x1338,0x8(%esp)
      8d2:	00 
      8d3:	89 74 24 04          	mov    %esi,0x4(%esp)
      8d7:	89 1c 24             	mov    %ebx,(%esp)
@@ -1128,7 +1128,7 @@ parseexec(char **ps, char *es)
      96f:	e8 4c fb ff ff       	call   4c0 <backcmd>
      974:	89 c7                	mov    %eax,%edi
   while(peek(ps, es, "&")){
-     976:	c7 44 24 08 2a 13 00 	movl   $0x132a,0x8(%esp)
+     976:	c7 44 24 08 3a 13 00 	movl   $0x133a,0x8(%esp)
      97d:	00 
      97e:	89 74 24 04          	mov    %esi,0x4(%esp)
      982:	89 1c 24             	mov    %ebx,(%esp)
@@ -1136,7 +1136,7 @@ parseexec(char **ps, char *es)
      98a:	85 c0                	test   %eax,%eax
      98c:	75 c2                	jne    950 <parseline+0x20>
   if(peek(ps, es, ";")){
-     98e:	c7 44 24 08 26 13 00 	movl   $0x1326,0x8(%esp)
+     98e:	c7 44 24 08 36 13 00 	movl   $0x1336,0x8(%esp)
      995:	00 
      996:	89 74 24 04          	mov    %esi,0x4(%esp)
      99a:	89 1c 24             	mov    %ebx,(%esp)
@@ -1186,7 +1186,7 @@ parseexec(char **ps, char *es)
      9f9:	8b 5d 08             	mov    0x8(%ebp),%ebx
      9fc:	8b 75 0c             	mov    0xc(%ebp),%esi
   if(!peek(ps, es, "("))
-     9ff:	c7 44 24 08 0c 13 00 	movl   $0x130c,0x8(%esp)
+     9ff:	c7 44 24 08 1c 13 00 	movl   $0x131c,0x8(%esp)
      a06:	00 
      a07:	89 1c 24             	mov    %ebx,(%esp)
      a0a:	89 74 24 04          	mov    %esi,0x4(%esp)
@@ -1206,7 +1206,7 @@ parseexec(char **ps, char *es)
      a37:	89 1c 24             	mov    %ebx,(%esp)
      a3a:	e8 f1 fe ff ff       	call   930 <parseline>
   if(!peek(ps, es, ")"))
-     a3f:	c7 44 24 08 48 13 00 	movl   $0x1348,0x8(%esp)
+     a3f:	c7 44 24 08 58 13 00 	movl   $0x1358,0x8(%esp)
      a46:	00 
      a47:	89 74 24 04          	mov    %esi,0x4(%esp)
      a4b:	89 1c 24             	mov    %ebx,(%esp)
@@ -1237,10 +1237,10 @@ parseexec(char **ps, char *es)
      a8b:	5d                   	pop    %ebp
      a8c:	c3                   	ret    
     panic("parseblock");
-     a8d:	c7 04 24 2c 13 00 00 	movl   $0x132c,(%esp)
+     a8d:	c7 04 24 3c 13 00 00 	movl   $0x133c,(%esp)
      a94:	e8 d7 f6 ff ff       	call   170 <panic>
     panic("syntax - missing )");
-     a99:	c7 04 24 37 13 00 00 	movl   $0x1337,(%esp)
+     a99:	c7 04 24 47 13 00 00 	movl   $0x1347,(%esp)
      aa0:	e8 cb f6 ff ff       	call   170 <panic>
      aa5:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
      aa9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
@@ -1270,7 +1270,7 @@ nulterminate(struct cmd *cmd)
      ac2:	83 3b 05             	cmpl   $0x5,(%ebx)
      ac5:	77 49                	ja     b10 <nulterminate+0x60>
      ac7:	8b 03                	mov    (%ebx),%eax
-     ac9:	ff 24 85 88 13 00 00 	jmp    *0x1388(,%eax,4)
+     ac9:	ff 24 85 98 13 00 00 	jmp    *0x1398(,%eax,4)
     nulterminate(pcmd->right);
     break;
 
@@ -1373,7 +1373,7 @@ nulterminate(struct cmd *cmd)
      b7c:	89 04 24             	mov    %eax,(%esp)
      b7f:	e8 ac fd ff ff       	call   930 <parseline>
   peek(&s, es, "");
-     b84:	c7 44 24 08 d6 12 00 	movl   $0x12d6,0x8(%esp)
+     b84:	c7 44 24 08 e6 12 00 	movl   $0x12e6,0x8(%esp)
      b8b:	00 
      b8c:	89 5c 24 04          	mov    %ebx,0x4(%esp)
   cmd = parseline(&s, es);
@@ -1398,12 +1398,12 @@ nulterminate(struct cmd *cmd)
      bb4:	c3                   	ret    
     printf(2, "leftovers: %s\n", s);
      bb5:	89 44 24 08          	mov    %eax,0x8(%esp)
-     bb9:	c7 44 24 04 4a 13 00 	movl   $0x134a,0x4(%esp)
+     bb9:	c7 44 24 04 5a 13 00 	movl   $0x135a,0x4(%esp)
      bc0:	00 
      bc1:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
-     bc8:	e8 83 03 00 00       	call   f50 <printf>
+     bc8:	e8 93 03 00 00       	call   f60 <printf>
     panic("syntax");
-     bcd:	c7 04 24 0e 13 00 00 	movl   $0x130e,(%esp)
+     bcd:	c7 04 24 1e 13 00 00 	movl   $0x131e,(%esp)
      bd4:	e8 97 f5 ff ff       	call   170 <panic>
      bd9:	66 90                	xchg   %ax,%ax
      bdb:	66 90                	xchg   %ax,%ax
@@ -1924,580 +1924,592 @@ SYSCALL(uptime)
      ea1:	c3                   	ret    
 
 00000ea2 <waitpid>:
+SYSCALL(waitpid)
      ea2:	b8 16 00 00 00       	mov    $0x16,%eax
      ea7:	cd 40                	int    $0x40
      ea9:	c3                   	ret    
-     eaa:	66 90                	xchg   %ax,%ax
-     eac:	66 90                	xchg   %ax,%ax
-     eae:	66 90                	xchg   %ax,%ax
 
-00000eb0 <printint>:
+00000eaa <setPrior>:
+SYSCALL(setPrior)
+     eaa:	b8 17 00 00 00       	mov    $0x17,%eax
+     eaf:	cd 40                	int    $0x40
+     eb1:	c3                   	ret    
+
+00000eb2 <getPrior>:
+     eb2:	b8 18 00 00 00       	mov    $0x18,%eax
+     eb7:	cd 40                	int    $0x40
+     eb9:	c3                   	ret    
+     eba:	66 90                	xchg   %ax,%ax
+     ebc:	66 90                	xchg   %ax,%ax
+     ebe:	66 90                	xchg   %ax,%ax
+
+00000ec0 <printint>:
   write(fd, &c, 1);
 }
 
 static void
 printint(int fd, int xx, int base, int sgn)
 {
-     eb0:	55                   	push   %ebp
-     eb1:	89 e5                	mov    %esp,%ebp
-     eb3:	57                   	push   %edi
-     eb4:	56                   	push   %esi
-     eb5:	89 c6                	mov    %eax,%esi
-     eb7:	53                   	push   %ebx
-     eb8:	83 ec 4c             	sub    $0x4c,%esp
+     ec0:	55                   	push   %ebp
+     ec1:	89 e5                	mov    %esp,%ebp
+     ec3:	57                   	push   %edi
+     ec4:	56                   	push   %esi
+     ec5:	89 c6                	mov    %eax,%esi
+     ec7:	53                   	push   %ebx
+     ec8:	83 ec 4c             	sub    $0x4c,%esp
   char buf[16];
   int i, neg;
   uint x;
 
   neg = 0;
   if(sgn && xx < 0){
-     ebb:	8b 5d 08             	mov    0x8(%ebp),%ebx
-     ebe:	85 db                	test   %ebx,%ebx
-     ec0:	74 09                	je     ecb <printint+0x1b>
-     ec2:	89 d0                	mov    %edx,%eax
-     ec4:	c1 e8 1f             	shr    $0x1f,%eax
-     ec7:	84 c0                	test   %al,%al
-     ec9:	75 75                	jne    f40 <printint+0x90>
+     ecb:	8b 5d 08             	mov    0x8(%ebp),%ebx
+     ece:	85 db                	test   %ebx,%ebx
+     ed0:	74 09                	je     edb <printint+0x1b>
+     ed2:	89 d0                	mov    %edx,%eax
+     ed4:	c1 e8 1f             	shr    $0x1f,%eax
+     ed7:	84 c0                	test   %al,%al
+     ed9:	75 75                	jne    f50 <printint+0x90>
     neg = 1;
     x = -xx;
   } else {
     x = xx;
-     ecb:	89 d0                	mov    %edx,%eax
+     edb:	89 d0                	mov    %edx,%eax
   neg = 0;
-     ecd:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
-     ed4:	89 75 c0             	mov    %esi,-0x40(%ebp)
+     edd:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
+     ee4:	89 75 c0             	mov    %esi,-0x40(%ebp)
   }
 
   i = 0;
-     ed7:	31 ff                	xor    %edi,%edi
-     ed9:	89 ce                	mov    %ecx,%esi
-     edb:	8d 5d d7             	lea    -0x29(%ebp),%ebx
-     ede:	eb 02                	jmp    ee2 <printint+0x32>
+     ee7:	31 ff                	xor    %edi,%edi
+     ee9:	89 ce                	mov    %ecx,%esi
+     eeb:	8d 5d d7             	lea    -0x29(%ebp),%ebx
+     eee:	eb 02                	jmp    ef2 <printint+0x32>
   do{
     buf[i++] = digits[x % base];
-     ee0:	89 cf                	mov    %ecx,%edi
-     ee2:	31 d2                	xor    %edx,%edx
-     ee4:	f7 f6                	div    %esi
-     ee6:	8d 4f 01             	lea    0x1(%edi),%ecx
-     ee9:	0f b6 92 a7 13 00 00 	movzbl 0x13a7(%edx),%edx
+     ef0:	89 cf                	mov    %ecx,%edi
+     ef2:	31 d2                	xor    %edx,%edx
+     ef4:	f7 f6                	div    %esi
+     ef6:	8d 4f 01             	lea    0x1(%edi),%ecx
+     ef9:	0f b6 92 b7 13 00 00 	movzbl 0x13b7(%edx),%edx
   }while((x /= base) != 0);
-     ef0:	85 c0                	test   %eax,%eax
+     f00:	85 c0                	test   %eax,%eax
     buf[i++] = digits[x % base];
-     ef2:	88 14 0b             	mov    %dl,(%ebx,%ecx,1)
+     f02:	88 14 0b             	mov    %dl,(%ebx,%ecx,1)
   }while((x /= base) != 0);
-     ef5:	75 e9                	jne    ee0 <printint+0x30>
+     f05:	75 e9                	jne    ef0 <printint+0x30>
   if(neg)
-     ef7:	8b 55 c4             	mov    -0x3c(%ebp),%edx
+     f07:	8b 55 c4             	mov    -0x3c(%ebp),%edx
     buf[i++] = digits[x % base];
-     efa:	89 c8                	mov    %ecx,%eax
-     efc:	8b 75 c0             	mov    -0x40(%ebp),%esi
+     f0a:	89 c8                	mov    %ecx,%eax
+     f0c:	8b 75 c0             	mov    -0x40(%ebp),%esi
   if(neg)
-     eff:	85 d2                	test   %edx,%edx
-     f01:	74 08                	je     f0b <printint+0x5b>
+     f0f:	85 d2                	test   %edx,%edx
+     f11:	74 08                	je     f1b <printint+0x5b>
     buf[i++] = '-';
-     f03:	8d 4f 02             	lea    0x2(%edi),%ecx
-     f06:	c6 44 05 d8 2d       	movb   $0x2d,-0x28(%ebp,%eax,1)
+     f13:	8d 4f 02             	lea    0x2(%edi),%ecx
+     f16:	c6 44 05 d8 2d       	movb   $0x2d,-0x28(%ebp,%eax,1)
 
   while(--i >= 0)
-     f0b:	8d 79 ff             	lea    -0x1(%ecx),%edi
-     f0e:	66 90                	xchg   %ax,%ax
-     f10:	0f b6 44 3d d8       	movzbl -0x28(%ebp,%edi,1),%eax
-     f15:	83 ef 01             	sub    $0x1,%edi
+     f1b:	8d 79 ff             	lea    -0x1(%ecx),%edi
+     f1e:	66 90                	xchg   %ax,%ax
+     f20:	0f b6 44 3d d8       	movzbl -0x28(%ebp,%edi,1),%eax
+     f25:	83 ef 01             	sub    $0x1,%edi
   write(fd, &c, 1);
-     f18:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
-     f1f:	00 
-     f20:	89 5c 24 04          	mov    %ebx,0x4(%esp)
-     f24:	89 34 24             	mov    %esi,(%esp)
-     f27:	88 45 d7             	mov    %al,-0x29(%ebp)
-     f2a:	e8 f3 fe ff ff       	call   e22 <write>
+     f28:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+     f2f:	00 
+     f30:	89 5c 24 04          	mov    %ebx,0x4(%esp)
+     f34:	89 34 24             	mov    %esi,(%esp)
+     f37:	88 45 d7             	mov    %al,-0x29(%ebp)
+     f3a:	e8 e3 fe ff ff       	call   e22 <write>
   while(--i >= 0)
-     f2f:	83 ff ff             	cmp    $0xffffffff,%edi
-     f32:	75 dc                	jne    f10 <printint+0x60>
+     f3f:	83 ff ff             	cmp    $0xffffffff,%edi
+     f42:	75 dc                	jne    f20 <printint+0x60>
     putc(fd, buf[i]);
 }
-     f34:	83 c4 4c             	add    $0x4c,%esp
-     f37:	5b                   	pop    %ebx
-     f38:	5e                   	pop    %esi
-     f39:	5f                   	pop    %edi
-     f3a:	5d                   	pop    %ebp
-     f3b:	c3                   	ret    
-     f3c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     f44:	83 c4 4c             	add    $0x4c,%esp
+     f47:	5b                   	pop    %ebx
+     f48:	5e                   	pop    %esi
+     f49:	5f                   	pop    %edi
+     f4a:	5d                   	pop    %ebp
+     f4b:	c3                   	ret    
+     f4c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     x = -xx;
-     f40:	89 d0                	mov    %edx,%eax
-     f42:	f7 d8                	neg    %eax
+     f50:	89 d0                	mov    %edx,%eax
+     f52:	f7 d8                	neg    %eax
     neg = 1;
-     f44:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
-     f4b:	eb 87                	jmp    ed4 <printint+0x24>
-     f4d:	8d 76 00             	lea    0x0(%esi),%esi
+     f54:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
+     f5b:	eb 87                	jmp    ee4 <printint+0x24>
+     f5d:	8d 76 00             	lea    0x0(%esi),%esi
 
-00000f50 <printf>:
+00000f60 <printf>:
 
 // Print to the given fd. Only understands %d, %x, %p, %s.
 void
 printf(int fd, const char *fmt, ...)
 {
-     f50:	55                   	push   %ebp
-     f51:	89 e5                	mov    %esp,%ebp
-     f53:	57                   	push   %edi
+     f60:	55                   	push   %ebp
+     f61:	89 e5                	mov    %esp,%ebp
+     f63:	57                   	push   %edi
   char *s;
   int c, i, state;
   uint *ap;
 
   state = 0;
-     f54:	31 ff                	xor    %edi,%edi
+     f64:	31 ff                	xor    %edi,%edi
 {
-     f56:	56                   	push   %esi
-     f57:	53                   	push   %ebx
-     f58:	83 ec 3c             	sub    $0x3c,%esp
+     f66:	56                   	push   %esi
+     f67:	53                   	push   %ebx
+     f68:	83 ec 3c             	sub    $0x3c,%esp
   ap = (uint*)(void*)&fmt + 1;
   for(i = 0; fmt[i]; i++){
-     f5b:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+     f6b:	8b 5d 0c             	mov    0xc(%ebp),%ebx
   ap = (uint*)(void*)&fmt + 1;
-     f5e:	8d 45 10             	lea    0x10(%ebp),%eax
+     f6e:	8d 45 10             	lea    0x10(%ebp),%eax
 {
-     f61:	8b 75 08             	mov    0x8(%ebp),%esi
+     f71:	8b 75 08             	mov    0x8(%ebp),%esi
   ap = (uint*)(void*)&fmt + 1;
-     f64:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+     f74:	89 45 d4             	mov    %eax,-0x2c(%ebp)
   for(i = 0; fmt[i]; i++){
-     f67:	0f b6 13             	movzbl (%ebx),%edx
-     f6a:	83 c3 01             	add    $0x1,%ebx
-     f6d:	84 d2                	test   %dl,%dl
-     f6f:	75 39                	jne    faa <printf+0x5a>
-     f71:	e9 c2 00 00 00       	jmp    1038 <printf+0xe8>
-     f76:	66 90                	xchg   %ax,%ax
+     f77:	0f b6 13             	movzbl (%ebx),%edx
+     f7a:	83 c3 01             	add    $0x1,%ebx
+     f7d:	84 d2                	test   %dl,%dl
+     f7f:	75 39                	jne    fba <printf+0x5a>
+     f81:	e9 c2 00 00 00       	jmp    1048 <printf+0xe8>
+     f86:	66 90                	xchg   %ax,%ax
     c = fmt[i] & 0xff;
     if(state == 0){
       if(c == '%'){
-     f78:	83 fa 25             	cmp    $0x25,%edx
-     f7b:	0f 84 bf 00 00 00    	je     1040 <printf+0xf0>
+     f88:	83 fa 25             	cmp    $0x25,%edx
+     f8b:	0f 84 bf 00 00 00    	je     1050 <printf+0xf0>
   write(fd, &c, 1);
-     f81:	8d 45 e2             	lea    -0x1e(%ebp),%eax
-     f84:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
-     f8b:	00 
-     f8c:	89 44 24 04          	mov    %eax,0x4(%esp)
-     f90:	89 34 24             	mov    %esi,(%esp)
+     f91:	8d 45 e2             	lea    -0x1e(%ebp),%eax
+     f94:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+     f9b:	00 
+     f9c:	89 44 24 04          	mov    %eax,0x4(%esp)
+     fa0:	89 34 24             	mov    %esi,(%esp)
         state = '%';
       } else {
         putc(fd, c);
-     f93:	88 55 e2             	mov    %dl,-0x1e(%ebp)
+     fa3:	88 55 e2             	mov    %dl,-0x1e(%ebp)
   write(fd, &c, 1);
-     f96:	e8 87 fe ff ff       	call   e22 <write>
-     f9b:	83 c3 01             	add    $0x1,%ebx
+     fa6:	e8 77 fe ff ff       	call   e22 <write>
+     fab:	83 c3 01             	add    $0x1,%ebx
   for(i = 0; fmt[i]; i++){
-     f9e:	0f b6 53 ff          	movzbl -0x1(%ebx),%edx
-     fa2:	84 d2                	test   %dl,%dl
-     fa4:	0f 84 8e 00 00 00    	je     1038 <printf+0xe8>
+     fae:	0f b6 53 ff          	movzbl -0x1(%ebx),%edx
+     fb2:	84 d2                	test   %dl,%dl
+     fb4:	0f 84 8e 00 00 00    	je     1048 <printf+0xe8>
     if(state == 0){
-     faa:	85 ff                	test   %edi,%edi
+     fba:	85 ff                	test   %edi,%edi
     c = fmt[i] & 0xff;
-     fac:	0f be c2             	movsbl %dl,%eax
+     fbc:	0f be c2             	movsbl %dl,%eax
     if(state == 0){
-     faf:	74 c7                	je     f78 <printf+0x28>
+     fbf:	74 c7                	je     f88 <printf+0x28>
       }
     } else if(state == '%'){
-     fb1:	83 ff 25             	cmp    $0x25,%edi
-     fb4:	75 e5                	jne    f9b <printf+0x4b>
+     fc1:	83 ff 25             	cmp    $0x25,%edi
+     fc4:	75 e5                	jne    fab <printf+0x4b>
       if(c == 'd'){
-     fb6:	83 fa 64             	cmp    $0x64,%edx
-     fb9:	0f 84 31 01 00 00    	je     10f0 <printf+0x1a0>
+     fc6:	83 fa 64             	cmp    $0x64,%edx
+     fc9:	0f 84 31 01 00 00    	je     1100 <printf+0x1a0>
         printint(fd, *ap, 10, 1);
         ap++;
       } else if(c == 'x' || c == 'p'){
-     fbf:	25 f7 00 00 00       	and    $0xf7,%eax
-     fc4:	83 f8 70             	cmp    $0x70,%eax
-     fc7:	0f 84 83 00 00 00    	je     1050 <printf+0x100>
+     fcf:	25 f7 00 00 00       	and    $0xf7,%eax
+     fd4:	83 f8 70             	cmp    $0x70,%eax
+     fd7:	0f 84 83 00 00 00    	je     1060 <printf+0x100>
         printint(fd, *ap, 16, 0);
         ap++;
       } else if(c == 's'){
-     fcd:	83 fa 73             	cmp    $0x73,%edx
-     fd0:	0f 84 a2 00 00 00    	je     1078 <printf+0x128>
+     fdd:	83 fa 73             	cmp    $0x73,%edx
+     fe0:	0f 84 a2 00 00 00    	je     1088 <printf+0x128>
           s = "(null)";
         while(*s != 0){
           putc(fd, *s);
           s++;
         }
       } else if(c == 'c'){
-     fd6:	83 fa 63             	cmp    $0x63,%edx
-     fd9:	0f 84 35 01 00 00    	je     1114 <printf+0x1c4>
+     fe6:	83 fa 63             	cmp    $0x63,%edx
+     fe9:	0f 84 35 01 00 00    	je     1124 <printf+0x1c4>
         putc(fd, *ap);
         ap++;
       } else if(c == '%'){
-     fdf:	83 fa 25             	cmp    $0x25,%edx
-     fe2:	0f 84 e0 00 00 00    	je     10c8 <printf+0x178>
+     fef:	83 fa 25             	cmp    $0x25,%edx
+     ff2:	0f 84 e0 00 00 00    	je     10d8 <printf+0x178>
   write(fd, &c, 1);
-     fe8:	8d 45 e6             	lea    -0x1a(%ebp),%eax
-     feb:	83 c3 01             	add    $0x1,%ebx
-     fee:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
-     ff5:	00 
+     ff8:	8d 45 e6             	lea    -0x1a(%ebp),%eax
+     ffb:	83 c3 01             	add    $0x1,%ebx
+     ffe:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+    1005:	00 
       } else {
         // Unknown % sequence.  Print it to draw attention.
         putc(fd, '%');
         putc(fd, c);
       }
       state = 0;
-     ff6:	31 ff                	xor    %edi,%edi
+    1006:	31 ff                	xor    %edi,%edi
   write(fd, &c, 1);
-     ff8:	89 44 24 04          	mov    %eax,0x4(%esp)
-     ffc:	89 34 24             	mov    %esi,(%esp)
-     fff:	89 55 d0             	mov    %edx,-0x30(%ebp)
-    1002:	c6 45 e6 25          	movb   $0x25,-0x1a(%ebp)
-    1006:	e8 17 fe ff ff       	call   e22 <write>
+    1008:	89 44 24 04          	mov    %eax,0x4(%esp)
+    100c:	89 34 24             	mov    %esi,(%esp)
+    100f:	89 55 d0             	mov    %edx,-0x30(%ebp)
+    1012:	c6 45 e6 25          	movb   $0x25,-0x1a(%ebp)
+    1016:	e8 07 fe ff ff       	call   e22 <write>
         putc(fd, c);
-    100b:	8b 55 d0             	mov    -0x30(%ebp),%edx
+    101b:	8b 55 d0             	mov    -0x30(%ebp),%edx
   write(fd, &c, 1);
-    100e:	8d 45 e7             	lea    -0x19(%ebp),%eax
-    1011:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
-    1018:	00 
-    1019:	89 44 24 04          	mov    %eax,0x4(%esp)
-    101d:	89 34 24             	mov    %esi,(%esp)
+    101e:	8d 45 e7             	lea    -0x19(%ebp),%eax
+    1021:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+    1028:	00 
+    1029:	89 44 24 04          	mov    %eax,0x4(%esp)
+    102d:	89 34 24             	mov    %esi,(%esp)
         putc(fd, c);
-    1020:	88 55 e7             	mov    %dl,-0x19(%ebp)
+    1030:	88 55 e7             	mov    %dl,-0x19(%ebp)
   write(fd, &c, 1);
-    1023:	e8 fa fd ff ff       	call   e22 <write>
+    1033:	e8 ea fd ff ff       	call   e22 <write>
   for(i = 0; fmt[i]; i++){
-    1028:	0f b6 53 ff          	movzbl -0x1(%ebx),%edx
-    102c:	84 d2                	test   %dl,%dl
-    102e:	0f 85 76 ff ff ff    	jne    faa <printf+0x5a>
-    1034:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    1038:	0f b6 53 ff          	movzbl -0x1(%ebx),%edx
+    103c:	84 d2                	test   %dl,%dl
+    103e:	0f 85 76 ff ff ff    	jne    fba <printf+0x5a>
+    1044:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     }
   }
 }
-    1038:	83 c4 3c             	add    $0x3c,%esp
-    103b:	5b                   	pop    %ebx
-    103c:	5e                   	pop    %esi
-    103d:	5f                   	pop    %edi
-    103e:	5d                   	pop    %ebp
-    103f:	c3                   	ret    
+    1048:	83 c4 3c             	add    $0x3c,%esp
+    104b:	5b                   	pop    %ebx
+    104c:	5e                   	pop    %esi
+    104d:	5f                   	pop    %edi
+    104e:	5d                   	pop    %ebp
+    104f:	c3                   	ret    
         state = '%';
-    1040:	bf 25 00 00 00       	mov    $0x25,%edi
-    1045:	e9 51 ff ff ff       	jmp    f9b <printf+0x4b>
-    104a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    1050:	bf 25 00 00 00       	mov    $0x25,%edi
+    1055:	e9 51 ff ff ff       	jmp    fab <printf+0x4b>
+    105a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         printint(fd, *ap, 16, 0);
-    1050:	8b 45 d4             	mov    -0x2c(%ebp),%eax
-    1053:	b9 10 00 00 00       	mov    $0x10,%ecx
+    1060:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+    1063:	b9 10 00 00 00       	mov    $0x10,%ecx
       state = 0;
-    1058:	31 ff                	xor    %edi,%edi
+    1068:	31 ff                	xor    %edi,%edi
         printint(fd, *ap, 16, 0);
-    105a:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    1061:	8b 10                	mov    (%eax),%edx
-    1063:	89 f0                	mov    %esi,%eax
-    1065:	e8 46 fe ff ff       	call   eb0 <printint>
+    106a:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    1071:	8b 10                	mov    (%eax),%edx
+    1073:	89 f0                	mov    %esi,%eax
+    1075:	e8 46 fe ff ff       	call   ec0 <printint>
         ap++;
-    106a:	83 45 d4 04          	addl   $0x4,-0x2c(%ebp)
-    106e:	e9 28 ff ff ff       	jmp    f9b <printf+0x4b>
-    1073:	90                   	nop
-    1074:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    107a:	83 45 d4 04          	addl   $0x4,-0x2c(%ebp)
+    107e:	e9 28 ff ff ff       	jmp    fab <printf+0x4b>
+    1083:	90                   	nop
+    1084:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
         s = (char*)*ap;
-    1078:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+    1088:	8b 45 d4             	mov    -0x2c(%ebp),%eax
         ap++;
-    107b:	83 45 d4 04          	addl   $0x4,-0x2c(%ebp)
+    108b:	83 45 d4 04          	addl   $0x4,-0x2c(%ebp)
         s = (char*)*ap;
-    107f:	8b 38                	mov    (%eax),%edi
+    108f:	8b 38                	mov    (%eax),%edi
           s = "(null)";
-    1081:	b8 a0 13 00 00       	mov    $0x13a0,%eax
-    1086:	85 ff                	test   %edi,%edi
-    1088:	0f 44 f8             	cmove  %eax,%edi
+    1091:	b8 b0 13 00 00       	mov    $0x13b0,%eax
+    1096:	85 ff                	test   %edi,%edi
+    1098:	0f 44 f8             	cmove  %eax,%edi
         while(*s != 0){
-    108b:	0f b6 07             	movzbl (%edi),%eax
-    108e:	84 c0                	test   %al,%al
-    1090:	74 2a                	je     10bc <printf+0x16c>
-    1092:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-    1098:	88 45 e3             	mov    %al,-0x1d(%ebp)
+    109b:	0f b6 07             	movzbl (%edi),%eax
+    109e:	84 c0                	test   %al,%al
+    10a0:	74 2a                	je     10cc <printf+0x16c>
+    10a2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    10a8:	88 45 e3             	mov    %al,-0x1d(%ebp)
   write(fd, &c, 1);
-    109b:	8d 45 e3             	lea    -0x1d(%ebp),%eax
+    10ab:	8d 45 e3             	lea    -0x1d(%ebp),%eax
           s++;
-    109e:	83 c7 01             	add    $0x1,%edi
+    10ae:	83 c7 01             	add    $0x1,%edi
   write(fd, &c, 1);
-    10a1:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
-    10a8:	00 
-    10a9:	89 44 24 04          	mov    %eax,0x4(%esp)
-    10ad:	89 34 24             	mov    %esi,(%esp)
-    10b0:	e8 6d fd ff ff       	call   e22 <write>
+    10b1:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+    10b8:	00 
+    10b9:	89 44 24 04          	mov    %eax,0x4(%esp)
+    10bd:	89 34 24             	mov    %esi,(%esp)
+    10c0:	e8 5d fd ff ff       	call   e22 <write>
         while(*s != 0){
-    10b5:	0f b6 07             	movzbl (%edi),%eax
-    10b8:	84 c0                	test   %al,%al
-    10ba:	75 dc                	jne    1098 <printf+0x148>
+    10c5:	0f b6 07             	movzbl (%edi),%eax
+    10c8:	84 c0                	test   %al,%al
+    10ca:	75 dc                	jne    10a8 <printf+0x148>
       state = 0;
-    10bc:	31 ff                	xor    %edi,%edi
-    10be:	e9 d8 fe ff ff       	jmp    f9b <printf+0x4b>
-    10c3:	90                   	nop
-    10c4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    10cc:	31 ff                	xor    %edi,%edi
+    10ce:	e9 d8 fe ff ff       	jmp    fab <printf+0x4b>
+    10d3:	90                   	nop
+    10d4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   write(fd, &c, 1);
-    10c8:	8d 45 e5             	lea    -0x1b(%ebp),%eax
+    10d8:	8d 45 e5             	lea    -0x1b(%ebp),%eax
       state = 0;
-    10cb:	31 ff                	xor    %edi,%edi
+    10db:	31 ff                	xor    %edi,%edi
   write(fd, &c, 1);
-    10cd:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
-    10d4:	00 
-    10d5:	89 44 24 04          	mov    %eax,0x4(%esp)
-    10d9:	89 34 24             	mov    %esi,(%esp)
-    10dc:	c6 45 e5 25          	movb   $0x25,-0x1b(%ebp)
-    10e0:	e8 3d fd ff ff       	call   e22 <write>
-    10e5:	e9 b1 fe ff ff       	jmp    f9b <printf+0x4b>
-    10ea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    10dd:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+    10e4:	00 
+    10e5:	89 44 24 04          	mov    %eax,0x4(%esp)
+    10e9:	89 34 24             	mov    %esi,(%esp)
+    10ec:	c6 45 e5 25          	movb   $0x25,-0x1b(%ebp)
+    10f0:	e8 2d fd ff ff       	call   e22 <write>
+    10f5:	e9 b1 fe ff ff       	jmp    fab <printf+0x4b>
+    10fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         printint(fd, *ap, 10, 1);
-    10f0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
-    10f3:	b9 0a 00 00 00       	mov    $0xa,%ecx
+    1100:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+    1103:	b9 0a 00 00 00       	mov    $0xa,%ecx
       state = 0;
-    10f8:	66 31 ff             	xor    %di,%di
+    1108:	66 31 ff             	xor    %di,%di
         printint(fd, *ap, 10, 1);
-    10fb:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    1102:	8b 10                	mov    (%eax),%edx
-    1104:	89 f0                	mov    %esi,%eax
-    1106:	e8 a5 fd ff ff       	call   eb0 <printint>
+    110b:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    1112:	8b 10                	mov    (%eax),%edx
+    1114:	89 f0                	mov    %esi,%eax
+    1116:	e8 a5 fd ff ff       	call   ec0 <printint>
         ap++;
-    110b:	83 45 d4 04          	addl   $0x4,-0x2c(%ebp)
-    110f:	e9 87 fe ff ff       	jmp    f9b <printf+0x4b>
+    111b:	83 45 d4 04          	addl   $0x4,-0x2c(%ebp)
+    111f:	e9 87 fe ff ff       	jmp    fab <printf+0x4b>
         putc(fd, *ap);
-    1114:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+    1124:	8b 45 d4             	mov    -0x2c(%ebp),%eax
       state = 0;
-    1117:	31 ff                	xor    %edi,%edi
+    1127:	31 ff                	xor    %edi,%edi
         putc(fd, *ap);
-    1119:	8b 00                	mov    (%eax),%eax
+    1129:	8b 00                	mov    (%eax),%eax
   write(fd, &c, 1);
-    111b:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
-    1122:	00 
-    1123:	89 34 24             	mov    %esi,(%esp)
+    112b:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+    1132:	00 
+    1133:	89 34 24             	mov    %esi,(%esp)
         putc(fd, *ap);
-    1126:	88 45 e4             	mov    %al,-0x1c(%ebp)
+    1136:	88 45 e4             	mov    %al,-0x1c(%ebp)
   write(fd, &c, 1);
-    1129:	8d 45 e4             	lea    -0x1c(%ebp),%eax
-    112c:	89 44 24 04          	mov    %eax,0x4(%esp)
-    1130:	e8 ed fc ff ff       	call   e22 <write>
+    1139:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+    113c:	89 44 24 04          	mov    %eax,0x4(%esp)
+    1140:	e8 dd fc ff ff       	call   e22 <write>
         ap++;
-    1135:	83 45 d4 04          	addl   $0x4,-0x2c(%ebp)
-    1139:	e9 5d fe ff ff       	jmp    f9b <printf+0x4b>
-    113e:	66 90                	xchg   %ax,%ax
+    1145:	83 45 d4 04          	addl   $0x4,-0x2c(%ebp)
+    1149:	e9 5d fe ff ff       	jmp    fab <printf+0x4b>
+    114e:	66 90                	xchg   %ax,%ax
 
-00001140 <free>:
+00001150 <free>:
 static Header base;
 static Header *freep;
 
 void
 free(void *ap)
 {
-    1140:	55                   	push   %ebp
+    1150:	55                   	push   %ebp
   Header *bp, *p;
 
   bp = (Header*)ap - 1;
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
-    1141:	a1 c4 19 00 00       	mov    0x19c4,%eax
+    1151:	a1 c4 19 00 00       	mov    0x19c4,%eax
 {
-    1146:	89 e5                	mov    %esp,%ebp
-    1148:	57                   	push   %edi
-    1149:	56                   	push   %esi
-    114a:	53                   	push   %ebx
-    114b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+    1156:	89 e5                	mov    %esp,%ebp
+    1158:	57                   	push   %edi
+    1159:	56                   	push   %esi
+    115a:	53                   	push   %ebx
+    115b:	8b 5d 08             	mov    0x8(%ebp),%ebx
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
-    114e:	8b 08                	mov    (%eax),%ecx
+    115e:	8b 08                	mov    (%eax),%ecx
   bp = (Header*)ap - 1;
-    1150:	8d 53 f8             	lea    -0x8(%ebx),%edx
+    1160:	8d 53 f8             	lea    -0x8(%ebx),%edx
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
-    1153:	39 d0                	cmp    %edx,%eax
-    1155:	72 11                	jb     1168 <free+0x28>
-    1157:	90                   	nop
+    1163:	39 d0                	cmp    %edx,%eax
+    1165:	72 11                	jb     1178 <free+0x28>
+    1167:	90                   	nop
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
-    1158:	39 c8                	cmp    %ecx,%eax
-    115a:	72 04                	jb     1160 <free+0x20>
-    115c:	39 ca                	cmp    %ecx,%edx
-    115e:	72 10                	jb     1170 <free+0x30>
-    1160:	89 c8                	mov    %ecx,%eax
+    1168:	39 c8                	cmp    %ecx,%eax
+    116a:	72 04                	jb     1170 <free+0x20>
+    116c:	39 ca                	cmp    %ecx,%edx
+    116e:	72 10                	jb     1180 <free+0x30>
+    1170:	89 c8                	mov    %ecx,%eax
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
-    1162:	39 d0                	cmp    %edx,%eax
+    1172:	39 d0                	cmp    %edx,%eax
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
-    1164:	8b 08                	mov    (%eax),%ecx
+    1174:	8b 08                	mov    (%eax),%ecx
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
-    1166:	73 f0                	jae    1158 <free+0x18>
-    1168:	39 ca                	cmp    %ecx,%edx
-    116a:	72 04                	jb     1170 <free+0x30>
+    1176:	73 f0                	jae    1168 <free+0x18>
+    1178:	39 ca                	cmp    %ecx,%edx
+    117a:	72 04                	jb     1180 <free+0x30>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
-    116c:	39 c8                	cmp    %ecx,%eax
-    116e:	72 f0                	jb     1160 <free+0x20>
+    117c:	39 c8                	cmp    %ecx,%eax
+    117e:	72 f0                	jb     1170 <free+0x20>
       break;
   if(bp + bp->s.size == p->s.ptr){
-    1170:	8b 73 fc             	mov    -0x4(%ebx),%esi
-    1173:	8d 3c f2             	lea    (%edx,%esi,8),%edi
-    1176:	39 cf                	cmp    %ecx,%edi
-    1178:	74 1e                	je     1198 <free+0x58>
+    1180:	8b 73 fc             	mov    -0x4(%ebx),%esi
+    1183:	8d 3c f2             	lea    (%edx,%esi,8),%edi
+    1186:	39 cf                	cmp    %ecx,%edi
+    1188:	74 1e                	je     11a8 <free+0x58>
     bp->s.size += p->s.ptr->s.size;
     bp->s.ptr = p->s.ptr->s.ptr;
   } else
     bp->s.ptr = p->s.ptr;
-    117a:	89 4b f8             	mov    %ecx,-0x8(%ebx)
+    118a:	89 4b f8             	mov    %ecx,-0x8(%ebx)
   if(p + p->s.size == bp){
-    117d:	8b 48 04             	mov    0x4(%eax),%ecx
-    1180:	8d 34 c8             	lea    (%eax,%ecx,8),%esi
-    1183:	39 f2                	cmp    %esi,%edx
-    1185:	74 28                	je     11af <free+0x6f>
+    118d:	8b 48 04             	mov    0x4(%eax),%ecx
+    1190:	8d 34 c8             	lea    (%eax,%ecx,8),%esi
+    1193:	39 f2                	cmp    %esi,%edx
+    1195:	74 28                	je     11bf <free+0x6f>
     p->s.size += bp->s.size;
     p->s.ptr = bp->s.ptr;
   } else
     p->s.ptr = bp;
-    1187:	89 10                	mov    %edx,(%eax)
+    1197:	89 10                	mov    %edx,(%eax)
   freep = p;
-    1189:	a3 c4 19 00 00       	mov    %eax,0x19c4
+    1199:	a3 c4 19 00 00       	mov    %eax,0x19c4
 }
-    118e:	5b                   	pop    %ebx
-    118f:	5e                   	pop    %esi
-    1190:	5f                   	pop    %edi
-    1191:	5d                   	pop    %ebp
-    1192:	c3                   	ret    
-    1193:	90                   	nop
-    1194:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    119e:	5b                   	pop    %ebx
+    119f:	5e                   	pop    %esi
+    11a0:	5f                   	pop    %edi
+    11a1:	5d                   	pop    %ebp
+    11a2:	c3                   	ret    
+    11a3:	90                   	nop
+    11a4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     bp->s.size += p->s.ptr->s.size;
-    1198:	03 71 04             	add    0x4(%ecx),%esi
-    119b:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    11a8:	03 71 04             	add    0x4(%ecx),%esi
+    11ab:	89 73 fc             	mov    %esi,-0x4(%ebx)
     bp->s.ptr = p->s.ptr->s.ptr;
-    119e:	8b 08                	mov    (%eax),%ecx
-    11a0:	8b 09                	mov    (%ecx),%ecx
-    11a2:	89 4b f8             	mov    %ecx,-0x8(%ebx)
+    11ae:	8b 08                	mov    (%eax),%ecx
+    11b0:	8b 09                	mov    (%ecx),%ecx
+    11b2:	89 4b f8             	mov    %ecx,-0x8(%ebx)
   if(p + p->s.size == bp){
-    11a5:	8b 48 04             	mov    0x4(%eax),%ecx
-    11a8:	8d 34 c8             	lea    (%eax,%ecx,8),%esi
-    11ab:	39 f2                	cmp    %esi,%edx
-    11ad:	75 d8                	jne    1187 <free+0x47>
+    11b5:	8b 48 04             	mov    0x4(%eax),%ecx
+    11b8:	8d 34 c8             	lea    (%eax,%ecx,8),%esi
+    11bb:	39 f2                	cmp    %esi,%edx
+    11bd:	75 d8                	jne    1197 <free+0x47>
     p->s.size += bp->s.size;
-    11af:	03 4b fc             	add    -0x4(%ebx),%ecx
+    11bf:	03 4b fc             	add    -0x4(%ebx),%ecx
   freep = p;
-    11b2:	a3 c4 19 00 00       	mov    %eax,0x19c4
+    11c2:	a3 c4 19 00 00       	mov    %eax,0x19c4
     p->s.size += bp->s.size;
-    11b7:	89 48 04             	mov    %ecx,0x4(%eax)
+    11c7:	89 48 04             	mov    %ecx,0x4(%eax)
     p->s.ptr = bp->s.ptr;
-    11ba:	8b 53 f8             	mov    -0x8(%ebx),%edx
-    11bd:	89 10                	mov    %edx,(%eax)
+    11ca:	8b 53 f8             	mov    -0x8(%ebx),%edx
+    11cd:	89 10                	mov    %edx,(%eax)
 }
-    11bf:	5b                   	pop    %ebx
-    11c0:	5e                   	pop    %esi
-    11c1:	5f                   	pop    %edi
-    11c2:	5d                   	pop    %ebp
-    11c3:	c3                   	ret    
-    11c4:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-    11ca:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
-
-000011d0 <malloc>:
+    11cf:	5b                   	pop    %ebx
+    11d0:	5e                   	pop    %esi
+    11d1:	5f                   	pop    %edi
+    11d2:	5d                   	pop    %ebp
+    11d3:	c3                   	ret    
+    11d4:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    11da:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+000011e0 <malloc>:
   return freep;
 }
 
 void*
 malloc(uint nbytes)
 {
-    11d0:	55                   	push   %ebp
-    11d1:	89 e5                	mov    %esp,%ebp
-    11d3:	57                   	push   %edi
-    11d4:	56                   	push   %esi
-    11d5:	53                   	push   %ebx
-    11d6:	83 ec 1c             	sub    $0x1c,%esp
+    11e0:	55                   	push   %ebp
+    11e1:	89 e5                	mov    %esp,%ebp
+    11e3:	57                   	push   %edi
+    11e4:	56                   	push   %esi
+    11e5:	53                   	push   %ebx
+    11e6:	83 ec 1c             	sub    $0x1c,%esp
   Header *p, *prevp;
   uint nunits;
 
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
-    11d9:	8b 45 08             	mov    0x8(%ebp),%eax
+    11e9:	8b 45 08             	mov    0x8(%ebp),%eax
   if((prevp = freep) == 0){
-    11dc:	8b 1d c4 19 00 00    	mov    0x19c4,%ebx
+    11ec:	8b 1d c4 19 00 00    	mov    0x19c4,%ebx
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
-    11e2:	8d 48 07             	lea    0x7(%eax),%ecx
-    11e5:	c1 e9 03             	shr    $0x3,%ecx
+    11f2:	8d 48 07             	lea    0x7(%eax),%ecx
+    11f5:	c1 e9 03             	shr    $0x3,%ecx
   if((prevp = freep) == 0){
-    11e8:	85 db                	test   %ebx,%ebx
+    11f8:	85 db                	test   %ebx,%ebx
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
-    11ea:	8d 71 01             	lea    0x1(%ecx),%esi
+    11fa:	8d 71 01             	lea    0x1(%ecx),%esi
   if((prevp = freep) == 0){
-    11ed:	0f 84 9b 00 00 00    	je     128e <malloc+0xbe>
-    11f3:	8b 13                	mov    (%ebx),%edx
-    11f5:	8b 7a 04             	mov    0x4(%edx),%edi
+    11fd:	0f 84 9b 00 00 00    	je     129e <malloc+0xbe>
+    1203:	8b 13                	mov    (%ebx),%edx
+    1205:	8b 7a 04             	mov    0x4(%edx),%edi
     base.s.ptr = freep = prevp = &base;
     base.s.size = 0;
   }
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
     if(p->s.size >= nunits){
-    11f8:	39 fe                	cmp    %edi,%esi
-    11fa:	76 64                	jbe    1260 <malloc+0x90>
-    11fc:	8d 04 f5 00 00 00 00 	lea    0x0(,%esi,8),%eax
+    1208:	39 fe                	cmp    %edi,%esi
+    120a:	76 64                	jbe    1270 <malloc+0x90>
+    120c:	8d 04 f5 00 00 00 00 	lea    0x0(,%esi,8),%eax
   if(nu < 4096)
-    1203:	bb 00 80 00 00       	mov    $0x8000,%ebx
-    1208:	89 45 e4             	mov    %eax,-0x1c(%ebp)
-    120b:	eb 0e                	jmp    121b <malloc+0x4b>
-    120d:	8d 76 00             	lea    0x0(%esi),%esi
+    1213:	bb 00 80 00 00       	mov    $0x8000,%ebx
+    1218:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+    121b:	eb 0e                	jmp    122b <malloc+0x4b>
+    121d:	8d 76 00             	lea    0x0(%esi),%esi
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
-    1210:	8b 02                	mov    (%edx),%eax
+    1220:	8b 02                	mov    (%edx),%eax
     if(p->s.size >= nunits){
-    1212:	8b 78 04             	mov    0x4(%eax),%edi
-    1215:	39 fe                	cmp    %edi,%esi
-    1217:	76 4f                	jbe    1268 <malloc+0x98>
-    1219:	89 c2                	mov    %eax,%edx
+    1222:	8b 78 04             	mov    0x4(%eax),%edi
+    1225:	39 fe                	cmp    %edi,%esi
+    1227:	76 4f                	jbe    1278 <malloc+0x98>
+    1229:	89 c2                	mov    %eax,%edx
         p->s.size = nunits;
       }
       freep = prevp;
       return (void*)(p + 1);
     }
     if(p == freep)
-    121b:	3b 15 c4 19 00 00    	cmp    0x19c4,%edx
-    1221:	75 ed                	jne    1210 <malloc+0x40>
+    122b:	3b 15 c4 19 00 00    	cmp    0x19c4,%edx
+    1231:	75 ed                	jne    1220 <malloc+0x40>
   if(nu < 4096)
-    1223:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-    1226:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
-    122c:	bf 00 10 00 00       	mov    $0x1000,%edi
-    1231:	0f 43 fe             	cmovae %esi,%edi
-    1234:	0f 42 c3             	cmovb  %ebx,%eax
+    1233:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+    1236:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+    123c:	bf 00 10 00 00       	mov    $0x1000,%edi
+    1241:	0f 43 fe             	cmovae %esi,%edi
+    1244:	0f 42 c3             	cmovb  %ebx,%eax
   p = sbrk(nu * sizeof(Header));
-    1237:	89 04 24             	mov    %eax,(%esp)
-    123a:	e8 4b fc ff ff       	call   e8a <sbrk>
+    1247:	89 04 24             	mov    %eax,(%esp)
+    124a:	e8 3b fc ff ff       	call   e8a <sbrk>
   if(p == (char*)-1)
-    123f:	83 f8 ff             	cmp    $0xffffffff,%eax
-    1242:	74 18                	je     125c <malloc+0x8c>
+    124f:	83 f8 ff             	cmp    $0xffffffff,%eax
+    1252:	74 18                	je     126c <malloc+0x8c>
   hp->s.size = nu;
-    1244:	89 78 04             	mov    %edi,0x4(%eax)
+    1254:	89 78 04             	mov    %edi,0x4(%eax)
   free((void*)(hp + 1));
-    1247:	83 c0 08             	add    $0x8,%eax
-    124a:	89 04 24             	mov    %eax,(%esp)
-    124d:	e8 ee fe ff ff       	call   1140 <free>
+    1257:	83 c0 08             	add    $0x8,%eax
+    125a:	89 04 24             	mov    %eax,(%esp)
+    125d:	e8 ee fe ff ff       	call   1150 <free>
   return freep;
-    1252:	8b 15 c4 19 00 00    	mov    0x19c4,%edx
+    1262:	8b 15 c4 19 00 00    	mov    0x19c4,%edx
       if((p = morecore(nunits)) == 0)
-    1258:	85 d2                	test   %edx,%edx
-    125a:	75 b4                	jne    1210 <malloc+0x40>
+    1268:	85 d2                	test   %edx,%edx
+    126a:	75 b4                	jne    1220 <malloc+0x40>
         return 0;
-    125c:	31 c0                	xor    %eax,%eax
-    125e:	eb 20                	jmp    1280 <malloc+0xb0>
+    126c:	31 c0                	xor    %eax,%eax
+    126e:	eb 20                	jmp    1290 <malloc+0xb0>
     if(p->s.size >= nunits){
-    1260:	89 d0                	mov    %edx,%eax
-    1262:	89 da                	mov    %ebx,%edx
-    1264:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    1270:	89 d0                	mov    %edx,%eax
+    1272:	89 da                	mov    %ebx,%edx
+    1274:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
       if(p->s.size == nunits)
-    1268:	39 fe                	cmp    %edi,%esi
-    126a:	74 1c                	je     1288 <malloc+0xb8>
+    1278:	39 fe                	cmp    %edi,%esi
+    127a:	74 1c                	je     1298 <malloc+0xb8>
         p->s.size -= nunits;
-    126c:	29 f7                	sub    %esi,%edi
-    126e:	89 78 04             	mov    %edi,0x4(%eax)
+    127c:	29 f7                	sub    %esi,%edi
+    127e:	89 78 04             	mov    %edi,0x4(%eax)
         p += p->s.size;
-    1271:	8d 04 f8             	lea    (%eax,%edi,8),%eax
+    1281:	8d 04 f8             	lea    (%eax,%edi,8),%eax
         p->s.size = nunits;
-    1274:	89 70 04             	mov    %esi,0x4(%eax)
+    1284:	89 70 04             	mov    %esi,0x4(%eax)
       freep = prevp;
-    1277:	89 15 c4 19 00 00    	mov    %edx,0x19c4
+    1287:	89 15 c4 19 00 00    	mov    %edx,0x19c4
       return (void*)(p + 1);
-    127d:	83 c0 08             	add    $0x8,%eax
+    128d:	83 c0 08             	add    $0x8,%eax
   }
 }
-    1280:	83 c4 1c             	add    $0x1c,%esp
-    1283:	5b                   	pop    %ebx
-    1284:	5e                   	pop    %esi
-    1285:	5f                   	pop    %edi
-    1286:	5d                   	pop    %ebp
-    1287:	c3                   	ret    
+    1290:	83 c4 1c             	add    $0x1c,%esp
+    1293:	5b                   	pop    %ebx
+    1294:	5e                   	pop    %esi
+    1295:	5f                   	pop    %edi
+    1296:	5d                   	pop    %ebp
+    1297:	c3                   	ret    
         prevp->s.ptr = p->s.ptr;
-    1288:	8b 08                	mov    (%eax),%ecx
-    128a:	89 0a                	mov    %ecx,(%edx)
-    128c:	eb e9                	jmp    1277 <malloc+0xa7>
+    1298:	8b 08                	mov    (%eax),%ecx
+    129a:	89 0a                	mov    %ecx,(%edx)
+    129c:	eb e9                	jmp    1287 <malloc+0xa7>
     base.s.ptr = freep = prevp = &base;
-    128e:	c7 05 c4 19 00 00 c8 	movl   $0x19c8,0x19c4
-    1295:	19 00 00 
+    129e:	c7 05 c4 19 00 00 c8 	movl   $0x19c8,0x19c4
+    12a5:	19 00 00 
     base.s.size = 0;
-    1298:	ba c8 19 00 00       	mov    $0x19c8,%edx
+    12a8:	ba c8 19 00 00       	mov    $0x19c8,%edx
     base.s.ptr = freep = prevp = &base;
-    129d:	c7 05 c8 19 00 00 c8 	movl   $0x19c8,0x19c8
-    12a4:	19 00 00 
+    12ad:	c7 05 c8 19 00 00 c8 	movl   $0x19c8,0x19c8
+    12b4:	19 00 00 
     base.s.size = 0;
-    12a7:	c7 05 cc 19 00 00 00 	movl   $0x0,0x19cc
-    12ae:	00 00 00 
-    12b1:	e9 46 ff ff ff       	jmp    11fc <malloc+0x2c>
+    12b7:	c7 05 cc 19 00 00 00 	movl   $0x0,0x19cc
+    12be:	00 00 00 
+    12c1:	e9 46 ff ff ff       	jmp    120c <malloc+0x2c>
diff --git a/sh.o b/sh.o
index 6a482b1..09ad165 100644
Binary files a/sh.o and b/sh.o differ
diff --git a/sh.sym b/sh.sym
index 3b19f33..0f9fa00 100644
--- a/sh.sym
+++ b/sh.sym
@@ -1,7 +1,7 @@
 00000000 .text
-000012b8 .rodata
-000013b8 .eh_frame
-00001938 .data
+000012c8 .rodata
+000013c8 .eh_frame
+00001948 .data
 00001960 .bss
 00000000 .comment
 00000000 .debug_aranges
@@ -12,17 +12,17 @@
 00000000 .debug_loc
 00000000 .debug_ranges
 00000000 sh.c
-00001960 buf.1396
+00001960 buf.1400
 00000000 ulib.c
 00000000 printf.c
-00000eb0 printint
-000013a7 digits.1358
+00000ec0 printint
+000013b7 digits.1362
 00000000 umalloc.c
 000019c4 freep
 000019c8 base
 00000be0 strcpy
 00000ea2 waitpid
-00000f50 printf
+00000f60 printf
 00000dd0 memmove
 00000e4a mknod
 00000380 execcmd
@@ -34,23 +34,25 @@
 00000650 peek
 000006b0 parseredirs
 00000510 gettoken
-000011d0 malloc
+000011e0 malloc
 00000e92 sleep
-00001940 whitespace
+00001950 whitespace
 000001a0 fork1
 00000ab0 nulterminate
 00000e12 pipe
+00000eaa setPrior
 00000110 getcmd
 00000e22 write
 00000e5a fstat
 00000e32 kill
 00000e72 chdir
+00000eb2 getPrior
 00000930 parseline
 000001c0 runcmd
 000009f0 parseblock
 00000e3a exec
 00000e0a wait
-00001938 symbols
+00001948 symbols
 00000e1a read
 00000790 parseexec
 00000e52 unlink
@@ -58,7 +60,7 @@
 00000dfa fork
 00000e8a sbrk
 00000e9a uptime
-00001946 __bss_start
+00001956 __bss_start
 00000c90 memset
 00000000 main
 00000c10 strcmp
@@ -66,7 +68,7 @@
 00000420 pipecmd
 000003c0 redircmd
 00000d50 stat
-00001946 _edata
+00001956 _edata
 000019d0 _end
 00000e62 link
 00000e02 exit
@@ -77,4 +79,4 @@
 00000e6a mkdir
 00000e2a close
 00000470 listcmd
-00001140 free
+00001150 free
diff --git a/sleeplock.o b/sleeplock.o
index 6d1abbe..a1765fd 100644
Binary files a/sleeplock.o and b/sleeplock.o differ
diff --git a/spinlock.o b/spinlock.o
index 21b6167..5cb417f 100644
Binary files a/spinlock.o and b/spinlock.o differ
diff --git a/stressfs.asm b/stressfs.asm
index d7938d0..b8e6b84 100644
--- a/stressfs.asm
+++ b/stressfs.asm
@@ -31,7 +31,7 @@ main(int argc, char *argv[])
    d:	83 e4 f0             	and    $0xfffffff0,%esp
   10:	81 ec 20 02 00 00    	sub    $0x220,%esp
   printf(1, "stressfs starting\n");
-  16:	c7 44 24 04 16 08 00 	movl   $0x816,0x4(%esp)
+  16:	c7 44 24 04 26 08 00 	movl   $0x826,0x4(%esp)
   1d:	00 
   memset(data, 'a', sizeof(data));
   1e:	8d 74 24 20          	lea    0x20(%esp),%esi
@@ -44,7 +44,7 @@ main(int argc, char *argv[])
   36:	c7 44 24 1a 73 73 66 	movl   $0x73667373,0x1a(%esp)
   3d:	73 
   printf(1, "stressfs starting\n");
-  3e:	e8 6d 04 00 00       	call   4b0 <printf>
+  3e:	e8 7d 04 00 00       	call   4c0 <printf>
   memset(data, 'a', sizeof(data));
   43:	c7 44 24 08 00 02 00 	movl   $0x200,0x8(%esp)
   4a:	00 
@@ -70,10 +70,10 @@ main(int argc, char *argv[])
   fd = open(path, O_CREATE | O_RDWR);
   79:	bb 14 00 00 00       	mov    $0x14,%ebx
   printf(1, "write %d\n", i);
-  7e:	c7 44 24 04 29 08 00 	movl   $0x829,0x4(%esp)
+  7e:	c7 44 24 04 39 08 00 	movl   $0x839,0x4(%esp)
   85:	00 
   86:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-  8d:	e8 1e 04 00 00       	call   4b0 <printf>
+  8d:	e8 2e 04 00 00       	call   4c0 <printf>
   path[8] += i;
   92:	89 f8                	mov    %edi,%eax
   94:	00 44 24 1e          	add    %al,0x1e(%esp)
@@ -106,10 +106,10 @@ main(int argc, char *argv[])
   close(fd);
   d1:	e8 b4 02 00 00       	call   38a <close>
   printf(1, "read\n");
-  d6:	c7 44 24 04 33 08 00 	movl   $0x833,0x4(%esp)
+  d6:	c7 44 24 04 43 08 00 	movl   $0x843,0x4(%esp)
   dd:	00 
   de:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-  e5:	e8 c6 03 00 00       	call   4b0 <printf>
+  e5:	e8 d6 03 00 00       	call   4c0 <printf>
   fd = open(path, O_RDONLY);
   ea:	8d 44 24 16          	lea    0x16(%esp),%eax
   ee:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
@@ -655,580 +655,592 @@ SYSCALL(uptime)
  401:	c3                   	ret    
 
 00000402 <waitpid>:
+SYSCALL(waitpid)
  402:	b8 16 00 00 00       	mov    $0x16,%eax
  407:	cd 40                	int    $0x40
  409:	c3                   	ret    
- 40a:	66 90                	xchg   %ax,%ax
- 40c:	66 90                	xchg   %ax,%ax
- 40e:	66 90                	xchg   %ax,%ax
 
-00000410 <printint>:
+0000040a <setPrior>:
+SYSCALL(setPrior)
+ 40a:	b8 17 00 00 00       	mov    $0x17,%eax
+ 40f:	cd 40                	int    $0x40
+ 411:	c3                   	ret    
+
+00000412 <getPrior>:
+ 412:	b8 18 00 00 00       	mov    $0x18,%eax
+ 417:	cd 40                	int    $0x40
+ 419:	c3                   	ret    
+ 41a:	66 90                	xchg   %ax,%ax
+ 41c:	66 90                	xchg   %ax,%ax
+ 41e:	66 90                	xchg   %ax,%ax
+
+00000420 <printint>:
   write(fd, &c, 1);
 }
 
 static void
 printint(int fd, int xx, int base, int sgn)
 {
- 410:	55                   	push   %ebp
- 411:	89 e5                	mov    %esp,%ebp
- 413:	57                   	push   %edi
- 414:	56                   	push   %esi
- 415:	89 c6                	mov    %eax,%esi
- 417:	53                   	push   %ebx
- 418:	83 ec 4c             	sub    $0x4c,%esp
+ 420:	55                   	push   %ebp
+ 421:	89 e5                	mov    %esp,%ebp
+ 423:	57                   	push   %edi
+ 424:	56                   	push   %esi
+ 425:	89 c6                	mov    %eax,%esi
+ 427:	53                   	push   %ebx
+ 428:	83 ec 4c             	sub    $0x4c,%esp
   char buf[16];
   int i, neg;
   uint x;
 
   neg = 0;
   if(sgn && xx < 0){
- 41b:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 41e:	85 db                	test   %ebx,%ebx
- 420:	74 09                	je     42b <printint+0x1b>
- 422:	89 d0                	mov    %edx,%eax
- 424:	c1 e8 1f             	shr    $0x1f,%eax
- 427:	84 c0                	test   %al,%al
- 429:	75 75                	jne    4a0 <printint+0x90>
+ 42b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 42e:	85 db                	test   %ebx,%ebx
+ 430:	74 09                	je     43b <printint+0x1b>
+ 432:	89 d0                	mov    %edx,%eax
+ 434:	c1 e8 1f             	shr    $0x1f,%eax
+ 437:	84 c0                	test   %al,%al
+ 439:	75 75                	jne    4b0 <printint+0x90>
     neg = 1;
     x = -xx;
   } else {
     x = xx;
- 42b:	89 d0                	mov    %edx,%eax
+ 43b:	89 d0                	mov    %edx,%eax
   neg = 0;
- 42d:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
- 434:	89 75 c0             	mov    %esi,-0x40(%ebp)
+ 43d:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
+ 444:	89 75 c0             	mov    %esi,-0x40(%ebp)
   }
 
   i = 0;
- 437:	31 ff                	xor    %edi,%edi
- 439:	89 ce                	mov    %ecx,%esi
- 43b:	8d 5d d7             	lea    -0x29(%ebp),%ebx
- 43e:	eb 02                	jmp    442 <printint+0x32>
+ 447:	31 ff                	xor    %edi,%edi
+ 449:	89 ce                	mov    %ecx,%esi
+ 44b:	8d 5d d7             	lea    -0x29(%ebp),%ebx
+ 44e:	eb 02                	jmp    452 <printint+0x32>
   do{
     buf[i++] = digits[x % base];
- 440:	89 cf                	mov    %ecx,%edi
- 442:	31 d2                	xor    %edx,%edx
- 444:	f7 f6                	div    %esi
- 446:	8d 4f 01             	lea    0x1(%edi),%ecx
- 449:	0f b6 92 40 08 00 00 	movzbl 0x840(%edx),%edx
+ 450:	89 cf                	mov    %ecx,%edi
+ 452:	31 d2                	xor    %edx,%edx
+ 454:	f7 f6                	div    %esi
+ 456:	8d 4f 01             	lea    0x1(%edi),%ecx
+ 459:	0f b6 92 50 08 00 00 	movzbl 0x850(%edx),%edx
   }while((x /= base) != 0);
- 450:	85 c0                	test   %eax,%eax
+ 460:	85 c0                	test   %eax,%eax
     buf[i++] = digits[x % base];
- 452:	88 14 0b             	mov    %dl,(%ebx,%ecx,1)
+ 462:	88 14 0b             	mov    %dl,(%ebx,%ecx,1)
   }while((x /= base) != 0);
- 455:	75 e9                	jne    440 <printint+0x30>
+ 465:	75 e9                	jne    450 <printint+0x30>
   if(neg)
- 457:	8b 55 c4             	mov    -0x3c(%ebp),%edx
+ 467:	8b 55 c4             	mov    -0x3c(%ebp),%edx
     buf[i++] = digits[x % base];
- 45a:	89 c8                	mov    %ecx,%eax
- 45c:	8b 75 c0             	mov    -0x40(%ebp),%esi
+ 46a:	89 c8                	mov    %ecx,%eax
+ 46c:	8b 75 c0             	mov    -0x40(%ebp),%esi
   if(neg)
- 45f:	85 d2                	test   %edx,%edx
- 461:	74 08                	je     46b <printint+0x5b>
+ 46f:	85 d2                	test   %edx,%edx
+ 471:	74 08                	je     47b <printint+0x5b>
     buf[i++] = '-';
- 463:	8d 4f 02             	lea    0x2(%edi),%ecx
- 466:	c6 44 05 d8 2d       	movb   $0x2d,-0x28(%ebp,%eax,1)
+ 473:	8d 4f 02             	lea    0x2(%edi),%ecx
+ 476:	c6 44 05 d8 2d       	movb   $0x2d,-0x28(%ebp,%eax,1)
 
   while(--i >= 0)
- 46b:	8d 79 ff             	lea    -0x1(%ecx),%edi
- 46e:	66 90                	xchg   %ax,%ax
- 470:	0f b6 44 3d d8       	movzbl -0x28(%ebp,%edi,1),%eax
- 475:	83 ef 01             	sub    $0x1,%edi
+ 47b:	8d 79 ff             	lea    -0x1(%ecx),%edi
+ 47e:	66 90                	xchg   %ax,%ax
+ 480:	0f b6 44 3d d8       	movzbl -0x28(%ebp,%edi,1),%eax
+ 485:	83 ef 01             	sub    $0x1,%edi
   write(fd, &c, 1);
- 478:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
- 47f:	00 
- 480:	89 5c 24 04          	mov    %ebx,0x4(%esp)
- 484:	89 34 24             	mov    %esi,(%esp)
- 487:	88 45 d7             	mov    %al,-0x29(%ebp)
- 48a:	e8 f3 fe ff ff       	call   382 <write>
+ 488:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+ 48f:	00 
+ 490:	89 5c 24 04          	mov    %ebx,0x4(%esp)
+ 494:	89 34 24             	mov    %esi,(%esp)
+ 497:	88 45 d7             	mov    %al,-0x29(%ebp)
+ 49a:	e8 e3 fe ff ff       	call   382 <write>
   while(--i >= 0)
- 48f:	83 ff ff             	cmp    $0xffffffff,%edi
- 492:	75 dc                	jne    470 <printint+0x60>
+ 49f:	83 ff ff             	cmp    $0xffffffff,%edi
+ 4a2:	75 dc                	jne    480 <printint+0x60>
     putc(fd, buf[i]);
 }
- 494:	83 c4 4c             	add    $0x4c,%esp
- 497:	5b                   	pop    %ebx
- 498:	5e                   	pop    %esi
- 499:	5f                   	pop    %edi
- 49a:	5d                   	pop    %ebp
- 49b:	c3                   	ret    
- 49c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 4a4:	83 c4 4c             	add    $0x4c,%esp
+ 4a7:	5b                   	pop    %ebx
+ 4a8:	5e                   	pop    %esi
+ 4a9:	5f                   	pop    %edi
+ 4aa:	5d                   	pop    %ebp
+ 4ab:	c3                   	ret    
+ 4ac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     x = -xx;
- 4a0:	89 d0                	mov    %edx,%eax
- 4a2:	f7 d8                	neg    %eax
+ 4b0:	89 d0                	mov    %edx,%eax
+ 4b2:	f7 d8                	neg    %eax
     neg = 1;
- 4a4:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
- 4ab:	eb 87                	jmp    434 <printint+0x24>
- 4ad:	8d 76 00             	lea    0x0(%esi),%esi
+ 4b4:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
+ 4bb:	eb 87                	jmp    444 <printint+0x24>
+ 4bd:	8d 76 00             	lea    0x0(%esi),%esi
 
-000004b0 <printf>:
+000004c0 <printf>:
 
 // Print to the given fd. Only understands %d, %x, %p, %s.
 void
 printf(int fd, const char *fmt, ...)
 {
- 4b0:	55                   	push   %ebp
- 4b1:	89 e5                	mov    %esp,%ebp
- 4b3:	57                   	push   %edi
+ 4c0:	55                   	push   %ebp
+ 4c1:	89 e5                	mov    %esp,%ebp
+ 4c3:	57                   	push   %edi
   char *s;
   int c, i, state;
   uint *ap;
 
   state = 0;
- 4b4:	31 ff                	xor    %edi,%edi
+ 4c4:	31 ff                	xor    %edi,%edi
 {
- 4b6:	56                   	push   %esi
- 4b7:	53                   	push   %ebx
- 4b8:	83 ec 3c             	sub    $0x3c,%esp
+ 4c6:	56                   	push   %esi
+ 4c7:	53                   	push   %ebx
+ 4c8:	83 ec 3c             	sub    $0x3c,%esp
   ap = (uint*)(void*)&fmt + 1;
   for(i = 0; fmt[i]; i++){
- 4bb:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+ 4cb:	8b 5d 0c             	mov    0xc(%ebp),%ebx
   ap = (uint*)(void*)&fmt + 1;
- 4be:	8d 45 10             	lea    0x10(%ebp),%eax
+ 4ce:	8d 45 10             	lea    0x10(%ebp),%eax
 {
- 4c1:	8b 75 08             	mov    0x8(%ebp),%esi
+ 4d1:	8b 75 08             	mov    0x8(%ebp),%esi
   ap = (uint*)(void*)&fmt + 1;
- 4c4:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ 4d4:	89 45 d4             	mov    %eax,-0x2c(%ebp)
   for(i = 0; fmt[i]; i++){
- 4c7:	0f b6 13             	movzbl (%ebx),%edx
- 4ca:	83 c3 01             	add    $0x1,%ebx
- 4cd:	84 d2                	test   %dl,%dl
- 4cf:	75 39                	jne    50a <printf+0x5a>
- 4d1:	e9 c2 00 00 00       	jmp    598 <printf+0xe8>
- 4d6:	66 90                	xchg   %ax,%ax
+ 4d7:	0f b6 13             	movzbl (%ebx),%edx
+ 4da:	83 c3 01             	add    $0x1,%ebx
+ 4dd:	84 d2                	test   %dl,%dl
+ 4df:	75 39                	jne    51a <printf+0x5a>
+ 4e1:	e9 c2 00 00 00       	jmp    5a8 <printf+0xe8>
+ 4e6:	66 90                	xchg   %ax,%ax
     c = fmt[i] & 0xff;
     if(state == 0){
       if(c == '%'){
- 4d8:	83 fa 25             	cmp    $0x25,%edx
- 4db:	0f 84 bf 00 00 00    	je     5a0 <printf+0xf0>
+ 4e8:	83 fa 25             	cmp    $0x25,%edx
+ 4eb:	0f 84 bf 00 00 00    	je     5b0 <printf+0xf0>
   write(fd, &c, 1);
- 4e1:	8d 45 e2             	lea    -0x1e(%ebp),%eax
- 4e4:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
- 4eb:	00 
- 4ec:	89 44 24 04          	mov    %eax,0x4(%esp)
- 4f0:	89 34 24             	mov    %esi,(%esp)
+ 4f1:	8d 45 e2             	lea    -0x1e(%ebp),%eax
+ 4f4:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+ 4fb:	00 
+ 4fc:	89 44 24 04          	mov    %eax,0x4(%esp)
+ 500:	89 34 24             	mov    %esi,(%esp)
         state = '%';
       } else {
         putc(fd, c);
- 4f3:	88 55 e2             	mov    %dl,-0x1e(%ebp)
+ 503:	88 55 e2             	mov    %dl,-0x1e(%ebp)
   write(fd, &c, 1);
- 4f6:	e8 87 fe ff ff       	call   382 <write>
- 4fb:	83 c3 01             	add    $0x1,%ebx
+ 506:	e8 77 fe ff ff       	call   382 <write>
+ 50b:	83 c3 01             	add    $0x1,%ebx
   for(i = 0; fmt[i]; i++){
- 4fe:	0f b6 53 ff          	movzbl -0x1(%ebx),%edx
- 502:	84 d2                	test   %dl,%dl
- 504:	0f 84 8e 00 00 00    	je     598 <printf+0xe8>
+ 50e:	0f b6 53 ff          	movzbl -0x1(%ebx),%edx
+ 512:	84 d2                	test   %dl,%dl
+ 514:	0f 84 8e 00 00 00    	je     5a8 <printf+0xe8>
     if(state == 0){
- 50a:	85 ff                	test   %edi,%edi
+ 51a:	85 ff                	test   %edi,%edi
     c = fmt[i] & 0xff;
- 50c:	0f be c2             	movsbl %dl,%eax
+ 51c:	0f be c2             	movsbl %dl,%eax
     if(state == 0){
- 50f:	74 c7                	je     4d8 <printf+0x28>
+ 51f:	74 c7                	je     4e8 <printf+0x28>
       }
     } else if(state == '%'){
- 511:	83 ff 25             	cmp    $0x25,%edi
- 514:	75 e5                	jne    4fb <printf+0x4b>
+ 521:	83 ff 25             	cmp    $0x25,%edi
+ 524:	75 e5                	jne    50b <printf+0x4b>
       if(c == 'd'){
- 516:	83 fa 64             	cmp    $0x64,%edx
- 519:	0f 84 31 01 00 00    	je     650 <printf+0x1a0>
+ 526:	83 fa 64             	cmp    $0x64,%edx
+ 529:	0f 84 31 01 00 00    	je     660 <printf+0x1a0>
         printint(fd, *ap, 10, 1);
         ap++;
       } else if(c == 'x' || c == 'p'){
- 51f:	25 f7 00 00 00       	and    $0xf7,%eax
- 524:	83 f8 70             	cmp    $0x70,%eax
- 527:	0f 84 83 00 00 00    	je     5b0 <printf+0x100>
+ 52f:	25 f7 00 00 00       	and    $0xf7,%eax
+ 534:	83 f8 70             	cmp    $0x70,%eax
+ 537:	0f 84 83 00 00 00    	je     5c0 <printf+0x100>
         printint(fd, *ap, 16, 0);
         ap++;
       } else if(c == 's'){
- 52d:	83 fa 73             	cmp    $0x73,%edx
- 530:	0f 84 a2 00 00 00    	je     5d8 <printf+0x128>
+ 53d:	83 fa 73             	cmp    $0x73,%edx
+ 540:	0f 84 a2 00 00 00    	je     5e8 <printf+0x128>
           s = "(null)";
         while(*s != 0){
           putc(fd, *s);
           s++;
         }
       } else if(c == 'c'){
- 536:	83 fa 63             	cmp    $0x63,%edx
- 539:	0f 84 35 01 00 00    	je     674 <printf+0x1c4>
+ 546:	83 fa 63             	cmp    $0x63,%edx
+ 549:	0f 84 35 01 00 00    	je     684 <printf+0x1c4>
         putc(fd, *ap);
         ap++;
       } else if(c == '%'){
- 53f:	83 fa 25             	cmp    $0x25,%edx
- 542:	0f 84 e0 00 00 00    	je     628 <printf+0x178>
+ 54f:	83 fa 25             	cmp    $0x25,%edx
+ 552:	0f 84 e0 00 00 00    	je     638 <printf+0x178>
   write(fd, &c, 1);
- 548:	8d 45 e6             	lea    -0x1a(%ebp),%eax
- 54b:	83 c3 01             	add    $0x1,%ebx
- 54e:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
- 555:	00 
+ 558:	8d 45 e6             	lea    -0x1a(%ebp),%eax
+ 55b:	83 c3 01             	add    $0x1,%ebx
+ 55e:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+ 565:	00 
       } else {
         // Unknown % sequence.  Print it to draw attention.
         putc(fd, '%');
         putc(fd, c);
       }
       state = 0;
- 556:	31 ff                	xor    %edi,%edi
+ 566:	31 ff                	xor    %edi,%edi
   write(fd, &c, 1);
- 558:	89 44 24 04          	mov    %eax,0x4(%esp)
- 55c:	89 34 24             	mov    %esi,(%esp)
- 55f:	89 55 d0             	mov    %edx,-0x30(%ebp)
- 562:	c6 45 e6 25          	movb   $0x25,-0x1a(%ebp)
- 566:	e8 17 fe ff ff       	call   382 <write>
+ 568:	89 44 24 04          	mov    %eax,0x4(%esp)
+ 56c:	89 34 24             	mov    %esi,(%esp)
+ 56f:	89 55 d0             	mov    %edx,-0x30(%ebp)
+ 572:	c6 45 e6 25          	movb   $0x25,-0x1a(%ebp)
+ 576:	e8 07 fe ff ff       	call   382 <write>
         putc(fd, c);
- 56b:	8b 55 d0             	mov    -0x30(%ebp),%edx
+ 57b:	8b 55 d0             	mov    -0x30(%ebp),%edx
   write(fd, &c, 1);
- 56e:	8d 45 e7             	lea    -0x19(%ebp),%eax
- 571:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
- 578:	00 
- 579:	89 44 24 04          	mov    %eax,0x4(%esp)
- 57d:	89 34 24             	mov    %esi,(%esp)
+ 57e:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 581:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+ 588:	00 
+ 589:	89 44 24 04          	mov    %eax,0x4(%esp)
+ 58d:	89 34 24             	mov    %esi,(%esp)
         putc(fd, c);
- 580:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 590:	88 55 e7             	mov    %dl,-0x19(%ebp)
   write(fd, &c, 1);
- 583:	e8 fa fd ff ff       	call   382 <write>
+ 593:	e8 ea fd ff ff       	call   382 <write>
   for(i = 0; fmt[i]; i++){
- 588:	0f b6 53 ff          	movzbl -0x1(%ebx),%edx
- 58c:	84 d2                	test   %dl,%dl
- 58e:	0f 85 76 ff ff ff    	jne    50a <printf+0x5a>
- 594:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 598:	0f b6 53 ff          	movzbl -0x1(%ebx),%edx
+ 59c:	84 d2                	test   %dl,%dl
+ 59e:	0f 85 76 ff ff ff    	jne    51a <printf+0x5a>
+ 5a4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     }
   }
 }
- 598:	83 c4 3c             	add    $0x3c,%esp
- 59b:	5b                   	pop    %ebx
- 59c:	5e                   	pop    %esi
- 59d:	5f                   	pop    %edi
- 59e:	5d                   	pop    %ebp
- 59f:	c3                   	ret    
+ 5a8:	83 c4 3c             	add    $0x3c,%esp
+ 5ab:	5b                   	pop    %ebx
+ 5ac:	5e                   	pop    %esi
+ 5ad:	5f                   	pop    %edi
+ 5ae:	5d                   	pop    %ebp
+ 5af:	c3                   	ret    
         state = '%';
- 5a0:	bf 25 00 00 00       	mov    $0x25,%edi
- 5a5:	e9 51 ff ff ff       	jmp    4fb <printf+0x4b>
- 5aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 5b0:	bf 25 00 00 00       	mov    $0x25,%edi
+ 5b5:	e9 51 ff ff ff       	jmp    50b <printf+0x4b>
+ 5ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         printint(fd, *ap, 16, 0);
- 5b0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
- 5b3:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 5c0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+ 5c3:	b9 10 00 00 00       	mov    $0x10,%ecx
       state = 0;
- 5b8:	31 ff                	xor    %edi,%edi
+ 5c8:	31 ff                	xor    %edi,%edi
         printint(fd, *ap, 16, 0);
- 5ba:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
- 5c1:	8b 10                	mov    (%eax),%edx
- 5c3:	89 f0                	mov    %esi,%eax
- 5c5:	e8 46 fe ff ff       	call   410 <printint>
+ 5ca:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+ 5d1:	8b 10                	mov    (%eax),%edx
+ 5d3:	89 f0                	mov    %esi,%eax
+ 5d5:	e8 46 fe ff ff       	call   420 <printint>
         ap++;
- 5ca:	83 45 d4 04          	addl   $0x4,-0x2c(%ebp)
- 5ce:	e9 28 ff ff ff       	jmp    4fb <printf+0x4b>
- 5d3:	90                   	nop
- 5d4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 5da:	83 45 d4 04          	addl   $0x4,-0x2c(%ebp)
+ 5de:	e9 28 ff ff ff       	jmp    50b <printf+0x4b>
+ 5e3:	90                   	nop
+ 5e4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
         s = (char*)*ap;
- 5d8:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+ 5e8:	8b 45 d4             	mov    -0x2c(%ebp),%eax
         ap++;
- 5db:	83 45 d4 04          	addl   $0x4,-0x2c(%ebp)
+ 5eb:	83 45 d4 04          	addl   $0x4,-0x2c(%ebp)
         s = (char*)*ap;
- 5df:	8b 38                	mov    (%eax),%edi
+ 5ef:	8b 38                	mov    (%eax),%edi
           s = "(null)";
- 5e1:	b8 39 08 00 00       	mov    $0x839,%eax
- 5e6:	85 ff                	test   %edi,%edi
- 5e8:	0f 44 f8             	cmove  %eax,%edi
+ 5f1:	b8 49 08 00 00       	mov    $0x849,%eax
+ 5f6:	85 ff                	test   %edi,%edi
+ 5f8:	0f 44 f8             	cmove  %eax,%edi
         while(*s != 0){
- 5eb:	0f b6 07             	movzbl (%edi),%eax
- 5ee:	84 c0                	test   %al,%al
- 5f0:	74 2a                	je     61c <printf+0x16c>
- 5f2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
- 5f8:	88 45 e3             	mov    %al,-0x1d(%ebp)
+ 5fb:	0f b6 07             	movzbl (%edi),%eax
+ 5fe:	84 c0                	test   %al,%al
+ 600:	74 2a                	je     62c <printf+0x16c>
+ 602:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 608:	88 45 e3             	mov    %al,-0x1d(%ebp)
   write(fd, &c, 1);
- 5fb:	8d 45 e3             	lea    -0x1d(%ebp),%eax
+ 60b:	8d 45 e3             	lea    -0x1d(%ebp),%eax
           s++;
- 5fe:	83 c7 01             	add    $0x1,%edi
+ 60e:	83 c7 01             	add    $0x1,%edi
   write(fd, &c, 1);
- 601:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
- 608:	00 
- 609:	89 44 24 04          	mov    %eax,0x4(%esp)
- 60d:	89 34 24             	mov    %esi,(%esp)
- 610:	e8 6d fd ff ff       	call   382 <write>
+ 611:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+ 618:	00 
+ 619:	89 44 24 04          	mov    %eax,0x4(%esp)
+ 61d:	89 34 24             	mov    %esi,(%esp)
+ 620:	e8 5d fd ff ff       	call   382 <write>
         while(*s != 0){
- 615:	0f b6 07             	movzbl (%edi),%eax
- 618:	84 c0                	test   %al,%al
- 61a:	75 dc                	jne    5f8 <printf+0x148>
+ 625:	0f b6 07             	movzbl (%edi),%eax
+ 628:	84 c0                	test   %al,%al
+ 62a:	75 dc                	jne    608 <printf+0x148>
       state = 0;
- 61c:	31 ff                	xor    %edi,%edi
- 61e:	e9 d8 fe ff ff       	jmp    4fb <printf+0x4b>
- 623:	90                   	nop
- 624:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 62c:	31 ff                	xor    %edi,%edi
+ 62e:	e9 d8 fe ff ff       	jmp    50b <printf+0x4b>
+ 633:	90                   	nop
+ 634:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   write(fd, &c, 1);
- 628:	8d 45 e5             	lea    -0x1b(%ebp),%eax
+ 638:	8d 45 e5             	lea    -0x1b(%ebp),%eax
       state = 0;
- 62b:	31 ff                	xor    %edi,%edi
+ 63b:	31 ff                	xor    %edi,%edi
   write(fd, &c, 1);
- 62d:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
- 634:	00 
- 635:	89 44 24 04          	mov    %eax,0x4(%esp)
- 639:	89 34 24             	mov    %esi,(%esp)
- 63c:	c6 45 e5 25          	movb   $0x25,-0x1b(%ebp)
- 640:	e8 3d fd ff ff       	call   382 <write>
- 645:	e9 b1 fe ff ff       	jmp    4fb <printf+0x4b>
- 64a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 63d:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+ 644:	00 
+ 645:	89 44 24 04          	mov    %eax,0x4(%esp)
+ 649:	89 34 24             	mov    %esi,(%esp)
+ 64c:	c6 45 e5 25          	movb   $0x25,-0x1b(%ebp)
+ 650:	e8 2d fd ff ff       	call   382 <write>
+ 655:	e9 b1 fe ff ff       	jmp    50b <printf+0x4b>
+ 65a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         printint(fd, *ap, 10, 1);
- 650:	8b 45 d4             	mov    -0x2c(%ebp),%eax
- 653:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 660:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+ 663:	b9 0a 00 00 00       	mov    $0xa,%ecx
       state = 0;
- 658:	66 31 ff             	xor    %di,%di
+ 668:	66 31 ff             	xor    %di,%di
         printint(fd, *ap, 10, 1);
- 65b:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
- 662:	8b 10                	mov    (%eax),%edx
- 664:	89 f0                	mov    %esi,%eax
- 666:	e8 a5 fd ff ff       	call   410 <printint>
+ 66b:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+ 672:	8b 10                	mov    (%eax),%edx
+ 674:	89 f0                	mov    %esi,%eax
+ 676:	e8 a5 fd ff ff       	call   420 <printint>
         ap++;
- 66b:	83 45 d4 04          	addl   $0x4,-0x2c(%ebp)
- 66f:	e9 87 fe ff ff       	jmp    4fb <printf+0x4b>
+ 67b:	83 45 d4 04          	addl   $0x4,-0x2c(%ebp)
+ 67f:	e9 87 fe ff ff       	jmp    50b <printf+0x4b>
         putc(fd, *ap);
- 674:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+ 684:	8b 45 d4             	mov    -0x2c(%ebp),%eax
       state = 0;
- 677:	31 ff                	xor    %edi,%edi
+ 687:	31 ff                	xor    %edi,%edi
         putc(fd, *ap);
- 679:	8b 00                	mov    (%eax),%eax
+ 689:	8b 00                	mov    (%eax),%eax
   write(fd, &c, 1);
- 67b:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
- 682:	00 
- 683:	89 34 24             	mov    %esi,(%esp)
+ 68b:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+ 692:	00 
+ 693:	89 34 24             	mov    %esi,(%esp)
         putc(fd, *ap);
- 686:	88 45 e4             	mov    %al,-0x1c(%ebp)
+ 696:	88 45 e4             	mov    %al,-0x1c(%ebp)
   write(fd, &c, 1);
- 689:	8d 45 e4             	lea    -0x1c(%ebp),%eax
- 68c:	89 44 24 04          	mov    %eax,0x4(%esp)
- 690:	e8 ed fc ff ff       	call   382 <write>
+ 699:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+ 69c:	89 44 24 04          	mov    %eax,0x4(%esp)
+ 6a0:	e8 dd fc ff ff       	call   382 <write>
         ap++;
- 695:	83 45 d4 04          	addl   $0x4,-0x2c(%ebp)
- 699:	e9 5d fe ff ff       	jmp    4fb <printf+0x4b>
- 69e:	66 90                	xchg   %ax,%ax
+ 6a5:	83 45 d4 04          	addl   $0x4,-0x2c(%ebp)
+ 6a9:	e9 5d fe ff ff       	jmp    50b <printf+0x4b>
+ 6ae:	66 90                	xchg   %ax,%ax
 
-000006a0 <free>:
+000006b0 <free>:
 static Header base;
 static Header *freep;
 
 void
 free(void *ap)
 {
- 6a0:	55                   	push   %ebp
+ 6b0:	55                   	push   %ebp
   Header *bp, *p;
 
   bp = (Header*)ap - 1;
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 6a1:	a1 bc 0a 00 00       	mov    0xabc,%eax
+ 6b1:	a1 cc 0a 00 00       	mov    0xacc,%eax
 {
- 6a6:	89 e5                	mov    %esp,%ebp
- 6a8:	57                   	push   %edi
- 6a9:	56                   	push   %esi
- 6aa:	53                   	push   %ebx
- 6ab:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 6b6:	89 e5                	mov    %esp,%ebp
+ 6b8:	57                   	push   %edi
+ 6b9:	56                   	push   %esi
+ 6ba:	53                   	push   %ebx
+ 6bb:	8b 5d 08             	mov    0x8(%ebp),%ebx
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 6ae:	8b 08                	mov    (%eax),%ecx
+ 6be:	8b 08                	mov    (%eax),%ecx
   bp = (Header*)ap - 1;
- 6b0:	8d 53 f8             	lea    -0x8(%ebx),%edx
+ 6c0:	8d 53 f8             	lea    -0x8(%ebx),%edx
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 6b3:	39 d0                	cmp    %edx,%eax
- 6b5:	72 11                	jb     6c8 <free+0x28>
- 6b7:	90                   	nop
+ 6c3:	39 d0                	cmp    %edx,%eax
+ 6c5:	72 11                	jb     6d8 <free+0x28>
+ 6c7:	90                   	nop
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 6b8:	39 c8                	cmp    %ecx,%eax
- 6ba:	72 04                	jb     6c0 <free+0x20>
- 6bc:	39 ca                	cmp    %ecx,%edx
- 6be:	72 10                	jb     6d0 <free+0x30>
- 6c0:	89 c8                	mov    %ecx,%eax
+ 6c8:	39 c8                	cmp    %ecx,%eax
+ 6ca:	72 04                	jb     6d0 <free+0x20>
+ 6cc:	39 ca                	cmp    %ecx,%edx
+ 6ce:	72 10                	jb     6e0 <free+0x30>
+ 6d0:	89 c8                	mov    %ecx,%eax
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 6c2:	39 d0                	cmp    %edx,%eax
+ 6d2:	39 d0                	cmp    %edx,%eax
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 6c4:	8b 08                	mov    (%eax),%ecx
+ 6d4:	8b 08                	mov    (%eax),%ecx
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 6c6:	73 f0                	jae    6b8 <free+0x18>
- 6c8:	39 ca                	cmp    %ecx,%edx
- 6ca:	72 04                	jb     6d0 <free+0x30>
+ 6d6:	73 f0                	jae    6c8 <free+0x18>
+ 6d8:	39 ca                	cmp    %ecx,%edx
+ 6da:	72 04                	jb     6e0 <free+0x30>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 6cc:	39 c8                	cmp    %ecx,%eax
- 6ce:	72 f0                	jb     6c0 <free+0x20>
+ 6dc:	39 c8                	cmp    %ecx,%eax
+ 6de:	72 f0                	jb     6d0 <free+0x20>
       break;
   if(bp + bp->s.size == p->s.ptr){
- 6d0:	8b 73 fc             	mov    -0x4(%ebx),%esi
- 6d3:	8d 3c f2             	lea    (%edx,%esi,8),%edi
- 6d6:	39 cf                	cmp    %ecx,%edi
- 6d8:	74 1e                	je     6f8 <free+0x58>
+ 6e0:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 6e3:	8d 3c f2             	lea    (%edx,%esi,8),%edi
+ 6e6:	39 cf                	cmp    %ecx,%edi
+ 6e8:	74 1e                	je     708 <free+0x58>
     bp->s.size += p->s.ptr->s.size;
     bp->s.ptr = p->s.ptr->s.ptr;
   } else
     bp->s.ptr = p->s.ptr;
- 6da:	89 4b f8             	mov    %ecx,-0x8(%ebx)
+ 6ea:	89 4b f8             	mov    %ecx,-0x8(%ebx)
   if(p + p->s.size == bp){
- 6dd:	8b 48 04             	mov    0x4(%eax),%ecx
- 6e0:	8d 34 c8             	lea    (%eax,%ecx,8),%esi
- 6e3:	39 f2                	cmp    %esi,%edx
- 6e5:	74 28                	je     70f <free+0x6f>
+ 6ed:	8b 48 04             	mov    0x4(%eax),%ecx
+ 6f0:	8d 34 c8             	lea    (%eax,%ecx,8),%esi
+ 6f3:	39 f2                	cmp    %esi,%edx
+ 6f5:	74 28                	je     71f <free+0x6f>
     p->s.size += bp->s.size;
     p->s.ptr = bp->s.ptr;
   } else
     p->s.ptr = bp;
- 6e7:	89 10                	mov    %edx,(%eax)
+ 6f7:	89 10                	mov    %edx,(%eax)
   freep = p;
- 6e9:	a3 bc 0a 00 00       	mov    %eax,0xabc
+ 6f9:	a3 cc 0a 00 00       	mov    %eax,0xacc
 }
- 6ee:	5b                   	pop    %ebx
- 6ef:	5e                   	pop    %esi
- 6f0:	5f                   	pop    %edi
- 6f1:	5d                   	pop    %ebp
- 6f2:	c3                   	ret    
- 6f3:	90                   	nop
- 6f4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 6fe:	5b                   	pop    %ebx
+ 6ff:	5e                   	pop    %esi
+ 700:	5f                   	pop    %edi
+ 701:	5d                   	pop    %ebp
+ 702:	c3                   	ret    
+ 703:	90                   	nop
+ 704:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     bp->s.size += p->s.ptr->s.size;
- 6f8:	03 71 04             	add    0x4(%ecx),%esi
- 6fb:	89 73 fc             	mov    %esi,-0x4(%ebx)
+ 708:	03 71 04             	add    0x4(%ecx),%esi
+ 70b:	89 73 fc             	mov    %esi,-0x4(%ebx)
     bp->s.ptr = p->s.ptr->s.ptr;
- 6fe:	8b 08                	mov    (%eax),%ecx
- 700:	8b 09                	mov    (%ecx),%ecx
- 702:	89 4b f8             	mov    %ecx,-0x8(%ebx)
+ 70e:	8b 08                	mov    (%eax),%ecx
+ 710:	8b 09                	mov    (%ecx),%ecx
+ 712:	89 4b f8             	mov    %ecx,-0x8(%ebx)
   if(p + p->s.size == bp){
- 705:	8b 48 04             	mov    0x4(%eax),%ecx
- 708:	8d 34 c8             	lea    (%eax,%ecx,8),%esi
- 70b:	39 f2                	cmp    %esi,%edx
- 70d:	75 d8                	jne    6e7 <free+0x47>
+ 715:	8b 48 04             	mov    0x4(%eax),%ecx
+ 718:	8d 34 c8             	lea    (%eax,%ecx,8),%esi
+ 71b:	39 f2                	cmp    %esi,%edx
+ 71d:	75 d8                	jne    6f7 <free+0x47>
     p->s.size += bp->s.size;
- 70f:	03 4b fc             	add    -0x4(%ebx),%ecx
+ 71f:	03 4b fc             	add    -0x4(%ebx),%ecx
   freep = p;
- 712:	a3 bc 0a 00 00       	mov    %eax,0xabc
+ 722:	a3 cc 0a 00 00       	mov    %eax,0xacc
     p->s.size += bp->s.size;
- 717:	89 48 04             	mov    %ecx,0x4(%eax)
+ 727:	89 48 04             	mov    %ecx,0x4(%eax)
     p->s.ptr = bp->s.ptr;
- 71a:	8b 53 f8             	mov    -0x8(%ebx),%edx
- 71d:	89 10                	mov    %edx,(%eax)
+ 72a:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 72d:	89 10                	mov    %edx,(%eax)
 }
- 71f:	5b                   	pop    %ebx
- 720:	5e                   	pop    %esi
- 721:	5f                   	pop    %edi
- 722:	5d                   	pop    %ebp
- 723:	c3                   	ret    
- 724:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
- 72a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
-
-00000730 <malloc>:
+ 72f:	5b                   	pop    %ebx
+ 730:	5e                   	pop    %esi
+ 731:	5f                   	pop    %edi
+ 732:	5d                   	pop    %ebp
+ 733:	c3                   	ret    
+ 734:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 73a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+00000740 <malloc>:
   return freep;
 }
 
 void*
 malloc(uint nbytes)
 {
- 730:	55                   	push   %ebp
- 731:	89 e5                	mov    %esp,%ebp
- 733:	57                   	push   %edi
- 734:	56                   	push   %esi
- 735:	53                   	push   %ebx
- 736:	83 ec 1c             	sub    $0x1c,%esp
+ 740:	55                   	push   %ebp
+ 741:	89 e5                	mov    %esp,%ebp
+ 743:	57                   	push   %edi
+ 744:	56                   	push   %esi
+ 745:	53                   	push   %ebx
+ 746:	83 ec 1c             	sub    $0x1c,%esp
   Header *p, *prevp;
   uint nunits;
 
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 739:	8b 45 08             	mov    0x8(%ebp),%eax
+ 749:	8b 45 08             	mov    0x8(%ebp),%eax
   if((prevp = freep) == 0){
- 73c:	8b 1d bc 0a 00 00    	mov    0xabc,%ebx
+ 74c:	8b 1d cc 0a 00 00    	mov    0xacc,%ebx
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 742:	8d 48 07             	lea    0x7(%eax),%ecx
- 745:	c1 e9 03             	shr    $0x3,%ecx
+ 752:	8d 48 07             	lea    0x7(%eax),%ecx
+ 755:	c1 e9 03             	shr    $0x3,%ecx
   if((prevp = freep) == 0){
- 748:	85 db                	test   %ebx,%ebx
+ 758:	85 db                	test   %ebx,%ebx
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 74a:	8d 71 01             	lea    0x1(%ecx),%esi
+ 75a:	8d 71 01             	lea    0x1(%ecx),%esi
   if((prevp = freep) == 0){
- 74d:	0f 84 9b 00 00 00    	je     7ee <malloc+0xbe>
- 753:	8b 13                	mov    (%ebx),%edx
- 755:	8b 7a 04             	mov    0x4(%edx),%edi
+ 75d:	0f 84 9b 00 00 00    	je     7fe <malloc+0xbe>
+ 763:	8b 13                	mov    (%ebx),%edx
+ 765:	8b 7a 04             	mov    0x4(%edx),%edi
     base.s.ptr = freep = prevp = &base;
     base.s.size = 0;
   }
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
     if(p->s.size >= nunits){
- 758:	39 fe                	cmp    %edi,%esi
- 75a:	76 64                	jbe    7c0 <malloc+0x90>
- 75c:	8d 04 f5 00 00 00 00 	lea    0x0(,%esi,8),%eax
+ 768:	39 fe                	cmp    %edi,%esi
+ 76a:	76 64                	jbe    7d0 <malloc+0x90>
+ 76c:	8d 04 f5 00 00 00 00 	lea    0x0(,%esi,8),%eax
   if(nu < 4096)
- 763:	bb 00 80 00 00       	mov    $0x8000,%ebx
- 768:	89 45 e4             	mov    %eax,-0x1c(%ebp)
- 76b:	eb 0e                	jmp    77b <malloc+0x4b>
- 76d:	8d 76 00             	lea    0x0(%esi),%esi
+ 773:	bb 00 80 00 00       	mov    $0x8000,%ebx
+ 778:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+ 77b:	eb 0e                	jmp    78b <malloc+0x4b>
+ 77d:	8d 76 00             	lea    0x0(%esi),%esi
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 770:	8b 02                	mov    (%edx),%eax
+ 780:	8b 02                	mov    (%edx),%eax
     if(p->s.size >= nunits){
- 772:	8b 78 04             	mov    0x4(%eax),%edi
- 775:	39 fe                	cmp    %edi,%esi
- 777:	76 4f                	jbe    7c8 <malloc+0x98>
- 779:	89 c2                	mov    %eax,%edx
+ 782:	8b 78 04             	mov    0x4(%eax),%edi
+ 785:	39 fe                	cmp    %edi,%esi
+ 787:	76 4f                	jbe    7d8 <malloc+0x98>
+ 789:	89 c2                	mov    %eax,%edx
         p->s.size = nunits;
       }
       freep = prevp;
       return (void*)(p + 1);
     }
     if(p == freep)
- 77b:	3b 15 bc 0a 00 00    	cmp    0xabc,%edx
- 781:	75 ed                	jne    770 <malloc+0x40>
+ 78b:	3b 15 cc 0a 00 00    	cmp    0xacc,%edx
+ 791:	75 ed                	jne    780 <malloc+0x40>
   if(nu < 4096)
- 783:	8b 45 e4             	mov    -0x1c(%ebp),%eax
- 786:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
- 78c:	bf 00 10 00 00       	mov    $0x1000,%edi
- 791:	0f 43 fe             	cmovae %esi,%edi
- 794:	0f 42 c3             	cmovb  %ebx,%eax
+ 793:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+ 796:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+ 79c:	bf 00 10 00 00       	mov    $0x1000,%edi
+ 7a1:	0f 43 fe             	cmovae %esi,%edi
+ 7a4:	0f 42 c3             	cmovb  %ebx,%eax
   p = sbrk(nu * sizeof(Header));
- 797:	89 04 24             	mov    %eax,(%esp)
- 79a:	e8 4b fc ff ff       	call   3ea <sbrk>
+ 7a7:	89 04 24             	mov    %eax,(%esp)
+ 7aa:	e8 3b fc ff ff       	call   3ea <sbrk>
   if(p == (char*)-1)
- 79f:	83 f8 ff             	cmp    $0xffffffff,%eax
- 7a2:	74 18                	je     7bc <malloc+0x8c>
+ 7af:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 7b2:	74 18                	je     7cc <malloc+0x8c>
   hp->s.size = nu;
- 7a4:	89 78 04             	mov    %edi,0x4(%eax)
+ 7b4:	89 78 04             	mov    %edi,0x4(%eax)
   free((void*)(hp + 1));
- 7a7:	83 c0 08             	add    $0x8,%eax
- 7aa:	89 04 24             	mov    %eax,(%esp)
- 7ad:	e8 ee fe ff ff       	call   6a0 <free>
+ 7b7:	83 c0 08             	add    $0x8,%eax
+ 7ba:	89 04 24             	mov    %eax,(%esp)
+ 7bd:	e8 ee fe ff ff       	call   6b0 <free>
   return freep;
- 7b2:	8b 15 bc 0a 00 00    	mov    0xabc,%edx
+ 7c2:	8b 15 cc 0a 00 00    	mov    0xacc,%edx
       if((p = morecore(nunits)) == 0)
- 7b8:	85 d2                	test   %edx,%edx
- 7ba:	75 b4                	jne    770 <malloc+0x40>
+ 7c8:	85 d2                	test   %edx,%edx
+ 7ca:	75 b4                	jne    780 <malloc+0x40>
         return 0;
- 7bc:	31 c0                	xor    %eax,%eax
- 7be:	eb 20                	jmp    7e0 <malloc+0xb0>
+ 7cc:	31 c0                	xor    %eax,%eax
+ 7ce:	eb 20                	jmp    7f0 <malloc+0xb0>
     if(p->s.size >= nunits){
- 7c0:	89 d0                	mov    %edx,%eax
- 7c2:	89 da                	mov    %ebx,%edx
- 7c4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 7d0:	89 d0                	mov    %edx,%eax
+ 7d2:	89 da                	mov    %ebx,%edx
+ 7d4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
       if(p->s.size == nunits)
- 7c8:	39 fe                	cmp    %edi,%esi
- 7ca:	74 1c                	je     7e8 <malloc+0xb8>
+ 7d8:	39 fe                	cmp    %edi,%esi
+ 7da:	74 1c                	je     7f8 <malloc+0xb8>
         p->s.size -= nunits;
- 7cc:	29 f7                	sub    %esi,%edi
- 7ce:	89 78 04             	mov    %edi,0x4(%eax)
+ 7dc:	29 f7                	sub    %esi,%edi
+ 7de:	89 78 04             	mov    %edi,0x4(%eax)
         p += p->s.size;
- 7d1:	8d 04 f8             	lea    (%eax,%edi,8),%eax
+ 7e1:	8d 04 f8             	lea    (%eax,%edi,8),%eax
         p->s.size = nunits;
- 7d4:	89 70 04             	mov    %esi,0x4(%eax)
+ 7e4:	89 70 04             	mov    %esi,0x4(%eax)
       freep = prevp;
- 7d7:	89 15 bc 0a 00 00    	mov    %edx,0xabc
+ 7e7:	89 15 cc 0a 00 00    	mov    %edx,0xacc
       return (void*)(p + 1);
- 7dd:	83 c0 08             	add    $0x8,%eax
+ 7ed:	83 c0 08             	add    $0x8,%eax
   }
 }
- 7e0:	83 c4 1c             	add    $0x1c,%esp
- 7e3:	5b                   	pop    %ebx
- 7e4:	5e                   	pop    %esi
- 7e5:	5f                   	pop    %edi
- 7e6:	5d                   	pop    %ebp
- 7e7:	c3                   	ret    
+ 7f0:	83 c4 1c             	add    $0x1c,%esp
+ 7f3:	5b                   	pop    %ebx
+ 7f4:	5e                   	pop    %esi
+ 7f5:	5f                   	pop    %edi
+ 7f6:	5d                   	pop    %ebp
+ 7f7:	c3                   	ret    
         prevp->s.ptr = p->s.ptr;
- 7e8:	8b 08                	mov    (%eax),%ecx
- 7ea:	89 0a                	mov    %ecx,(%edx)
- 7ec:	eb e9                	jmp    7d7 <malloc+0xa7>
+ 7f8:	8b 08                	mov    (%eax),%ecx
+ 7fa:	89 0a                	mov    %ecx,(%edx)
+ 7fc:	eb e9                	jmp    7e7 <malloc+0xa7>
     base.s.ptr = freep = prevp = &base;
- 7ee:	c7 05 bc 0a 00 00 c0 	movl   $0xac0,0xabc
- 7f5:	0a 00 00 
+ 7fe:	c7 05 cc 0a 00 00 d0 	movl   $0xad0,0xacc
+ 805:	0a 00 00 
     base.s.size = 0;
- 7f8:	ba c0 0a 00 00       	mov    $0xac0,%edx
+ 808:	ba d0 0a 00 00       	mov    $0xad0,%edx
     base.s.ptr = freep = prevp = &base;
- 7fd:	c7 05 c0 0a 00 00 c0 	movl   $0xac0,0xac0
- 804:	0a 00 00 
+ 80d:	c7 05 d0 0a 00 00 d0 	movl   $0xad0,0xad0
+ 814:	0a 00 00 
     base.s.size = 0;
- 807:	c7 05 c4 0a 00 00 00 	movl   $0x0,0xac4
- 80e:	00 00 00 
- 811:	e9 46 ff ff ff       	jmp    75c <malloc+0x2c>
+ 817:	c7 05 d4 0a 00 00 00 	movl   $0x0,0xad4
+ 81e:	00 00 00 
+ 821:	e9 46 ff ff ff       	jmp    76c <malloc+0x2c>
diff --git a/stressfs.o b/stressfs.o
index 131deb6..8786e04 100644
Binary files a/stressfs.o and b/stressfs.o differ
diff --git a/stressfs.sym b/stressfs.sym
index b2075b8..f6e6436 100644
--- a/stressfs.sym
+++ b/stressfs.sym
@@ -1,7 +1,7 @@
 00000000 .text
-00000816 .rodata
-00000854 .eh_frame
-00000abc .bss
+00000826 .rodata
+00000864 .eh_frame
+00000acc .bss
 00000000 .comment
 00000000 .debug_aranges
 00000000 .debug_info
@@ -13,25 +13,27 @@
 00000000 stressfs.c
 00000000 ulib.c
 00000000 printf.c
-00000410 printint
-00000840 digits.1358
+00000420 printint
+00000850 digits.1362
 00000000 umalloc.c
-00000abc freep
-00000ac0 base
+00000acc freep
+00000ad0 base
 00000140 strcpy
 00000402 waitpid
-000004b0 printf
+000004c0 printf
 00000330 memmove
 000003aa mknod
 00000250 gets
 000003e2 getpid
-00000730 malloc
+00000740 malloc
 000003f2 sleep
 00000372 pipe
+0000040a setPrior
 00000382 write
 000003ba fstat
 00000392 kill
 000003d2 chdir
+00000412 getPrior
 0000039a exec
 0000036a wait
 0000037a read
@@ -39,14 +41,14 @@
 0000035a fork
 000003ea sbrk
 000003fa uptime
-00000abc __bss_start
+00000acc __bss_start
 000001f0 memset
 00000000 main
 00000170 strcmp
 000003da dup
 000002b0 stat
-00000abc _edata
-00000ac8 _end
+00000acc _edata
+00000ad8 _end
 000003c2 link
 00000362 exit
 00000300 atoi
@@ -55,4 +57,4 @@
 00000210 strchr
 000003ca mkdir
 0000038a close
-000006a0 free
+000006b0 free
diff --git a/syscall.c b/syscall.c
index 89c01e1..6fb8a6a 100644
--- a/syscall.c
+++ b/syscall.c
@@ -104,6 +104,8 @@ extern int sys_wait(void);
 extern int sys_write(void);
 extern int sys_uptime(void);
 extern int sys_waitpid(void);
+extern int sys_setPrior(void);
+extern int sys_getPrior(void);
 
 static int (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
@@ -128,6 +130,8 @@ static int (*syscalls[])(void) = {
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
 [SYS_waitpid] sys_waitpid,
+[SYS_setPrior] sys_setPrior,
+[SYS_getPrior] sys_getPrior,
 };
 
 void
diff --git a/syscall.h b/syscall.h
index eda417c..f39dc05 100644
--- a/syscall.h
+++ b/syscall.h
@@ -21,3 +21,5 @@
 #define SYS_mkdir  20
 #define SYS_close  21
 #define SYS_waitpid 22
+#define SYS_setPrior 23
+#define SYS_getPrior 24
diff --git a/syscall.o b/syscall.o
index 07637d0..53448d9 100644
Binary files a/syscall.o and b/syscall.o differ
diff --git a/sysfile.o b/sysfile.o
index a39d66c..5cd756c 100644
Binary files a/sysfile.o and b/sysfile.o differ
diff --git a/sysproc.c b/sysproc.c
index 1832064..a6cc441 100644
--- a/sysproc.c
+++ b/sysproc.c
@@ -102,10 +102,30 @@ sys_waitpid(void)
   int *status;
   int options = 0;
   if(argint(0, &pid) < 0){
-        return -1;
-    }
+    return -1;
+  }
   if(argptr(1,(void*)&status, sizeof(status)) < 0){
-      return -1;
+    return -1;
   }
   return waitpid(pid, status, options);
 }
+
+int
+sys_setPrior(void)
+{
+  int priority;
+  if(argint(0,&priority) < 0) {
+    return -1;
+  }
+  if(argint(0,&priority) > 31) {
+    return -1;
+  }
+  setPrior(priority);
+  return 0;
+}
+
+int
+sys_getPrior(void)
+{
+  return getPrior();
+}
\ No newline at end of file
diff --git a/sysproc.o b/sysproc.o
index b74a9df..4e54d7f 100644
Binary files a/sysproc.o and b/sysproc.o differ
diff --git a/trap.o b/trap.o
index 4088d24..9bc8293 100644
Binary files a/trap.o and b/trap.o differ
diff --git a/uart.o b/uart.o
index 5d9aa7a..d016f78 100644
Binary files a/uart.o and b/uart.o differ
diff --git a/user.h b/user.h
index 5c65596..adc3585 100644
--- a/user.h
+++ b/user.h
@@ -24,6 +24,8 @@ char* sbrk(int);
 int sleep(int);
 int uptime(void);
 int waitpid(int, int*, int);
+void setPrior(int);
+int getPrior(void);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/usertests.asm b/usertests.asm
index 54980d8..7a3e43b 100644
--- a/usertests.asm
+++ b/usertests.asm
@@ -20,1508 +20,1642 @@ int main(int argc, char *argv[])
 	
 	int exitWait(void);
 	int waitPid(void);
+  int PScheduler(void);
 
   printf(1, "\n This program tests the correctness of your lab#1\n");
-   d:	c7 44 24 04 a4 0e 00 	movl   $0xea4,0x4(%esp)
+   d:	c7 44 24 04 f8 0f 00 	movl   $0xff8,0x4(%esp)
   14:	00 
   15:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-  1c:	e8 ef 07 00 00       	call   810 <printf>
+  1c:	e8 0f 09 00 00       	call   930 <printf>
   
   if (atoi(argv[1]) == 1)
   21:	8b 43 04             	mov    0x4(%ebx),%eax
   24:	89 04 24             	mov    %eax,(%esp)
-  27:	e8 34 06 00 00       	call   660 <atoi>
+  27:	e8 44 07 00 00       	call   770 <atoi>
   2c:	83 f8 01             	cmp    $0x1,%eax
-  2f:	74 3a                	je     6b <main+0x6b>
+  2f:	74 4a                	je     7b <main+0x7b>
 	exitWait();
   else if (atoi(argv[1]) == 2)
   31:	8b 43 04             	mov    0x4(%ebx),%eax
   34:	89 04 24             	mov    %eax,(%esp)
-  37:	e8 24 06 00 00       	call   660 <atoi>
+  37:	e8 34 07 00 00       	call   770 <atoi>
   3c:	83 f8 02             	cmp    $0x2,%eax
-  3f:	74 31                	je     72 <main+0x72>
+  3f:	74 41                	je     82 <main+0x82>
 	waitPid();
+  else if (atoi(argv[1]) == 3)
+  41:	8b 43 04             	mov    0x4(%ebx),%eax
+  44:	89 04 24             	mov    %eax,(%esp)
+  47:	e8 24 07 00 00       	call   770 <atoi>
+  4c:	83 f8 03             	cmp    $0x3,%eax
+  4f:	74 38                	je     89 <main+0x89>
+  PScheduler();
   else 
    printf(1, "\ntype \"%s 1\" to test exit and wait, \"%s 2\" to test waitpid\n", argv[0], argv[0]);
-  41:	8b 03                	mov    (%ebx),%eax
-  43:	c7 44 24 04 d8 0e 00 	movl   $0xed8,0x4(%esp)
-  4a:	00 
-  4b:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-  52:	89 44 24 0c          	mov    %eax,0xc(%esp)
-  56:	89 44 24 08          	mov    %eax,0x8(%esp)
-  5a:	e8 b1 07 00 00       	call   810 <printf>
+  51:	8b 03                	mov    (%ebx),%eax
+  53:	c7 44 24 04 2c 10 00 	movl   $0x102c,0x4(%esp)
+  5a:	00 
+  5b:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+  62:	89 44 24 0c          	mov    %eax,0xc(%esp)
+  66:	89 44 24 08          	mov    %eax,0x8(%esp)
+  6a:	e8 c1 08 00 00       	call   930 <printf>
   
     // End of test
-	 exit(0);
-  5f:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-  66:	e8 57 06 00 00       	call   6c2 <exit>
+  exit(0);
+  6f:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+  76:	e8 57 07 00 00       	call   7d2 <exit>
 	exitWait();
-  6b:	e8 10 00 00 00       	call   80 <exitWait>
-  70:	eb ed                	jmp    5f <main+0x5f>
+  7b:	e8 10 01 00 00       	call   190 <exitWait>
+  80:	eb ed                	jmp    6f <main+0x6f>
 	waitPid();
-  72:	e8 09 01 00 00       	call   180 <waitPid>
-  77:	eb e6                	jmp    5f <main+0x5f>
-  79:	66 90                	xchg   %ax,%ax
-  7b:	66 90                	xchg   %ax,%ax
-  7d:	66 90                	xchg   %ax,%ax
-  7f:	90                   	nop
-
-00000080 <exitWait>:
-	 return 0;
- }
+  82:	e8 09 02 00 00       	call   290 <waitPid>
+  87:	eb e6                	jmp    6f <main+0x6f>
+  89:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  PScheduler();
+  90:	e8 2b 00 00 00       	call   c0 <PScheduler>
+  95:	66 90                	xchg   %ax,%ax
+  97:	66 90                	xchg   %ax,%ax
+  99:	66 90                	xchg   %ax,%ax
+  9b:	66 90                	xchg   %ax,%ax
+  9d:	66 90                	xchg   %ax,%ax
+  9f:	90                   	nop
+
+000000a0 <work>:
+      printf(1,"\n if processes with highest priority finished first then its correct \n");
+  }
+  exit(0);
+}*/
+
+void work() {
+  a0:	55                   	push   %ebp
+  a1:	ba f8 a7 00 00       	mov    $0xa7f8,%edx
+  a6:	89 e5                	mov    %esp,%ebp
+  a8:	b8 f8 a7 00 00       	mov    $0xa7f8,%eax
+  ad:	8d 76 00             	lea    0x0(%esi),%esi
+  int i,k;
+  for(i = 0; i < 43000; i++) {
+    for(k = 0; k < 43000; k++) {
+      asm("nop");
+  b0:	90                   	nop
+    for(k = 0; k < 43000; k++) {
+  b1:	83 e8 01             	sub    $0x1,%eax
+  b4:	75 fa                	jne    b0 <work+0x10>
+  for(i = 0; i < 43000; i++) {
+  b6:	83 ea 01             	sub    $0x1,%edx
+  b9:	75 ed                	jne    a8 <work+0x8>
+    }
+  }
+}
+  bb:	5d                   	pop    %ebp
+  bc:	c3                   	ret    
+  bd:	8d 76 00             	lea    0x0(%esi),%esi
+
+000000c0 <PScheduler>:
+
+int PScheduler(void) {
+  c0:	55                   	push   %ebp
+  c1:	89 e5                	mov    %esp,%ebp
+  c3:	53                   	push   %ebx
+
+  setPrior(0);
+  int i = 0;
+  int pid = 0;
+  for(i = 0; i < 3; i++) {
+  c4:	31 db                	xor    %ebx,%ebx
+int PScheduler(void) {
+  c6:	83 ec 14             	sub    $0x14,%esp
+  setPrior(0);
+  c9:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+  d0:	e8 a5 07 00 00       	call   87a <setPrior>
+    pid = fork();
+  d5:	e8 f0 06 00 00       	call   7ca <fork>
+    if(!pid) {
+  da:	85 c0                	test   %eax,%eax
+  dc:	74 55                	je     133 <PScheduler+0x73>
+  for(i = 0; i < 3; i++) {
+  de:	83 c3 01             	add    $0x1,%ebx
+  e1:	83 fb 03             	cmp    $0x3,%ebx
+  e4:	75 ef                	jne    d5 <PScheduler+0x15>
+      exit(0);
+    }
+  }
+  if(pid) {
+    for(i = 0; i < 3; i++)
+      wait(0);
+  e6:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+  ed:	e8 e8 06 00 00       	call   7da <wait>
+  f2:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+  f9:	e8 dc 06 00 00       	call   7da <wait>
+  fe:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+ 105:	e8 d0 06 00 00       	call   7da <wait>
+  }
+  printf(0, "parent %d done\n", getpid());
+ 10a:	e8 43 07 00 00       	call   852 <getpid>
+ 10f:	c7 44 24 04 a7 0c 00 	movl   $0xca7,0x4(%esp)
+ 116:	00 
+ 117:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+ 11e:	89 44 24 08          	mov    %eax,0x8(%esp)
+ 122:	e8 09 08 00 00       	call   930 <printf>
+  exit(0);
+ 127:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+ 12e:	e8 9f 06 00 00       	call   7d2 <exit>
+      setPrior(i * 10);
+ 133:	6b db 0a             	imul   $0xa,%ebx,%ebx
+ 136:	89 1c 24             	mov    %ebx,(%esp)
+ 139:	e8 3c 07 00 00       	call   87a <setPrior>
+ 13e:	ba f8 a7 00 00       	mov    $0xa7f8,%edx
+ 143:	90                   	nop
+ 144:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  for(i = 0; i < 3; i++) {
+ 148:	b8 f8 a7 00 00       	mov    $0xa7f8,%eax
+ 14d:	8d 76 00             	lea    0x0(%esi),%esi
+      asm("nop");
+ 150:	90                   	nop
+    for(k = 0; k < 43000; k++) {
+ 151:	83 e8 01             	sub    $0x1,%eax
+ 154:	75 fa                	jne    150 <PScheduler+0x90>
+  for(i = 0; i < 43000; i++) {
+ 156:	83 ea 01             	sub    $0x1,%edx
+ 159:	75 ed                	jne    148 <PScheduler+0x88>
+      printf(0, "child %d done\n", getpid());
+ 15b:	e8 f2 06 00 00       	call   852 <getpid>
+ 160:	c7 44 24 04 98 0c 00 	movl   $0xc98,0x4(%esp)
+ 167:	00 
+ 168:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+ 16f:	89 44 24 08          	mov    %eax,0x8(%esp)
+ 173:	e8 b8 07 00 00       	call   930 <printf>
+      exit(0);
+ 178:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+ 17f:	e8 4e 06 00 00       	call   7d2 <exit>
+ 184:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 18a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+00000190 <exitWait>:
+}
   
 int exitWait(void) {
-  80:	55                   	push   %ebp
-  81:	89 e5                	mov    %esp,%ebp
-  83:	56                   	push   %esi
-  84:	53                   	push   %ebx
+ 190:	55                   	push   %ebp
+ 191:	89 e5                	mov    %esp,%ebp
+ 193:	56                   	push   %esi
+ 194:	53                   	push   %ebx
     int i;
   // use this part to test exit(int status) and wait(int* status)
  
   printf(1, "\n  Parts a & b) testing exit(int status) and wait(int* status):\n");
 
   for (i = 0; i < 2; i++) {
-  85:	31 db                	xor    %ebx,%ebx
+ 195:	31 db                	xor    %ebx,%ebx
 int exitWait(void) {
-  87:	83 ec 20             	sub    $0x20,%esp
+ 197:	83 ec 20             	sub    $0x20,%esp
   printf(1, "\n  Parts a & b) testing exit(int status) and wait(int* status):\n");
-  8a:	c7 44 24 04 78 0b 00 	movl   $0xb78,0x4(%esp)
-  91:	00 
+ 19a:	c7 44 24 04 cc 0c 00 	movl   $0xccc,0x4(%esp)
+ 1a1:	00 
       else{
 	      printf(1, "\nThis is child with PID# %d and I will exit with status %d\n" ,getpid(), -1);
         exit(-1);
       } 
     } else if (pid > 0) { // only the parent executes this code
       ret_pid = wait(&exit_status);
-  92:	8d 75 f4             	lea    -0xc(%ebp),%esi
+ 1a2:	8d 75 f4             	lea    -0xc(%ebp),%esi
   printf(1, "\n  Parts a & b) testing exit(int status) and wait(int* status):\n");
-  95:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-  9c:	e8 6f 07 00 00       	call   810 <printf>
+ 1a5:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+ 1ac:	e8 7f 07 00 00       	call   930 <printf>
     pid = fork();
-  a1:	e8 14 06 00 00       	call   6ba <fork>
+ 1b1:	e8 14 06 00 00       	call   7ca <fork>
     if (pid == 0) { // only the child executed this code
-  a6:	83 f8 00             	cmp    $0x0,%eax
-  a9:	74 45                	je     f0 <exitWait+0x70>
-  ab:	90                   	nop
-  ac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 1b6:	83 f8 00             	cmp    $0x0,%eax
+ 1b9:	74 45                	je     200 <exitWait+0x70>
+ 1bb:	90                   	nop
+ 1bc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     } else if (pid > 0) { // only the parent executes this code
-  b0:	0f 8e a3 00 00 00    	jle    159 <exitWait+0xd9>
+ 1c0:	0f 8e a3 00 00 00    	jle    269 <exitWait+0xd9>
       ret_pid = wait(&exit_status);
-  b6:	89 34 24             	mov    %esi,(%esp)
+ 1c6:	89 34 24             	mov    %esi,(%esp)
   for (i = 0; i < 2; i++) {
-  b9:	83 c3 01             	add    $0x1,%ebx
+ 1c9:	83 c3 01             	add    $0x1,%ebx
       ret_pid = wait(&exit_status);
-  bc:	e8 09 06 00 00       	call   6ca <wait>
+ 1cc:	e8 09 06 00 00       	call   7da <wait>
       printf(1, "\n This is the parent: child with PID# %d has exited with status %d\n", ret_pid, exit_status);
-  c1:	8b 55 f4             	mov    -0xc(%ebp),%edx
-  c4:	c7 44 24 04 f8 0b 00 	movl   $0xbf8,0x4(%esp)
-  cb:	00 
-  cc:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-  d3:	89 54 24 0c          	mov    %edx,0xc(%esp)
-  d7:	89 44 24 08          	mov    %eax,0x8(%esp)
-  db:	e8 30 07 00 00       	call   810 <printf>
+ 1d1:	8b 55 f4             	mov    -0xc(%ebp),%edx
+ 1d4:	c7 44 24 04 4c 0d 00 	movl   $0xd4c,0x4(%esp)
+ 1db:	00 
+ 1dc:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+ 1e3:	89 54 24 0c          	mov    %edx,0xc(%esp)
+ 1e7:	89 44 24 08          	mov    %eax,0x8(%esp)
+ 1eb:	e8 40 07 00 00       	call   930 <printf>
   for (i = 0; i < 2; i++) {
-  e0:	83 fb 02             	cmp    $0x2,%ebx
-  e3:	75 bc                	jne    a1 <exitWait+0x21>
+ 1f0:	83 fb 02             	cmp    $0x2,%ebx
+ 1f3:	75 bc                	jne    1b1 <exitWait+0x21>
 	    printf(2, "\nError using fork\n");
       exit(-1);
     }
   }
   return 0;
 }
-  e5:	83 c4 20             	add    $0x20,%esp
-  e8:	31 c0                	xor    %eax,%eax
-  ea:	5b                   	pop    %ebx
-  eb:	5e                   	pop    %esi
-  ec:	5d                   	pop    %ebp
-  ed:	c3                   	ret    
-  ee:	66 90                	xchg   %ax,%ax
+ 1f5:	83 c4 20             	add    $0x20,%esp
+ 1f8:	31 c0                	xor    %eax,%eax
+ 1fa:	5b                   	pop    %ebx
+ 1fb:	5e                   	pop    %esi
+ 1fc:	5d                   	pop    %ebp
+ 1fd:	c3                   	ret    
+ 1fe:	66 90                	xchg   %ax,%ax
       if (i == 0){
-  f0:	85 db                	test   %ebx,%ebx
-  f2:	75 34                	jne    128 <exitWait+0xa8>
+ 200:	85 db                	test   %ebx,%ebx
+ 202:	75 34                	jne    238 <exitWait+0xa8>
         printf(1, "\nThis is child with PID# %d and I will exit with status %d\n", getpid(), 0);
-  f4:	e8 49 06 00 00       	call   742 <getpid>
-  f9:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
- 100:	00 
- 101:	c7 44 24 04 bc 0b 00 	movl   $0xbbc,0x4(%esp)
- 108:	00 
- 109:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
- 110:	89 44 24 08          	mov    %eax,0x8(%esp)
- 114:	e8 f7 06 00 00       	call   810 <printf>
+ 204:	e8 49 06 00 00       	call   852 <getpid>
+ 209:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
+ 210:	00 
+ 211:	c7 44 24 04 10 0d 00 	movl   $0xd10,0x4(%esp)
+ 218:	00 
+ 219:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+ 220:	89 44 24 08          	mov    %eax,0x8(%esp)
+ 224:	e8 07 07 00 00       	call   930 <printf>
         exit(0);
- 119:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
- 120:	e8 9d 05 00 00       	call   6c2 <exit>
- 125:	8d 76 00             	lea    0x0(%esi),%esi
+ 229:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+ 230:	e8 9d 05 00 00       	call   7d2 <exit>
+ 235:	8d 76 00             	lea    0x0(%esi),%esi
 	      printf(1, "\nThis is child with PID# %d and I will exit with status %d\n" ,getpid(), -1);
- 128:	e8 15 06 00 00       	call   742 <getpid>
- 12d:	c7 44 24 0c ff ff ff 	movl   $0xffffffff,0xc(%esp)
- 134:	ff 
- 135:	c7 44 24 04 bc 0b 00 	movl   $0xbbc,0x4(%esp)
- 13c:	00 
- 13d:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
- 144:	89 44 24 08          	mov    %eax,0x8(%esp)
- 148:	e8 c3 06 00 00       	call   810 <printf>
+ 238:	e8 15 06 00 00       	call   852 <getpid>
+ 23d:	c7 44 24 0c ff ff ff 	movl   $0xffffffff,0xc(%esp)
+ 244:	ff 
+ 245:	c7 44 24 04 10 0d 00 	movl   $0xd10,0x4(%esp)
+ 24c:	00 
+ 24d:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+ 254:	89 44 24 08          	mov    %eax,0x8(%esp)
+ 258:	e8 d3 06 00 00       	call   930 <printf>
         exit(-1);
- 14d:	c7 04 24 ff ff ff ff 	movl   $0xffffffff,(%esp)
- 154:	e8 69 05 00 00       	call   6c2 <exit>
+ 25d:	c7 04 24 ff ff ff ff 	movl   $0xffffffff,(%esp)
+ 264:	e8 69 05 00 00       	call   7d2 <exit>
 	    printf(2, "\nError using fork\n");
- 159:	c7 44 24 04 14 0f 00 	movl   $0xf14,0x4(%esp)
- 160:	00 
- 161:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
- 168:	e8 a3 06 00 00       	call   810 <printf>
+ 269:	c7 44 24 04 b7 0c 00 	movl   $0xcb7,0x4(%esp)
+ 270:	00 
+ 271:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
+ 278:	e8 b3 06 00 00       	call   930 <printf>
       exit(-1);
- 16d:	c7 04 24 ff ff ff ff 	movl   $0xffffffff,(%esp)
- 174:	e8 49 05 00 00       	call   6c2 <exit>
- 179:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 27d:	c7 04 24 ff ff ff ff 	movl   $0xffffffff,(%esp)
+ 284:	e8 49 05 00 00       	call   7d2 <exit>
+ 289:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 
-00000180 <waitPid>:
+00000290 <waitPid>:
 
 int waitPid(void){
- 180:	55                   	push   %ebp
- 181:	89 e5                	mov    %esp,%ebp
- 183:	56                   	push   %esi
- 184:	53                   	push   %ebx
- 185:	83 ec 40             	sub    $0x40,%esp
+ 290:	55                   	push   %ebp
+ 291:	89 e5                	mov    %esp,%ebp
+ 293:	56                   	push   %esi
+ 294:	53                   	push   %ebx
+ 295:	83 ec 40             	sub    $0x40,%esp
   int ret_pid, exit_status;
   int i;
   int pid_a[5]={0, 0, 0, 0, 0};
  // use this part to test wait(int pid, int* status, int options)
 
   printf(1, "\n  Part c) testing waitpid(int pid, int* status, int options):\n");
- 188:	c7 44 24 04 3c 0c 00 	movl   $0xc3c,0x4(%esp)
- 18f:	00 
- 190:	8d 5d e4             	lea    -0x1c(%ebp),%ebx
- 193:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
- 19a:	8d 75 f8             	lea    -0x8(%ebp),%esi
+ 298:	c7 44 24 04 90 0d 00 	movl   $0xd90,0x4(%esp)
+ 29f:	00 
+ 2a0:	8d 5d e4             	lea    -0x1c(%ebp),%ebx
+ 2a3:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+ 2aa:	8d 75 f8             	lea    -0x8(%ebp),%esi
   int pid_a[5]={0, 0, 0, 0, 0};
- 19d:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
- 1a4:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
- 1ab:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
- 1b2:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
- 1b9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+ 2ad:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+ 2b4:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
+ 2bb:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
+ 2c2:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+ 2c9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   printf(1, "\n  Part c) testing waitpid(int pid, int* status, int options):\n");
- 1c0:	e8 4b 06 00 00       	call   810 <printf>
+ 2d0:	e8 5b 06 00 00       	call   930 <printf>
 
 	for (i = 0; i <5; i++) {
 		pid_a[i] = fork();
- 1c5:	e8 f0 04 00 00       	call   6ba <fork>
+ 2d5:	e8 f0 04 00 00       	call   7ca <fork>
 		if (pid_a[i] == 0) { // only the child executed this code
- 1ca:	85 c0                	test   %eax,%eax
+ 2da:	85 c0                	test   %eax,%eax
 		pid_a[i] = fork();
- 1cc:	89 03                	mov    %eax,(%ebx)
+ 2dc:	89 03                	mov    %eax,(%ebx)
 		if (pid_a[i] == 0) { // only the child executed this code
- 1ce:	0f 84 84 02 00 00    	je     458 <waitPid+0x2d8>
- 1d4:	83 c3 04             	add    $0x4,%ebx
+ 2de:	0f 84 84 02 00 00    	je     568 <waitPid+0x2d8>
+ 2e4:	83 c3 04             	add    $0x4,%ebx
 	for (i = 0; i <5; i++) {
- 1d7:	39 f3                	cmp    %esi,%ebx
- 1d9:	75 ea                	jne    1c5 <waitPid+0x45>
+ 2e7:	39 f3                	cmp    %esi,%ebx
+ 2e9:	75 ea                	jne    2d5 <waitPid+0x45>
 			printf(1, "\n This is child with PID# %d and I will exit with status %d\n", getpid(), getpid() + 4);
 			exit(getpid() + 4);
 		}
 	}
   sleep(5);
- 1db:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
+ 2eb:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
   printf(1, "\n This is the parent: Now waiting for child with PID# %d\n",pid_a[3]);
   ret_pid = waitpid(pid_a[3], &exit_status, 0);
- 1e2:	8d 5d e0             	lea    -0x20(%ebp),%ebx
+ 2f2:	8d 5d e0             	lea    -0x20(%ebp),%ebx
   sleep(5);
- 1e5:	e8 68 05 00 00       	call   752 <sleep>
+ 2f5:	e8 68 05 00 00       	call   862 <sleep>
   printf(1, "\n This is the parent: Now waiting for child with PID# %d\n",pid_a[3]);
- 1ea:	8b 75 f0             	mov    -0x10(%ebp),%esi
- 1ed:	c7 44 24 04 bc 0c 00 	movl   $0xcbc,0x4(%esp)
- 1f4:	00 
- 1f5:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
- 1fc:	89 74 24 08          	mov    %esi,0x8(%esp)
- 200:	e8 0b 06 00 00       	call   810 <printf>
+ 2fa:	8b 75 f0             	mov    -0x10(%ebp),%esi
+ 2fd:	c7 44 24 04 10 0e 00 	movl   $0xe10,0x4(%esp)
+ 304:	00 
+ 305:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+ 30c:	89 74 24 08          	mov    %esi,0x8(%esp)
+ 310:	e8 1b 06 00 00       	call   930 <printf>
   ret_pid = waitpid(pid_a[3], &exit_status, 0);
- 205:	89 5c 24 04          	mov    %ebx,0x4(%esp)
- 209:	89 34 24             	mov    %esi,(%esp)
+ 315:	89 5c 24 04          	mov    %ebx,0x4(%esp)
+ 319:	89 34 24             	mov    %esi,(%esp)
   printf(1, "\n This is the partent: Child# %d has exited with status %d, expected: %d\n",ret_pid, exit_status, pid_a[3] + 4);
- 20c:	83 c6 04             	add    $0x4,%esi
+ 31c:	83 c6 04             	add    $0x4,%esi
   ret_pid = waitpid(pid_a[3], &exit_status, 0);
- 20f:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
- 216:	00 
- 217:	e8 46 05 00 00       	call   762 <waitpid>
+ 31f:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
+ 326:	00 
+ 327:	e8 46 05 00 00       	call   872 <waitpid>
   printf(1, "\n This is the partent: Child# %d has exited with status %d, expected: %d\n",ret_pid, exit_status, pid_a[3] + 4);
- 21c:	8b 55 e0             	mov    -0x20(%ebp),%edx
- 21f:	89 74 24 10          	mov    %esi,0x10(%esp)
- 223:	c7 44 24 04 f8 0c 00 	movl   $0xcf8,0x4(%esp)
- 22a:	00 
- 22b:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
- 232:	89 54 24 0c          	mov    %edx,0xc(%esp)
- 236:	89 44 24 08          	mov    %eax,0x8(%esp)
- 23a:	e8 d1 05 00 00       	call   810 <printf>
+ 32c:	8b 55 e0             	mov    -0x20(%ebp),%edx
+ 32f:	89 74 24 10          	mov    %esi,0x10(%esp)
+ 333:	c7 44 24 04 4c 0e 00 	movl   $0xe4c,0x4(%esp)
+ 33a:	00 
+ 33b:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+ 342:	89 54 24 0c          	mov    %edx,0xc(%esp)
+ 346:	89 44 24 08          	mov    %eax,0x8(%esp)
+ 34a:	e8 e1 05 00 00       	call   930 <printf>
   sleep(5);
- 23f:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
- 246:	e8 07 05 00 00       	call   752 <sleep>
+ 34f:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
+ 356:	e8 07 05 00 00       	call   862 <sleep>
   printf(1, "\n This is the parent: Now waiting for child with PID# %d\n",pid_a[1]);
- 24b:	8b 75 e8             	mov    -0x18(%ebp),%esi
- 24e:	c7 44 24 04 bc 0c 00 	movl   $0xcbc,0x4(%esp)
- 255:	00 
- 256:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
- 25d:	89 74 24 08          	mov    %esi,0x8(%esp)
- 261:	e8 aa 05 00 00       	call   810 <printf>
+ 35b:	8b 75 e8             	mov    -0x18(%ebp),%esi
+ 35e:	c7 44 24 04 10 0e 00 	movl   $0xe10,0x4(%esp)
+ 365:	00 
+ 366:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+ 36d:	89 74 24 08          	mov    %esi,0x8(%esp)
+ 371:	e8 ba 05 00 00       	call   930 <printf>
   ret_pid = waitpid(pid_a[1], &exit_status, 0);
- 266:	89 5c 24 04          	mov    %ebx,0x4(%esp)
- 26a:	89 34 24             	mov    %esi,(%esp)
+ 376:	89 5c 24 04          	mov    %ebx,0x4(%esp)
+ 37a:	89 34 24             	mov    %esi,(%esp)
   printf(1, "\n This is the parent: Child# %d has exited with status %d, expected: %d\n",ret_pid, exit_status, pid_a[1] + 4);
- 26d:	83 c6 04             	add    $0x4,%esi
+ 37d:	83 c6 04             	add    $0x4,%esi
   ret_pid = waitpid(pid_a[1], &exit_status, 0);
- 270:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
- 277:	00 
- 278:	e8 e5 04 00 00       	call   762 <waitpid>
+ 380:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
+ 387:	00 
+ 388:	e8 e5 04 00 00       	call   872 <waitpid>
   printf(1, "\n This is the parent: Child# %d has exited with status %d, expected: %d\n",ret_pid, exit_status, pid_a[1] + 4);
- 27d:	8b 55 e0             	mov    -0x20(%ebp),%edx
- 280:	89 74 24 10          	mov    %esi,0x10(%esp)
- 284:	c7 44 24 04 44 0d 00 	movl   $0xd44,0x4(%esp)
- 28b:	00 
- 28c:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
- 293:	89 54 24 0c          	mov    %edx,0xc(%esp)
- 297:	89 44 24 08          	mov    %eax,0x8(%esp)
- 29b:	e8 70 05 00 00       	call   810 <printf>
+ 38d:	8b 55 e0             	mov    -0x20(%ebp),%edx
+ 390:	89 74 24 10          	mov    %esi,0x10(%esp)
+ 394:	c7 44 24 04 98 0e 00 	movl   $0xe98,0x4(%esp)
+ 39b:	00 
+ 39c:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+ 3a3:	89 54 24 0c          	mov    %edx,0xc(%esp)
+ 3a7:	89 44 24 08          	mov    %eax,0x8(%esp)
+ 3ab:	e8 80 05 00 00       	call   930 <printf>
   sleep(5);
- 2a0:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
- 2a7:	e8 a6 04 00 00       	call   752 <sleep>
+ 3b0:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
+ 3b7:	e8 a6 04 00 00       	call   862 <sleep>
   printf(1, "\n This is the parent: Now waiting for child with PID# %d\n",pid_a[2]);
- 2ac:	8b 75 ec             	mov    -0x14(%ebp),%esi
- 2af:	c7 44 24 04 bc 0c 00 	movl   $0xcbc,0x4(%esp)
- 2b6:	00 
- 2b7:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
- 2be:	89 74 24 08          	mov    %esi,0x8(%esp)
- 2c2:	e8 49 05 00 00       	call   810 <printf>
+ 3bc:	8b 75 ec             	mov    -0x14(%ebp),%esi
+ 3bf:	c7 44 24 04 10 0e 00 	movl   $0xe10,0x4(%esp)
+ 3c6:	00 
+ 3c7:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+ 3ce:	89 74 24 08          	mov    %esi,0x8(%esp)
+ 3d2:	e8 59 05 00 00       	call   930 <printf>
   ret_pid = waitpid(pid_a[2], &exit_status, 0);
- 2c7:	89 5c 24 04          	mov    %ebx,0x4(%esp)
- 2cb:	89 34 24             	mov    %esi,(%esp)
+ 3d7:	89 5c 24 04          	mov    %ebx,0x4(%esp)
+ 3db:	89 34 24             	mov    %esi,(%esp)
   printf(1, "\n This is the partent: Child# %d has exited with status %d, expected: %d\n",ret_pid, exit_status, pid_a[2] + 4);
- 2ce:	83 c6 04             	add    $0x4,%esi
+ 3de:	83 c6 04             	add    $0x4,%esi
   ret_pid = waitpid(pid_a[2], &exit_status, 0);
- 2d1:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
- 2d8:	00 
- 2d9:	e8 84 04 00 00       	call   762 <waitpid>
+ 3e1:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
+ 3e8:	00 
+ 3e9:	e8 84 04 00 00       	call   872 <waitpid>
   printf(1, "\n This is the partent: Child# %d has exited with status %d, expected: %d\n",ret_pid, exit_status, pid_a[2] + 4);
- 2de:	8b 55 e0             	mov    -0x20(%ebp),%edx
- 2e1:	89 74 24 10          	mov    %esi,0x10(%esp)
- 2e5:	c7 44 24 04 f8 0c 00 	movl   $0xcf8,0x4(%esp)
- 2ec:	00 
- 2ed:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
- 2f4:	89 54 24 0c          	mov    %edx,0xc(%esp)
- 2f8:	89 44 24 08          	mov    %eax,0x8(%esp)
- 2fc:	e8 0f 05 00 00       	call   810 <printf>
+ 3ee:	8b 55 e0             	mov    -0x20(%ebp),%edx
+ 3f1:	89 74 24 10          	mov    %esi,0x10(%esp)
+ 3f5:	c7 44 24 04 4c 0e 00 	movl   $0xe4c,0x4(%esp)
+ 3fc:	00 
+ 3fd:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+ 404:	89 54 24 0c          	mov    %edx,0xc(%esp)
+ 408:	89 44 24 08          	mov    %eax,0x8(%esp)
+ 40c:	e8 1f 05 00 00       	call   930 <printf>
   sleep(5);
- 301:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
- 308:	e8 45 04 00 00       	call   752 <sleep>
+ 411:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
+ 418:	e8 45 04 00 00       	call   862 <sleep>
   printf(1, "\n This is the parent: Now waiting for child with PID# %d\n",pid_a[0]);
- 30d:	8b 75 e4             	mov    -0x1c(%ebp),%esi
- 310:	c7 44 24 04 bc 0c 00 	movl   $0xcbc,0x4(%esp)
- 317:	00 
- 318:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
- 31f:	89 74 24 08          	mov    %esi,0x8(%esp)
- 323:	e8 e8 04 00 00       	call   810 <printf>
+ 41d:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+ 420:	c7 44 24 04 10 0e 00 	movl   $0xe10,0x4(%esp)
+ 427:	00 
+ 428:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+ 42f:	89 74 24 08          	mov    %esi,0x8(%esp)
+ 433:	e8 f8 04 00 00       	call   930 <printf>
   ret_pid = waitpid(pid_a[0], &exit_status, 0);
- 328:	89 5c 24 04          	mov    %ebx,0x4(%esp)
- 32c:	89 34 24             	mov    %esi,(%esp)
+ 438:	89 5c 24 04          	mov    %ebx,0x4(%esp)
+ 43c:	89 34 24             	mov    %esi,(%esp)
   printf(1, "\n This is the partent: Child# %d has exited with status %d, expected: %d\n",ret_pid, exit_status, pid_a[0] + 4);
- 32f:	83 c6 04             	add    $0x4,%esi
+ 43f:	83 c6 04             	add    $0x4,%esi
   ret_pid = waitpid(pid_a[0], &exit_status, 0);
- 332:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
- 339:	00 
- 33a:	e8 23 04 00 00       	call   762 <waitpid>
+ 442:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
+ 449:	00 
+ 44a:	e8 23 04 00 00       	call   872 <waitpid>
   printf(1, "\n This is the partent: Child# %d has exited with status %d, expected: %d\n",ret_pid, exit_status, pid_a[0] + 4);
- 33f:	8b 55 e0             	mov    -0x20(%ebp),%edx
- 342:	89 74 24 10          	mov    %esi,0x10(%esp)
- 346:	c7 44 24 04 f8 0c 00 	movl   $0xcf8,0x4(%esp)
- 34d:	00 
- 34e:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
- 355:	89 54 24 0c          	mov    %edx,0xc(%esp)
- 359:	89 44 24 08          	mov    %eax,0x8(%esp)
- 35d:	e8 ae 04 00 00       	call   810 <printf>
+ 44f:	8b 55 e0             	mov    -0x20(%ebp),%edx
+ 452:	89 74 24 10          	mov    %esi,0x10(%esp)
+ 456:	c7 44 24 04 4c 0e 00 	movl   $0xe4c,0x4(%esp)
+ 45d:	00 
+ 45e:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+ 465:	89 54 24 0c          	mov    %edx,0xc(%esp)
+ 469:	89 44 24 08          	mov    %eax,0x8(%esp)
+ 46d:	e8 be 04 00 00       	call   930 <printf>
   sleep(5);
- 362:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
- 369:	e8 e4 03 00 00       	call   752 <sleep>
+ 472:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
+ 479:	e8 e4 03 00 00       	call   862 <sleep>
   printf(1, "\n This is the parent: Now waiting for child with PID# %d\n",pid_a[4]);
- 36e:	8b 75 f4             	mov    -0xc(%ebp),%esi
- 371:	c7 44 24 04 bc 0c 00 	movl   $0xcbc,0x4(%esp)
- 378:	00 
- 379:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
- 380:	89 74 24 08          	mov    %esi,0x8(%esp)
- 384:	e8 87 04 00 00       	call   810 <printf>
+ 47e:	8b 75 f4             	mov    -0xc(%ebp),%esi
+ 481:	c7 44 24 04 10 0e 00 	movl   $0xe10,0x4(%esp)
+ 488:	00 
+ 489:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+ 490:	89 74 24 08          	mov    %esi,0x8(%esp)
+ 494:	e8 97 04 00 00       	call   930 <printf>
   ret_pid = waitpid(pid_a[4], &exit_status, 0);
- 389:	89 5c 24 04          	mov    %ebx,0x4(%esp)
- 38d:	89 34 24             	mov    %esi,(%esp)
+ 499:	89 5c 24 04          	mov    %ebx,0x4(%esp)
+ 49d:	89 34 24             	mov    %esi,(%esp)
   printf(1, "\n This is the parent: Child# %d has exited with status %d, expected: %d\n",ret_pid, exit_status, pid_a[4] + 4);
- 390:	83 c6 04             	add    $0x4,%esi
+ 4a0:	83 c6 04             	add    $0x4,%esi
   ret_pid = waitpid(pid_a[4], &exit_status, 0);
- 393:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
- 39a:	00 
- 39b:	e8 c2 03 00 00       	call   762 <waitpid>
+ 4a3:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
+ 4aa:	00 
+ 4ab:	e8 c2 03 00 00       	call   872 <waitpid>
   printf(1, "\n This is the parent: Child# %d has exited with status %d, expected: %d\n",ret_pid, exit_status, pid_a[4] + 4);
- 3a0:	8b 55 e0             	mov    -0x20(%ebp),%edx
- 3a3:	89 74 24 10          	mov    %esi,0x10(%esp)
- 3a7:	c7 44 24 04 44 0d 00 	movl   $0xd44,0x4(%esp)
- 3ae:	00 
- 3af:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
- 3b6:	89 54 24 0c          	mov    %edx,0xc(%esp)
- 3ba:	89 44 24 08          	mov    %eax,0x8(%esp)
- 3be:	e8 4d 04 00 00       	call   810 <printf>
+ 4b0:	8b 55 e0             	mov    -0x20(%ebp),%edx
+ 4b3:	89 74 24 10          	mov    %esi,0x10(%esp)
+ 4b7:	c7 44 24 04 98 0e 00 	movl   $0xe98,0x4(%esp)
+ 4be:	00 
+ 4bf:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+ 4c6:	89 54 24 0c          	mov    %edx,0xc(%esp)
+ 4ca:	89 44 24 08          	mov    %eax,0x8(%esp)
+ 4ce:	e8 5d 04 00 00       	call   930 <printf>
 
 
   printf(1, "\n This is the parent: Now try to wait for a invalid Number, this should not get stuck..\n");
- 3c3:	c7 44 24 04 90 0d 00 	movl   $0xd90,0x4(%esp)
- 3ca:	00 
- 3cb:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
- 3d2:	e8 39 04 00 00       	call   810 <printf>
+ 4d3:	c7 44 24 04 e4 0e 00 	movl   $0xee4,0x4(%esp)
+ 4da:	00 
+ 4db:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+ 4e2:	e8 49 04 00 00       	call   930 <printf>
   ret_pid = waitpid(9999, &exit_status, 0);
- 3d7:	89 5c 24 04          	mov    %ebx,0x4(%esp)
- 3db:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
- 3e2:	00 
- 3e3:	c7 04 24 0f 27 00 00 	movl   $0x270f,(%esp)
- 3ea:	e8 73 03 00 00       	call   762 <waitpid>
+ 4e7:	89 5c 24 04          	mov    %ebx,0x4(%esp)
+ 4eb:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
+ 4f2:	00 
+ 4f3:	c7 04 24 0f 27 00 00 	movl   $0x270f,(%esp)
+ 4fa:	e8 73 03 00 00       	call   872 <waitpid>
   printf(1, "\n This is the parent: Child# 9999 has ret code %d, expected: -1\n",ret_pid);
- 3ef:	c7 44 24 04 ec 0d 00 	movl   $0xdec,0x4(%esp)
- 3f6:	00 
- 3f7:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
- 3fe:	89 44 24 08          	mov    %eax,0x8(%esp)
- 402:	e8 09 04 00 00       	call   810 <printf>
+ 4ff:	c7 44 24 04 40 0f 00 	movl   $0xf40,0x4(%esp)
+ 506:	00 
+ 507:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+ 50e:	89 44 24 08          	mov    %eax,0x8(%esp)
+ 512:	e8 19 04 00 00       	call   930 <printf>
   //printf(1, "\n This is the parent: Child# %d has exited with status %d\n",ret_pid, exit_status);
 
   printf(1, "\n This is the parent: Now try to give invalid argument.\n");
- 407:	c7 44 24 04 30 0e 00 	movl   $0xe30,0x4(%esp)
- 40e:	00 
- 40f:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
- 416:	e8 f5 03 00 00       	call   810 <printf>
+ 517:	c7 44 24 04 84 0f 00 	movl   $0xf84,0x4(%esp)
+ 51e:	00 
+ 51f:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+ 526:	e8 05 04 00 00       	call   930 <printf>
   ret_pid = waitpid(9999, (int*) 0xffffffff, 0);
- 41b:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
- 422:	00 
- 423:	c7 44 24 04 ff ff ff 	movl   $0xffffffff,0x4(%esp)
- 42a:	ff 
- 42b:	c7 04 24 0f 27 00 00 	movl   $0x270f,(%esp)
- 432:	e8 2b 03 00 00       	call   762 <waitpid>
+ 52b:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
+ 532:	00 
+ 533:	c7 44 24 04 ff ff ff 	movl   $0xffffffff,0x4(%esp)
+ 53a:	ff 
+ 53b:	c7 04 24 0f 27 00 00 	movl   $0x270f,(%esp)
+ 542:	e8 2b 03 00 00       	call   872 <waitpid>
   printf(1, "\n This is the parent: Got ret code %d, expected: -1\n",ret_pid);
- 437:	c7 44 24 04 6c 0e 00 	movl   $0xe6c,0x4(%esp)
- 43e:	00 
- 43f:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
- 446:	89 44 24 08          	mov    %eax,0x8(%esp)
- 44a:	e8 c1 03 00 00       	call   810 <printf>
+ 547:	c7 44 24 04 c0 0f 00 	movl   $0xfc0,0x4(%esp)
+ 54e:	00 
+ 54f:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+ 556:	89 44 24 08          	mov    %eax,0x8(%esp)
+ 55a:	e8 d1 03 00 00       	call   930 <printf>
 
   return 0;
- 44f:	83 c4 40             	add    $0x40,%esp
- 452:	31 c0                	xor    %eax,%eax
- 454:	5b                   	pop    %ebx
- 455:	5e                   	pop    %esi
- 456:	5d                   	pop    %ebp
- 457:	c3                   	ret    
+ 55f:	83 c4 40             	add    $0x40,%esp
+ 562:	31 c0                	xor    %eax,%eax
+ 564:	5b                   	pop    %ebx
+ 565:	5e                   	pop    %esi
+ 566:	5d                   	pop    %ebp
+ 567:	c3                   	ret    
 			printf(1, "\n This is child with PID# %d and I will exit with status %d\n", getpid(), getpid() + 4);
- 458:	e8 e5 02 00 00       	call   742 <getpid>
- 45d:	89 c3                	mov    %eax,%ebx
- 45f:	e8 de 02 00 00       	call   742 <getpid>
- 464:	83 c3 04             	add    $0x4,%ebx
- 467:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
- 46b:	c7 44 24 04 7c 0c 00 	movl   $0xc7c,0x4(%esp)
- 472:	00 
- 473:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
- 47a:	89 44 24 08          	mov    %eax,0x8(%esp)
- 47e:	e8 8d 03 00 00       	call   810 <printf>
+ 568:	e8 e5 02 00 00       	call   852 <getpid>
+ 56d:	89 c3                	mov    %eax,%ebx
+ 56f:	e8 de 02 00 00       	call   852 <getpid>
+ 574:	83 c3 04             	add    $0x4,%ebx
+ 577:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
+ 57b:	c7 44 24 04 d0 0d 00 	movl   $0xdd0,0x4(%esp)
+ 582:	00 
+ 583:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+ 58a:	89 44 24 08          	mov    %eax,0x8(%esp)
+ 58e:	e8 9d 03 00 00       	call   930 <printf>
 			exit(getpid() + 4);
- 483:	e8 ba 02 00 00       	call   742 <getpid>
- 488:	83 c0 04             	add    $0x4,%eax
- 48b:	89 04 24             	mov    %eax,(%esp)
- 48e:	e8 2f 02 00 00       	call   6c2 <exit>
- 493:	66 90                	xchg   %ax,%ax
- 495:	66 90                	xchg   %ax,%ax
- 497:	66 90                	xchg   %ax,%ax
- 499:	66 90                	xchg   %ax,%ax
- 49b:	66 90                	xchg   %ax,%ax
- 49d:	66 90                	xchg   %ax,%ax
- 49f:	90                   	nop
-
-000004a0 <strcpy>:
+ 593:	e8 ba 02 00 00       	call   852 <getpid>
+ 598:	83 c0 04             	add    $0x4,%eax
+ 59b:	89 04 24             	mov    %eax,(%esp)
+ 59e:	e8 2f 02 00 00       	call   7d2 <exit>
+ 5a3:	66 90                	xchg   %ax,%ax
+ 5a5:	66 90                	xchg   %ax,%ax
+ 5a7:	66 90                	xchg   %ax,%ax
+ 5a9:	66 90                	xchg   %ax,%ax
+ 5ab:	66 90                	xchg   %ax,%ax
+ 5ad:	66 90                	xchg   %ax,%ax
+ 5af:	90                   	nop
+
+000005b0 <strcpy>:
 #include "user.h"
 #include "x86.h"
 
 char*
 strcpy(char *s, const char *t)
 {
- 4a0:	55                   	push   %ebp
- 4a1:	89 e5                	mov    %esp,%ebp
- 4a3:	8b 45 08             	mov    0x8(%ebp),%eax
- 4a6:	8b 4d 0c             	mov    0xc(%ebp),%ecx
- 4a9:	53                   	push   %ebx
+ 5b0:	55                   	push   %ebp
+ 5b1:	89 e5                	mov    %esp,%ebp
+ 5b3:	8b 45 08             	mov    0x8(%ebp),%eax
+ 5b6:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+ 5b9:	53                   	push   %ebx
   char *os;
 
   os = s;
   while((*s++ = *t++) != 0)
- 4aa:	89 c2                	mov    %eax,%edx
- 4ac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 4b0:	83 c1 01             	add    $0x1,%ecx
- 4b3:	0f b6 59 ff          	movzbl -0x1(%ecx),%ebx
- 4b7:	83 c2 01             	add    $0x1,%edx
- 4ba:	84 db                	test   %bl,%bl
- 4bc:	88 5a ff             	mov    %bl,-0x1(%edx)
- 4bf:	75 ef                	jne    4b0 <strcpy+0x10>
+ 5ba:	89 c2                	mov    %eax,%edx
+ 5bc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 5c0:	83 c1 01             	add    $0x1,%ecx
+ 5c3:	0f b6 59 ff          	movzbl -0x1(%ecx),%ebx
+ 5c7:	83 c2 01             	add    $0x1,%edx
+ 5ca:	84 db                	test   %bl,%bl
+ 5cc:	88 5a ff             	mov    %bl,-0x1(%edx)
+ 5cf:	75 ef                	jne    5c0 <strcpy+0x10>
     ;
   return os;
 }
- 4c1:	5b                   	pop    %ebx
- 4c2:	5d                   	pop    %ebp
- 4c3:	c3                   	ret    
- 4c4:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
- 4ca:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+ 5d1:	5b                   	pop    %ebx
+ 5d2:	5d                   	pop    %ebp
+ 5d3:	c3                   	ret    
+ 5d4:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 5da:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
 
-000004d0 <strcmp>:
+000005e0 <strcmp>:
 
 int
 strcmp(const char *p, const char *q)
 {
- 4d0:	55                   	push   %ebp
- 4d1:	89 e5                	mov    %esp,%ebp
- 4d3:	8b 55 08             	mov    0x8(%ebp),%edx
- 4d6:	53                   	push   %ebx
- 4d7:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+ 5e0:	55                   	push   %ebp
+ 5e1:	89 e5                	mov    %esp,%ebp
+ 5e3:	8b 55 08             	mov    0x8(%ebp),%edx
+ 5e6:	53                   	push   %ebx
+ 5e7:	8b 4d 0c             	mov    0xc(%ebp),%ecx
   while(*p && *p == *q)
- 4da:	0f b6 02             	movzbl (%edx),%eax
- 4dd:	84 c0                	test   %al,%al
- 4df:	74 2d                	je     50e <strcmp+0x3e>
- 4e1:	0f b6 19             	movzbl (%ecx),%ebx
- 4e4:	38 d8                	cmp    %bl,%al
- 4e6:	74 0e                	je     4f6 <strcmp+0x26>
- 4e8:	eb 2b                	jmp    515 <strcmp+0x45>
- 4ea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
- 4f0:	38 c8                	cmp    %cl,%al
- 4f2:	75 15                	jne    509 <strcmp+0x39>
+ 5ea:	0f b6 02             	movzbl (%edx),%eax
+ 5ed:	84 c0                	test   %al,%al
+ 5ef:	74 2d                	je     61e <strcmp+0x3e>
+ 5f1:	0f b6 19             	movzbl (%ecx),%ebx
+ 5f4:	38 d8                	cmp    %bl,%al
+ 5f6:	74 0e                	je     606 <strcmp+0x26>
+ 5f8:	eb 2b                	jmp    625 <strcmp+0x45>
+ 5fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 600:	38 c8                	cmp    %cl,%al
+ 602:	75 15                	jne    619 <strcmp+0x39>
     p++, q++;
- 4f4:	89 d9                	mov    %ebx,%ecx
- 4f6:	83 c2 01             	add    $0x1,%edx
+ 604:	89 d9                	mov    %ebx,%ecx
+ 606:	83 c2 01             	add    $0x1,%edx
   while(*p && *p == *q)
- 4f9:	0f b6 02             	movzbl (%edx),%eax
+ 609:	0f b6 02             	movzbl (%edx),%eax
     p++, q++;
- 4fc:	8d 59 01             	lea    0x1(%ecx),%ebx
+ 60c:	8d 59 01             	lea    0x1(%ecx),%ebx
   while(*p && *p == *q)
- 4ff:	0f b6 49 01          	movzbl 0x1(%ecx),%ecx
- 503:	84 c0                	test   %al,%al
- 505:	75 e9                	jne    4f0 <strcmp+0x20>
- 507:	31 c0                	xor    %eax,%eax
+ 60f:	0f b6 49 01          	movzbl 0x1(%ecx),%ecx
+ 613:	84 c0                	test   %al,%al
+ 615:	75 e9                	jne    600 <strcmp+0x20>
+ 617:	31 c0                	xor    %eax,%eax
   return (uchar)*p - (uchar)*q;
- 509:	29 c8                	sub    %ecx,%eax
+ 619:	29 c8                	sub    %ecx,%eax
 }
- 50b:	5b                   	pop    %ebx
- 50c:	5d                   	pop    %ebp
- 50d:	c3                   	ret    
- 50e:	0f b6 09             	movzbl (%ecx),%ecx
+ 61b:	5b                   	pop    %ebx
+ 61c:	5d                   	pop    %ebp
+ 61d:	c3                   	ret    
+ 61e:	0f b6 09             	movzbl (%ecx),%ecx
   while(*p && *p == *q)
- 511:	31 c0                	xor    %eax,%eax
- 513:	eb f4                	jmp    509 <strcmp+0x39>
- 515:	0f b6 cb             	movzbl %bl,%ecx
- 518:	eb ef                	jmp    509 <strcmp+0x39>
- 51a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 621:	31 c0                	xor    %eax,%eax
+ 623:	eb f4                	jmp    619 <strcmp+0x39>
+ 625:	0f b6 cb             	movzbl %bl,%ecx
+ 628:	eb ef                	jmp    619 <strcmp+0x39>
+ 62a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 
-00000520 <strlen>:
+00000630 <strlen>:
 
 uint
 strlen(const char *s)
 {
- 520:	55                   	push   %ebp
- 521:	89 e5                	mov    %esp,%ebp
- 523:	8b 4d 08             	mov    0x8(%ebp),%ecx
+ 630:	55                   	push   %ebp
+ 631:	89 e5                	mov    %esp,%ebp
+ 633:	8b 4d 08             	mov    0x8(%ebp),%ecx
   int n;
 
   for(n = 0; s[n]; n++)
- 526:	80 39 00             	cmpb   $0x0,(%ecx)
- 529:	74 12                	je     53d <strlen+0x1d>
- 52b:	31 d2                	xor    %edx,%edx
- 52d:	8d 76 00             	lea    0x0(%esi),%esi
- 530:	83 c2 01             	add    $0x1,%edx
- 533:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)
- 537:	89 d0                	mov    %edx,%eax
- 539:	75 f5                	jne    530 <strlen+0x10>
+ 636:	80 39 00             	cmpb   $0x0,(%ecx)
+ 639:	74 12                	je     64d <strlen+0x1d>
+ 63b:	31 d2                	xor    %edx,%edx
+ 63d:	8d 76 00             	lea    0x0(%esi),%esi
+ 640:	83 c2 01             	add    $0x1,%edx
+ 643:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)
+ 647:	89 d0                	mov    %edx,%eax
+ 649:	75 f5                	jne    640 <strlen+0x10>
     ;
   return n;
 }
- 53b:	5d                   	pop    %ebp
- 53c:	c3                   	ret    
+ 64b:	5d                   	pop    %ebp
+ 64c:	c3                   	ret    
   for(n = 0; s[n]; n++)
- 53d:	31 c0                	xor    %eax,%eax
+ 64d:	31 c0                	xor    %eax,%eax
 }
- 53f:	5d                   	pop    %ebp
- 540:	c3                   	ret    
- 541:	eb 0d                	jmp    550 <memset>
- 543:	90                   	nop
- 544:	90                   	nop
- 545:	90                   	nop
- 546:	90                   	nop
- 547:	90                   	nop
- 548:	90                   	nop
- 549:	90                   	nop
- 54a:	90                   	nop
- 54b:	90                   	nop
- 54c:	90                   	nop
- 54d:	90                   	nop
- 54e:	90                   	nop
- 54f:	90                   	nop
-
-00000550 <memset>:
+ 64f:	5d                   	pop    %ebp
+ 650:	c3                   	ret    
+ 651:	eb 0d                	jmp    660 <memset>
+ 653:	90                   	nop
+ 654:	90                   	nop
+ 655:	90                   	nop
+ 656:	90                   	nop
+ 657:	90                   	nop
+ 658:	90                   	nop
+ 659:	90                   	nop
+ 65a:	90                   	nop
+ 65b:	90                   	nop
+ 65c:	90                   	nop
+ 65d:	90                   	nop
+ 65e:	90                   	nop
+ 65f:	90                   	nop
+
+00000660 <memset>:
 
 void*
 memset(void *dst, int c, uint n)
 {
- 550:	55                   	push   %ebp
- 551:	89 e5                	mov    %esp,%ebp
- 553:	8b 55 08             	mov    0x8(%ebp),%edx
- 556:	57                   	push   %edi
+ 660:	55                   	push   %ebp
+ 661:	89 e5                	mov    %esp,%ebp
+ 663:	8b 55 08             	mov    0x8(%ebp),%edx
+ 666:	57                   	push   %edi
 }
 
 static inline void
 stosb(void *addr, int data, int cnt)
 {
   asm volatile("cld; rep stosb" :
- 557:	8b 4d 10             	mov    0x10(%ebp),%ecx
- 55a:	8b 45 0c             	mov    0xc(%ebp),%eax
- 55d:	89 d7                	mov    %edx,%edi
- 55f:	fc                   	cld    
- 560:	f3 aa                	rep stos %al,%es:(%edi)
+ 667:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 66a:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 66d:	89 d7                	mov    %edx,%edi
+ 66f:	fc                   	cld    
+ 670:	f3 aa                	rep stos %al,%es:(%edi)
   stosb(dst, c, n);
   return dst;
 }
- 562:	89 d0                	mov    %edx,%eax
- 564:	5f                   	pop    %edi
- 565:	5d                   	pop    %ebp
- 566:	c3                   	ret    
- 567:	89 f6                	mov    %esi,%esi
- 569:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+ 672:	89 d0                	mov    %edx,%eax
+ 674:	5f                   	pop    %edi
+ 675:	5d                   	pop    %ebp
+ 676:	c3                   	ret    
+ 677:	89 f6                	mov    %esi,%esi
+ 679:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
 
-00000570 <strchr>:
+00000680 <strchr>:
 
 char*
 strchr(const char *s, char c)
 {
- 570:	55                   	push   %ebp
- 571:	89 e5                	mov    %esp,%ebp
- 573:	8b 45 08             	mov    0x8(%ebp),%eax
- 576:	53                   	push   %ebx
- 577:	8b 55 0c             	mov    0xc(%ebp),%edx
+ 680:	55                   	push   %ebp
+ 681:	89 e5                	mov    %esp,%ebp
+ 683:	8b 45 08             	mov    0x8(%ebp),%eax
+ 686:	53                   	push   %ebx
+ 687:	8b 55 0c             	mov    0xc(%ebp),%edx
   for(; *s; s++)
- 57a:	0f b6 18             	movzbl (%eax),%ebx
- 57d:	84 db                	test   %bl,%bl
- 57f:	74 1d                	je     59e <strchr+0x2e>
+ 68a:	0f b6 18             	movzbl (%eax),%ebx
+ 68d:	84 db                	test   %bl,%bl
+ 68f:	74 1d                	je     6ae <strchr+0x2e>
     if(*s == c)
- 581:	38 d3                	cmp    %dl,%bl
- 583:	89 d1                	mov    %edx,%ecx
- 585:	75 0d                	jne    594 <strchr+0x24>
- 587:	eb 17                	jmp    5a0 <strchr+0x30>
- 589:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 590:	38 ca                	cmp    %cl,%dl
- 592:	74 0c                	je     5a0 <strchr+0x30>
+ 691:	38 d3                	cmp    %dl,%bl
+ 693:	89 d1                	mov    %edx,%ecx
+ 695:	75 0d                	jne    6a4 <strchr+0x24>
+ 697:	eb 17                	jmp    6b0 <strchr+0x30>
+ 699:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 6a0:	38 ca                	cmp    %cl,%dl
+ 6a2:	74 0c                	je     6b0 <strchr+0x30>
   for(; *s; s++)
- 594:	83 c0 01             	add    $0x1,%eax
- 597:	0f b6 10             	movzbl (%eax),%edx
- 59a:	84 d2                	test   %dl,%dl
- 59c:	75 f2                	jne    590 <strchr+0x20>
+ 6a4:	83 c0 01             	add    $0x1,%eax
+ 6a7:	0f b6 10             	movzbl (%eax),%edx
+ 6aa:	84 d2                	test   %dl,%dl
+ 6ac:	75 f2                	jne    6a0 <strchr+0x20>
       return (char*)s;
   return 0;
- 59e:	31 c0                	xor    %eax,%eax
+ 6ae:	31 c0                	xor    %eax,%eax
 }
- 5a0:	5b                   	pop    %ebx
- 5a1:	5d                   	pop    %ebp
- 5a2:	c3                   	ret    
- 5a3:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
- 5a9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+ 6b0:	5b                   	pop    %ebx
+ 6b1:	5d                   	pop    %ebp
+ 6b2:	c3                   	ret    
+ 6b3:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 6b9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
 
-000005b0 <gets>:
+000006c0 <gets>:
 
 char*
 gets(char *buf, int max)
 {
- 5b0:	55                   	push   %ebp
- 5b1:	89 e5                	mov    %esp,%ebp
- 5b3:	57                   	push   %edi
- 5b4:	56                   	push   %esi
+ 6c0:	55                   	push   %ebp
+ 6c1:	89 e5                	mov    %esp,%ebp
+ 6c3:	57                   	push   %edi
+ 6c4:	56                   	push   %esi
   int i, cc;
   char c;
 
   for(i=0; i+1 < max; ){
- 5b5:	31 f6                	xor    %esi,%esi
+ 6c5:	31 f6                	xor    %esi,%esi
 {
- 5b7:	53                   	push   %ebx
- 5b8:	83 ec 2c             	sub    $0x2c,%esp
+ 6c7:	53                   	push   %ebx
+ 6c8:	83 ec 2c             	sub    $0x2c,%esp
     cc = read(0, &c, 1);
- 5bb:	8d 7d e7             	lea    -0x19(%ebp),%edi
+ 6cb:	8d 7d e7             	lea    -0x19(%ebp),%edi
   for(i=0; i+1 < max; ){
- 5be:	eb 31                	jmp    5f1 <gets+0x41>
+ 6ce:	eb 31                	jmp    701 <gets+0x41>
     cc = read(0, &c, 1);
- 5c0:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
- 5c7:	00 
- 5c8:	89 7c 24 04          	mov    %edi,0x4(%esp)
- 5cc:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
- 5d3:	e8 02 01 00 00       	call   6da <read>
+ 6d0:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+ 6d7:	00 
+ 6d8:	89 7c 24 04          	mov    %edi,0x4(%esp)
+ 6dc:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+ 6e3:	e8 02 01 00 00       	call   7ea <read>
     if(cc < 1)
- 5d8:	85 c0                	test   %eax,%eax
- 5da:	7e 1d                	jle    5f9 <gets+0x49>
+ 6e8:	85 c0                	test   %eax,%eax
+ 6ea:	7e 1d                	jle    709 <gets+0x49>
       break;
     buf[i++] = c;
- 5dc:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 6ec:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
   for(i=0; i+1 < max; ){
- 5e0:	89 de                	mov    %ebx,%esi
+ 6f0:	89 de                	mov    %ebx,%esi
     buf[i++] = c;
- 5e2:	8b 55 08             	mov    0x8(%ebp),%edx
+ 6f2:	8b 55 08             	mov    0x8(%ebp),%edx
     if(c == '\n' || c == '\r')
- 5e5:	3c 0d                	cmp    $0xd,%al
+ 6f5:	3c 0d                	cmp    $0xd,%al
     buf[i++] = c;
- 5e7:	88 44 1a ff          	mov    %al,-0x1(%edx,%ebx,1)
+ 6f7:	88 44 1a ff          	mov    %al,-0x1(%edx,%ebx,1)
     if(c == '\n' || c == '\r')
- 5eb:	74 0c                	je     5f9 <gets+0x49>
- 5ed:	3c 0a                	cmp    $0xa,%al
- 5ef:	74 08                	je     5f9 <gets+0x49>
+ 6fb:	74 0c                	je     709 <gets+0x49>
+ 6fd:	3c 0a                	cmp    $0xa,%al
+ 6ff:	74 08                	je     709 <gets+0x49>
   for(i=0; i+1 < max; ){
- 5f1:	8d 5e 01             	lea    0x1(%esi),%ebx
- 5f4:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
- 5f7:	7c c7                	jl     5c0 <gets+0x10>
+ 701:	8d 5e 01             	lea    0x1(%esi),%ebx
+ 704:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 707:	7c c7                	jl     6d0 <gets+0x10>
       break;
   }
   buf[i] = '\0';
- 5f9:	8b 45 08             	mov    0x8(%ebp),%eax
- 5fc:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)
+ 709:	8b 45 08             	mov    0x8(%ebp),%eax
+ 70c:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)
   return buf;
 }
- 600:	83 c4 2c             	add    $0x2c,%esp
- 603:	5b                   	pop    %ebx
- 604:	5e                   	pop    %esi
- 605:	5f                   	pop    %edi
- 606:	5d                   	pop    %ebp
- 607:	c3                   	ret    
- 608:	90                   	nop
- 609:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 710:	83 c4 2c             	add    $0x2c,%esp
+ 713:	5b                   	pop    %ebx
+ 714:	5e                   	pop    %esi
+ 715:	5f                   	pop    %edi
+ 716:	5d                   	pop    %ebp
+ 717:	c3                   	ret    
+ 718:	90                   	nop
+ 719:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 
-00000610 <stat>:
+00000720 <stat>:
 
 int
 stat(const char *n, struct stat *st)
 {
- 610:	55                   	push   %ebp
- 611:	89 e5                	mov    %esp,%ebp
- 613:	56                   	push   %esi
- 614:	53                   	push   %ebx
- 615:	83 ec 10             	sub    $0x10,%esp
+ 720:	55                   	push   %ebp
+ 721:	89 e5                	mov    %esp,%ebp
+ 723:	56                   	push   %esi
+ 724:	53                   	push   %ebx
+ 725:	83 ec 10             	sub    $0x10,%esp
   int fd;
   int r;
 
   fd = open(n, O_RDONLY);
- 618:	8b 45 08             	mov    0x8(%ebp),%eax
- 61b:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
- 622:	00 
- 623:	89 04 24             	mov    %eax,(%esp)
- 626:	e8 d7 00 00 00       	call   702 <open>
+ 728:	8b 45 08             	mov    0x8(%ebp),%eax
+ 72b:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
+ 732:	00 
+ 733:	89 04 24             	mov    %eax,(%esp)
+ 736:	e8 d7 00 00 00       	call   812 <open>
   if(fd < 0)
- 62b:	85 c0                	test   %eax,%eax
+ 73b:	85 c0                	test   %eax,%eax
   fd = open(n, O_RDONLY);
- 62d:	89 c3                	mov    %eax,%ebx
+ 73d:	89 c3                	mov    %eax,%ebx
   if(fd < 0)
- 62f:	78 27                	js     658 <stat+0x48>
+ 73f:	78 27                	js     768 <stat+0x48>
     return -1;
   r = fstat(fd, st);
- 631:	8b 45 0c             	mov    0xc(%ebp),%eax
- 634:	89 1c 24             	mov    %ebx,(%esp)
- 637:	89 44 24 04          	mov    %eax,0x4(%esp)
- 63b:	e8 da 00 00 00       	call   71a <fstat>
+ 741:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 744:	89 1c 24             	mov    %ebx,(%esp)
+ 747:	89 44 24 04          	mov    %eax,0x4(%esp)
+ 74b:	e8 da 00 00 00       	call   82a <fstat>
   close(fd);
- 640:	89 1c 24             	mov    %ebx,(%esp)
+ 750:	89 1c 24             	mov    %ebx,(%esp)
   r = fstat(fd, st);
- 643:	89 c6                	mov    %eax,%esi
+ 753:	89 c6                	mov    %eax,%esi
   close(fd);
- 645:	e8 a0 00 00 00       	call   6ea <close>
+ 755:	e8 a0 00 00 00       	call   7fa <close>
   return r;
- 64a:	89 f0                	mov    %esi,%eax
+ 75a:	89 f0                	mov    %esi,%eax
 }
- 64c:	83 c4 10             	add    $0x10,%esp
- 64f:	5b                   	pop    %ebx
- 650:	5e                   	pop    %esi
- 651:	5d                   	pop    %ebp
- 652:	c3                   	ret    
- 653:	90                   	nop
- 654:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 75c:	83 c4 10             	add    $0x10,%esp
+ 75f:	5b                   	pop    %ebx
+ 760:	5e                   	pop    %esi
+ 761:	5d                   	pop    %ebp
+ 762:	c3                   	ret    
+ 763:	90                   	nop
+ 764:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     return -1;
- 658:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
- 65d:	eb ed                	jmp    64c <stat+0x3c>
- 65f:	90                   	nop
+ 768:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+ 76d:	eb ed                	jmp    75c <stat+0x3c>
+ 76f:	90                   	nop
 
-00000660 <atoi>:
+00000770 <atoi>:
 
 int
 atoi(const char *s)
 {
- 660:	55                   	push   %ebp
- 661:	89 e5                	mov    %esp,%ebp
- 663:	8b 4d 08             	mov    0x8(%ebp),%ecx
- 666:	53                   	push   %ebx
+ 770:	55                   	push   %ebp
+ 771:	89 e5                	mov    %esp,%ebp
+ 773:	8b 4d 08             	mov    0x8(%ebp),%ecx
+ 776:	53                   	push   %ebx
   int n;
 
   n = 0;
   while('0' <= *s && *s <= '9')
- 667:	0f be 11             	movsbl (%ecx),%edx
- 66a:	8d 42 d0             	lea    -0x30(%edx),%eax
- 66d:	3c 09                	cmp    $0x9,%al
+ 777:	0f be 11             	movsbl (%ecx),%edx
+ 77a:	8d 42 d0             	lea    -0x30(%edx),%eax
+ 77d:	3c 09                	cmp    $0x9,%al
   n = 0;
- 66f:	b8 00 00 00 00       	mov    $0x0,%eax
+ 77f:	b8 00 00 00 00       	mov    $0x0,%eax
   while('0' <= *s && *s <= '9')
- 674:	77 17                	ja     68d <atoi+0x2d>
- 676:	66 90                	xchg   %ax,%ax
+ 784:	77 17                	ja     79d <atoi+0x2d>
+ 786:	66 90                	xchg   %ax,%ax
     n = n*10 + *s++ - '0';
- 678:	83 c1 01             	add    $0x1,%ecx
- 67b:	8d 04 80             	lea    (%eax,%eax,4),%eax
- 67e:	8d 44 42 d0          	lea    -0x30(%edx,%eax,2),%eax
+ 788:	83 c1 01             	add    $0x1,%ecx
+ 78b:	8d 04 80             	lea    (%eax,%eax,4),%eax
+ 78e:	8d 44 42 d0          	lea    -0x30(%edx,%eax,2),%eax
   while('0' <= *s && *s <= '9')
- 682:	0f be 11             	movsbl (%ecx),%edx
- 685:	8d 5a d0             	lea    -0x30(%edx),%ebx
- 688:	80 fb 09             	cmp    $0x9,%bl
- 68b:	76 eb                	jbe    678 <atoi+0x18>
+ 792:	0f be 11             	movsbl (%ecx),%edx
+ 795:	8d 5a d0             	lea    -0x30(%edx),%ebx
+ 798:	80 fb 09             	cmp    $0x9,%bl
+ 79b:	76 eb                	jbe    788 <atoi+0x18>
   return n;
 }
- 68d:	5b                   	pop    %ebx
- 68e:	5d                   	pop    %ebp
- 68f:	c3                   	ret    
+ 79d:	5b                   	pop    %ebx
+ 79e:	5d                   	pop    %ebp
+ 79f:	c3                   	ret    
 
-00000690 <memmove>:
+000007a0 <memmove>:
 
 void*
 memmove(void *vdst, const void *vsrc, int n)
 {
- 690:	55                   	push   %ebp
+ 7a0:	55                   	push   %ebp
   char *dst;
   const char *src;
 
   dst = vdst;
   src = vsrc;
   while(n-- > 0)
- 691:	31 d2                	xor    %edx,%edx
+ 7a1:	31 d2                	xor    %edx,%edx
 {
- 693:	89 e5                	mov    %esp,%ebp
- 695:	56                   	push   %esi
- 696:	8b 45 08             	mov    0x8(%ebp),%eax
- 699:	53                   	push   %ebx
- 69a:	8b 5d 10             	mov    0x10(%ebp),%ebx
- 69d:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 7a3:	89 e5                	mov    %esp,%ebp
+ 7a5:	56                   	push   %esi
+ 7a6:	8b 45 08             	mov    0x8(%ebp),%eax
+ 7a9:	53                   	push   %ebx
+ 7aa:	8b 5d 10             	mov    0x10(%ebp),%ebx
+ 7ad:	8b 75 0c             	mov    0xc(%ebp),%esi
   while(n-- > 0)
- 6a0:	85 db                	test   %ebx,%ebx
- 6a2:	7e 12                	jle    6b6 <memmove+0x26>
- 6a4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 7b0:	85 db                	test   %ebx,%ebx
+ 7b2:	7e 12                	jle    7c6 <memmove+0x26>
+ 7b4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     *dst++ = *src++;
- 6a8:	0f b6 0c 16          	movzbl (%esi,%edx,1),%ecx
- 6ac:	88 0c 10             	mov    %cl,(%eax,%edx,1)
- 6af:	83 c2 01             	add    $0x1,%edx
+ 7b8:	0f b6 0c 16          	movzbl (%esi,%edx,1),%ecx
+ 7bc:	88 0c 10             	mov    %cl,(%eax,%edx,1)
+ 7bf:	83 c2 01             	add    $0x1,%edx
   while(n-- > 0)
- 6b2:	39 da                	cmp    %ebx,%edx
- 6b4:	75 f2                	jne    6a8 <memmove+0x18>
+ 7c2:	39 da                	cmp    %ebx,%edx
+ 7c4:	75 f2                	jne    7b8 <memmove+0x18>
   return vdst;
 }
- 6b6:	5b                   	pop    %ebx
- 6b7:	5e                   	pop    %esi
- 6b8:	5d                   	pop    %ebp
- 6b9:	c3                   	ret    
+ 7c6:	5b                   	pop    %ebx
+ 7c7:	5e                   	pop    %esi
+ 7c8:	5d                   	pop    %ebp
+ 7c9:	c3                   	ret    
 
-000006ba <fork>:
+000007ca <fork>:
   name: \
     movl $SYS_ ## name, %eax; \
     int $T_SYSCALL; \
     ret
 
 SYSCALL(fork)
- 6ba:	b8 01 00 00 00       	mov    $0x1,%eax
- 6bf:	cd 40                	int    $0x40
- 6c1:	c3                   	ret    
+ 7ca:	b8 01 00 00 00       	mov    $0x1,%eax
+ 7cf:	cd 40                	int    $0x40
+ 7d1:	c3                   	ret    
 
-000006c2 <exit>:
+000007d2 <exit>:
 SYSCALL(exit)
- 6c2:	b8 02 00 00 00       	mov    $0x2,%eax
- 6c7:	cd 40                	int    $0x40
- 6c9:	c3                   	ret    
+ 7d2:	b8 02 00 00 00       	mov    $0x2,%eax
+ 7d7:	cd 40                	int    $0x40
+ 7d9:	c3                   	ret    
 
-000006ca <wait>:
+000007da <wait>:
 SYSCALL(wait)
- 6ca:	b8 03 00 00 00       	mov    $0x3,%eax
- 6cf:	cd 40                	int    $0x40
- 6d1:	c3                   	ret    
+ 7da:	b8 03 00 00 00       	mov    $0x3,%eax
+ 7df:	cd 40                	int    $0x40
+ 7e1:	c3                   	ret    
 
-000006d2 <pipe>:
+000007e2 <pipe>:
 SYSCALL(pipe)
- 6d2:	b8 04 00 00 00       	mov    $0x4,%eax
- 6d7:	cd 40                	int    $0x40
- 6d9:	c3                   	ret    
+ 7e2:	b8 04 00 00 00       	mov    $0x4,%eax
+ 7e7:	cd 40                	int    $0x40
+ 7e9:	c3                   	ret    
 
-000006da <read>:
+000007ea <read>:
 SYSCALL(read)
- 6da:	b8 05 00 00 00       	mov    $0x5,%eax
- 6df:	cd 40                	int    $0x40
- 6e1:	c3                   	ret    
+ 7ea:	b8 05 00 00 00       	mov    $0x5,%eax
+ 7ef:	cd 40                	int    $0x40
+ 7f1:	c3                   	ret    
 
-000006e2 <write>:
+000007f2 <write>:
 SYSCALL(write)
- 6e2:	b8 10 00 00 00       	mov    $0x10,%eax
- 6e7:	cd 40                	int    $0x40
- 6e9:	c3                   	ret    
+ 7f2:	b8 10 00 00 00       	mov    $0x10,%eax
+ 7f7:	cd 40                	int    $0x40
+ 7f9:	c3                   	ret    
 
-000006ea <close>:
+000007fa <close>:
 SYSCALL(close)
- 6ea:	b8 15 00 00 00       	mov    $0x15,%eax
- 6ef:	cd 40                	int    $0x40
- 6f1:	c3                   	ret    
+ 7fa:	b8 15 00 00 00       	mov    $0x15,%eax
+ 7ff:	cd 40                	int    $0x40
+ 801:	c3                   	ret    
 
-000006f2 <kill>:
+00000802 <kill>:
 SYSCALL(kill)
- 6f2:	b8 06 00 00 00       	mov    $0x6,%eax
- 6f7:	cd 40                	int    $0x40
- 6f9:	c3                   	ret    
+ 802:	b8 06 00 00 00       	mov    $0x6,%eax
+ 807:	cd 40                	int    $0x40
+ 809:	c3                   	ret    
 
-000006fa <exec>:
+0000080a <exec>:
 SYSCALL(exec)
- 6fa:	b8 07 00 00 00       	mov    $0x7,%eax
- 6ff:	cd 40                	int    $0x40
- 701:	c3                   	ret    
+ 80a:	b8 07 00 00 00       	mov    $0x7,%eax
+ 80f:	cd 40                	int    $0x40
+ 811:	c3                   	ret    
 
-00000702 <open>:
+00000812 <open>:
 SYSCALL(open)
- 702:	b8 0f 00 00 00       	mov    $0xf,%eax
- 707:	cd 40                	int    $0x40
- 709:	c3                   	ret    
+ 812:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 817:	cd 40                	int    $0x40
+ 819:	c3                   	ret    
 
-0000070a <mknod>:
+0000081a <mknod>:
 SYSCALL(mknod)
- 70a:	b8 11 00 00 00       	mov    $0x11,%eax
- 70f:	cd 40                	int    $0x40
- 711:	c3                   	ret    
+ 81a:	b8 11 00 00 00       	mov    $0x11,%eax
+ 81f:	cd 40                	int    $0x40
+ 821:	c3                   	ret    
 
-00000712 <unlink>:
+00000822 <unlink>:
 SYSCALL(unlink)
- 712:	b8 12 00 00 00       	mov    $0x12,%eax
- 717:	cd 40                	int    $0x40
- 719:	c3                   	ret    
+ 822:	b8 12 00 00 00       	mov    $0x12,%eax
+ 827:	cd 40                	int    $0x40
+ 829:	c3                   	ret    
 
-0000071a <fstat>:
+0000082a <fstat>:
 SYSCALL(fstat)
- 71a:	b8 08 00 00 00       	mov    $0x8,%eax
- 71f:	cd 40                	int    $0x40
- 721:	c3                   	ret    
+ 82a:	b8 08 00 00 00       	mov    $0x8,%eax
+ 82f:	cd 40                	int    $0x40
+ 831:	c3                   	ret    
 
-00000722 <link>:
+00000832 <link>:
 SYSCALL(link)
- 722:	b8 13 00 00 00       	mov    $0x13,%eax
- 727:	cd 40                	int    $0x40
- 729:	c3                   	ret    
+ 832:	b8 13 00 00 00       	mov    $0x13,%eax
+ 837:	cd 40                	int    $0x40
+ 839:	c3                   	ret    
 
-0000072a <mkdir>:
+0000083a <mkdir>:
 SYSCALL(mkdir)
- 72a:	b8 14 00 00 00       	mov    $0x14,%eax
- 72f:	cd 40                	int    $0x40
- 731:	c3                   	ret    
+ 83a:	b8 14 00 00 00       	mov    $0x14,%eax
+ 83f:	cd 40                	int    $0x40
+ 841:	c3                   	ret    
 
-00000732 <chdir>:
+00000842 <chdir>:
 SYSCALL(chdir)
- 732:	b8 09 00 00 00       	mov    $0x9,%eax
- 737:	cd 40                	int    $0x40
- 739:	c3                   	ret    
+ 842:	b8 09 00 00 00       	mov    $0x9,%eax
+ 847:	cd 40                	int    $0x40
+ 849:	c3                   	ret    
 
-0000073a <dup>:
+0000084a <dup>:
 SYSCALL(dup)
- 73a:	b8 0a 00 00 00       	mov    $0xa,%eax
- 73f:	cd 40                	int    $0x40
- 741:	c3                   	ret    
+ 84a:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 84f:	cd 40                	int    $0x40
+ 851:	c3                   	ret    
 
-00000742 <getpid>:
+00000852 <getpid>:
 SYSCALL(getpid)
- 742:	b8 0b 00 00 00       	mov    $0xb,%eax
- 747:	cd 40                	int    $0x40
- 749:	c3                   	ret    
+ 852:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 857:	cd 40                	int    $0x40
+ 859:	c3                   	ret    
 
-0000074a <sbrk>:
+0000085a <sbrk>:
 SYSCALL(sbrk)
- 74a:	b8 0c 00 00 00       	mov    $0xc,%eax
- 74f:	cd 40                	int    $0x40
- 751:	c3                   	ret    
+ 85a:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 85f:	cd 40                	int    $0x40
+ 861:	c3                   	ret    
 
-00000752 <sleep>:
+00000862 <sleep>:
 SYSCALL(sleep)
- 752:	b8 0d 00 00 00       	mov    $0xd,%eax
- 757:	cd 40                	int    $0x40
- 759:	c3                   	ret    
+ 862:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 867:	cd 40                	int    $0x40
+ 869:	c3                   	ret    
 
-0000075a <uptime>:
+0000086a <uptime>:
 SYSCALL(uptime)
- 75a:	b8 0e 00 00 00       	mov    $0xe,%eax
- 75f:	cd 40                	int    $0x40
- 761:	c3                   	ret    
-
-00000762 <waitpid>:
- 762:	b8 16 00 00 00       	mov    $0x16,%eax
- 767:	cd 40                	int    $0x40
- 769:	c3                   	ret    
- 76a:	66 90                	xchg   %ax,%ax
- 76c:	66 90                	xchg   %ax,%ax
- 76e:	66 90                	xchg   %ax,%ax
-
-00000770 <printint>:
+ 86a:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 86f:	cd 40                	int    $0x40
+ 871:	c3                   	ret    
+
+00000872 <waitpid>:
+SYSCALL(waitpid)
+ 872:	b8 16 00 00 00       	mov    $0x16,%eax
+ 877:	cd 40                	int    $0x40
+ 879:	c3                   	ret    
+
+0000087a <setPrior>:
+SYSCALL(setPrior)
+ 87a:	b8 17 00 00 00       	mov    $0x17,%eax
+ 87f:	cd 40                	int    $0x40
+ 881:	c3                   	ret    
+
+00000882 <getPrior>:
+ 882:	b8 18 00 00 00       	mov    $0x18,%eax
+ 887:	cd 40                	int    $0x40
+ 889:	c3                   	ret    
+ 88a:	66 90                	xchg   %ax,%ax
+ 88c:	66 90                	xchg   %ax,%ax
+ 88e:	66 90                	xchg   %ax,%ax
+
+00000890 <printint>:
   write(fd, &c, 1);
 }
 
 static void
 printint(int fd, int xx, int base, int sgn)
 {
- 770:	55                   	push   %ebp
- 771:	89 e5                	mov    %esp,%ebp
- 773:	57                   	push   %edi
- 774:	56                   	push   %esi
- 775:	89 c6                	mov    %eax,%esi
- 777:	53                   	push   %ebx
- 778:	83 ec 4c             	sub    $0x4c,%esp
+ 890:	55                   	push   %ebp
+ 891:	89 e5                	mov    %esp,%ebp
+ 893:	57                   	push   %edi
+ 894:	56                   	push   %esi
+ 895:	89 c6                	mov    %eax,%esi
+ 897:	53                   	push   %ebx
+ 898:	83 ec 4c             	sub    $0x4c,%esp
   char buf[16];
   int i, neg;
   uint x;
 
   neg = 0;
   if(sgn && xx < 0){
- 77b:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 77e:	85 db                	test   %ebx,%ebx
- 780:	74 09                	je     78b <printint+0x1b>
- 782:	89 d0                	mov    %edx,%eax
- 784:	c1 e8 1f             	shr    $0x1f,%eax
- 787:	84 c0                	test   %al,%al
- 789:	75 75                	jne    800 <printint+0x90>
+ 89b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 89e:	85 db                	test   %ebx,%ebx
+ 8a0:	74 09                	je     8ab <printint+0x1b>
+ 8a2:	89 d0                	mov    %edx,%eax
+ 8a4:	c1 e8 1f             	shr    $0x1f,%eax
+ 8a7:	84 c0                	test   %al,%al
+ 8a9:	75 75                	jne    920 <printint+0x90>
     neg = 1;
     x = -xx;
   } else {
     x = xx;
- 78b:	89 d0                	mov    %edx,%eax
+ 8ab:	89 d0                	mov    %edx,%eax
   neg = 0;
- 78d:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
- 794:	89 75 c0             	mov    %esi,-0x40(%ebp)
+ 8ad:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
+ 8b4:	89 75 c0             	mov    %esi,-0x40(%ebp)
   }
 
   i = 0;
- 797:	31 ff                	xor    %edi,%edi
- 799:	89 ce                	mov    %ecx,%esi
- 79b:	8d 5d d7             	lea    -0x29(%ebp),%ebx
- 79e:	eb 02                	jmp    7a2 <printint+0x32>
+ 8b7:	31 ff                	xor    %edi,%edi
+ 8b9:	89 ce                	mov    %ecx,%esi
+ 8bb:	8d 5d d7             	lea    -0x29(%ebp),%ebx
+ 8be:	eb 02                	jmp    8c2 <printint+0x32>
   do{
     buf[i++] = digits[x % base];
- 7a0:	89 cf                	mov    %ecx,%edi
- 7a2:	31 d2                	xor    %edx,%edx
- 7a4:	f7 f6                	div    %esi
- 7a6:	8d 4f 01             	lea    0x1(%edi),%ecx
- 7a9:	0f b6 92 2e 0f 00 00 	movzbl 0xf2e(%edx),%edx
+ 8c0:	89 cf                	mov    %ecx,%edi
+ 8c2:	31 d2                	xor    %edx,%edx
+ 8c4:	f7 f6                	div    %esi
+ 8c6:	8d 4f 01             	lea    0x1(%edi),%ecx
+ 8c9:	0f b6 92 6f 10 00 00 	movzbl 0x106f(%edx),%edx
   }while((x /= base) != 0);
- 7b0:	85 c0                	test   %eax,%eax
+ 8d0:	85 c0                	test   %eax,%eax
     buf[i++] = digits[x % base];
- 7b2:	88 14 0b             	mov    %dl,(%ebx,%ecx,1)
+ 8d2:	88 14 0b             	mov    %dl,(%ebx,%ecx,1)
   }while((x /= base) != 0);
- 7b5:	75 e9                	jne    7a0 <printint+0x30>
+ 8d5:	75 e9                	jne    8c0 <printint+0x30>
   if(neg)
- 7b7:	8b 55 c4             	mov    -0x3c(%ebp),%edx
+ 8d7:	8b 55 c4             	mov    -0x3c(%ebp),%edx
     buf[i++] = digits[x % base];
- 7ba:	89 c8                	mov    %ecx,%eax
- 7bc:	8b 75 c0             	mov    -0x40(%ebp),%esi
+ 8da:	89 c8                	mov    %ecx,%eax
+ 8dc:	8b 75 c0             	mov    -0x40(%ebp),%esi
   if(neg)
- 7bf:	85 d2                	test   %edx,%edx
- 7c1:	74 08                	je     7cb <printint+0x5b>
+ 8df:	85 d2                	test   %edx,%edx
+ 8e1:	74 08                	je     8eb <printint+0x5b>
     buf[i++] = '-';
- 7c3:	8d 4f 02             	lea    0x2(%edi),%ecx
- 7c6:	c6 44 05 d8 2d       	movb   $0x2d,-0x28(%ebp,%eax,1)
+ 8e3:	8d 4f 02             	lea    0x2(%edi),%ecx
+ 8e6:	c6 44 05 d8 2d       	movb   $0x2d,-0x28(%ebp,%eax,1)
 
   while(--i >= 0)
- 7cb:	8d 79 ff             	lea    -0x1(%ecx),%edi
- 7ce:	66 90                	xchg   %ax,%ax
- 7d0:	0f b6 44 3d d8       	movzbl -0x28(%ebp,%edi,1),%eax
- 7d5:	83 ef 01             	sub    $0x1,%edi
+ 8eb:	8d 79 ff             	lea    -0x1(%ecx),%edi
+ 8ee:	66 90                	xchg   %ax,%ax
+ 8f0:	0f b6 44 3d d8       	movzbl -0x28(%ebp,%edi,1),%eax
+ 8f5:	83 ef 01             	sub    $0x1,%edi
   write(fd, &c, 1);
- 7d8:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
- 7df:	00 
- 7e0:	89 5c 24 04          	mov    %ebx,0x4(%esp)
- 7e4:	89 34 24             	mov    %esi,(%esp)
- 7e7:	88 45 d7             	mov    %al,-0x29(%ebp)
- 7ea:	e8 f3 fe ff ff       	call   6e2 <write>
+ 8f8:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+ 8ff:	00 
+ 900:	89 5c 24 04          	mov    %ebx,0x4(%esp)
+ 904:	89 34 24             	mov    %esi,(%esp)
+ 907:	88 45 d7             	mov    %al,-0x29(%ebp)
+ 90a:	e8 e3 fe ff ff       	call   7f2 <write>
   while(--i >= 0)
- 7ef:	83 ff ff             	cmp    $0xffffffff,%edi
- 7f2:	75 dc                	jne    7d0 <printint+0x60>
+ 90f:	83 ff ff             	cmp    $0xffffffff,%edi
+ 912:	75 dc                	jne    8f0 <printint+0x60>
     putc(fd, buf[i]);
 }
- 7f4:	83 c4 4c             	add    $0x4c,%esp
- 7f7:	5b                   	pop    %ebx
- 7f8:	5e                   	pop    %esi
- 7f9:	5f                   	pop    %edi
- 7fa:	5d                   	pop    %ebp
- 7fb:	c3                   	ret    
- 7fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 914:	83 c4 4c             	add    $0x4c,%esp
+ 917:	5b                   	pop    %ebx
+ 918:	5e                   	pop    %esi
+ 919:	5f                   	pop    %edi
+ 91a:	5d                   	pop    %ebp
+ 91b:	c3                   	ret    
+ 91c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     x = -xx;
- 800:	89 d0                	mov    %edx,%eax
- 802:	f7 d8                	neg    %eax
+ 920:	89 d0                	mov    %edx,%eax
+ 922:	f7 d8                	neg    %eax
     neg = 1;
- 804:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
- 80b:	eb 87                	jmp    794 <printint+0x24>
- 80d:	8d 76 00             	lea    0x0(%esi),%esi
+ 924:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
+ 92b:	eb 87                	jmp    8b4 <printint+0x24>
+ 92d:	8d 76 00             	lea    0x0(%esi),%esi
 
-00000810 <printf>:
+00000930 <printf>:
 
 // Print to the given fd. Only understands %d, %x, %p, %s.
 void
 printf(int fd, const char *fmt, ...)
 {
- 810:	55                   	push   %ebp
- 811:	89 e5                	mov    %esp,%ebp
- 813:	57                   	push   %edi
+ 930:	55                   	push   %ebp
+ 931:	89 e5                	mov    %esp,%ebp
+ 933:	57                   	push   %edi
   char *s;
   int c, i, state;
   uint *ap;
 
   state = 0;
- 814:	31 ff                	xor    %edi,%edi
+ 934:	31 ff                	xor    %edi,%edi
 {
- 816:	56                   	push   %esi
- 817:	53                   	push   %ebx
- 818:	83 ec 3c             	sub    $0x3c,%esp
+ 936:	56                   	push   %esi
+ 937:	53                   	push   %ebx
+ 938:	83 ec 3c             	sub    $0x3c,%esp
   ap = (uint*)(void*)&fmt + 1;
   for(i = 0; fmt[i]; i++){
- 81b:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+ 93b:	8b 5d 0c             	mov    0xc(%ebp),%ebx
   ap = (uint*)(void*)&fmt + 1;
- 81e:	8d 45 10             	lea    0x10(%ebp),%eax
+ 93e:	8d 45 10             	lea    0x10(%ebp),%eax
 {
- 821:	8b 75 08             	mov    0x8(%ebp),%esi
+ 941:	8b 75 08             	mov    0x8(%ebp),%esi
   ap = (uint*)(void*)&fmt + 1;
- 824:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ 944:	89 45 d4             	mov    %eax,-0x2c(%ebp)
   for(i = 0; fmt[i]; i++){
- 827:	0f b6 13             	movzbl (%ebx),%edx
- 82a:	83 c3 01             	add    $0x1,%ebx
- 82d:	84 d2                	test   %dl,%dl
- 82f:	75 39                	jne    86a <printf+0x5a>
- 831:	e9 c2 00 00 00       	jmp    8f8 <printf+0xe8>
- 836:	66 90                	xchg   %ax,%ax
+ 947:	0f b6 13             	movzbl (%ebx),%edx
+ 94a:	83 c3 01             	add    $0x1,%ebx
+ 94d:	84 d2                	test   %dl,%dl
+ 94f:	75 39                	jne    98a <printf+0x5a>
+ 951:	e9 c2 00 00 00       	jmp    a18 <printf+0xe8>
+ 956:	66 90                	xchg   %ax,%ax
     c = fmt[i] & 0xff;
     if(state == 0){
       if(c == '%'){
- 838:	83 fa 25             	cmp    $0x25,%edx
- 83b:	0f 84 bf 00 00 00    	je     900 <printf+0xf0>
+ 958:	83 fa 25             	cmp    $0x25,%edx
+ 95b:	0f 84 bf 00 00 00    	je     a20 <printf+0xf0>
   write(fd, &c, 1);
- 841:	8d 45 e2             	lea    -0x1e(%ebp),%eax
- 844:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
- 84b:	00 
- 84c:	89 44 24 04          	mov    %eax,0x4(%esp)
- 850:	89 34 24             	mov    %esi,(%esp)
+ 961:	8d 45 e2             	lea    -0x1e(%ebp),%eax
+ 964:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+ 96b:	00 
+ 96c:	89 44 24 04          	mov    %eax,0x4(%esp)
+ 970:	89 34 24             	mov    %esi,(%esp)
         state = '%';
       } else {
         putc(fd, c);
- 853:	88 55 e2             	mov    %dl,-0x1e(%ebp)
+ 973:	88 55 e2             	mov    %dl,-0x1e(%ebp)
   write(fd, &c, 1);
- 856:	e8 87 fe ff ff       	call   6e2 <write>
- 85b:	83 c3 01             	add    $0x1,%ebx
+ 976:	e8 77 fe ff ff       	call   7f2 <write>
+ 97b:	83 c3 01             	add    $0x1,%ebx
   for(i = 0; fmt[i]; i++){
- 85e:	0f b6 53 ff          	movzbl -0x1(%ebx),%edx
- 862:	84 d2                	test   %dl,%dl
- 864:	0f 84 8e 00 00 00    	je     8f8 <printf+0xe8>
+ 97e:	0f b6 53 ff          	movzbl -0x1(%ebx),%edx
+ 982:	84 d2                	test   %dl,%dl
+ 984:	0f 84 8e 00 00 00    	je     a18 <printf+0xe8>
     if(state == 0){
- 86a:	85 ff                	test   %edi,%edi
+ 98a:	85 ff                	test   %edi,%edi
     c = fmt[i] & 0xff;
- 86c:	0f be c2             	movsbl %dl,%eax
+ 98c:	0f be c2             	movsbl %dl,%eax
     if(state == 0){
- 86f:	74 c7                	je     838 <printf+0x28>
+ 98f:	74 c7                	je     958 <printf+0x28>
       }
     } else if(state == '%'){
- 871:	83 ff 25             	cmp    $0x25,%edi
- 874:	75 e5                	jne    85b <printf+0x4b>
+ 991:	83 ff 25             	cmp    $0x25,%edi
+ 994:	75 e5                	jne    97b <printf+0x4b>
       if(c == 'd'){
- 876:	83 fa 64             	cmp    $0x64,%edx
- 879:	0f 84 31 01 00 00    	je     9b0 <printf+0x1a0>
+ 996:	83 fa 64             	cmp    $0x64,%edx
+ 999:	0f 84 31 01 00 00    	je     ad0 <printf+0x1a0>
         printint(fd, *ap, 10, 1);
         ap++;
       } else if(c == 'x' || c == 'p'){
- 87f:	25 f7 00 00 00       	and    $0xf7,%eax
- 884:	83 f8 70             	cmp    $0x70,%eax
- 887:	0f 84 83 00 00 00    	je     910 <printf+0x100>
+ 99f:	25 f7 00 00 00       	and    $0xf7,%eax
+ 9a4:	83 f8 70             	cmp    $0x70,%eax
+ 9a7:	0f 84 83 00 00 00    	je     a30 <printf+0x100>
         printint(fd, *ap, 16, 0);
         ap++;
       } else if(c == 's'){
- 88d:	83 fa 73             	cmp    $0x73,%edx
- 890:	0f 84 a2 00 00 00    	je     938 <printf+0x128>
+ 9ad:	83 fa 73             	cmp    $0x73,%edx
+ 9b0:	0f 84 a2 00 00 00    	je     a58 <printf+0x128>
           s = "(null)";
         while(*s != 0){
           putc(fd, *s);
           s++;
         }
       } else if(c == 'c'){
- 896:	83 fa 63             	cmp    $0x63,%edx
- 899:	0f 84 35 01 00 00    	je     9d4 <printf+0x1c4>
+ 9b6:	83 fa 63             	cmp    $0x63,%edx
+ 9b9:	0f 84 35 01 00 00    	je     af4 <printf+0x1c4>
         putc(fd, *ap);
         ap++;
       } else if(c == '%'){
- 89f:	83 fa 25             	cmp    $0x25,%edx
- 8a2:	0f 84 e0 00 00 00    	je     988 <printf+0x178>
+ 9bf:	83 fa 25             	cmp    $0x25,%edx
+ 9c2:	0f 84 e0 00 00 00    	je     aa8 <printf+0x178>
   write(fd, &c, 1);
- 8a8:	8d 45 e6             	lea    -0x1a(%ebp),%eax
- 8ab:	83 c3 01             	add    $0x1,%ebx
- 8ae:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
- 8b5:	00 
+ 9c8:	8d 45 e6             	lea    -0x1a(%ebp),%eax
+ 9cb:	83 c3 01             	add    $0x1,%ebx
+ 9ce:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+ 9d5:	00 
       } else {
         // Unknown % sequence.  Print it to draw attention.
         putc(fd, '%');
         putc(fd, c);
       }
       state = 0;
- 8b6:	31 ff                	xor    %edi,%edi
+ 9d6:	31 ff                	xor    %edi,%edi
   write(fd, &c, 1);
- 8b8:	89 44 24 04          	mov    %eax,0x4(%esp)
- 8bc:	89 34 24             	mov    %esi,(%esp)
- 8bf:	89 55 d0             	mov    %edx,-0x30(%ebp)
- 8c2:	c6 45 e6 25          	movb   $0x25,-0x1a(%ebp)
- 8c6:	e8 17 fe ff ff       	call   6e2 <write>
+ 9d8:	89 44 24 04          	mov    %eax,0x4(%esp)
+ 9dc:	89 34 24             	mov    %esi,(%esp)
+ 9df:	89 55 d0             	mov    %edx,-0x30(%ebp)
+ 9e2:	c6 45 e6 25          	movb   $0x25,-0x1a(%ebp)
+ 9e6:	e8 07 fe ff ff       	call   7f2 <write>
         putc(fd, c);
- 8cb:	8b 55 d0             	mov    -0x30(%ebp),%edx
+ 9eb:	8b 55 d0             	mov    -0x30(%ebp),%edx
   write(fd, &c, 1);
- 8ce:	8d 45 e7             	lea    -0x19(%ebp),%eax
- 8d1:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
- 8d8:	00 
- 8d9:	89 44 24 04          	mov    %eax,0x4(%esp)
- 8dd:	89 34 24             	mov    %esi,(%esp)
+ 9ee:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 9f1:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+ 9f8:	00 
+ 9f9:	89 44 24 04          	mov    %eax,0x4(%esp)
+ 9fd:	89 34 24             	mov    %esi,(%esp)
         putc(fd, c);
- 8e0:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ a00:	88 55 e7             	mov    %dl,-0x19(%ebp)
   write(fd, &c, 1);
- 8e3:	e8 fa fd ff ff       	call   6e2 <write>
+ a03:	e8 ea fd ff ff       	call   7f2 <write>
   for(i = 0; fmt[i]; i++){
- 8e8:	0f b6 53 ff          	movzbl -0x1(%ebx),%edx
- 8ec:	84 d2                	test   %dl,%dl
- 8ee:	0f 85 76 ff ff ff    	jne    86a <printf+0x5a>
- 8f4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ a08:	0f b6 53 ff          	movzbl -0x1(%ebx),%edx
+ a0c:	84 d2                	test   %dl,%dl
+ a0e:	0f 85 76 ff ff ff    	jne    98a <printf+0x5a>
+ a14:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     }
   }
 }
- 8f8:	83 c4 3c             	add    $0x3c,%esp
- 8fb:	5b                   	pop    %ebx
- 8fc:	5e                   	pop    %esi
- 8fd:	5f                   	pop    %edi
- 8fe:	5d                   	pop    %ebp
- 8ff:	c3                   	ret    
+ a18:	83 c4 3c             	add    $0x3c,%esp
+ a1b:	5b                   	pop    %ebx
+ a1c:	5e                   	pop    %esi
+ a1d:	5f                   	pop    %edi
+ a1e:	5d                   	pop    %ebp
+ a1f:	c3                   	ret    
         state = '%';
- 900:	bf 25 00 00 00       	mov    $0x25,%edi
- 905:	e9 51 ff ff ff       	jmp    85b <printf+0x4b>
- 90a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ a20:	bf 25 00 00 00       	mov    $0x25,%edi
+ a25:	e9 51 ff ff ff       	jmp    97b <printf+0x4b>
+ a2a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         printint(fd, *ap, 16, 0);
- 910:	8b 45 d4             	mov    -0x2c(%ebp),%eax
- 913:	b9 10 00 00 00       	mov    $0x10,%ecx
+ a30:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+ a33:	b9 10 00 00 00       	mov    $0x10,%ecx
       state = 0;
- 918:	31 ff                	xor    %edi,%edi
+ a38:	31 ff                	xor    %edi,%edi
         printint(fd, *ap, 16, 0);
- 91a:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
- 921:	8b 10                	mov    (%eax),%edx
- 923:	89 f0                	mov    %esi,%eax
- 925:	e8 46 fe ff ff       	call   770 <printint>
+ a3a:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+ a41:	8b 10                	mov    (%eax),%edx
+ a43:	89 f0                	mov    %esi,%eax
+ a45:	e8 46 fe ff ff       	call   890 <printint>
         ap++;
- 92a:	83 45 d4 04          	addl   $0x4,-0x2c(%ebp)
- 92e:	e9 28 ff ff ff       	jmp    85b <printf+0x4b>
- 933:	90                   	nop
- 934:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ a4a:	83 45 d4 04          	addl   $0x4,-0x2c(%ebp)
+ a4e:	e9 28 ff ff ff       	jmp    97b <printf+0x4b>
+ a53:	90                   	nop
+ a54:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
         s = (char*)*ap;
- 938:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+ a58:	8b 45 d4             	mov    -0x2c(%ebp),%eax
         ap++;
- 93b:	83 45 d4 04          	addl   $0x4,-0x2c(%ebp)
+ a5b:	83 45 d4 04          	addl   $0x4,-0x2c(%ebp)
         s = (char*)*ap;
- 93f:	8b 38                	mov    (%eax),%edi
+ a5f:	8b 38                	mov    (%eax),%edi
           s = "(null)";
- 941:	b8 27 0f 00 00       	mov    $0xf27,%eax
- 946:	85 ff                	test   %edi,%edi
- 948:	0f 44 f8             	cmove  %eax,%edi
+ a61:	b8 68 10 00 00       	mov    $0x1068,%eax
+ a66:	85 ff                	test   %edi,%edi
+ a68:	0f 44 f8             	cmove  %eax,%edi
         while(*s != 0){
- 94b:	0f b6 07             	movzbl (%edi),%eax
- 94e:	84 c0                	test   %al,%al
- 950:	74 2a                	je     97c <printf+0x16c>
- 952:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
- 958:	88 45 e3             	mov    %al,-0x1d(%ebp)
+ a6b:	0f b6 07             	movzbl (%edi),%eax
+ a6e:	84 c0                	test   %al,%al
+ a70:	74 2a                	je     a9c <printf+0x16c>
+ a72:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ a78:	88 45 e3             	mov    %al,-0x1d(%ebp)
   write(fd, &c, 1);
- 95b:	8d 45 e3             	lea    -0x1d(%ebp),%eax
+ a7b:	8d 45 e3             	lea    -0x1d(%ebp),%eax
           s++;
- 95e:	83 c7 01             	add    $0x1,%edi
+ a7e:	83 c7 01             	add    $0x1,%edi
   write(fd, &c, 1);
- 961:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
- 968:	00 
- 969:	89 44 24 04          	mov    %eax,0x4(%esp)
- 96d:	89 34 24             	mov    %esi,(%esp)
- 970:	e8 6d fd ff ff       	call   6e2 <write>
+ a81:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+ a88:	00 
+ a89:	89 44 24 04          	mov    %eax,0x4(%esp)
+ a8d:	89 34 24             	mov    %esi,(%esp)
+ a90:	e8 5d fd ff ff       	call   7f2 <write>
         while(*s != 0){
- 975:	0f b6 07             	movzbl (%edi),%eax
- 978:	84 c0                	test   %al,%al
- 97a:	75 dc                	jne    958 <printf+0x148>
+ a95:	0f b6 07             	movzbl (%edi),%eax
+ a98:	84 c0                	test   %al,%al
+ a9a:	75 dc                	jne    a78 <printf+0x148>
       state = 0;
- 97c:	31 ff                	xor    %edi,%edi
- 97e:	e9 d8 fe ff ff       	jmp    85b <printf+0x4b>
- 983:	90                   	nop
- 984:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ a9c:	31 ff                	xor    %edi,%edi
+ a9e:	e9 d8 fe ff ff       	jmp    97b <printf+0x4b>
+ aa3:	90                   	nop
+ aa4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   write(fd, &c, 1);
- 988:	8d 45 e5             	lea    -0x1b(%ebp),%eax
+ aa8:	8d 45 e5             	lea    -0x1b(%ebp),%eax
       state = 0;
- 98b:	31 ff                	xor    %edi,%edi
+ aab:	31 ff                	xor    %edi,%edi
   write(fd, &c, 1);
- 98d:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
- 994:	00 
- 995:	89 44 24 04          	mov    %eax,0x4(%esp)
- 999:	89 34 24             	mov    %esi,(%esp)
- 99c:	c6 45 e5 25          	movb   $0x25,-0x1b(%ebp)
- 9a0:	e8 3d fd ff ff       	call   6e2 <write>
- 9a5:	e9 b1 fe ff ff       	jmp    85b <printf+0x4b>
- 9aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ aad:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+ ab4:	00 
+ ab5:	89 44 24 04          	mov    %eax,0x4(%esp)
+ ab9:	89 34 24             	mov    %esi,(%esp)
+ abc:	c6 45 e5 25          	movb   $0x25,-0x1b(%ebp)
+ ac0:	e8 2d fd ff ff       	call   7f2 <write>
+ ac5:	e9 b1 fe ff ff       	jmp    97b <printf+0x4b>
+ aca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         printint(fd, *ap, 10, 1);
- 9b0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
- 9b3:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ ad0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+ ad3:	b9 0a 00 00 00       	mov    $0xa,%ecx
       state = 0;
- 9b8:	66 31 ff             	xor    %di,%di
+ ad8:	66 31 ff             	xor    %di,%di
         printint(fd, *ap, 10, 1);
- 9bb:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
- 9c2:	8b 10                	mov    (%eax),%edx
- 9c4:	89 f0                	mov    %esi,%eax
- 9c6:	e8 a5 fd ff ff       	call   770 <printint>
+ adb:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+ ae2:	8b 10                	mov    (%eax),%edx
+ ae4:	89 f0                	mov    %esi,%eax
+ ae6:	e8 a5 fd ff ff       	call   890 <printint>
         ap++;
- 9cb:	83 45 d4 04          	addl   $0x4,-0x2c(%ebp)
- 9cf:	e9 87 fe ff ff       	jmp    85b <printf+0x4b>
+ aeb:	83 45 d4 04          	addl   $0x4,-0x2c(%ebp)
+ aef:	e9 87 fe ff ff       	jmp    97b <printf+0x4b>
         putc(fd, *ap);
- 9d4:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+ af4:	8b 45 d4             	mov    -0x2c(%ebp),%eax
       state = 0;
- 9d7:	31 ff                	xor    %edi,%edi
+ af7:	31 ff                	xor    %edi,%edi
         putc(fd, *ap);
- 9d9:	8b 00                	mov    (%eax),%eax
+ af9:	8b 00                	mov    (%eax),%eax
   write(fd, &c, 1);
- 9db:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
- 9e2:	00 
- 9e3:	89 34 24             	mov    %esi,(%esp)
+ afb:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+ b02:	00 
+ b03:	89 34 24             	mov    %esi,(%esp)
         putc(fd, *ap);
- 9e6:	88 45 e4             	mov    %al,-0x1c(%ebp)
+ b06:	88 45 e4             	mov    %al,-0x1c(%ebp)
   write(fd, &c, 1);
- 9e9:	8d 45 e4             	lea    -0x1c(%ebp),%eax
- 9ec:	89 44 24 04          	mov    %eax,0x4(%esp)
- 9f0:	e8 ed fc ff ff       	call   6e2 <write>
+ b09:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+ b0c:	89 44 24 04          	mov    %eax,0x4(%esp)
+ b10:	e8 dd fc ff ff       	call   7f2 <write>
         ap++;
- 9f5:	83 45 d4 04          	addl   $0x4,-0x2c(%ebp)
- 9f9:	e9 5d fe ff ff       	jmp    85b <printf+0x4b>
- 9fe:	66 90                	xchg   %ax,%ax
+ b15:	83 45 d4 04          	addl   $0x4,-0x2c(%ebp)
+ b19:	e9 5d fe ff ff       	jmp    97b <printf+0x4b>
+ b1e:	66 90                	xchg   %ax,%ax
 
-00000a00 <free>:
+00000b20 <free>:
 static Header base;
 static Header *freep;
 
 void
 free(void *ap)
 {
- a00:	55                   	push   %ebp
+ b20:	55                   	push   %ebp
   Header *bp, *p;
 
   bp = (Header*)ap - 1;
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- a01:	a1 fc 11 00 00       	mov    0x11fc,%eax
+ b21:	a1 78 13 00 00       	mov    0x1378,%eax
 {
- a06:	89 e5                	mov    %esp,%ebp
- a08:	57                   	push   %edi
- a09:	56                   	push   %esi
- a0a:	53                   	push   %ebx
- a0b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ b26:	89 e5                	mov    %esp,%ebp
+ b28:	57                   	push   %edi
+ b29:	56                   	push   %esi
+ b2a:	53                   	push   %ebx
+ b2b:	8b 5d 08             	mov    0x8(%ebp),%ebx
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- a0e:	8b 08                	mov    (%eax),%ecx
+ b2e:	8b 08                	mov    (%eax),%ecx
   bp = (Header*)ap - 1;
- a10:	8d 53 f8             	lea    -0x8(%ebx),%edx
+ b30:	8d 53 f8             	lea    -0x8(%ebx),%edx
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- a13:	39 d0                	cmp    %edx,%eax
- a15:	72 11                	jb     a28 <free+0x28>
- a17:	90                   	nop
+ b33:	39 d0                	cmp    %edx,%eax
+ b35:	72 11                	jb     b48 <free+0x28>
+ b37:	90                   	nop
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- a18:	39 c8                	cmp    %ecx,%eax
- a1a:	72 04                	jb     a20 <free+0x20>
- a1c:	39 ca                	cmp    %ecx,%edx
- a1e:	72 10                	jb     a30 <free+0x30>
- a20:	89 c8                	mov    %ecx,%eax
+ b38:	39 c8                	cmp    %ecx,%eax
+ b3a:	72 04                	jb     b40 <free+0x20>
+ b3c:	39 ca                	cmp    %ecx,%edx
+ b3e:	72 10                	jb     b50 <free+0x30>
+ b40:	89 c8                	mov    %ecx,%eax
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- a22:	39 d0                	cmp    %edx,%eax
+ b42:	39 d0                	cmp    %edx,%eax
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- a24:	8b 08                	mov    (%eax),%ecx
+ b44:	8b 08                	mov    (%eax),%ecx
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- a26:	73 f0                	jae    a18 <free+0x18>
- a28:	39 ca                	cmp    %ecx,%edx
- a2a:	72 04                	jb     a30 <free+0x30>
+ b46:	73 f0                	jae    b38 <free+0x18>
+ b48:	39 ca                	cmp    %ecx,%edx
+ b4a:	72 04                	jb     b50 <free+0x30>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- a2c:	39 c8                	cmp    %ecx,%eax
- a2e:	72 f0                	jb     a20 <free+0x20>
+ b4c:	39 c8                	cmp    %ecx,%eax
+ b4e:	72 f0                	jb     b40 <free+0x20>
       break;
   if(bp + bp->s.size == p->s.ptr){
- a30:	8b 73 fc             	mov    -0x4(%ebx),%esi
- a33:	8d 3c f2             	lea    (%edx,%esi,8),%edi
- a36:	39 cf                	cmp    %ecx,%edi
- a38:	74 1e                	je     a58 <free+0x58>
+ b50:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ b53:	8d 3c f2             	lea    (%edx,%esi,8),%edi
+ b56:	39 cf                	cmp    %ecx,%edi
+ b58:	74 1e                	je     b78 <free+0x58>
     bp->s.size += p->s.ptr->s.size;
     bp->s.ptr = p->s.ptr->s.ptr;
   } else
     bp->s.ptr = p->s.ptr;
- a3a:	89 4b f8             	mov    %ecx,-0x8(%ebx)
+ b5a:	89 4b f8             	mov    %ecx,-0x8(%ebx)
   if(p + p->s.size == bp){
- a3d:	8b 48 04             	mov    0x4(%eax),%ecx
- a40:	8d 34 c8             	lea    (%eax,%ecx,8),%esi
- a43:	39 f2                	cmp    %esi,%edx
- a45:	74 28                	je     a6f <free+0x6f>
+ b5d:	8b 48 04             	mov    0x4(%eax),%ecx
+ b60:	8d 34 c8             	lea    (%eax,%ecx,8),%esi
+ b63:	39 f2                	cmp    %esi,%edx
+ b65:	74 28                	je     b8f <free+0x6f>
     p->s.size += bp->s.size;
     p->s.ptr = bp->s.ptr;
   } else
     p->s.ptr = bp;
- a47:	89 10                	mov    %edx,(%eax)
+ b67:	89 10                	mov    %edx,(%eax)
   freep = p;
- a49:	a3 fc 11 00 00       	mov    %eax,0x11fc
+ b69:	a3 78 13 00 00       	mov    %eax,0x1378
 }
- a4e:	5b                   	pop    %ebx
- a4f:	5e                   	pop    %esi
- a50:	5f                   	pop    %edi
- a51:	5d                   	pop    %ebp
- a52:	c3                   	ret    
- a53:	90                   	nop
- a54:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ b6e:	5b                   	pop    %ebx
+ b6f:	5e                   	pop    %esi
+ b70:	5f                   	pop    %edi
+ b71:	5d                   	pop    %ebp
+ b72:	c3                   	ret    
+ b73:	90                   	nop
+ b74:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     bp->s.size += p->s.ptr->s.size;
- a58:	03 71 04             	add    0x4(%ecx),%esi
- a5b:	89 73 fc             	mov    %esi,-0x4(%ebx)
+ b78:	03 71 04             	add    0x4(%ecx),%esi
+ b7b:	89 73 fc             	mov    %esi,-0x4(%ebx)
     bp->s.ptr = p->s.ptr->s.ptr;
- a5e:	8b 08                	mov    (%eax),%ecx
- a60:	8b 09                	mov    (%ecx),%ecx
- a62:	89 4b f8             	mov    %ecx,-0x8(%ebx)
+ b7e:	8b 08                	mov    (%eax),%ecx
+ b80:	8b 09                	mov    (%ecx),%ecx
+ b82:	89 4b f8             	mov    %ecx,-0x8(%ebx)
   if(p + p->s.size == bp){
- a65:	8b 48 04             	mov    0x4(%eax),%ecx
- a68:	8d 34 c8             	lea    (%eax,%ecx,8),%esi
- a6b:	39 f2                	cmp    %esi,%edx
- a6d:	75 d8                	jne    a47 <free+0x47>
+ b85:	8b 48 04             	mov    0x4(%eax),%ecx
+ b88:	8d 34 c8             	lea    (%eax,%ecx,8),%esi
+ b8b:	39 f2                	cmp    %esi,%edx
+ b8d:	75 d8                	jne    b67 <free+0x47>
     p->s.size += bp->s.size;
- a6f:	03 4b fc             	add    -0x4(%ebx),%ecx
+ b8f:	03 4b fc             	add    -0x4(%ebx),%ecx
   freep = p;
- a72:	a3 fc 11 00 00       	mov    %eax,0x11fc
+ b92:	a3 78 13 00 00       	mov    %eax,0x1378
     p->s.size += bp->s.size;
- a77:	89 48 04             	mov    %ecx,0x4(%eax)
+ b97:	89 48 04             	mov    %ecx,0x4(%eax)
     p->s.ptr = bp->s.ptr;
- a7a:	8b 53 f8             	mov    -0x8(%ebx),%edx
- a7d:	89 10                	mov    %edx,(%eax)
+ b9a:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ b9d:	89 10                	mov    %edx,(%eax)
 }
- a7f:	5b                   	pop    %ebx
- a80:	5e                   	pop    %esi
- a81:	5f                   	pop    %edi
- a82:	5d                   	pop    %ebp
- a83:	c3                   	ret    
- a84:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
- a8a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
-
-00000a90 <malloc>:
+ b9f:	5b                   	pop    %ebx
+ ba0:	5e                   	pop    %esi
+ ba1:	5f                   	pop    %edi
+ ba2:	5d                   	pop    %ebp
+ ba3:	c3                   	ret    
+ ba4:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ baa:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+00000bb0 <malloc>:
   return freep;
 }
 
 void*
 malloc(uint nbytes)
 {
- a90:	55                   	push   %ebp
- a91:	89 e5                	mov    %esp,%ebp
- a93:	57                   	push   %edi
- a94:	56                   	push   %esi
- a95:	53                   	push   %ebx
- a96:	83 ec 1c             	sub    $0x1c,%esp
+ bb0:	55                   	push   %ebp
+ bb1:	89 e5                	mov    %esp,%ebp
+ bb3:	57                   	push   %edi
+ bb4:	56                   	push   %esi
+ bb5:	53                   	push   %ebx
+ bb6:	83 ec 1c             	sub    $0x1c,%esp
   Header *p, *prevp;
   uint nunits;
 
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- a99:	8b 45 08             	mov    0x8(%ebp),%eax
+ bb9:	8b 45 08             	mov    0x8(%ebp),%eax
   if((prevp = freep) == 0){
- a9c:	8b 1d fc 11 00 00    	mov    0x11fc,%ebx
+ bbc:	8b 1d 78 13 00 00    	mov    0x1378,%ebx
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- aa2:	8d 48 07             	lea    0x7(%eax),%ecx
- aa5:	c1 e9 03             	shr    $0x3,%ecx
+ bc2:	8d 48 07             	lea    0x7(%eax),%ecx
+ bc5:	c1 e9 03             	shr    $0x3,%ecx
   if((prevp = freep) == 0){
- aa8:	85 db                	test   %ebx,%ebx
+ bc8:	85 db                	test   %ebx,%ebx
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- aaa:	8d 71 01             	lea    0x1(%ecx),%esi
+ bca:	8d 71 01             	lea    0x1(%ecx),%esi
   if((prevp = freep) == 0){
- aad:	0f 84 9b 00 00 00    	je     b4e <malloc+0xbe>
- ab3:	8b 13                	mov    (%ebx),%edx
- ab5:	8b 7a 04             	mov    0x4(%edx),%edi
+ bcd:	0f 84 9b 00 00 00    	je     c6e <malloc+0xbe>
+ bd3:	8b 13                	mov    (%ebx),%edx
+ bd5:	8b 7a 04             	mov    0x4(%edx),%edi
     base.s.ptr = freep = prevp = &base;
     base.s.size = 0;
   }
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
     if(p->s.size >= nunits){
- ab8:	39 fe                	cmp    %edi,%esi
- aba:	76 64                	jbe    b20 <malloc+0x90>
- abc:	8d 04 f5 00 00 00 00 	lea    0x0(,%esi,8),%eax
+ bd8:	39 fe                	cmp    %edi,%esi
+ bda:	76 64                	jbe    c40 <malloc+0x90>
+ bdc:	8d 04 f5 00 00 00 00 	lea    0x0(,%esi,8),%eax
   if(nu < 4096)
- ac3:	bb 00 80 00 00       	mov    $0x8000,%ebx
- ac8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
- acb:	eb 0e                	jmp    adb <malloc+0x4b>
- acd:	8d 76 00             	lea    0x0(%esi),%esi
+ be3:	bb 00 80 00 00       	mov    $0x8000,%ebx
+ be8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+ beb:	eb 0e                	jmp    bfb <malloc+0x4b>
+ bed:	8d 76 00             	lea    0x0(%esi),%esi
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- ad0:	8b 02                	mov    (%edx),%eax
+ bf0:	8b 02                	mov    (%edx),%eax
     if(p->s.size >= nunits){
- ad2:	8b 78 04             	mov    0x4(%eax),%edi
- ad5:	39 fe                	cmp    %edi,%esi
- ad7:	76 4f                	jbe    b28 <malloc+0x98>
- ad9:	89 c2                	mov    %eax,%edx
+ bf2:	8b 78 04             	mov    0x4(%eax),%edi
+ bf5:	39 fe                	cmp    %edi,%esi
+ bf7:	76 4f                	jbe    c48 <malloc+0x98>
+ bf9:	89 c2                	mov    %eax,%edx
         p->s.size = nunits;
       }
       freep = prevp;
       return (void*)(p + 1);
     }
     if(p == freep)
- adb:	3b 15 fc 11 00 00    	cmp    0x11fc,%edx
- ae1:	75 ed                	jne    ad0 <malloc+0x40>
+ bfb:	3b 15 78 13 00 00    	cmp    0x1378,%edx
+ c01:	75 ed                	jne    bf0 <malloc+0x40>
   if(nu < 4096)
- ae3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
- ae6:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
- aec:	bf 00 10 00 00       	mov    $0x1000,%edi
- af1:	0f 43 fe             	cmovae %esi,%edi
- af4:	0f 42 c3             	cmovb  %ebx,%eax
+ c03:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+ c06:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+ c0c:	bf 00 10 00 00       	mov    $0x1000,%edi
+ c11:	0f 43 fe             	cmovae %esi,%edi
+ c14:	0f 42 c3             	cmovb  %ebx,%eax
   p = sbrk(nu * sizeof(Header));
- af7:	89 04 24             	mov    %eax,(%esp)
- afa:	e8 4b fc ff ff       	call   74a <sbrk>
+ c17:	89 04 24             	mov    %eax,(%esp)
+ c1a:	e8 3b fc ff ff       	call   85a <sbrk>
   if(p == (char*)-1)
- aff:	83 f8 ff             	cmp    $0xffffffff,%eax
- b02:	74 18                	je     b1c <malloc+0x8c>
+ c1f:	83 f8 ff             	cmp    $0xffffffff,%eax
+ c22:	74 18                	je     c3c <malloc+0x8c>
   hp->s.size = nu;
- b04:	89 78 04             	mov    %edi,0x4(%eax)
+ c24:	89 78 04             	mov    %edi,0x4(%eax)
   free((void*)(hp + 1));
- b07:	83 c0 08             	add    $0x8,%eax
- b0a:	89 04 24             	mov    %eax,(%esp)
- b0d:	e8 ee fe ff ff       	call   a00 <free>
+ c27:	83 c0 08             	add    $0x8,%eax
+ c2a:	89 04 24             	mov    %eax,(%esp)
+ c2d:	e8 ee fe ff ff       	call   b20 <free>
   return freep;
- b12:	8b 15 fc 11 00 00    	mov    0x11fc,%edx
+ c32:	8b 15 78 13 00 00    	mov    0x1378,%edx
       if((p = morecore(nunits)) == 0)
- b18:	85 d2                	test   %edx,%edx
- b1a:	75 b4                	jne    ad0 <malloc+0x40>
+ c38:	85 d2                	test   %edx,%edx
+ c3a:	75 b4                	jne    bf0 <malloc+0x40>
         return 0;
- b1c:	31 c0                	xor    %eax,%eax
- b1e:	eb 20                	jmp    b40 <malloc+0xb0>
+ c3c:	31 c0                	xor    %eax,%eax
+ c3e:	eb 20                	jmp    c60 <malloc+0xb0>
     if(p->s.size >= nunits){
- b20:	89 d0                	mov    %edx,%eax
- b22:	89 da                	mov    %ebx,%edx
- b24:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ c40:	89 d0                	mov    %edx,%eax
+ c42:	89 da                	mov    %ebx,%edx
+ c44:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
       if(p->s.size == nunits)
- b28:	39 fe                	cmp    %edi,%esi
- b2a:	74 1c                	je     b48 <malloc+0xb8>
+ c48:	39 fe                	cmp    %edi,%esi
+ c4a:	74 1c                	je     c68 <malloc+0xb8>
         p->s.size -= nunits;
- b2c:	29 f7                	sub    %esi,%edi
- b2e:	89 78 04             	mov    %edi,0x4(%eax)
+ c4c:	29 f7                	sub    %esi,%edi
+ c4e:	89 78 04             	mov    %edi,0x4(%eax)
         p += p->s.size;
- b31:	8d 04 f8             	lea    (%eax,%edi,8),%eax
+ c51:	8d 04 f8             	lea    (%eax,%edi,8),%eax
         p->s.size = nunits;
- b34:	89 70 04             	mov    %esi,0x4(%eax)
+ c54:	89 70 04             	mov    %esi,0x4(%eax)
       freep = prevp;
- b37:	89 15 fc 11 00 00    	mov    %edx,0x11fc
+ c57:	89 15 78 13 00 00    	mov    %edx,0x1378
       return (void*)(p + 1);
- b3d:	83 c0 08             	add    $0x8,%eax
+ c5d:	83 c0 08             	add    $0x8,%eax
   }
 }
- b40:	83 c4 1c             	add    $0x1c,%esp
- b43:	5b                   	pop    %ebx
- b44:	5e                   	pop    %esi
- b45:	5f                   	pop    %edi
- b46:	5d                   	pop    %ebp
- b47:	c3                   	ret    
+ c60:	83 c4 1c             	add    $0x1c,%esp
+ c63:	5b                   	pop    %ebx
+ c64:	5e                   	pop    %esi
+ c65:	5f                   	pop    %edi
+ c66:	5d                   	pop    %ebp
+ c67:	c3                   	ret    
         prevp->s.ptr = p->s.ptr;
- b48:	8b 08                	mov    (%eax),%ecx
- b4a:	89 0a                	mov    %ecx,(%edx)
- b4c:	eb e9                	jmp    b37 <malloc+0xa7>
+ c68:	8b 08                	mov    (%eax),%ecx
+ c6a:	89 0a                	mov    %ecx,(%edx)
+ c6c:	eb e9                	jmp    c57 <malloc+0xa7>
     base.s.ptr = freep = prevp = &base;
- b4e:	c7 05 fc 11 00 00 00 	movl   $0x1200,0x11fc
- b55:	12 00 00 
+ c6e:	c7 05 78 13 00 00 7c 	movl   $0x137c,0x1378
+ c75:	13 00 00 
     base.s.size = 0;
- b58:	ba 00 12 00 00       	mov    $0x1200,%edx
+ c78:	ba 7c 13 00 00       	mov    $0x137c,%edx
     base.s.ptr = freep = prevp = &base;
- b5d:	c7 05 00 12 00 00 00 	movl   $0x1200,0x1200
- b64:	12 00 00 
+ c7d:	c7 05 7c 13 00 00 7c 	movl   $0x137c,0x137c
+ c84:	13 00 00 
     base.s.size = 0;
- b67:	c7 05 04 12 00 00 00 	movl   $0x0,0x1204
- b6e:	00 00 00 
- b71:	e9 46 ff ff ff       	jmp    abc <malloc+0x2c>
+ c87:	c7 05 80 13 00 00 00 	movl   $0x0,0x1380
+ c8e:	00 00 00 
+ c91:	e9 46 ff ff ff       	jmp    bdc <malloc+0x2c>
diff --git a/usertests.c b/usertests.c
index b6ee939..935cae8 100644
--- a/usertests.c
+++ b/usertests.c
@@ -8,6 +8,7 @@ int main(int argc, char *argv[])
 	
 	int exitWait(void);
 	int waitPid(void);
+  int PScheduler(void);
 
   printf(1, "\n This program tests the correctness of your lab#1\n");
   
@@ -15,13 +16,88 @@ int main(int argc, char *argv[])
 	exitWait();
   else if (atoi(argv[1]) == 2)
 	waitPid();
+  else if (atoi(argv[1]) == 3)
+  PScheduler();
   else 
    printf(1, "\ntype \"%s 1\" to test exit and wait, \"%s 2\" to test waitpid\n", argv[0], argv[0]);
   
     // End of test
-	 exit(0);
-	 return 0;
- }
+  exit(0);
+  return 0;
+}
+
+/*int PScheduler(void){
+  // use this part to test the priority scheduler. Assuming that the priorities range between range between 0 to 31
+  // 0 is the highest priority and 31 is the lowest priority.
+  int pid;
+  int i,j,k;
+  int priorityArr[] = {30, 15, 25, 0, 9};
+
+  printf(1, "\n  Testing the priority scheduler and setPriority(int priority) system call:\n");
+  printf(1, "\n  Assuming that the priorities range between range between 0 to 31\n");
+  printf(1, "\n  0 is the highest priority. All processes have a default priority of 10\n");
+  printf(1, "\n  The parent processes will switch to priority 0\n");
+  setPrior(0);
+
+  for(i = 0; i < 5; i++) {
+      pid = fork();
+      if (pid > 0 ) {
+          continue;
+      } else if ( pid == 0) {
+          setPrior(priorityArr[i]);
+          printf(1, "\n child# %d has priority %d before starting its work", getpid(), getPrior());
+          for (j=0;j<50000;j++) {
+              for(k=0;k<1000;k++) {
+                  asm("nop");
+              }
+          }
+          printf(1, "\n child# %d has priority %d after finishing its work", getpid(), getPrior());
+          printf(1, "\n child# %d with original priority %d has finished! \n", getpid(), priorityArr[i]);
+          exit(0);
+      } else {
+          printf(2," \n Error \n");
+      }
+  }
+
+  if(pid > 0) {
+      for(i = 0; i < 5; i++) {
+          wait(0);
+      }
+      printf(1,"\n if processes with highest priority finished first then its correct \n");
+  }
+  exit(0);
+}*/
+
+void work() {
+  int i,k;
+  for(i = 0; i < 43000; i++) {
+    for(k = 0; k < 43000; k++) {
+      asm("nop");
+    }
+  }
+}
+
+int PScheduler(void) {
+
+  setPrior(0);
+  int i = 0;
+  int pid = 0;
+  for(i = 0; i < 3; i++) {
+    pid = fork();
+    if(!pid) {
+      setPrior(i * 10);
+      work();
+      printf(0, "child %d done\n", getpid());
+      exit(0);
+    }
+  }
+  if(pid) {
+    for(i = 0; i < 3; i++)
+      wait(0);
+  }
+  printf(0, "parent %d done\n", getpid());
+  exit(0);
+}
   
 int exitWait(void) {
 	  int pid, ret_pid, exit_status;
diff --git a/usertests.o b/usertests.o
index 39a72e9..2cfdc32 100644
Binary files a/usertests.o and b/usertests.o differ
diff --git a/usertests.sym b/usertests.sym
index 2e45f35..bb734a3 100644
--- a/usertests.sym
+++ b/usertests.sym
@@ -1,7 +1,7 @@
 00000000 .text
-00000b78 .rodata
-00000f40 .eh_frame
-000011fc .bss
+00000c98 .rodata
+00001080 .eh_frame
+00001378 .bss
 00000000 .comment
 00000000 .debug_aranges
 00000000 .debug_info
@@ -13,48 +13,52 @@
 00000000 usertests.c
 00000000 ulib.c
 00000000 printf.c
-00000770 printint
-00000f2e digits.1358
+00000890 printint
+0000106f digits.1362
 00000000 umalloc.c
-000011fc freep
-00001200 base
-000004a0 strcpy
-00000762 waitpid
-00000810 printf
-00000690 memmove
-0000070a mknod
-00000180 waitPid
-000005b0 gets
-00000080 exitWait
-00000742 getpid
-00000a90 malloc
-00000752 sleep
-000006d2 pipe
-000006e2 write
-0000071a fstat
-000006f2 kill
-00000732 chdir
-000006fa exec
-000006ca wait
-000006da read
-00000712 unlink
-000006ba fork
-0000074a sbrk
-0000075a uptime
-000011fc __bss_start
-00000550 memset
+00001378 freep
+0000137c base
+000005b0 strcpy
+00000872 waitpid
+00000930 printf
+000007a0 memmove
+0000081a mknod
+00000290 waitPid
+000006c0 gets
+00000190 exitWait
+00000852 getpid
+00000bb0 malloc
+00000862 sleep
+000007e2 pipe
+0000087a setPrior
+000007f2 write
+0000082a fstat
+00000802 kill
+00000842 chdir
+00000882 getPrior
+0000080a exec
+000007da wait
+000007ea read
+00000822 unlink
+000007ca fork
+0000085a sbrk
+0000086a uptime
+00001378 __bss_start
+00000660 memset
 00000000 main
-000004d0 strcmp
-0000073a dup
-00000610 stat
-000011fc _edata
-00001208 _end
-00000722 link
-000006c2 exit
-00000660 atoi
-00000520 strlen
-00000702 open
-00000570 strchr
-0000072a mkdir
-000006ea close
-00000a00 free
+000005e0 strcmp
+0000084a dup
+000000c0 PScheduler
+00000720 stat
+00001378 _edata
+00001384 _end
+00000832 link
+000007d2 exit
+00000770 atoi
+00000630 strlen
+00000812 open
+00000680 strchr
+0000083a mkdir
+000007fa close
+000000a0 work
+00000b20 free
diff --git a/usys.S b/usys.S
index 59537eb..0d62dc1 100644
--- a/usys.S
+++ b/usys.S
@@ -29,4 +29,6 @@ SYSCALL(getpid)
 SYSCALL(sbrk)
 SYSCALL(sleep)
 SYSCALL(uptime)
-SYSCALL(waitpid)
\ No newline at end of file
+SYSCALL(waitpid)
+SYSCALL(setPrior)
+SYSCALL(getPrior)
\ No newline at end of file
diff --git a/usys.o b/usys.o
index 02e35eb..685e33f 100644
Binary files a/usys.o and b/usys.o differ
diff --git a/vm.o b/vm.o
index 835e9b1..db559e9 100644
Binary files a/vm.o and b/vm.o differ
diff --git a/wc.asm b/wc.asm
index a23bb10..ecf0a2c 100644
--- a/wc.asm
+++ b/wc.asm
@@ -67,16 +67,16 @@ main(int argc, char *argv[])
   60:	e8 5d 03 00 00       	call   3c2 <exit>
       printf(1, "wc: cannot open %s\n", argv[i]);
   65:	8b 03                	mov    (%ebx),%eax
-  67:	c7 44 24 04 99 08 00 	movl   $0x899,0x4(%esp)
+  67:	c7 44 24 04 a9 08 00 	movl   $0x8a9,0x4(%esp)
   6e:	00 
   6f:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
   76:	89 44 24 08          	mov    %eax,0x8(%esp)
-  7a:	e8 91 04 00 00       	call   510 <printf>
+  7a:	e8 a1 04 00 00       	call   520 <printf>
       exit(0);
   7f:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
   86:	e8 37 03 00 00       	call   3c2 <exit>
     wc(0, "");
-  8b:	c7 44 24 04 8b 08 00 	movl   $0x88b,0x4(%esp)
+  8b:	c7 44 24 04 9b 08 00 	movl   $0x89b,0x4(%esp)
   92:	00 
   93:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
   9a:	e8 11 00 00 00       	call   b0 <wc>
@@ -131,7 +131,7 @@ main(int argc, char *argv[])
         l++;
  109:	31 c9                	xor    %ecx,%ecx
       if(strchr(" \r\t\n\v", buf[i]))
- 10b:	c7 04 24 76 08 00 00 	movl   $0x876,(%esp)
+ 10b:	c7 04 24 86 08 00 00 	movl   $0x886,(%esp)
         l++;
  112:	3c 0a                	cmp    $0xa,%al
  114:	0f 94 c1             	sete   %cl
@@ -165,7 +165,7 @@ main(int argc, char *argv[])
   printf(1, "%d %d %d %s\n", l, w, c, name);
  149:	8b 45 0c             	mov    0xc(%ebp),%eax
  14c:	89 5c 24 08          	mov    %ebx,0x8(%esp)
- 150:	c7 44 24 04 8c 08 00 	movl   $0x88c,0x4(%esp)
+ 150:	c7 44 24 04 9c 08 00 	movl   $0x89c,0x4(%esp)
  157:	00 
  158:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  15f:	89 44 24 14          	mov    %eax,0x14(%esp)
@@ -173,7 +173,7 @@ main(int argc, char *argv[])
  166:	89 44 24 10          	mov    %eax,0x10(%esp)
  16a:	8b 45 e0             	mov    -0x20(%ebp),%eax
  16d:	89 44 24 0c          	mov    %eax,0xc(%esp)
- 171:	e8 9a 03 00 00       	call   510 <printf>
+ 171:	e8 aa 03 00 00       	call   520 <printf>
 }
  176:	83 c4 3c             	add    $0x3c,%esp
  179:	5b                   	pop    %ebx
@@ -182,10 +182,10 @@ main(int argc, char *argv[])
  17c:	5d                   	pop    %ebp
  17d:	c3                   	ret    
     printf(1, "wc: read error\n");
- 17e:	c7 44 24 04 7c 08 00 	movl   $0x87c,0x4(%esp)
+ 17e:	c7 44 24 04 8c 08 00 	movl   $0x88c,0x4(%esp)
  185:	00 
  186:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
- 18d:	e8 7e 03 00 00       	call   510 <printf>
+ 18d:	e8 8e 03 00 00       	call   520 <printf>
     exit(0);
  192:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  199:	e8 24 02 00 00       	call   3c2 <exit>
@@ -705,580 +705,592 @@ SYSCALL(uptime)
  461:	c3                   	ret    
 
 00000462 <waitpid>:
+SYSCALL(waitpid)
  462:	b8 16 00 00 00       	mov    $0x16,%eax
  467:	cd 40                	int    $0x40
  469:	c3                   	ret    
- 46a:	66 90                	xchg   %ax,%ax
- 46c:	66 90                	xchg   %ax,%ax
- 46e:	66 90                	xchg   %ax,%ax
 
-00000470 <printint>:
+0000046a <setPrior>:
+SYSCALL(setPrior)
+ 46a:	b8 17 00 00 00       	mov    $0x17,%eax
+ 46f:	cd 40                	int    $0x40
+ 471:	c3                   	ret    
+
+00000472 <getPrior>:
+ 472:	b8 18 00 00 00       	mov    $0x18,%eax
+ 477:	cd 40                	int    $0x40
+ 479:	c3                   	ret    
+ 47a:	66 90                	xchg   %ax,%ax
+ 47c:	66 90                	xchg   %ax,%ax
+ 47e:	66 90                	xchg   %ax,%ax
+
+00000480 <printint>:
   write(fd, &c, 1);
 }
 
 static void
 printint(int fd, int xx, int base, int sgn)
 {
- 470:	55                   	push   %ebp
- 471:	89 e5                	mov    %esp,%ebp
- 473:	57                   	push   %edi
- 474:	56                   	push   %esi
- 475:	89 c6                	mov    %eax,%esi
- 477:	53                   	push   %ebx
- 478:	83 ec 4c             	sub    $0x4c,%esp
+ 480:	55                   	push   %ebp
+ 481:	89 e5                	mov    %esp,%ebp
+ 483:	57                   	push   %edi
+ 484:	56                   	push   %esi
+ 485:	89 c6                	mov    %eax,%esi
+ 487:	53                   	push   %ebx
+ 488:	83 ec 4c             	sub    $0x4c,%esp
   char buf[16];
   int i, neg;
   uint x;
 
   neg = 0;
   if(sgn && xx < 0){
- 47b:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 47e:	85 db                	test   %ebx,%ebx
- 480:	74 09                	je     48b <printint+0x1b>
- 482:	89 d0                	mov    %edx,%eax
- 484:	c1 e8 1f             	shr    $0x1f,%eax
- 487:	84 c0                	test   %al,%al
- 489:	75 75                	jne    500 <printint+0x90>
+ 48b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 48e:	85 db                	test   %ebx,%ebx
+ 490:	74 09                	je     49b <printint+0x1b>
+ 492:	89 d0                	mov    %edx,%eax
+ 494:	c1 e8 1f             	shr    $0x1f,%eax
+ 497:	84 c0                	test   %al,%al
+ 499:	75 75                	jne    510 <printint+0x90>
     neg = 1;
     x = -xx;
   } else {
     x = xx;
- 48b:	89 d0                	mov    %edx,%eax
+ 49b:	89 d0                	mov    %edx,%eax
   neg = 0;
- 48d:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
- 494:	89 75 c0             	mov    %esi,-0x40(%ebp)
+ 49d:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
+ 4a4:	89 75 c0             	mov    %esi,-0x40(%ebp)
   }
 
   i = 0;
- 497:	31 ff                	xor    %edi,%edi
- 499:	89 ce                	mov    %ecx,%esi
- 49b:	8d 5d d7             	lea    -0x29(%ebp),%ebx
- 49e:	eb 02                	jmp    4a2 <printint+0x32>
+ 4a7:	31 ff                	xor    %edi,%edi
+ 4a9:	89 ce                	mov    %ecx,%esi
+ 4ab:	8d 5d d7             	lea    -0x29(%ebp),%ebx
+ 4ae:	eb 02                	jmp    4b2 <printint+0x32>
   do{
     buf[i++] = digits[x % base];
- 4a0:	89 cf                	mov    %ecx,%edi
- 4a2:	31 d2                	xor    %edx,%edx
- 4a4:	f7 f6                	div    %esi
- 4a6:	8d 4f 01             	lea    0x1(%edi),%ecx
- 4a9:	0f b6 92 b4 08 00 00 	movzbl 0x8b4(%edx),%edx
+ 4b0:	89 cf                	mov    %ecx,%edi
+ 4b2:	31 d2                	xor    %edx,%edx
+ 4b4:	f7 f6                	div    %esi
+ 4b6:	8d 4f 01             	lea    0x1(%edi),%ecx
+ 4b9:	0f b6 92 c4 08 00 00 	movzbl 0x8c4(%edx),%edx
   }while((x /= base) != 0);
- 4b0:	85 c0                	test   %eax,%eax
+ 4c0:	85 c0                	test   %eax,%eax
     buf[i++] = digits[x % base];
- 4b2:	88 14 0b             	mov    %dl,(%ebx,%ecx,1)
+ 4c2:	88 14 0b             	mov    %dl,(%ebx,%ecx,1)
   }while((x /= base) != 0);
- 4b5:	75 e9                	jne    4a0 <printint+0x30>
+ 4c5:	75 e9                	jne    4b0 <printint+0x30>
   if(neg)
- 4b7:	8b 55 c4             	mov    -0x3c(%ebp),%edx
+ 4c7:	8b 55 c4             	mov    -0x3c(%ebp),%edx
     buf[i++] = digits[x % base];
- 4ba:	89 c8                	mov    %ecx,%eax
- 4bc:	8b 75 c0             	mov    -0x40(%ebp),%esi
+ 4ca:	89 c8                	mov    %ecx,%eax
+ 4cc:	8b 75 c0             	mov    -0x40(%ebp),%esi
   if(neg)
- 4bf:	85 d2                	test   %edx,%edx
- 4c1:	74 08                	je     4cb <printint+0x5b>
+ 4cf:	85 d2                	test   %edx,%edx
+ 4d1:	74 08                	je     4db <printint+0x5b>
     buf[i++] = '-';
- 4c3:	8d 4f 02             	lea    0x2(%edi),%ecx
- 4c6:	c6 44 05 d8 2d       	movb   $0x2d,-0x28(%ebp,%eax,1)
+ 4d3:	8d 4f 02             	lea    0x2(%edi),%ecx
+ 4d6:	c6 44 05 d8 2d       	movb   $0x2d,-0x28(%ebp,%eax,1)
 
   while(--i >= 0)
- 4cb:	8d 79 ff             	lea    -0x1(%ecx),%edi
- 4ce:	66 90                	xchg   %ax,%ax
- 4d0:	0f b6 44 3d d8       	movzbl -0x28(%ebp,%edi,1),%eax
- 4d5:	83 ef 01             	sub    $0x1,%edi
+ 4db:	8d 79 ff             	lea    -0x1(%ecx),%edi
+ 4de:	66 90                	xchg   %ax,%ax
+ 4e0:	0f b6 44 3d d8       	movzbl -0x28(%ebp,%edi,1),%eax
+ 4e5:	83 ef 01             	sub    $0x1,%edi
   write(fd, &c, 1);
- 4d8:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
- 4df:	00 
- 4e0:	89 5c 24 04          	mov    %ebx,0x4(%esp)
- 4e4:	89 34 24             	mov    %esi,(%esp)
- 4e7:	88 45 d7             	mov    %al,-0x29(%ebp)
- 4ea:	e8 f3 fe ff ff       	call   3e2 <write>
+ 4e8:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+ 4ef:	00 
+ 4f0:	89 5c 24 04          	mov    %ebx,0x4(%esp)
+ 4f4:	89 34 24             	mov    %esi,(%esp)
+ 4f7:	88 45 d7             	mov    %al,-0x29(%ebp)
+ 4fa:	e8 e3 fe ff ff       	call   3e2 <write>
   while(--i >= 0)
- 4ef:	83 ff ff             	cmp    $0xffffffff,%edi
- 4f2:	75 dc                	jne    4d0 <printint+0x60>
+ 4ff:	83 ff ff             	cmp    $0xffffffff,%edi
+ 502:	75 dc                	jne    4e0 <printint+0x60>
     putc(fd, buf[i]);
 }
- 4f4:	83 c4 4c             	add    $0x4c,%esp
- 4f7:	5b                   	pop    %ebx
- 4f8:	5e                   	pop    %esi
- 4f9:	5f                   	pop    %edi
- 4fa:	5d                   	pop    %ebp
- 4fb:	c3                   	ret    
- 4fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 504:	83 c4 4c             	add    $0x4c,%esp
+ 507:	5b                   	pop    %ebx
+ 508:	5e                   	pop    %esi
+ 509:	5f                   	pop    %edi
+ 50a:	5d                   	pop    %ebp
+ 50b:	c3                   	ret    
+ 50c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     x = -xx;
- 500:	89 d0                	mov    %edx,%eax
- 502:	f7 d8                	neg    %eax
+ 510:	89 d0                	mov    %edx,%eax
+ 512:	f7 d8                	neg    %eax
     neg = 1;
- 504:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
- 50b:	eb 87                	jmp    494 <printint+0x24>
- 50d:	8d 76 00             	lea    0x0(%esi),%esi
+ 514:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
+ 51b:	eb 87                	jmp    4a4 <printint+0x24>
+ 51d:	8d 76 00             	lea    0x0(%esi),%esi
 
-00000510 <printf>:
+00000520 <printf>:
 
 // Print to the given fd. Only understands %d, %x, %p, %s.
 void
 printf(int fd, const char *fmt, ...)
 {
- 510:	55                   	push   %ebp
- 511:	89 e5                	mov    %esp,%ebp
- 513:	57                   	push   %edi
+ 520:	55                   	push   %ebp
+ 521:	89 e5                	mov    %esp,%ebp
+ 523:	57                   	push   %edi
   char *s;
   int c, i, state;
   uint *ap;
 
   state = 0;
- 514:	31 ff                	xor    %edi,%edi
+ 524:	31 ff                	xor    %edi,%edi
 {
- 516:	56                   	push   %esi
- 517:	53                   	push   %ebx
- 518:	83 ec 3c             	sub    $0x3c,%esp
+ 526:	56                   	push   %esi
+ 527:	53                   	push   %ebx
+ 528:	83 ec 3c             	sub    $0x3c,%esp
   ap = (uint*)(void*)&fmt + 1;
   for(i = 0; fmt[i]; i++){
- 51b:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+ 52b:	8b 5d 0c             	mov    0xc(%ebp),%ebx
   ap = (uint*)(void*)&fmt + 1;
- 51e:	8d 45 10             	lea    0x10(%ebp),%eax
+ 52e:	8d 45 10             	lea    0x10(%ebp),%eax
 {
- 521:	8b 75 08             	mov    0x8(%ebp),%esi
+ 531:	8b 75 08             	mov    0x8(%ebp),%esi
   ap = (uint*)(void*)&fmt + 1;
- 524:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ 534:	89 45 d4             	mov    %eax,-0x2c(%ebp)
   for(i = 0; fmt[i]; i++){
- 527:	0f b6 13             	movzbl (%ebx),%edx
- 52a:	83 c3 01             	add    $0x1,%ebx
- 52d:	84 d2                	test   %dl,%dl
- 52f:	75 39                	jne    56a <printf+0x5a>
- 531:	e9 c2 00 00 00       	jmp    5f8 <printf+0xe8>
- 536:	66 90                	xchg   %ax,%ax
+ 537:	0f b6 13             	movzbl (%ebx),%edx
+ 53a:	83 c3 01             	add    $0x1,%ebx
+ 53d:	84 d2                	test   %dl,%dl
+ 53f:	75 39                	jne    57a <printf+0x5a>
+ 541:	e9 c2 00 00 00       	jmp    608 <printf+0xe8>
+ 546:	66 90                	xchg   %ax,%ax
     c = fmt[i] & 0xff;
     if(state == 0){
       if(c == '%'){
- 538:	83 fa 25             	cmp    $0x25,%edx
- 53b:	0f 84 bf 00 00 00    	je     600 <printf+0xf0>
+ 548:	83 fa 25             	cmp    $0x25,%edx
+ 54b:	0f 84 bf 00 00 00    	je     610 <printf+0xf0>
   write(fd, &c, 1);
- 541:	8d 45 e2             	lea    -0x1e(%ebp),%eax
- 544:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
- 54b:	00 
- 54c:	89 44 24 04          	mov    %eax,0x4(%esp)
- 550:	89 34 24             	mov    %esi,(%esp)
+ 551:	8d 45 e2             	lea    -0x1e(%ebp),%eax
+ 554:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+ 55b:	00 
+ 55c:	89 44 24 04          	mov    %eax,0x4(%esp)
+ 560:	89 34 24             	mov    %esi,(%esp)
         state = '%';
       } else {
         putc(fd, c);
- 553:	88 55 e2             	mov    %dl,-0x1e(%ebp)
+ 563:	88 55 e2             	mov    %dl,-0x1e(%ebp)
   write(fd, &c, 1);
- 556:	e8 87 fe ff ff       	call   3e2 <write>
- 55b:	83 c3 01             	add    $0x1,%ebx
+ 566:	e8 77 fe ff ff       	call   3e2 <write>
+ 56b:	83 c3 01             	add    $0x1,%ebx
   for(i = 0; fmt[i]; i++){
- 55e:	0f b6 53 ff          	movzbl -0x1(%ebx),%edx
- 562:	84 d2                	test   %dl,%dl
- 564:	0f 84 8e 00 00 00    	je     5f8 <printf+0xe8>
+ 56e:	0f b6 53 ff          	movzbl -0x1(%ebx),%edx
+ 572:	84 d2                	test   %dl,%dl
+ 574:	0f 84 8e 00 00 00    	je     608 <printf+0xe8>
     if(state == 0){
- 56a:	85 ff                	test   %edi,%edi
+ 57a:	85 ff                	test   %edi,%edi
     c = fmt[i] & 0xff;
- 56c:	0f be c2             	movsbl %dl,%eax
+ 57c:	0f be c2             	movsbl %dl,%eax
     if(state == 0){
- 56f:	74 c7                	je     538 <printf+0x28>
+ 57f:	74 c7                	je     548 <printf+0x28>
       }
     } else if(state == '%'){
- 571:	83 ff 25             	cmp    $0x25,%edi
- 574:	75 e5                	jne    55b <printf+0x4b>
+ 581:	83 ff 25             	cmp    $0x25,%edi
+ 584:	75 e5                	jne    56b <printf+0x4b>
       if(c == 'd'){
- 576:	83 fa 64             	cmp    $0x64,%edx
- 579:	0f 84 31 01 00 00    	je     6b0 <printf+0x1a0>
+ 586:	83 fa 64             	cmp    $0x64,%edx
+ 589:	0f 84 31 01 00 00    	je     6c0 <printf+0x1a0>
         printint(fd, *ap, 10, 1);
         ap++;
       } else if(c == 'x' || c == 'p'){
- 57f:	25 f7 00 00 00       	and    $0xf7,%eax
- 584:	83 f8 70             	cmp    $0x70,%eax
- 587:	0f 84 83 00 00 00    	je     610 <printf+0x100>
+ 58f:	25 f7 00 00 00       	and    $0xf7,%eax
+ 594:	83 f8 70             	cmp    $0x70,%eax
+ 597:	0f 84 83 00 00 00    	je     620 <printf+0x100>
         printint(fd, *ap, 16, 0);
         ap++;
       } else if(c == 's'){
- 58d:	83 fa 73             	cmp    $0x73,%edx
- 590:	0f 84 a2 00 00 00    	je     638 <printf+0x128>
+ 59d:	83 fa 73             	cmp    $0x73,%edx
+ 5a0:	0f 84 a2 00 00 00    	je     648 <printf+0x128>
           s = "(null)";
         while(*s != 0){
           putc(fd, *s);
           s++;
         }
       } else if(c == 'c'){
- 596:	83 fa 63             	cmp    $0x63,%edx
- 599:	0f 84 35 01 00 00    	je     6d4 <printf+0x1c4>
+ 5a6:	83 fa 63             	cmp    $0x63,%edx
+ 5a9:	0f 84 35 01 00 00    	je     6e4 <printf+0x1c4>
         putc(fd, *ap);
         ap++;
       } else if(c == '%'){
- 59f:	83 fa 25             	cmp    $0x25,%edx
- 5a2:	0f 84 e0 00 00 00    	je     688 <printf+0x178>
+ 5af:	83 fa 25             	cmp    $0x25,%edx
+ 5b2:	0f 84 e0 00 00 00    	je     698 <printf+0x178>
   write(fd, &c, 1);
- 5a8:	8d 45 e6             	lea    -0x1a(%ebp),%eax
- 5ab:	83 c3 01             	add    $0x1,%ebx
- 5ae:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
- 5b5:	00 
+ 5b8:	8d 45 e6             	lea    -0x1a(%ebp),%eax
+ 5bb:	83 c3 01             	add    $0x1,%ebx
+ 5be:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+ 5c5:	00 
       } else {
         // Unknown % sequence.  Print it to draw attention.
         putc(fd, '%');
         putc(fd, c);
       }
       state = 0;
- 5b6:	31 ff                	xor    %edi,%edi
+ 5c6:	31 ff                	xor    %edi,%edi
   write(fd, &c, 1);
- 5b8:	89 44 24 04          	mov    %eax,0x4(%esp)
- 5bc:	89 34 24             	mov    %esi,(%esp)
- 5bf:	89 55 d0             	mov    %edx,-0x30(%ebp)
- 5c2:	c6 45 e6 25          	movb   $0x25,-0x1a(%ebp)
- 5c6:	e8 17 fe ff ff       	call   3e2 <write>
+ 5c8:	89 44 24 04          	mov    %eax,0x4(%esp)
+ 5cc:	89 34 24             	mov    %esi,(%esp)
+ 5cf:	89 55 d0             	mov    %edx,-0x30(%ebp)
+ 5d2:	c6 45 e6 25          	movb   $0x25,-0x1a(%ebp)
+ 5d6:	e8 07 fe ff ff       	call   3e2 <write>
         putc(fd, c);
- 5cb:	8b 55 d0             	mov    -0x30(%ebp),%edx
+ 5db:	8b 55 d0             	mov    -0x30(%ebp),%edx
   write(fd, &c, 1);
- 5ce:	8d 45 e7             	lea    -0x19(%ebp),%eax
- 5d1:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
- 5d8:	00 
- 5d9:	89 44 24 04          	mov    %eax,0x4(%esp)
- 5dd:	89 34 24             	mov    %esi,(%esp)
+ 5de:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 5e1:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+ 5e8:	00 
+ 5e9:	89 44 24 04          	mov    %eax,0x4(%esp)
+ 5ed:	89 34 24             	mov    %esi,(%esp)
         putc(fd, c);
- 5e0:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 5f0:	88 55 e7             	mov    %dl,-0x19(%ebp)
   write(fd, &c, 1);
- 5e3:	e8 fa fd ff ff       	call   3e2 <write>
+ 5f3:	e8 ea fd ff ff       	call   3e2 <write>
   for(i = 0; fmt[i]; i++){
- 5e8:	0f b6 53 ff          	movzbl -0x1(%ebx),%edx
- 5ec:	84 d2                	test   %dl,%dl
- 5ee:	0f 85 76 ff ff ff    	jne    56a <printf+0x5a>
- 5f4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 5f8:	0f b6 53 ff          	movzbl -0x1(%ebx),%edx
+ 5fc:	84 d2                	test   %dl,%dl
+ 5fe:	0f 85 76 ff ff ff    	jne    57a <printf+0x5a>
+ 604:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     }
   }
 }
- 5f8:	83 c4 3c             	add    $0x3c,%esp
- 5fb:	5b                   	pop    %ebx
- 5fc:	5e                   	pop    %esi
- 5fd:	5f                   	pop    %edi
- 5fe:	5d                   	pop    %ebp
- 5ff:	c3                   	ret    
+ 608:	83 c4 3c             	add    $0x3c,%esp
+ 60b:	5b                   	pop    %ebx
+ 60c:	5e                   	pop    %esi
+ 60d:	5f                   	pop    %edi
+ 60e:	5d                   	pop    %ebp
+ 60f:	c3                   	ret    
         state = '%';
- 600:	bf 25 00 00 00       	mov    $0x25,%edi
- 605:	e9 51 ff ff ff       	jmp    55b <printf+0x4b>
- 60a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 610:	bf 25 00 00 00       	mov    $0x25,%edi
+ 615:	e9 51 ff ff ff       	jmp    56b <printf+0x4b>
+ 61a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         printint(fd, *ap, 16, 0);
- 610:	8b 45 d4             	mov    -0x2c(%ebp),%eax
- 613:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 620:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+ 623:	b9 10 00 00 00       	mov    $0x10,%ecx
       state = 0;
- 618:	31 ff                	xor    %edi,%edi
+ 628:	31 ff                	xor    %edi,%edi
         printint(fd, *ap, 16, 0);
- 61a:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
- 621:	8b 10                	mov    (%eax),%edx
- 623:	89 f0                	mov    %esi,%eax
- 625:	e8 46 fe ff ff       	call   470 <printint>
+ 62a:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+ 631:	8b 10                	mov    (%eax),%edx
+ 633:	89 f0                	mov    %esi,%eax
+ 635:	e8 46 fe ff ff       	call   480 <printint>
         ap++;
- 62a:	83 45 d4 04          	addl   $0x4,-0x2c(%ebp)
- 62e:	e9 28 ff ff ff       	jmp    55b <printf+0x4b>
- 633:	90                   	nop
- 634:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 63a:	83 45 d4 04          	addl   $0x4,-0x2c(%ebp)
+ 63e:	e9 28 ff ff ff       	jmp    56b <printf+0x4b>
+ 643:	90                   	nop
+ 644:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
         s = (char*)*ap;
- 638:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+ 648:	8b 45 d4             	mov    -0x2c(%ebp),%eax
         ap++;
- 63b:	83 45 d4 04          	addl   $0x4,-0x2c(%ebp)
+ 64b:	83 45 d4 04          	addl   $0x4,-0x2c(%ebp)
         s = (char*)*ap;
- 63f:	8b 38                	mov    (%eax),%edi
+ 64f:	8b 38                	mov    (%eax),%edi
           s = "(null)";
- 641:	b8 ad 08 00 00       	mov    $0x8ad,%eax
- 646:	85 ff                	test   %edi,%edi
- 648:	0f 44 f8             	cmove  %eax,%edi
+ 651:	b8 bd 08 00 00       	mov    $0x8bd,%eax
+ 656:	85 ff                	test   %edi,%edi
+ 658:	0f 44 f8             	cmove  %eax,%edi
         while(*s != 0){
- 64b:	0f b6 07             	movzbl (%edi),%eax
- 64e:	84 c0                	test   %al,%al
- 650:	74 2a                	je     67c <printf+0x16c>
- 652:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
- 658:	88 45 e3             	mov    %al,-0x1d(%ebp)
+ 65b:	0f b6 07             	movzbl (%edi),%eax
+ 65e:	84 c0                	test   %al,%al
+ 660:	74 2a                	je     68c <printf+0x16c>
+ 662:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 668:	88 45 e3             	mov    %al,-0x1d(%ebp)
   write(fd, &c, 1);
- 65b:	8d 45 e3             	lea    -0x1d(%ebp),%eax
+ 66b:	8d 45 e3             	lea    -0x1d(%ebp),%eax
           s++;
- 65e:	83 c7 01             	add    $0x1,%edi
+ 66e:	83 c7 01             	add    $0x1,%edi
   write(fd, &c, 1);
- 661:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
- 668:	00 
- 669:	89 44 24 04          	mov    %eax,0x4(%esp)
- 66d:	89 34 24             	mov    %esi,(%esp)
- 670:	e8 6d fd ff ff       	call   3e2 <write>
+ 671:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+ 678:	00 
+ 679:	89 44 24 04          	mov    %eax,0x4(%esp)
+ 67d:	89 34 24             	mov    %esi,(%esp)
+ 680:	e8 5d fd ff ff       	call   3e2 <write>
         while(*s != 0){
- 675:	0f b6 07             	movzbl (%edi),%eax
- 678:	84 c0                	test   %al,%al
- 67a:	75 dc                	jne    658 <printf+0x148>
+ 685:	0f b6 07             	movzbl (%edi),%eax
+ 688:	84 c0                	test   %al,%al
+ 68a:	75 dc                	jne    668 <printf+0x148>
       state = 0;
- 67c:	31 ff                	xor    %edi,%edi
- 67e:	e9 d8 fe ff ff       	jmp    55b <printf+0x4b>
- 683:	90                   	nop
- 684:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 68c:	31 ff                	xor    %edi,%edi
+ 68e:	e9 d8 fe ff ff       	jmp    56b <printf+0x4b>
+ 693:	90                   	nop
+ 694:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   write(fd, &c, 1);
- 688:	8d 45 e5             	lea    -0x1b(%ebp),%eax
+ 698:	8d 45 e5             	lea    -0x1b(%ebp),%eax
       state = 0;
- 68b:	31 ff                	xor    %edi,%edi
+ 69b:	31 ff                	xor    %edi,%edi
   write(fd, &c, 1);
- 68d:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
- 694:	00 
- 695:	89 44 24 04          	mov    %eax,0x4(%esp)
- 699:	89 34 24             	mov    %esi,(%esp)
- 69c:	c6 45 e5 25          	movb   $0x25,-0x1b(%ebp)
- 6a0:	e8 3d fd ff ff       	call   3e2 <write>
- 6a5:	e9 b1 fe ff ff       	jmp    55b <printf+0x4b>
- 6aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 69d:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+ 6a4:	00 
+ 6a5:	89 44 24 04          	mov    %eax,0x4(%esp)
+ 6a9:	89 34 24             	mov    %esi,(%esp)
+ 6ac:	c6 45 e5 25          	movb   $0x25,-0x1b(%ebp)
+ 6b0:	e8 2d fd ff ff       	call   3e2 <write>
+ 6b5:	e9 b1 fe ff ff       	jmp    56b <printf+0x4b>
+ 6ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         printint(fd, *ap, 10, 1);
- 6b0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
- 6b3:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 6c0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+ 6c3:	b9 0a 00 00 00       	mov    $0xa,%ecx
       state = 0;
- 6b8:	66 31 ff             	xor    %di,%di
+ 6c8:	66 31 ff             	xor    %di,%di
         printint(fd, *ap, 10, 1);
- 6bb:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
- 6c2:	8b 10                	mov    (%eax),%edx
- 6c4:	89 f0                	mov    %esi,%eax
- 6c6:	e8 a5 fd ff ff       	call   470 <printint>
+ 6cb:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+ 6d2:	8b 10                	mov    (%eax),%edx
+ 6d4:	89 f0                	mov    %esi,%eax
+ 6d6:	e8 a5 fd ff ff       	call   480 <printint>
         ap++;
- 6cb:	83 45 d4 04          	addl   $0x4,-0x2c(%ebp)
- 6cf:	e9 87 fe ff ff       	jmp    55b <printf+0x4b>
+ 6db:	83 45 d4 04          	addl   $0x4,-0x2c(%ebp)
+ 6df:	e9 87 fe ff ff       	jmp    56b <printf+0x4b>
         putc(fd, *ap);
- 6d4:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+ 6e4:	8b 45 d4             	mov    -0x2c(%ebp),%eax
       state = 0;
- 6d7:	31 ff                	xor    %edi,%edi
+ 6e7:	31 ff                	xor    %edi,%edi
         putc(fd, *ap);
- 6d9:	8b 00                	mov    (%eax),%eax
+ 6e9:	8b 00                	mov    (%eax),%eax
   write(fd, &c, 1);
- 6db:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
- 6e2:	00 
- 6e3:	89 34 24             	mov    %esi,(%esp)
+ 6eb:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+ 6f2:	00 
+ 6f3:	89 34 24             	mov    %esi,(%esp)
         putc(fd, *ap);
- 6e6:	88 45 e4             	mov    %al,-0x1c(%ebp)
+ 6f6:	88 45 e4             	mov    %al,-0x1c(%ebp)
   write(fd, &c, 1);
- 6e9:	8d 45 e4             	lea    -0x1c(%ebp),%eax
- 6ec:	89 44 24 04          	mov    %eax,0x4(%esp)
- 6f0:	e8 ed fc ff ff       	call   3e2 <write>
+ 6f9:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+ 6fc:	89 44 24 04          	mov    %eax,0x4(%esp)
+ 700:	e8 dd fc ff ff       	call   3e2 <write>
         ap++;
- 6f5:	83 45 d4 04          	addl   $0x4,-0x2c(%ebp)
- 6f9:	e9 5d fe ff ff       	jmp    55b <printf+0x4b>
- 6fe:	66 90                	xchg   %ax,%ax
+ 705:	83 45 d4 04          	addl   $0x4,-0x2c(%ebp)
+ 709:	e9 5d fe ff ff       	jmp    56b <printf+0x4b>
+ 70e:	66 90                	xchg   %ax,%ax
 
-00000700 <free>:
+00000710 <free>:
 static Header base;
 static Header *freep;
 
 void
 free(void *ap)
 {
- 700:	55                   	push   %ebp
+ 710:	55                   	push   %ebp
   Header *bp, *p;
 
   bp = (Header*)ap - 1;
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 701:	a1 80 0b 00 00       	mov    0xb80,%eax
+ 711:	a1 80 0b 00 00       	mov    0xb80,%eax
 {
- 706:	89 e5                	mov    %esp,%ebp
- 708:	57                   	push   %edi
- 709:	56                   	push   %esi
- 70a:	53                   	push   %ebx
- 70b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 716:	89 e5                	mov    %esp,%ebp
+ 718:	57                   	push   %edi
+ 719:	56                   	push   %esi
+ 71a:	53                   	push   %ebx
+ 71b:	8b 5d 08             	mov    0x8(%ebp),%ebx
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 70e:	8b 08                	mov    (%eax),%ecx
+ 71e:	8b 08                	mov    (%eax),%ecx
   bp = (Header*)ap - 1;
- 710:	8d 53 f8             	lea    -0x8(%ebx),%edx
+ 720:	8d 53 f8             	lea    -0x8(%ebx),%edx
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 713:	39 d0                	cmp    %edx,%eax
- 715:	72 11                	jb     728 <free+0x28>
- 717:	90                   	nop
+ 723:	39 d0                	cmp    %edx,%eax
+ 725:	72 11                	jb     738 <free+0x28>
+ 727:	90                   	nop
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 718:	39 c8                	cmp    %ecx,%eax
- 71a:	72 04                	jb     720 <free+0x20>
- 71c:	39 ca                	cmp    %ecx,%edx
- 71e:	72 10                	jb     730 <free+0x30>
- 720:	89 c8                	mov    %ecx,%eax
+ 728:	39 c8                	cmp    %ecx,%eax
+ 72a:	72 04                	jb     730 <free+0x20>
+ 72c:	39 ca                	cmp    %ecx,%edx
+ 72e:	72 10                	jb     740 <free+0x30>
+ 730:	89 c8                	mov    %ecx,%eax
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 722:	39 d0                	cmp    %edx,%eax
+ 732:	39 d0                	cmp    %edx,%eax
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 724:	8b 08                	mov    (%eax),%ecx
+ 734:	8b 08                	mov    (%eax),%ecx
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 726:	73 f0                	jae    718 <free+0x18>
- 728:	39 ca                	cmp    %ecx,%edx
- 72a:	72 04                	jb     730 <free+0x30>
+ 736:	73 f0                	jae    728 <free+0x18>
+ 738:	39 ca                	cmp    %ecx,%edx
+ 73a:	72 04                	jb     740 <free+0x30>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 72c:	39 c8                	cmp    %ecx,%eax
- 72e:	72 f0                	jb     720 <free+0x20>
+ 73c:	39 c8                	cmp    %ecx,%eax
+ 73e:	72 f0                	jb     730 <free+0x20>
       break;
   if(bp + bp->s.size == p->s.ptr){
- 730:	8b 73 fc             	mov    -0x4(%ebx),%esi
- 733:	8d 3c f2             	lea    (%edx,%esi,8),%edi
- 736:	39 cf                	cmp    %ecx,%edi
- 738:	74 1e                	je     758 <free+0x58>
+ 740:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 743:	8d 3c f2             	lea    (%edx,%esi,8),%edi
+ 746:	39 cf                	cmp    %ecx,%edi
+ 748:	74 1e                	je     768 <free+0x58>
     bp->s.size += p->s.ptr->s.size;
     bp->s.ptr = p->s.ptr->s.ptr;
   } else
     bp->s.ptr = p->s.ptr;
- 73a:	89 4b f8             	mov    %ecx,-0x8(%ebx)
+ 74a:	89 4b f8             	mov    %ecx,-0x8(%ebx)
   if(p + p->s.size == bp){
- 73d:	8b 48 04             	mov    0x4(%eax),%ecx
- 740:	8d 34 c8             	lea    (%eax,%ecx,8),%esi
- 743:	39 f2                	cmp    %esi,%edx
- 745:	74 28                	je     76f <free+0x6f>
+ 74d:	8b 48 04             	mov    0x4(%eax),%ecx
+ 750:	8d 34 c8             	lea    (%eax,%ecx,8),%esi
+ 753:	39 f2                	cmp    %esi,%edx
+ 755:	74 28                	je     77f <free+0x6f>
     p->s.size += bp->s.size;
     p->s.ptr = bp->s.ptr;
   } else
     p->s.ptr = bp;
- 747:	89 10                	mov    %edx,(%eax)
+ 757:	89 10                	mov    %edx,(%eax)
   freep = p;
- 749:	a3 80 0b 00 00       	mov    %eax,0xb80
+ 759:	a3 80 0b 00 00       	mov    %eax,0xb80
 }
- 74e:	5b                   	pop    %ebx
- 74f:	5e                   	pop    %esi
- 750:	5f                   	pop    %edi
- 751:	5d                   	pop    %ebp
- 752:	c3                   	ret    
- 753:	90                   	nop
- 754:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 75e:	5b                   	pop    %ebx
+ 75f:	5e                   	pop    %esi
+ 760:	5f                   	pop    %edi
+ 761:	5d                   	pop    %ebp
+ 762:	c3                   	ret    
+ 763:	90                   	nop
+ 764:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     bp->s.size += p->s.ptr->s.size;
- 758:	03 71 04             	add    0x4(%ecx),%esi
- 75b:	89 73 fc             	mov    %esi,-0x4(%ebx)
+ 768:	03 71 04             	add    0x4(%ecx),%esi
+ 76b:	89 73 fc             	mov    %esi,-0x4(%ebx)
     bp->s.ptr = p->s.ptr->s.ptr;
- 75e:	8b 08                	mov    (%eax),%ecx
- 760:	8b 09                	mov    (%ecx),%ecx
- 762:	89 4b f8             	mov    %ecx,-0x8(%ebx)
+ 76e:	8b 08                	mov    (%eax),%ecx
+ 770:	8b 09                	mov    (%ecx),%ecx
+ 772:	89 4b f8             	mov    %ecx,-0x8(%ebx)
   if(p + p->s.size == bp){
- 765:	8b 48 04             	mov    0x4(%eax),%ecx
- 768:	8d 34 c8             	lea    (%eax,%ecx,8),%esi
- 76b:	39 f2                	cmp    %esi,%edx
- 76d:	75 d8                	jne    747 <free+0x47>
+ 775:	8b 48 04             	mov    0x4(%eax),%ecx
+ 778:	8d 34 c8             	lea    (%eax,%ecx,8),%esi
+ 77b:	39 f2                	cmp    %esi,%edx
+ 77d:	75 d8                	jne    757 <free+0x47>
     p->s.size += bp->s.size;
- 76f:	03 4b fc             	add    -0x4(%ebx),%ecx
+ 77f:	03 4b fc             	add    -0x4(%ebx),%ecx
   freep = p;
- 772:	a3 80 0b 00 00       	mov    %eax,0xb80
+ 782:	a3 80 0b 00 00       	mov    %eax,0xb80
     p->s.size += bp->s.size;
- 777:	89 48 04             	mov    %ecx,0x4(%eax)
+ 787:	89 48 04             	mov    %ecx,0x4(%eax)
     p->s.ptr = bp->s.ptr;
- 77a:	8b 53 f8             	mov    -0x8(%ebx),%edx
- 77d:	89 10                	mov    %edx,(%eax)
+ 78a:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 78d:	89 10                	mov    %edx,(%eax)
 }
- 77f:	5b                   	pop    %ebx
- 780:	5e                   	pop    %esi
- 781:	5f                   	pop    %edi
- 782:	5d                   	pop    %ebp
- 783:	c3                   	ret    
- 784:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
- 78a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
-
-00000790 <malloc>:
+ 78f:	5b                   	pop    %ebx
+ 790:	5e                   	pop    %esi
+ 791:	5f                   	pop    %edi
+ 792:	5d                   	pop    %ebp
+ 793:	c3                   	ret    
+ 794:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 79a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+000007a0 <malloc>:
   return freep;
 }
 
 void*
 malloc(uint nbytes)
 {
- 790:	55                   	push   %ebp
- 791:	89 e5                	mov    %esp,%ebp
- 793:	57                   	push   %edi
- 794:	56                   	push   %esi
- 795:	53                   	push   %ebx
- 796:	83 ec 1c             	sub    $0x1c,%esp
+ 7a0:	55                   	push   %ebp
+ 7a1:	89 e5                	mov    %esp,%ebp
+ 7a3:	57                   	push   %edi
+ 7a4:	56                   	push   %esi
+ 7a5:	53                   	push   %ebx
+ 7a6:	83 ec 1c             	sub    $0x1c,%esp
   Header *p, *prevp;
   uint nunits;
 
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 799:	8b 45 08             	mov    0x8(%ebp),%eax
+ 7a9:	8b 45 08             	mov    0x8(%ebp),%eax
   if((prevp = freep) == 0){
- 79c:	8b 1d 80 0b 00 00    	mov    0xb80,%ebx
+ 7ac:	8b 1d 80 0b 00 00    	mov    0xb80,%ebx
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 7a2:	8d 48 07             	lea    0x7(%eax),%ecx
- 7a5:	c1 e9 03             	shr    $0x3,%ecx
+ 7b2:	8d 48 07             	lea    0x7(%eax),%ecx
+ 7b5:	c1 e9 03             	shr    $0x3,%ecx
   if((prevp = freep) == 0){
- 7a8:	85 db                	test   %ebx,%ebx
+ 7b8:	85 db                	test   %ebx,%ebx
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 7aa:	8d 71 01             	lea    0x1(%ecx),%esi
+ 7ba:	8d 71 01             	lea    0x1(%ecx),%esi
   if((prevp = freep) == 0){
- 7ad:	0f 84 9b 00 00 00    	je     84e <malloc+0xbe>
- 7b3:	8b 13                	mov    (%ebx),%edx
- 7b5:	8b 7a 04             	mov    0x4(%edx),%edi
+ 7bd:	0f 84 9b 00 00 00    	je     85e <malloc+0xbe>
+ 7c3:	8b 13                	mov    (%ebx),%edx
+ 7c5:	8b 7a 04             	mov    0x4(%edx),%edi
     base.s.ptr = freep = prevp = &base;
     base.s.size = 0;
   }
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
     if(p->s.size >= nunits){
- 7b8:	39 fe                	cmp    %edi,%esi
- 7ba:	76 64                	jbe    820 <malloc+0x90>
- 7bc:	8d 04 f5 00 00 00 00 	lea    0x0(,%esi,8),%eax
+ 7c8:	39 fe                	cmp    %edi,%esi
+ 7ca:	76 64                	jbe    830 <malloc+0x90>
+ 7cc:	8d 04 f5 00 00 00 00 	lea    0x0(,%esi,8),%eax
   if(nu < 4096)
- 7c3:	bb 00 80 00 00       	mov    $0x8000,%ebx
- 7c8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
- 7cb:	eb 0e                	jmp    7db <malloc+0x4b>
- 7cd:	8d 76 00             	lea    0x0(%esi),%esi
+ 7d3:	bb 00 80 00 00       	mov    $0x8000,%ebx
+ 7d8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+ 7db:	eb 0e                	jmp    7eb <malloc+0x4b>
+ 7dd:	8d 76 00             	lea    0x0(%esi),%esi
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 7d0:	8b 02                	mov    (%edx),%eax
+ 7e0:	8b 02                	mov    (%edx),%eax
     if(p->s.size >= nunits){
- 7d2:	8b 78 04             	mov    0x4(%eax),%edi
- 7d5:	39 fe                	cmp    %edi,%esi
- 7d7:	76 4f                	jbe    828 <malloc+0x98>
- 7d9:	89 c2                	mov    %eax,%edx
+ 7e2:	8b 78 04             	mov    0x4(%eax),%edi
+ 7e5:	39 fe                	cmp    %edi,%esi
+ 7e7:	76 4f                	jbe    838 <malloc+0x98>
+ 7e9:	89 c2                	mov    %eax,%edx
         p->s.size = nunits;
       }
       freep = prevp;
       return (void*)(p + 1);
     }
     if(p == freep)
- 7db:	3b 15 80 0b 00 00    	cmp    0xb80,%edx
- 7e1:	75 ed                	jne    7d0 <malloc+0x40>
+ 7eb:	3b 15 80 0b 00 00    	cmp    0xb80,%edx
+ 7f1:	75 ed                	jne    7e0 <malloc+0x40>
   if(nu < 4096)
- 7e3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
- 7e6:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
- 7ec:	bf 00 10 00 00       	mov    $0x1000,%edi
- 7f1:	0f 43 fe             	cmovae %esi,%edi
- 7f4:	0f 42 c3             	cmovb  %ebx,%eax
+ 7f3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+ 7f6:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+ 7fc:	bf 00 10 00 00       	mov    $0x1000,%edi
+ 801:	0f 43 fe             	cmovae %esi,%edi
+ 804:	0f 42 c3             	cmovb  %ebx,%eax
   p = sbrk(nu * sizeof(Header));
- 7f7:	89 04 24             	mov    %eax,(%esp)
- 7fa:	e8 4b fc ff ff       	call   44a <sbrk>
+ 807:	89 04 24             	mov    %eax,(%esp)
+ 80a:	e8 3b fc ff ff       	call   44a <sbrk>
   if(p == (char*)-1)
- 7ff:	83 f8 ff             	cmp    $0xffffffff,%eax
- 802:	74 18                	je     81c <malloc+0x8c>
+ 80f:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 812:	74 18                	je     82c <malloc+0x8c>
   hp->s.size = nu;
- 804:	89 78 04             	mov    %edi,0x4(%eax)
+ 814:	89 78 04             	mov    %edi,0x4(%eax)
   free((void*)(hp + 1));
- 807:	83 c0 08             	add    $0x8,%eax
- 80a:	89 04 24             	mov    %eax,(%esp)
- 80d:	e8 ee fe ff ff       	call   700 <free>
+ 817:	83 c0 08             	add    $0x8,%eax
+ 81a:	89 04 24             	mov    %eax,(%esp)
+ 81d:	e8 ee fe ff ff       	call   710 <free>
   return freep;
- 812:	8b 15 80 0b 00 00    	mov    0xb80,%edx
+ 822:	8b 15 80 0b 00 00    	mov    0xb80,%edx
       if((p = morecore(nunits)) == 0)
- 818:	85 d2                	test   %edx,%edx
- 81a:	75 b4                	jne    7d0 <malloc+0x40>
+ 828:	85 d2                	test   %edx,%edx
+ 82a:	75 b4                	jne    7e0 <malloc+0x40>
         return 0;
- 81c:	31 c0                	xor    %eax,%eax
- 81e:	eb 20                	jmp    840 <malloc+0xb0>
+ 82c:	31 c0                	xor    %eax,%eax
+ 82e:	eb 20                	jmp    850 <malloc+0xb0>
     if(p->s.size >= nunits){
- 820:	89 d0                	mov    %edx,%eax
- 822:	89 da                	mov    %ebx,%edx
- 824:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 830:	89 d0                	mov    %edx,%eax
+ 832:	89 da                	mov    %ebx,%edx
+ 834:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
       if(p->s.size == nunits)
- 828:	39 fe                	cmp    %edi,%esi
- 82a:	74 1c                	je     848 <malloc+0xb8>
+ 838:	39 fe                	cmp    %edi,%esi
+ 83a:	74 1c                	je     858 <malloc+0xb8>
         p->s.size -= nunits;
- 82c:	29 f7                	sub    %esi,%edi
- 82e:	89 78 04             	mov    %edi,0x4(%eax)
+ 83c:	29 f7                	sub    %esi,%edi
+ 83e:	89 78 04             	mov    %edi,0x4(%eax)
         p += p->s.size;
- 831:	8d 04 f8             	lea    (%eax,%edi,8),%eax
+ 841:	8d 04 f8             	lea    (%eax,%edi,8),%eax
         p->s.size = nunits;
- 834:	89 70 04             	mov    %esi,0x4(%eax)
+ 844:	89 70 04             	mov    %esi,0x4(%eax)
       freep = prevp;
- 837:	89 15 80 0b 00 00    	mov    %edx,0xb80
+ 847:	89 15 80 0b 00 00    	mov    %edx,0xb80
       return (void*)(p + 1);
- 83d:	83 c0 08             	add    $0x8,%eax
+ 84d:	83 c0 08             	add    $0x8,%eax
   }
 }
- 840:	83 c4 1c             	add    $0x1c,%esp
- 843:	5b                   	pop    %ebx
- 844:	5e                   	pop    %esi
- 845:	5f                   	pop    %edi
- 846:	5d                   	pop    %ebp
- 847:	c3                   	ret    
+ 850:	83 c4 1c             	add    $0x1c,%esp
+ 853:	5b                   	pop    %ebx
+ 854:	5e                   	pop    %esi
+ 855:	5f                   	pop    %edi
+ 856:	5d                   	pop    %ebp
+ 857:	c3                   	ret    
         prevp->s.ptr = p->s.ptr;
- 848:	8b 08                	mov    (%eax),%ecx
- 84a:	89 0a                	mov    %ecx,(%edx)
- 84c:	eb e9                	jmp    837 <malloc+0xa7>
+ 858:	8b 08                	mov    (%eax),%ecx
+ 85a:	89 0a                	mov    %ecx,(%edx)
+ 85c:	eb e9                	jmp    847 <malloc+0xa7>
     base.s.ptr = freep = prevp = &base;
- 84e:	c7 05 80 0b 00 00 84 	movl   $0xb84,0xb80
- 855:	0b 00 00 
+ 85e:	c7 05 80 0b 00 00 84 	movl   $0xb84,0xb80
+ 865:	0b 00 00 
     base.s.size = 0;
- 858:	ba 84 0b 00 00       	mov    $0xb84,%edx
+ 868:	ba 84 0b 00 00       	mov    $0xb84,%edx
     base.s.ptr = freep = prevp = &base;
- 85d:	c7 05 84 0b 00 00 84 	movl   $0xb84,0xb84
- 864:	0b 00 00 
+ 86d:	c7 05 84 0b 00 00 84 	movl   $0xb84,0xb84
+ 874:	0b 00 00 
     base.s.size = 0;
- 867:	c7 05 88 0b 00 00 00 	movl   $0x0,0xb88
- 86e:	00 00 00 
- 871:	e9 46 ff ff ff       	jmp    7bc <malloc+0x2c>
+ 877:	c7 05 88 0b 00 00 00 	movl   $0x0,0xb88
+ 87e:	00 00 00 
+ 881:	e9 46 ff ff ff       	jmp    7cc <malloc+0x2c>
diff --git a/wc.o b/wc.o
index f7edccc..26eff3d 100644
Binary files a/wc.o and b/wc.o differ
diff --git a/wc.sym b/wc.sym
index f3a4e2f..0f6b69f 100644
--- a/wc.sym
+++ b/wc.sym
@@ -1,6 +1,6 @@
 00000000 .text
-00000876 .rodata
-000008c8 .eh_frame
+00000886 .rodata
+000008d8 .eh_frame
 00000b80 .bss
 00000000 .comment
 00000000 .debug_aranges
@@ -13,25 +13,27 @@
 00000000 wc.c
 00000000 ulib.c
 00000000 printf.c
-00000470 printint
-000008b4 digits.1358
+00000480 printint
+000008c4 digits.1362
 00000000 umalloc.c
 00000b80 freep
 00000b84 base
 000001a0 strcpy
 00000462 waitpid
-00000510 printf
+00000520 printf
 00000390 memmove
 0000040a mknod
 000002b0 gets
 00000442 getpid
-00000790 malloc
+000007a0 malloc
 00000452 sleep
 000003d2 pipe
+0000046a setPrior
 000003e2 write
 0000041a fstat
 000003f2 kill
 00000432 chdir
+00000472 getPrior
 000003fa exec
 000003ca wait
 000003da read
@@ -40,14 +42,14 @@
 000003ba fork
 0000044a sbrk
 0000045a uptime
-00000b64 __bss_start
+00000b74 __bss_start
 00000250 memset
 00000000 main
 000001d0 strcmp
 0000043a dup
 00000ba0 buf
 00000310 stat
-00000b64 _edata
+00000b74 _edata
 00000da0 _end
 00000422 link
 000003c2 exit
@@ -57,4 +59,4 @@
 00000270 strchr
 0000042a mkdir
 000003ea close
-00000700 free
+00000710 free
diff --git a/xv6.img b/xv6.img
index 0ea5321..b6ff978 100644
Binary files a/xv6.img and b/xv6.img differ
diff --git a/zombie.asm b/zombie.asm
index 6e15c9e..25ccc3c 100644
--- a/zombie.asm
+++ b/zombie.asm
@@ -543,580 +543,592 @@ SYSCALL(uptime)
  2f1:	c3                   	ret    
 
 000002f2 <waitpid>:
+SYSCALL(waitpid)
  2f2:	b8 16 00 00 00       	mov    $0x16,%eax
  2f7:	cd 40                	int    $0x40
  2f9:	c3                   	ret    
- 2fa:	66 90                	xchg   %ax,%ax
- 2fc:	66 90                	xchg   %ax,%ax
- 2fe:	66 90                	xchg   %ax,%ax
 
-00000300 <printint>:
+000002fa <setPrior>:
+SYSCALL(setPrior)
+ 2fa:	b8 17 00 00 00       	mov    $0x17,%eax
+ 2ff:	cd 40                	int    $0x40
+ 301:	c3                   	ret    
+
+00000302 <getPrior>:
+ 302:	b8 18 00 00 00       	mov    $0x18,%eax
+ 307:	cd 40                	int    $0x40
+ 309:	c3                   	ret    
+ 30a:	66 90                	xchg   %ax,%ax
+ 30c:	66 90                	xchg   %ax,%ax
+ 30e:	66 90                	xchg   %ax,%ax
+
+00000310 <printint>:
   write(fd, &c, 1);
 }
 
 static void
 printint(int fd, int xx, int base, int sgn)
 {
- 300:	55                   	push   %ebp
- 301:	89 e5                	mov    %esp,%ebp
- 303:	57                   	push   %edi
- 304:	56                   	push   %esi
- 305:	89 c6                	mov    %eax,%esi
- 307:	53                   	push   %ebx
- 308:	83 ec 4c             	sub    $0x4c,%esp
+ 310:	55                   	push   %ebp
+ 311:	89 e5                	mov    %esp,%ebp
+ 313:	57                   	push   %edi
+ 314:	56                   	push   %esi
+ 315:	89 c6                	mov    %eax,%esi
+ 317:	53                   	push   %ebx
+ 318:	83 ec 4c             	sub    $0x4c,%esp
   char buf[16];
   int i, neg;
   uint x;
 
   neg = 0;
   if(sgn && xx < 0){
- 30b:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 30e:	85 db                	test   %ebx,%ebx
- 310:	74 09                	je     31b <printint+0x1b>
- 312:	89 d0                	mov    %edx,%eax
- 314:	c1 e8 1f             	shr    $0x1f,%eax
- 317:	84 c0                	test   %al,%al
- 319:	75 75                	jne    390 <printint+0x90>
+ 31b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 31e:	85 db                	test   %ebx,%ebx
+ 320:	74 09                	je     32b <printint+0x1b>
+ 322:	89 d0                	mov    %edx,%eax
+ 324:	c1 e8 1f             	shr    $0x1f,%eax
+ 327:	84 c0                	test   %al,%al
+ 329:	75 75                	jne    3a0 <printint+0x90>
     neg = 1;
     x = -xx;
   } else {
     x = xx;
- 31b:	89 d0                	mov    %edx,%eax
+ 32b:	89 d0                	mov    %edx,%eax
   neg = 0;
- 31d:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
- 324:	89 75 c0             	mov    %esi,-0x40(%ebp)
+ 32d:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
+ 334:	89 75 c0             	mov    %esi,-0x40(%ebp)
   }
 
   i = 0;
- 327:	31 ff                	xor    %edi,%edi
- 329:	89 ce                	mov    %ecx,%esi
- 32b:	8d 5d d7             	lea    -0x29(%ebp),%ebx
- 32e:	eb 02                	jmp    332 <printint+0x32>
+ 337:	31 ff                	xor    %edi,%edi
+ 339:	89 ce                	mov    %ecx,%esi
+ 33b:	8d 5d d7             	lea    -0x29(%ebp),%ebx
+ 33e:	eb 02                	jmp    342 <printint+0x32>
   do{
     buf[i++] = digits[x % base];
- 330:	89 cf                	mov    %ecx,%edi
- 332:	31 d2                	xor    %edx,%edx
- 334:	f7 f6                	div    %esi
- 336:	8d 4f 01             	lea    0x1(%edi),%ecx
- 339:	0f b6 92 0d 07 00 00 	movzbl 0x70d(%edx),%edx
+ 340:	89 cf                	mov    %ecx,%edi
+ 342:	31 d2                	xor    %edx,%edx
+ 344:	f7 f6                	div    %esi
+ 346:	8d 4f 01             	lea    0x1(%edi),%ecx
+ 349:	0f b6 92 1d 07 00 00 	movzbl 0x71d(%edx),%edx
   }while((x /= base) != 0);
- 340:	85 c0                	test   %eax,%eax
+ 350:	85 c0                	test   %eax,%eax
     buf[i++] = digits[x % base];
- 342:	88 14 0b             	mov    %dl,(%ebx,%ecx,1)
+ 352:	88 14 0b             	mov    %dl,(%ebx,%ecx,1)
   }while((x /= base) != 0);
- 345:	75 e9                	jne    330 <printint+0x30>
+ 355:	75 e9                	jne    340 <printint+0x30>
   if(neg)
- 347:	8b 55 c4             	mov    -0x3c(%ebp),%edx
+ 357:	8b 55 c4             	mov    -0x3c(%ebp),%edx
     buf[i++] = digits[x % base];
- 34a:	89 c8                	mov    %ecx,%eax
- 34c:	8b 75 c0             	mov    -0x40(%ebp),%esi
+ 35a:	89 c8                	mov    %ecx,%eax
+ 35c:	8b 75 c0             	mov    -0x40(%ebp),%esi
   if(neg)
- 34f:	85 d2                	test   %edx,%edx
- 351:	74 08                	je     35b <printint+0x5b>
+ 35f:	85 d2                	test   %edx,%edx
+ 361:	74 08                	je     36b <printint+0x5b>
     buf[i++] = '-';
- 353:	8d 4f 02             	lea    0x2(%edi),%ecx
- 356:	c6 44 05 d8 2d       	movb   $0x2d,-0x28(%ebp,%eax,1)
+ 363:	8d 4f 02             	lea    0x2(%edi),%ecx
+ 366:	c6 44 05 d8 2d       	movb   $0x2d,-0x28(%ebp,%eax,1)
 
   while(--i >= 0)
- 35b:	8d 79 ff             	lea    -0x1(%ecx),%edi
- 35e:	66 90                	xchg   %ax,%ax
- 360:	0f b6 44 3d d8       	movzbl -0x28(%ebp,%edi,1),%eax
- 365:	83 ef 01             	sub    $0x1,%edi
+ 36b:	8d 79 ff             	lea    -0x1(%ecx),%edi
+ 36e:	66 90                	xchg   %ax,%ax
+ 370:	0f b6 44 3d d8       	movzbl -0x28(%ebp,%edi,1),%eax
+ 375:	83 ef 01             	sub    $0x1,%edi
   write(fd, &c, 1);
- 368:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
- 36f:	00 
- 370:	89 5c 24 04          	mov    %ebx,0x4(%esp)
- 374:	89 34 24             	mov    %esi,(%esp)
- 377:	88 45 d7             	mov    %al,-0x29(%ebp)
- 37a:	e8 f3 fe ff ff       	call   272 <write>
+ 378:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+ 37f:	00 
+ 380:	89 5c 24 04          	mov    %ebx,0x4(%esp)
+ 384:	89 34 24             	mov    %esi,(%esp)
+ 387:	88 45 d7             	mov    %al,-0x29(%ebp)
+ 38a:	e8 e3 fe ff ff       	call   272 <write>
   while(--i >= 0)
- 37f:	83 ff ff             	cmp    $0xffffffff,%edi
- 382:	75 dc                	jne    360 <printint+0x60>
+ 38f:	83 ff ff             	cmp    $0xffffffff,%edi
+ 392:	75 dc                	jne    370 <printint+0x60>
     putc(fd, buf[i]);
 }
- 384:	83 c4 4c             	add    $0x4c,%esp
- 387:	5b                   	pop    %ebx
- 388:	5e                   	pop    %esi
- 389:	5f                   	pop    %edi
- 38a:	5d                   	pop    %ebp
- 38b:	c3                   	ret    
- 38c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 394:	83 c4 4c             	add    $0x4c,%esp
+ 397:	5b                   	pop    %ebx
+ 398:	5e                   	pop    %esi
+ 399:	5f                   	pop    %edi
+ 39a:	5d                   	pop    %ebp
+ 39b:	c3                   	ret    
+ 39c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     x = -xx;
- 390:	89 d0                	mov    %edx,%eax
- 392:	f7 d8                	neg    %eax
+ 3a0:	89 d0                	mov    %edx,%eax
+ 3a2:	f7 d8                	neg    %eax
     neg = 1;
- 394:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
- 39b:	eb 87                	jmp    324 <printint+0x24>
- 39d:	8d 76 00             	lea    0x0(%esi),%esi
+ 3a4:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
+ 3ab:	eb 87                	jmp    334 <printint+0x24>
+ 3ad:	8d 76 00             	lea    0x0(%esi),%esi
 
-000003a0 <printf>:
+000003b0 <printf>:
 
 // Print to the given fd. Only understands %d, %x, %p, %s.
 void
 printf(int fd, const char *fmt, ...)
 {
- 3a0:	55                   	push   %ebp
- 3a1:	89 e5                	mov    %esp,%ebp
- 3a3:	57                   	push   %edi
+ 3b0:	55                   	push   %ebp
+ 3b1:	89 e5                	mov    %esp,%ebp
+ 3b3:	57                   	push   %edi
   char *s;
   int c, i, state;
   uint *ap;
 
   state = 0;
- 3a4:	31 ff                	xor    %edi,%edi
+ 3b4:	31 ff                	xor    %edi,%edi
 {
- 3a6:	56                   	push   %esi
- 3a7:	53                   	push   %ebx
- 3a8:	83 ec 3c             	sub    $0x3c,%esp
+ 3b6:	56                   	push   %esi
+ 3b7:	53                   	push   %ebx
+ 3b8:	83 ec 3c             	sub    $0x3c,%esp
   ap = (uint*)(void*)&fmt + 1;
   for(i = 0; fmt[i]; i++){
- 3ab:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+ 3bb:	8b 5d 0c             	mov    0xc(%ebp),%ebx
   ap = (uint*)(void*)&fmt + 1;
- 3ae:	8d 45 10             	lea    0x10(%ebp),%eax
+ 3be:	8d 45 10             	lea    0x10(%ebp),%eax
 {
- 3b1:	8b 75 08             	mov    0x8(%ebp),%esi
+ 3c1:	8b 75 08             	mov    0x8(%ebp),%esi
   ap = (uint*)(void*)&fmt + 1;
- 3b4:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ 3c4:	89 45 d4             	mov    %eax,-0x2c(%ebp)
   for(i = 0; fmt[i]; i++){
- 3b7:	0f b6 13             	movzbl (%ebx),%edx
- 3ba:	83 c3 01             	add    $0x1,%ebx
- 3bd:	84 d2                	test   %dl,%dl
- 3bf:	75 39                	jne    3fa <printf+0x5a>
- 3c1:	e9 c2 00 00 00       	jmp    488 <printf+0xe8>
- 3c6:	66 90                	xchg   %ax,%ax
+ 3c7:	0f b6 13             	movzbl (%ebx),%edx
+ 3ca:	83 c3 01             	add    $0x1,%ebx
+ 3cd:	84 d2                	test   %dl,%dl
+ 3cf:	75 39                	jne    40a <printf+0x5a>
+ 3d1:	e9 c2 00 00 00       	jmp    498 <printf+0xe8>
+ 3d6:	66 90                	xchg   %ax,%ax
     c = fmt[i] & 0xff;
     if(state == 0){
       if(c == '%'){
- 3c8:	83 fa 25             	cmp    $0x25,%edx
- 3cb:	0f 84 bf 00 00 00    	je     490 <printf+0xf0>
+ 3d8:	83 fa 25             	cmp    $0x25,%edx
+ 3db:	0f 84 bf 00 00 00    	je     4a0 <printf+0xf0>
   write(fd, &c, 1);
- 3d1:	8d 45 e2             	lea    -0x1e(%ebp),%eax
- 3d4:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
- 3db:	00 
- 3dc:	89 44 24 04          	mov    %eax,0x4(%esp)
- 3e0:	89 34 24             	mov    %esi,(%esp)
+ 3e1:	8d 45 e2             	lea    -0x1e(%ebp),%eax
+ 3e4:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+ 3eb:	00 
+ 3ec:	89 44 24 04          	mov    %eax,0x4(%esp)
+ 3f0:	89 34 24             	mov    %esi,(%esp)
         state = '%';
       } else {
         putc(fd, c);
- 3e3:	88 55 e2             	mov    %dl,-0x1e(%ebp)
+ 3f3:	88 55 e2             	mov    %dl,-0x1e(%ebp)
   write(fd, &c, 1);
- 3e6:	e8 87 fe ff ff       	call   272 <write>
- 3eb:	83 c3 01             	add    $0x1,%ebx
+ 3f6:	e8 77 fe ff ff       	call   272 <write>
+ 3fb:	83 c3 01             	add    $0x1,%ebx
   for(i = 0; fmt[i]; i++){
- 3ee:	0f b6 53 ff          	movzbl -0x1(%ebx),%edx
- 3f2:	84 d2                	test   %dl,%dl
- 3f4:	0f 84 8e 00 00 00    	je     488 <printf+0xe8>
+ 3fe:	0f b6 53 ff          	movzbl -0x1(%ebx),%edx
+ 402:	84 d2                	test   %dl,%dl
+ 404:	0f 84 8e 00 00 00    	je     498 <printf+0xe8>
     if(state == 0){
- 3fa:	85 ff                	test   %edi,%edi
+ 40a:	85 ff                	test   %edi,%edi
     c = fmt[i] & 0xff;
- 3fc:	0f be c2             	movsbl %dl,%eax
+ 40c:	0f be c2             	movsbl %dl,%eax
     if(state == 0){
- 3ff:	74 c7                	je     3c8 <printf+0x28>
+ 40f:	74 c7                	je     3d8 <printf+0x28>
       }
     } else if(state == '%'){
- 401:	83 ff 25             	cmp    $0x25,%edi
- 404:	75 e5                	jne    3eb <printf+0x4b>
+ 411:	83 ff 25             	cmp    $0x25,%edi
+ 414:	75 e5                	jne    3fb <printf+0x4b>
       if(c == 'd'){
- 406:	83 fa 64             	cmp    $0x64,%edx
- 409:	0f 84 31 01 00 00    	je     540 <printf+0x1a0>
+ 416:	83 fa 64             	cmp    $0x64,%edx
+ 419:	0f 84 31 01 00 00    	je     550 <printf+0x1a0>
         printint(fd, *ap, 10, 1);
         ap++;
       } else if(c == 'x' || c == 'p'){
- 40f:	25 f7 00 00 00       	and    $0xf7,%eax
- 414:	83 f8 70             	cmp    $0x70,%eax
- 417:	0f 84 83 00 00 00    	je     4a0 <printf+0x100>
+ 41f:	25 f7 00 00 00       	and    $0xf7,%eax
+ 424:	83 f8 70             	cmp    $0x70,%eax
+ 427:	0f 84 83 00 00 00    	je     4b0 <printf+0x100>
         printint(fd, *ap, 16, 0);
         ap++;
       } else if(c == 's'){
- 41d:	83 fa 73             	cmp    $0x73,%edx
- 420:	0f 84 a2 00 00 00    	je     4c8 <printf+0x128>
+ 42d:	83 fa 73             	cmp    $0x73,%edx
+ 430:	0f 84 a2 00 00 00    	je     4d8 <printf+0x128>
           s = "(null)";
         while(*s != 0){
           putc(fd, *s);
           s++;
         }
       } else if(c == 'c'){
- 426:	83 fa 63             	cmp    $0x63,%edx
- 429:	0f 84 35 01 00 00    	je     564 <printf+0x1c4>
+ 436:	83 fa 63             	cmp    $0x63,%edx
+ 439:	0f 84 35 01 00 00    	je     574 <printf+0x1c4>
         putc(fd, *ap);
         ap++;
       } else if(c == '%'){
- 42f:	83 fa 25             	cmp    $0x25,%edx
- 432:	0f 84 e0 00 00 00    	je     518 <printf+0x178>
+ 43f:	83 fa 25             	cmp    $0x25,%edx
+ 442:	0f 84 e0 00 00 00    	je     528 <printf+0x178>
   write(fd, &c, 1);
- 438:	8d 45 e6             	lea    -0x1a(%ebp),%eax
- 43b:	83 c3 01             	add    $0x1,%ebx
- 43e:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
- 445:	00 
+ 448:	8d 45 e6             	lea    -0x1a(%ebp),%eax
+ 44b:	83 c3 01             	add    $0x1,%ebx
+ 44e:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+ 455:	00 
       } else {
         // Unknown % sequence.  Print it to draw attention.
         putc(fd, '%');
         putc(fd, c);
       }
       state = 0;
- 446:	31 ff                	xor    %edi,%edi
+ 456:	31 ff                	xor    %edi,%edi
   write(fd, &c, 1);
- 448:	89 44 24 04          	mov    %eax,0x4(%esp)
- 44c:	89 34 24             	mov    %esi,(%esp)
- 44f:	89 55 d0             	mov    %edx,-0x30(%ebp)
- 452:	c6 45 e6 25          	movb   $0x25,-0x1a(%ebp)
- 456:	e8 17 fe ff ff       	call   272 <write>
+ 458:	89 44 24 04          	mov    %eax,0x4(%esp)
+ 45c:	89 34 24             	mov    %esi,(%esp)
+ 45f:	89 55 d0             	mov    %edx,-0x30(%ebp)
+ 462:	c6 45 e6 25          	movb   $0x25,-0x1a(%ebp)
+ 466:	e8 07 fe ff ff       	call   272 <write>
         putc(fd, c);
- 45b:	8b 55 d0             	mov    -0x30(%ebp),%edx
+ 46b:	8b 55 d0             	mov    -0x30(%ebp),%edx
   write(fd, &c, 1);
- 45e:	8d 45 e7             	lea    -0x19(%ebp),%eax
- 461:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
- 468:	00 
- 469:	89 44 24 04          	mov    %eax,0x4(%esp)
- 46d:	89 34 24             	mov    %esi,(%esp)
+ 46e:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 471:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+ 478:	00 
+ 479:	89 44 24 04          	mov    %eax,0x4(%esp)
+ 47d:	89 34 24             	mov    %esi,(%esp)
         putc(fd, c);
- 470:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 480:	88 55 e7             	mov    %dl,-0x19(%ebp)
   write(fd, &c, 1);
- 473:	e8 fa fd ff ff       	call   272 <write>
+ 483:	e8 ea fd ff ff       	call   272 <write>
   for(i = 0; fmt[i]; i++){
- 478:	0f b6 53 ff          	movzbl -0x1(%ebx),%edx
- 47c:	84 d2                	test   %dl,%dl
- 47e:	0f 85 76 ff ff ff    	jne    3fa <printf+0x5a>
- 484:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 488:	0f b6 53 ff          	movzbl -0x1(%ebx),%edx
+ 48c:	84 d2                	test   %dl,%dl
+ 48e:	0f 85 76 ff ff ff    	jne    40a <printf+0x5a>
+ 494:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     }
   }
 }
- 488:	83 c4 3c             	add    $0x3c,%esp
- 48b:	5b                   	pop    %ebx
- 48c:	5e                   	pop    %esi
- 48d:	5f                   	pop    %edi
- 48e:	5d                   	pop    %ebp
- 48f:	c3                   	ret    
+ 498:	83 c4 3c             	add    $0x3c,%esp
+ 49b:	5b                   	pop    %ebx
+ 49c:	5e                   	pop    %esi
+ 49d:	5f                   	pop    %edi
+ 49e:	5d                   	pop    %ebp
+ 49f:	c3                   	ret    
         state = '%';
- 490:	bf 25 00 00 00       	mov    $0x25,%edi
- 495:	e9 51 ff ff ff       	jmp    3eb <printf+0x4b>
- 49a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 4a0:	bf 25 00 00 00       	mov    $0x25,%edi
+ 4a5:	e9 51 ff ff ff       	jmp    3fb <printf+0x4b>
+ 4aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         printint(fd, *ap, 16, 0);
- 4a0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
- 4a3:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 4b0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+ 4b3:	b9 10 00 00 00       	mov    $0x10,%ecx
       state = 0;
- 4a8:	31 ff                	xor    %edi,%edi
+ 4b8:	31 ff                	xor    %edi,%edi
         printint(fd, *ap, 16, 0);
- 4aa:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
- 4b1:	8b 10                	mov    (%eax),%edx
- 4b3:	89 f0                	mov    %esi,%eax
- 4b5:	e8 46 fe ff ff       	call   300 <printint>
+ 4ba:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+ 4c1:	8b 10                	mov    (%eax),%edx
+ 4c3:	89 f0                	mov    %esi,%eax
+ 4c5:	e8 46 fe ff ff       	call   310 <printint>
         ap++;
- 4ba:	83 45 d4 04          	addl   $0x4,-0x2c(%ebp)
- 4be:	e9 28 ff ff ff       	jmp    3eb <printf+0x4b>
- 4c3:	90                   	nop
- 4c4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 4ca:	83 45 d4 04          	addl   $0x4,-0x2c(%ebp)
+ 4ce:	e9 28 ff ff ff       	jmp    3fb <printf+0x4b>
+ 4d3:	90                   	nop
+ 4d4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
         s = (char*)*ap;
- 4c8:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+ 4d8:	8b 45 d4             	mov    -0x2c(%ebp),%eax
         ap++;
- 4cb:	83 45 d4 04          	addl   $0x4,-0x2c(%ebp)
+ 4db:	83 45 d4 04          	addl   $0x4,-0x2c(%ebp)
         s = (char*)*ap;
- 4cf:	8b 38                	mov    (%eax),%edi
+ 4df:	8b 38                	mov    (%eax),%edi
           s = "(null)";
- 4d1:	b8 06 07 00 00       	mov    $0x706,%eax
- 4d6:	85 ff                	test   %edi,%edi
- 4d8:	0f 44 f8             	cmove  %eax,%edi
+ 4e1:	b8 16 07 00 00       	mov    $0x716,%eax
+ 4e6:	85 ff                	test   %edi,%edi
+ 4e8:	0f 44 f8             	cmove  %eax,%edi
         while(*s != 0){
- 4db:	0f b6 07             	movzbl (%edi),%eax
- 4de:	84 c0                	test   %al,%al
- 4e0:	74 2a                	je     50c <printf+0x16c>
- 4e2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
- 4e8:	88 45 e3             	mov    %al,-0x1d(%ebp)
+ 4eb:	0f b6 07             	movzbl (%edi),%eax
+ 4ee:	84 c0                	test   %al,%al
+ 4f0:	74 2a                	je     51c <printf+0x16c>
+ 4f2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 4f8:	88 45 e3             	mov    %al,-0x1d(%ebp)
   write(fd, &c, 1);
- 4eb:	8d 45 e3             	lea    -0x1d(%ebp),%eax
+ 4fb:	8d 45 e3             	lea    -0x1d(%ebp),%eax
           s++;
- 4ee:	83 c7 01             	add    $0x1,%edi
+ 4fe:	83 c7 01             	add    $0x1,%edi
   write(fd, &c, 1);
- 4f1:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
- 4f8:	00 
- 4f9:	89 44 24 04          	mov    %eax,0x4(%esp)
- 4fd:	89 34 24             	mov    %esi,(%esp)
- 500:	e8 6d fd ff ff       	call   272 <write>
+ 501:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+ 508:	00 
+ 509:	89 44 24 04          	mov    %eax,0x4(%esp)
+ 50d:	89 34 24             	mov    %esi,(%esp)
+ 510:	e8 5d fd ff ff       	call   272 <write>
         while(*s != 0){
- 505:	0f b6 07             	movzbl (%edi),%eax
- 508:	84 c0                	test   %al,%al
- 50a:	75 dc                	jne    4e8 <printf+0x148>
+ 515:	0f b6 07             	movzbl (%edi),%eax
+ 518:	84 c0                	test   %al,%al
+ 51a:	75 dc                	jne    4f8 <printf+0x148>
       state = 0;
- 50c:	31 ff                	xor    %edi,%edi
- 50e:	e9 d8 fe ff ff       	jmp    3eb <printf+0x4b>
- 513:	90                   	nop
- 514:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 51c:	31 ff                	xor    %edi,%edi
+ 51e:	e9 d8 fe ff ff       	jmp    3fb <printf+0x4b>
+ 523:	90                   	nop
+ 524:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   write(fd, &c, 1);
- 518:	8d 45 e5             	lea    -0x1b(%ebp),%eax
+ 528:	8d 45 e5             	lea    -0x1b(%ebp),%eax
       state = 0;
- 51b:	31 ff                	xor    %edi,%edi
+ 52b:	31 ff                	xor    %edi,%edi
   write(fd, &c, 1);
- 51d:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
- 524:	00 
- 525:	89 44 24 04          	mov    %eax,0x4(%esp)
- 529:	89 34 24             	mov    %esi,(%esp)
- 52c:	c6 45 e5 25          	movb   $0x25,-0x1b(%ebp)
- 530:	e8 3d fd ff ff       	call   272 <write>
- 535:	e9 b1 fe ff ff       	jmp    3eb <printf+0x4b>
- 53a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 52d:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+ 534:	00 
+ 535:	89 44 24 04          	mov    %eax,0x4(%esp)
+ 539:	89 34 24             	mov    %esi,(%esp)
+ 53c:	c6 45 e5 25          	movb   $0x25,-0x1b(%ebp)
+ 540:	e8 2d fd ff ff       	call   272 <write>
+ 545:	e9 b1 fe ff ff       	jmp    3fb <printf+0x4b>
+ 54a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         printint(fd, *ap, 10, 1);
- 540:	8b 45 d4             	mov    -0x2c(%ebp),%eax
- 543:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 550:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+ 553:	b9 0a 00 00 00       	mov    $0xa,%ecx
       state = 0;
- 548:	66 31 ff             	xor    %di,%di
+ 558:	66 31 ff             	xor    %di,%di
         printint(fd, *ap, 10, 1);
- 54b:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
- 552:	8b 10                	mov    (%eax),%edx
- 554:	89 f0                	mov    %esi,%eax
- 556:	e8 a5 fd ff ff       	call   300 <printint>
+ 55b:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+ 562:	8b 10                	mov    (%eax),%edx
+ 564:	89 f0                	mov    %esi,%eax
+ 566:	e8 a5 fd ff ff       	call   310 <printint>
         ap++;
- 55b:	83 45 d4 04          	addl   $0x4,-0x2c(%ebp)
- 55f:	e9 87 fe ff ff       	jmp    3eb <printf+0x4b>
+ 56b:	83 45 d4 04          	addl   $0x4,-0x2c(%ebp)
+ 56f:	e9 87 fe ff ff       	jmp    3fb <printf+0x4b>
         putc(fd, *ap);
- 564:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+ 574:	8b 45 d4             	mov    -0x2c(%ebp),%eax
       state = 0;
- 567:	31 ff                	xor    %edi,%edi
+ 577:	31 ff                	xor    %edi,%edi
         putc(fd, *ap);
- 569:	8b 00                	mov    (%eax),%eax
+ 579:	8b 00                	mov    (%eax),%eax
   write(fd, &c, 1);
- 56b:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
- 572:	00 
- 573:	89 34 24             	mov    %esi,(%esp)
+ 57b:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
+ 582:	00 
+ 583:	89 34 24             	mov    %esi,(%esp)
         putc(fd, *ap);
- 576:	88 45 e4             	mov    %al,-0x1c(%ebp)
+ 586:	88 45 e4             	mov    %al,-0x1c(%ebp)
   write(fd, &c, 1);
- 579:	8d 45 e4             	lea    -0x1c(%ebp),%eax
- 57c:	89 44 24 04          	mov    %eax,0x4(%esp)
- 580:	e8 ed fc ff ff       	call   272 <write>
+ 589:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+ 58c:	89 44 24 04          	mov    %eax,0x4(%esp)
+ 590:	e8 dd fc ff ff       	call   272 <write>
         ap++;
- 585:	83 45 d4 04          	addl   $0x4,-0x2c(%ebp)
- 589:	e9 5d fe ff ff       	jmp    3eb <printf+0x4b>
- 58e:	66 90                	xchg   %ax,%ax
+ 595:	83 45 d4 04          	addl   $0x4,-0x2c(%ebp)
+ 599:	e9 5d fe ff ff       	jmp    3fb <printf+0x4b>
+ 59e:	66 90                	xchg   %ax,%ax
 
-00000590 <free>:
+000005a0 <free>:
 static Header base;
 static Header *freep;
 
 void
 free(void *ap)
 {
- 590:	55                   	push   %ebp
+ 5a0:	55                   	push   %ebp
   Header *bp, *p;
 
   bp = (Header*)ap - 1;
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 591:	a1 84 09 00 00       	mov    0x984,%eax
+ 5a1:	a1 94 09 00 00       	mov    0x994,%eax
 {
- 596:	89 e5                	mov    %esp,%ebp
- 598:	57                   	push   %edi
- 599:	56                   	push   %esi
- 59a:	53                   	push   %ebx
- 59b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 5a6:	89 e5                	mov    %esp,%ebp
+ 5a8:	57                   	push   %edi
+ 5a9:	56                   	push   %esi
+ 5aa:	53                   	push   %ebx
+ 5ab:	8b 5d 08             	mov    0x8(%ebp),%ebx
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 59e:	8b 08                	mov    (%eax),%ecx
+ 5ae:	8b 08                	mov    (%eax),%ecx
   bp = (Header*)ap - 1;
- 5a0:	8d 53 f8             	lea    -0x8(%ebx),%edx
+ 5b0:	8d 53 f8             	lea    -0x8(%ebx),%edx
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 5a3:	39 d0                	cmp    %edx,%eax
- 5a5:	72 11                	jb     5b8 <free+0x28>
- 5a7:	90                   	nop
+ 5b3:	39 d0                	cmp    %edx,%eax
+ 5b5:	72 11                	jb     5c8 <free+0x28>
+ 5b7:	90                   	nop
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 5a8:	39 c8                	cmp    %ecx,%eax
- 5aa:	72 04                	jb     5b0 <free+0x20>
- 5ac:	39 ca                	cmp    %ecx,%edx
- 5ae:	72 10                	jb     5c0 <free+0x30>
- 5b0:	89 c8                	mov    %ecx,%eax
+ 5b8:	39 c8                	cmp    %ecx,%eax
+ 5ba:	72 04                	jb     5c0 <free+0x20>
+ 5bc:	39 ca                	cmp    %ecx,%edx
+ 5be:	72 10                	jb     5d0 <free+0x30>
+ 5c0:	89 c8                	mov    %ecx,%eax
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 5b2:	39 d0                	cmp    %edx,%eax
+ 5c2:	39 d0                	cmp    %edx,%eax
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 5b4:	8b 08                	mov    (%eax),%ecx
+ 5c4:	8b 08                	mov    (%eax),%ecx
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 5b6:	73 f0                	jae    5a8 <free+0x18>
- 5b8:	39 ca                	cmp    %ecx,%edx
- 5ba:	72 04                	jb     5c0 <free+0x30>
+ 5c6:	73 f0                	jae    5b8 <free+0x18>
+ 5c8:	39 ca                	cmp    %ecx,%edx
+ 5ca:	72 04                	jb     5d0 <free+0x30>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 5bc:	39 c8                	cmp    %ecx,%eax
- 5be:	72 f0                	jb     5b0 <free+0x20>
+ 5cc:	39 c8                	cmp    %ecx,%eax
+ 5ce:	72 f0                	jb     5c0 <free+0x20>
       break;
   if(bp + bp->s.size == p->s.ptr){
- 5c0:	8b 73 fc             	mov    -0x4(%ebx),%esi
- 5c3:	8d 3c f2             	lea    (%edx,%esi,8),%edi
- 5c6:	39 cf                	cmp    %ecx,%edi
- 5c8:	74 1e                	je     5e8 <free+0x58>
+ 5d0:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 5d3:	8d 3c f2             	lea    (%edx,%esi,8),%edi
+ 5d6:	39 cf                	cmp    %ecx,%edi
+ 5d8:	74 1e                	je     5f8 <free+0x58>
     bp->s.size += p->s.ptr->s.size;
     bp->s.ptr = p->s.ptr->s.ptr;
   } else
     bp->s.ptr = p->s.ptr;
- 5ca:	89 4b f8             	mov    %ecx,-0x8(%ebx)
+ 5da:	89 4b f8             	mov    %ecx,-0x8(%ebx)
   if(p + p->s.size == bp){
- 5cd:	8b 48 04             	mov    0x4(%eax),%ecx
- 5d0:	8d 34 c8             	lea    (%eax,%ecx,8),%esi
- 5d3:	39 f2                	cmp    %esi,%edx
- 5d5:	74 28                	je     5ff <free+0x6f>
+ 5dd:	8b 48 04             	mov    0x4(%eax),%ecx
+ 5e0:	8d 34 c8             	lea    (%eax,%ecx,8),%esi
+ 5e3:	39 f2                	cmp    %esi,%edx
+ 5e5:	74 28                	je     60f <free+0x6f>
     p->s.size += bp->s.size;
     p->s.ptr = bp->s.ptr;
   } else
     p->s.ptr = bp;
- 5d7:	89 10                	mov    %edx,(%eax)
+ 5e7:	89 10                	mov    %edx,(%eax)
   freep = p;
- 5d9:	a3 84 09 00 00       	mov    %eax,0x984
+ 5e9:	a3 94 09 00 00       	mov    %eax,0x994
 }
- 5de:	5b                   	pop    %ebx
- 5df:	5e                   	pop    %esi
- 5e0:	5f                   	pop    %edi
- 5e1:	5d                   	pop    %ebp
- 5e2:	c3                   	ret    
- 5e3:	90                   	nop
- 5e4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 5ee:	5b                   	pop    %ebx
+ 5ef:	5e                   	pop    %esi
+ 5f0:	5f                   	pop    %edi
+ 5f1:	5d                   	pop    %ebp
+ 5f2:	c3                   	ret    
+ 5f3:	90                   	nop
+ 5f4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     bp->s.size += p->s.ptr->s.size;
- 5e8:	03 71 04             	add    0x4(%ecx),%esi
- 5eb:	89 73 fc             	mov    %esi,-0x4(%ebx)
+ 5f8:	03 71 04             	add    0x4(%ecx),%esi
+ 5fb:	89 73 fc             	mov    %esi,-0x4(%ebx)
     bp->s.ptr = p->s.ptr->s.ptr;
- 5ee:	8b 08                	mov    (%eax),%ecx
- 5f0:	8b 09                	mov    (%ecx),%ecx
- 5f2:	89 4b f8             	mov    %ecx,-0x8(%ebx)
+ 5fe:	8b 08                	mov    (%eax),%ecx
+ 600:	8b 09                	mov    (%ecx),%ecx
+ 602:	89 4b f8             	mov    %ecx,-0x8(%ebx)
   if(p + p->s.size == bp){
- 5f5:	8b 48 04             	mov    0x4(%eax),%ecx
- 5f8:	8d 34 c8             	lea    (%eax,%ecx,8),%esi
- 5fb:	39 f2                	cmp    %esi,%edx
- 5fd:	75 d8                	jne    5d7 <free+0x47>
+ 605:	8b 48 04             	mov    0x4(%eax),%ecx
+ 608:	8d 34 c8             	lea    (%eax,%ecx,8),%esi
+ 60b:	39 f2                	cmp    %esi,%edx
+ 60d:	75 d8                	jne    5e7 <free+0x47>
     p->s.size += bp->s.size;
- 5ff:	03 4b fc             	add    -0x4(%ebx),%ecx
+ 60f:	03 4b fc             	add    -0x4(%ebx),%ecx
   freep = p;
- 602:	a3 84 09 00 00       	mov    %eax,0x984
+ 612:	a3 94 09 00 00       	mov    %eax,0x994
     p->s.size += bp->s.size;
- 607:	89 48 04             	mov    %ecx,0x4(%eax)
+ 617:	89 48 04             	mov    %ecx,0x4(%eax)
     p->s.ptr = bp->s.ptr;
- 60a:	8b 53 f8             	mov    -0x8(%ebx),%edx
- 60d:	89 10                	mov    %edx,(%eax)
+ 61a:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 61d:	89 10                	mov    %edx,(%eax)
 }
- 60f:	5b                   	pop    %ebx
- 610:	5e                   	pop    %esi
- 611:	5f                   	pop    %edi
- 612:	5d                   	pop    %ebp
- 613:	c3                   	ret    
- 614:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
- 61a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
-
-00000620 <malloc>:
+ 61f:	5b                   	pop    %ebx
+ 620:	5e                   	pop    %esi
+ 621:	5f                   	pop    %edi
+ 622:	5d                   	pop    %ebp
+ 623:	c3                   	ret    
+ 624:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 62a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+00000630 <malloc>:
   return freep;
 }
 
 void*
 malloc(uint nbytes)
 {
- 620:	55                   	push   %ebp
- 621:	89 e5                	mov    %esp,%ebp
- 623:	57                   	push   %edi
- 624:	56                   	push   %esi
- 625:	53                   	push   %ebx
- 626:	83 ec 1c             	sub    $0x1c,%esp
+ 630:	55                   	push   %ebp
+ 631:	89 e5                	mov    %esp,%ebp
+ 633:	57                   	push   %edi
+ 634:	56                   	push   %esi
+ 635:	53                   	push   %ebx
+ 636:	83 ec 1c             	sub    $0x1c,%esp
   Header *p, *prevp;
   uint nunits;
 
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 629:	8b 45 08             	mov    0x8(%ebp),%eax
+ 639:	8b 45 08             	mov    0x8(%ebp),%eax
   if((prevp = freep) == 0){
- 62c:	8b 1d 84 09 00 00    	mov    0x984,%ebx
+ 63c:	8b 1d 94 09 00 00    	mov    0x994,%ebx
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 632:	8d 48 07             	lea    0x7(%eax),%ecx
- 635:	c1 e9 03             	shr    $0x3,%ecx
+ 642:	8d 48 07             	lea    0x7(%eax),%ecx
+ 645:	c1 e9 03             	shr    $0x3,%ecx
   if((prevp = freep) == 0){
- 638:	85 db                	test   %ebx,%ebx
+ 648:	85 db                	test   %ebx,%ebx
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 63a:	8d 71 01             	lea    0x1(%ecx),%esi
+ 64a:	8d 71 01             	lea    0x1(%ecx),%esi
   if((prevp = freep) == 0){
- 63d:	0f 84 9b 00 00 00    	je     6de <malloc+0xbe>
- 643:	8b 13                	mov    (%ebx),%edx
- 645:	8b 7a 04             	mov    0x4(%edx),%edi
+ 64d:	0f 84 9b 00 00 00    	je     6ee <malloc+0xbe>
+ 653:	8b 13                	mov    (%ebx),%edx
+ 655:	8b 7a 04             	mov    0x4(%edx),%edi
     base.s.ptr = freep = prevp = &base;
     base.s.size = 0;
   }
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
     if(p->s.size >= nunits){
- 648:	39 fe                	cmp    %edi,%esi
- 64a:	76 64                	jbe    6b0 <malloc+0x90>
- 64c:	8d 04 f5 00 00 00 00 	lea    0x0(,%esi,8),%eax
+ 658:	39 fe                	cmp    %edi,%esi
+ 65a:	76 64                	jbe    6c0 <malloc+0x90>
+ 65c:	8d 04 f5 00 00 00 00 	lea    0x0(,%esi,8),%eax
   if(nu < 4096)
- 653:	bb 00 80 00 00       	mov    $0x8000,%ebx
- 658:	89 45 e4             	mov    %eax,-0x1c(%ebp)
- 65b:	eb 0e                	jmp    66b <malloc+0x4b>
- 65d:	8d 76 00             	lea    0x0(%esi),%esi
+ 663:	bb 00 80 00 00       	mov    $0x8000,%ebx
+ 668:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+ 66b:	eb 0e                	jmp    67b <malloc+0x4b>
+ 66d:	8d 76 00             	lea    0x0(%esi),%esi
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 660:	8b 02                	mov    (%edx),%eax
+ 670:	8b 02                	mov    (%edx),%eax
     if(p->s.size >= nunits){
- 662:	8b 78 04             	mov    0x4(%eax),%edi
- 665:	39 fe                	cmp    %edi,%esi
- 667:	76 4f                	jbe    6b8 <malloc+0x98>
- 669:	89 c2                	mov    %eax,%edx
+ 672:	8b 78 04             	mov    0x4(%eax),%edi
+ 675:	39 fe                	cmp    %edi,%esi
+ 677:	76 4f                	jbe    6c8 <malloc+0x98>
+ 679:	89 c2                	mov    %eax,%edx
         p->s.size = nunits;
       }
       freep = prevp;
       return (void*)(p + 1);
     }
     if(p == freep)
- 66b:	3b 15 84 09 00 00    	cmp    0x984,%edx
- 671:	75 ed                	jne    660 <malloc+0x40>
+ 67b:	3b 15 94 09 00 00    	cmp    0x994,%edx
+ 681:	75 ed                	jne    670 <malloc+0x40>
   if(nu < 4096)
- 673:	8b 45 e4             	mov    -0x1c(%ebp),%eax
- 676:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
- 67c:	bf 00 10 00 00       	mov    $0x1000,%edi
- 681:	0f 43 fe             	cmovae %esi,%edi
- 684:	0f 42 c3             	cmovb  %ebx,%eax
+ 683:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+ 686:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+ 68c:	bf 00 10 00 00       	mov    $0x1000,%edi
+ 691:	0f 43 fe             	cmovae %esi,%edi
+ 694:	0f 42 c3             	cmovb  %ebx,%eax
   p = sbrk(nu * sizeof(Header));
- 687:	89 04 24             	mov    %eax,(%esp)
- 68a:	e8 4b fc ff ff       	call   2da <sbrk>
+ 697:	89 04 24             	mov    %eax,(%esp)
+ 69a:	e8 3b fc ff ff       	call   2da <sbrk>
   if(p == (char*)-1)
- 68f:	83 f8 ff             	cmp    $0xffffffff,%eax
- 692:	74 18                	je     6ac <malloc+0x8c>
+ 69f:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 6a2:	74 18                	je     6bc <malloc+0x8c>
   hp->s.size = nu;
- 694:	89 78 04             	mov    %edi,0x4(%eax)
+ 6a4:	89 78 04             	mov    %edi,0x4(%eax)
   free((void*)(hp + 1));
- 697:	83 c0 08             	add    $0x8,%eax
- 69a:	89 04 24             	mov    %eax,(%esp)
- 69d:	e8 ee fe ff ff       	call   590 <free>
+ 6a7:	83 c0 08             	add    $0x8,%eax
+ 6aa:	89 04 24             	mov    %eax,(%esp)
+ 6ad:	e8 ee fe ff ff       	call   5a0 <free>
   return freep;
- 6a2:	8b 15 84 09 00 00    	mov    0x984,%edx
+ 6b2:	8b 15 94 09 00 00    	mov    0x994,%edx
       if((p = morecore(nunits)) == 0)
- 6a8:	85 d2                	test   %edx,%edx
- 6aa:	75 b4                	jne    660 <malloc+0x40>
+ 6b8:	85 d2                	test   %edx,%edx
+ 6ba:	75 b4                	jne    670 <malloc+0x40>
         return 0;
- 6ac:	31 c0                	xor    %eax,%eax
- 6ae:	eb 20                	jmp    6d0 <malloc+0xb0>
+ 6bc:	31 c0                	xor    %eax,%eax
+ 6be:	eb 20                	jmp    6e0 <malloc+0xb0>
     if(p->s.size >= nunits){
- 6b0:	89 d0                	mov    %edx,%eax
- 6b2:	89 da                	mov    %ebx,%edx
- 6b4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 6c0:	89 d0                	mov    %edx,%eax
+ 6c2:	89 da                	mov    %ebx,%edx
+ 6c4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
       if(p->s.size == nunits)
- 6b8:	39 fe                	cmp    %edi,%esi
- 6ba:	74 1c                	je     6d8 <malloc+0xb8>
+ 6c8:	39 fe                	cmp    %edi,%esi
+ 6ca:	74 1c                	je     6e8 <malloc+0xb8>
         p->s.size -= nunits;
- 6bc:	29 f7                	sub    %esi,%edi
- 6be:	89 78 04             	mov    %edi,0x4(%eax)
+ 6cc:	29 f7                	sub    %esi,%edi
+ 6ce:	89 78 04             	mov    %edi,0x4(%eax)
         p += p->s.size;
- 6c1:	8d 04 f8             	lea    (%eax,%edi,8),%eax
+ 6d1:	8d 04 f8             	lea    (%eax,%edi,8),%eax
         p->s.size = nunits;
- 6c4:	89 70 04             	mov    %esi,0x4(%eax)
+ 6d4:	89 70 04             	mov    %esi,0x4(%eax)
       freep = prevp;
- 6c7:	89 15 84 09 00 00    	mov    %edx,0x984
+ 6d7:	89 15 94 09 00 00    	mov    %edx,0x994
       return (void*)(p + 1);
- 6cd:	83 c0 08             	add    $0x8,%eax
+ 6dd:	83 c0 08             	add    $0x8,%eax
   }
 }
- 6d0:	83 c4 1c             	add    $0x1c,%esp
- 6d3:	5b                   	pop    %ebx
- 6d4:	5e                   	pop    %esi
- 6d5:	5f                   	pop    %edi
- 6d6:	5d                   	pop    %ebp
- 6d7:	c3                   	ret    
+ 6e0:	83 c4 1c             	add    $0x1c,%esp
+ 6e3:	5b                   	pop    %ebx
+ 6e4:	5e                   	pop    %esi
+ 6e5:	5f                   	pop    %edi
+ 6e6:	5d                   	pop    %ebp
+ 6e7:	c3                   	ret    
         prevp->s.ptr = p->s.ptr;
- 6d8:	8b 08                	mov    (%eax),%ecx
- 6da:	89 0a                	mov    %ecx,(%edx)
- 6dc:	eb e9                	jmp    6c7 <malloc+0xa7>
+ 6e8:	8b 08                	mov    (%eax),%ecx
+ 6ea:	89 0a                	mov    %ecx,(%edx)
+ 6ec:	eb e9                	jmp    6d7 <malloc+0xa7>
     base.s.ptr = freep = prevp = &base;
- 6de:	c7 05 84 09 00 00 88 	movl   $0x988,0x984
- 6e5:	09 00 00 
+ 6ee:	c7 05 94 09 00 00 98 	movl   $0x998,0x994
+ 6f5:	09 00 00 
     base.s.size = 0;
- 6e8:	ba 88 09 00 00       	mov    $0x988,%edx
+ 6f8:	ba 98 09 00 00       	mov    $0x998,%edx
     base.s.ptr = freep = prevp = &base;
- 6ed:	c7 05 88 09 00 00 88 	movl   $0x988,0x988
- 6f4:	09 00 00 
+ 6fd:	c7 05 98 09 00 00 98 	movl   $0x998,0x998
+ 704:	09 00 00 
     base.s.size = 0;
- 6f7:	c7 05 8c 09 00 00 00 	movl   $0x0,0x98c
- 6fe:	00 00 00 
- 701:	e9 46 ff ff ff       	jmp    64c <malloc+0x2c>
+ 707:	c7 05 9c 09 00 00 00 	movl   $0x0,0x99c
+ 70e:	00 00 00 
+ 711:	e9 46 ff ff ff       	jmp    65c <malloc+0x2c>
diff --git a/zombie.sym b/zombie.sym
index d9bf63b..be5842b 100644
--- a/zombie.sym
+++ b/zombie.sym
@@ -1,7 +1,7 @@
 00000000 .text
-00000706 .rodata
-00000720 .eh_frame
-00000984 .bss
+00000716 .rodata
+00000730 .eh_frame
+00000994 .bss
 00000000 .comment
 00000000 .debug_aranges
 00000000 .debug_info
@@ -13,25 +13,27 @@
 00000000 zombie.c
 00000000 ulib.c
 00000000 printf.c
-00000300 printint
-0000070d digits.1358
+00000310 printint
+0000071d digits.1362
 00000000 umalloc.c
-00000984 freep
-00000988 base
+00000994 freep
+00000998 base
 00000030 strcpy
 000002f2 waitpid
-000003a0 printf
+000003b0 printf
 00000220 memmove
 0000029a mknod
 00000140 gets
 000002d2 getpid
-00000620 malloc
+00000630 malloc
 000002e2 sleep
 00000262 pipe
+000002fa setPrior
 00000272 write
 000002aa fstat
 00000282 kill
 000002c2 chdir
+00000302 getPrior
 0000028a exec
 0000025a wait
 0000026a read
@@ -39,14 +41,14 @@
 0000024a fork
 000002da sbrk
 000002ea uptime
-00000984 __bss_start
+00000994 __bss_start
 000000e0 memset
 00000000 main
 00000060 strcmp
 000002ca dup
 000001a0 stat
-00000984 _edata
-00000990 _end
+00000994 _edata
+000009a0 _end
 000002b2 link
 00000252 exit
 000001f0 atoi
@@ -55,4 +57,4 @@
 00000100 strchr
 000002ba mkdir
 0000027a close
-00000590 free
+000005a0 free
